
L432_RFV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afb8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  0800b148  0800b148  0001b148  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b56c  0800b56c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b56c  0800b56c  0001b56c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b574  0800b574  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b574  0800b574  0001b574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b578  0800b578  0001b578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b57c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  200001dc  0800b758  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c8  0800b758  000205c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b25d  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003158  00000000  00000000  0003b469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c8  00000000  00000000  0003e5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001490  00000000  00000000  0003fb90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024e6f  00000000  00000000  00041020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018f10  00000000  00000000  00065e8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2669  00000000  00000000  0007ed9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00161408  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d40  00000000  00000000  00161458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b130 	.word	0x0800b130

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800b130 	.word	0x0800b130

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <NRX1_Initialise_TIM>:
/*
 * INITIALISATION
 */

void NRX1_Initialise_TIM( NRX1_TIM *dev, GPIO_TypeDef *RX_GPIO, uint16_t RX_Pin, ADC_HandleTypeDef *adcHandle, TIM_HandleTypeDef *htim )
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	80fb      	strh	r3, [r7, #6]
	dev->RX_GPIO = RX_GPIO;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	601a      	str	r2, [r3, #0]

	dev->RX_Pin = RX_Pin;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	88fa      	ldrh	r2, [r7, #6]
 8000ec6:	809a      	strh	r2, [r3, #4]

	dev->adcHandle = adcHandle;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	683a      	ldr	r2, [r7, #0]
 8000ecc:	651a      	str	r2, [r3, #80]	; 0x50

	HAL_TIM_Base_Start_IT(htim);
 8000ece:	69b8      	ldr	r0, [r7, #24]
 8000ed0:	f006 fd9c 	bl	8007a0c <HAL_TIM_Base_Start_IT>

//	dev->count = 0;
}
 8000ed4:	bf00      	nop
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <NRX1_TIMRX>:
/*
 * DATA AQUISITION
 */

void NRX1_TIMRX( NRX1_TIM *dev )
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	uint8_t val = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	73fb      	strb	r3, [r7, #15]
	uint8_t change = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	73bb      	strb	r3, [r7, #14]
	uint8_t save_run = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	737b      	strb	r3, [r7, #13]
	if (HAL_GPIO_ReadPin(dev->RX_GPIO, dev->RX_Pin))
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	889b      	ldrh	r3, [r3, #4]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4610      	mov	r0, r2
 8000efc:	f004 fc38 	bl	8005770 <HAL_GPIO_ReadPin>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d019      	beq.n	8000f3a <NRX1_TIMRX+0x5e>
	{
		if (dev->zeros_in_a_row)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d007      	beq.n	8000f20 <NRX1_TIMRX+0x44>
		{
			save_run = dev->zeros_in_a_row;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8000f16:	737b      	strb	r3, [r7, #13]
			val = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	73fb      	strb	r3, [r7, #15]
			change = 1;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	73bb      	strb	r3, [r7, #14]
		}
		dev->zeros_in_a_row = 0;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		dev->ones_in_a_row++;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8000f2e:	3301      	adds	r3, #1
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8000f38:	e018      	b.n	8000f6c <NRX1_TIMRX+0x90>
	}
	else
	{
		if (dev->ones_in_a_row)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d007      	beq.n	8000f54 <NRX1_TIMRX+0x78>
		{
			save_run = dev->ones_in_a_row;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8000f4a:	737b      	strb	r3, [r7, #13]
			val = 1;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	73fb      	strb	r3, [r7, #15]
			change = 1;
 8000f50:	2301      	movs	r3, #1
 8000f52:	73bb      	strb	r3, [r7, #14]
		}
		dev->ones_in_a_row = 0;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		dev->zeros_in_a_row++;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8000f62:	3301      	adds	r3, #1
 8000f64:	b2da      	uxtb	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}
	if (change)
 8000f6c:	7bbb      	ldrb	r3, [r7, #14]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	f000 8086 	beq.w	8001080 <NRX1_TIMRX+0x1a4>
	{
		if (!dev->RX_state) // State = 0: Normal running, first flag not received
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d10e      	bne.n	8000f9c <NRX1_TIMRX+0xc0>
		{
			if (save_run > (SAMPLES_PER_BIT*5 + SAMPLES_PER_BIT/2) && save_run < (SAMPLES_PER_BIT*6 + SAMPLES_PER_BIT/2))
 8000f7e:	7b7b      	ldrb	r3, [r7, #13]
 8000f80:	2b2c      	cmp	r3, #44	; 0x2c
 8000f82:	d97d      	bls.n	8001080 <NRX1_TIMRX+0x1a4>
 8000f84:	7b7b      	ldrb	r3, [r7, #13]
 8000f86:	2b33      	cmp	r3, #51	; 0x33
 8000f88:	d87a      	bhi.n	8001080 <NRX1_TIMRX+0x1a4>
			{
				dev->RX_state = 1;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				dev->adc_RSSI = 1;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2201      	movs	r2, #1
 8000f96:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
			dev->last_run = 0;
			dev->adc_RSSI = 0;
		}
	}

}
 8000f9a:	e071      	b.n	8001080 <NRX1_TIMRX+0x1a4>
		else if(dev->RX_state == 1) // State 1: Transition State, first flag received but message not started, checking message correct
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d10f      	bne.n	8000fc6 <NRX1_TIMRX+0xea>
			if ((SAMPLES_PER_BIT/2) < save_run && save_run < (SAMPLES_PER_BIT + SAMPLES_PER_BIT/2))
 8000fa6:	7b7b      	ldrb	r3, [r7, #13]
 8000fa8:	2b04      	cmp	r3, #4
 8000faa:	d907      	bls.n	8000fbc <NRX1_TIMRX+0xe0>
 8000fac:	7b7b      	ldrb	r3, [r7, #13]
 8000fae:	2b0b      	cmp	r3, #11
 8000fb0:	d804      	bhi.n	8000fbc <NRX1_TIMRX+0xe0>
				dev->RX_state = 2;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8000fba:	e061      	b.n	8001080 <NRX1_TIMRX+0x1a4>
				dev->RX_state = 0;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 8000fc4:	e05c      	b.n	8001080 <NRX1_TIMRX+0x1a4>
		else if ( dev->RX_state == 2 ) // State 2: Receiving Message
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d141      	bne.n	8001054 <NRX1_TIMRX+0x178>
			if (save_run > (SAMPLES_PER_BIT*5 + SAMPLES_PER_BIT/2-1) && dev->packetsize >= 24)
 8000fd0:	7b7b      	ldrb	r3, [r7, #13]
 8000fd2:	2b2b      	cmp	r3, #43	; 0x2b
 8000fd4:	d934      	bls.n	8001040 <NRX1_TIMRX+0x164>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8000fdc:	2b17      	cmp	r3, #23
 8000fde:	d92f      	bls.n	8001040 <NRX1_TIMRX+0x164>
				if (check_crc(dev))
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f000 f8f9 	bl	80011d8 <check_crc>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d00c      	beq.n	8001006 <NRX1_TIMRX+0x12a>
					dev->flag_end = 1;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
					dev->count[0]++;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001004:	e00b      	b.n	800101e <NRX1_TIMRX+0x142>
					dev->flag_end = 0;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
					dev->count[1]++;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001014:	3301      	adds	r3, #1
 8001016:	b2da      	uxtb	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
				dev->RX_state = 0;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				dev->last_run = 0;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
				dev->adc_RSSI = 0;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
				dev->packetsize = 0;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800103e:	e01f      	b.n	8001080 <NRX1_TIMRX+0x1a4>
			else if (save_run < (SAMPLES_PER_BIT*6 + SAMPLES_PER_BIT/2))
 8001040:	7b7b      	ldrb	r3, [r7, #13]
 8001042:	2b33      	cmp	r3, #51	; 0x33
 8001044:	d81c      	bhi.n	8001080 <NRX1_TIMRX+0x1a4>
				NRX1_addBits_TIM(dev, val, save_run);
 8001046:	7b7a      	ldrb	r2, [r7, #13]
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	4619      	mov	r1, r3
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f000 f81b 	bl	8001088 <NRX1_addBits_TIM>
}
 8001052:	e015      	b.n	8001080 <NRX1_TIMRX+0x1a4>
		else if (dev->RX_state == 3) // State 3: Error State, Message too long or error in receive
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800105a:	2b03      	cmp	r3, #3
 800105c:	d110      	bne.n	8001080 <NRX1_TIMRX+0x1a4>
			dev->packetsize = 0;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			dev->RX_state = 0;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			dev->last_run = 0;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			dev->adc_RSSI = 0;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
}
 800107e:	e7ff      	b.n	8001080 <NRX1_TIMRX+0x1a4>
 8001080:	bf00      	nop
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <NRX1_addBits_TIM>:

void NRX1_addBits_TIM( NRX1_TIM *dev, uint8_t bit, uint8_t save_run)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	70fb      	strb	r3, [r7, #3]
 8001094:	4613      	mov	r3, r2
 8001096:	70bb      	strb	r3, [r7, #2]
	uint8_t loops = (save_run+(SAMPLES_PER_BIT/2)-1)/SAMPLES_PER_BIT; // Plus 3 for the under counted case (ie 9 samples instead of 10, still counts as 2 1s
 8001098:	78bb      	ldrb	r3, [r7, #2]
 800109a:	3303      	adds	r3, #3
 800109c:	2b00      	cmp	r3, #0
 800109e:	da00      	bge.n	80010a2 <NRX1_addBits_TIM+0x1a>
 80010a0:	3307      	adds	r3, #7
 80010a2:	10db      	asrs	r3, r3, #3
 80010a4:	73fb      	strb	r3, [r7, #15]
	if (loops > 5)
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	2b05      	cmp	r3, #5
 80010aa:	d904      	bls.n	80010b6 <NRX1_addBits_TIM+0x2e>
	{
		dev->RX_state = 3;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2203      	movs	r2, #3
 80010b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		return;
 80010b4:	e08b      	b.n	80011ce <NRX1_addBits_TIM+0x146>
	}
	if (loops == 0)
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d101      	bne.n	80010c0 <NRX1_addBits_TIM+0x38>
	{
		loops = 1;
 80010bc:	2301      	movs	r3, #1
 80010be:	73fb      	strb	r3, [r7, #15]
	}
	if (dev->last_run == 5) // Accounts bit stuffing
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80010c6:	2b05      	cmp	r3, #5
 80010c8:	d107      	bne.n	80010da <NRX1_addBits_TIM+0x52>
	{
		dev->last_run = loops;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	7bfa      	ldrb	r2, [r7, #15]
 80010ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		loops--;
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	3b01      	subs	r3, #1
 80010d6:	73fb      	strb	r3, [r7, #15]
 80010d8:	e003      	b.n	80010e2 <NRX1_addBits_TIM+0x5a>
	}
	else
		dev->last_run = loops;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	7bfa      	ldrb	r2, [r7, #15]
 80010de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

	for (uint8_t i = 0; i < loops; i++)
 80010e2:	2300      	movs	r3, #0
 80010e4:	73bb      	strb	r3, [r7, #14]
 80010e6:	e04a      	b.n	800117e <NRX1_addBits_TIM+0xf6>
	{
		dev->buffer[dev->packetsize >> 3] &= ~(1 << (dev->packetsize & 0x7)); // CLEAR POSITION
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80010ee:	08db      	lsrs	r3, r3, #3
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	461a      	mov	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4413      	add	r3, r2
 80010f8:	799b      	ldrb	r3, [r3, #6]
 80010fa:	b25a      	sxtb	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	2101      	movs	r1, #1
 8001108:	fa01 f303 	lsl.w	r3, r1, r3
 800110c:	b25b      	sxtb	r3, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	b25b      	sxtb	r3, r3
 8001112:	4013      	ands	r3, r2
 8001114:	b25a      	sxtb	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800111c:	08db      	lsrs	r3, r3, #3
 800111e:	b29b      	uxth	r3, r3
 8001120:	4619      	mov	r1, r3
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	440b      	add	r3, r1
 8001128:	719a      	strb	r2, [r3, #6]
		dev->buffer[dev->packetsize >> 3] |= bit << (dev->packetsize & 0x7);  // SET POSITION
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001130:	08db      	lsrs	r3, r3, #3
 8001132:	b29b      	uxth	r3, r3
 8001134:	461a      	mov	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4413      	add	r3, r2
 800113a:	799b      	ldrb	r3, [r3, #6]
 800113c:	b25a      	sxtb	r2, r3
 800113e:	78f9      	ldrb	r1, [r7, #3]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	fa01 f303 	lsl.w	r3, r1, r3
 800114e:	b25b      	sxtb	r3, r3
 8001150:	4313      	orrs	r3, r2
 8001152:	b25a      	sxtb	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800115a:	08db      	lsrs	r3, r3, #3
 800115c:	b29b      	uxth	r3, r3
 800115e:	4619      	mov	r1, r3
 8001160:	b2d2      	uxtb	r2, r2
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	440b      	add	r3, r1
 8001166:	719a      	strb	r2, [r3, #6]
		dev->packetsize++;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800116e:	3301      	adds	r3, #1
 8001170:	b29a      	uxth	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	for (uint8_t i = 0; i < loops; i++)
 8001178:	7bbb      	ldrb	r3, [r7, #14]
 800117a:	3301      	adds	r3, #1
 800117c:	73bb      	strb	r3, [r7, #14]
 800117e:	7bba      	ldrb	r2, [r7, #14]
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	429a      	cmp	r2, r3
 8001184:	d3b0      	bcc.n	80010e8 <NRX1_addBits_TIM+0x60>
	}
	if (dev->packetsize >= 24 && dev->packetsize < 32) // CONFIRM THAT SYNC HAS BEEN RECEIVED CORRECTLY
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800118c:	2b17      	cmp	r3, #23
 800118e:	d914      	bls.n	80011ba <NRX1_addBits_TIM+0x132>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001196:	2b1f      	cmp	r3, #31
 8001198:	d80f      	bhi.n	80011ba <NRX1_addBits_TIM+0x132>
	{
		if (dev->buffer[0] != 83 || dev->buffer[1] != 65 || dev->buffer[2] != 84)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	799b      	ldrb	r3, [r3, #6]
 800119e:	2b53      	cmp	r3, #83	; 0x53
 80011a0:	d107      	bne.n	80011b2 <NRX1_addBits_TIM+0x12a>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	79db      	ldrb	r3, [r3, #7]
 80011a6:	2b41      	cmp	r3, #65	; 0x41
 80011a8:	d103      	bne.n	80011b2 <NRX1_addBits_TIM+0x12a>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	7a1b      	ldrb	r3, [r3, #8]
 80011ae:	2b54      	cmp	r3, #84	; 0x54
 80011b0:	d003      	beq.n	80011ba <NRX1_addBits_TIM+0x132>
		{
			dev->RX_state = 3;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2203      	movs	r2, #3
 80011b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		}
	}
	if (dev->packetsize > 512) // CHECK IF PACKET HAS REACHED MAX SIZE
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80011c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011c4:	d903      	bls.n	80011ce <NRX1_addBits_TIM+0x146>
	{
		dev->RX_state = 3;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2203      	movs	r2, #3
 80011ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	}
}
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <check_crc>:

uint8_t check_crc( NRX1_TIM *dev )
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	uint16_t crc = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	81bb      	strh	r3, [r7, #12]
	for(uint16_t i = 0; i < dev->packetsize-17; i++)
 80011e4:	2300      	movs	r3, #0
 80011e6:	81fb      	strh	r3, [r7, #14]
 80011e8:	e019      	b.n	800121e <check_crc+0x46>
	{
		update_crc(&crc, (dev->buffer[i>>3] >> (i & 0x7)) & 0x1);
 80011ea:	89fb      	ldrh	r3, [r7, #14]
 80011ec:	08db      	lsrs	r3, r3, #3
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	461a      	mov	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	799b      	ldrb	r3, [r3, #6]
 80011f8:	461a      	mov	r2, r3
 80011fa:	89fb      	ldrh	r3, [r7, #14]
 80011fc:	f003 0307 	and.w	r3, r3, #7
 8001200:	fa42 f303 	asr.w	r3, r2, r3
 8001204:	b2db      	uxtb	r3, r3
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	b2da      	uxtb	r2, r3
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	4611      	mov	r1, r2
 8001212:	4618      	mov	r0, r3
 8001214:	f000 f82a 	bl	800126c <update_crc>
	for(uint16_t i = 0; i < dev->packetsize-17; i++)
 8001218:	89fb      	ldrh	r3, [r7, #14]
 800121a:	3301      	adds	r3, #1
 800121c:	81fb      	strh	r3, [r7, #14]
 800121e:	89fa      	ldrh	r2, [r7, #14]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001226:	3b11      	subs	r3, #17
 8001228:	429a      	cmp	r2, r3
 800122a:	dbde      	blt.n	80011ea <check_crc+0x12>
	}

	if (crc == (dev->buffer[(dev->packetsize>>3)-2] << 8) + dev->buffer[(dev->packetsize>>3)-1])
 800122c:	89bb      	ldrh	r3, [r7, #12]
 800122e:	4618      	mov	r0, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001236:	08db      	lsrs	r3, r3, #3
 8001238:	b29b      	uxth	r3, r3
 800123a:	3b02      	subs	r3, #2
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	4413      	add	r3, r2
 8001240:	799b      	ldrb	r3, [r3, #6]
 8001242:	021b      	lsls	r3, r3, #8
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	f8b2 2046 	ldrh.w	r2, [r2, #70]	; 0x46
 800124a:	08d2      	lsrs	r2, r2, #3
 800124c:	b292      	uxth	r2, r2
 800124e:	3a01      	subs	r2, #1
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	440a      	add	r2, r1
 8001254:	7992      	ldrb	r2, [r2, #6]
 8001256:	4413      	add	r3, r2
 8001258:	4298      	cmp	r0, r3
 800125a:	d101      	bne.n	8001260 <check_crc+0x88>
		return 1;
 800125c:	2301      	movs	r3, #1
 800125e:	e000      	b.n	8001262 <check_crc+0x8a>
	else
		return 0;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <update_crc>:

void update_crc( uint16_t *crc, uint8_t bit)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	70fb      	strb	r3, [r7, #3]
	*crc ^= bit;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	881a      	ldrh	r2, [r3, #0]
 800127c:	78fb      	ldrb	r3, [r7, #3]
 800127e:	b29b      	uxth	r3, r3
 8001280:	4053      	eors	r3, r2
 8001282:	b29a      	uxth	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	801a      	strh	r2, [r3, #0]
	if (*crc & 1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	881b      	ldrh	r3, [r3, #0]
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	2b00      	cmp	r3, #0
 8001292:	d009      	beq.n	80012a8 <update_crc+0x3c>
		*crc = (*crc >> 1) ^ CRC_POLY;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	085b      	lsrs	r3, r3, #1
 800129a:	b29a      	uxth	r2, r3
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <update_crc+0x54>)
 800129e:	4053      	eors	r3, r2
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	801a      	strh	r2, [r3, #0]
	else
		*crc = *crc >> 1;
}
 80012a6:	e005      	b.n	80012b4 <update_crc+0x48>
		*crc = *crc >> 1;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	085b      	lsrs	r3, r3, #1
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	801a      	strh	r2, [r3, #0]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	ffff8408 	.word	0xffff8408

080012c4 <getRSSI_TIM>:
 */



void getRSSI_TIM( NRX1_TIM *dev )
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start( dev->adcHandle );
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012d0:	4618      	mov	r0, r3
 80012d2:	f002 faa9 	bl	8003828 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(dev->adcHandle, HAL_MAX_DELAY);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012da:	f04f 31ff 	mov.w	r1, #4294967295
 80012de:	4618      	mov	r0, r3
 80012e0:	f002 fb38 	bl	8003954 <HAL_ADC_PollForConversion>

	dev->adc_RSSI = HAL_ADC_GetValue( dev->adcHandle );
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012e8:	4618      	mov	r0, r3
 80012ea:	f002 fbc2 	bl	8003a72 <HAL_ADC_GetValue>
 80012ee:	4603      	mov	r3, r0
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56

	HAL_ADC_Stop( dev->adcHandle );
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012fc:	4618      	mov	r0, r3
 80012fe:	f002 faf6 	bl	80038ee <HAL_ADC_Stop>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <S2LP_Initialise>:
/*
 * INITIALISATION
 */

uint8_t S2LP_Initialise( S2LP *dev, SPI_HandleTypeDef *spiHandle, GPIO_TypeDef *CS_GPIO, uint16_t CS_Pin, GPIO_TypeDef *SDN_GPIO, uint16_t SDN_Pin )
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b086      	sub	sp, #24
 800130e:	af00      	add	r7, sp, #0
 8001310:	60f8      	str	r0, [r7, #12]
 8001312:	60b9      	str	r1, [r7, #8]
 8001314:	607a      	str	r2, [r7, #4]
 8001316:	807b      	strh	r3, [r7, #2]
	/* Setup SPI handle to communicate with S2LP */
	dev->spiHandle	= spiHandle;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	601a      	str	r2, [r3, #0]

	/* Setup Chip Select GPIO */
	dev->CS_GPIO 	= CS_GPIO;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	605a      	str	r2, [r3, #4]

	dev->CS_Pin		= CS_Pin;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	887a      	ldrh	r2, [r7, #2]
 8001328:	811a      	strh	r2, [r3, #8]

	/* Setup Shutdown GPIO */
	dev->SDN_GPIO 	= CS_GPIO;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	60da      	str	r2, [r3, #12]

	dev->SDN_Pin	= CS_Pin;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	887a      	ldrh	r2, [r7, #2]
 8001334:	821a      	strh	r2, [r3, #16]

	/* Write CS pin high -- SPI not selected */
	HAL_GPIO_WritePin(CS_GPIO, CS_Pin, GPIO_PIN_SET);
 8001336:	887b      	ldrh	r3, [r7, #2]
 8001338:	2201      	movs	r2, #1
 800133a:	4619      	mov	r1, r3
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f004 fa2f 	bl	80057a0 <HAL_GPIO_WritePin>

	/* Toggle SDN to reset S2LP */
	HAL_GPIO_WritePin(SDN_GPIO, SDN_Pin, GPIO_PIN_SET);
 8001342:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001344:	2201      	movs	r2, #1
 8001346:	4619      	mov	r1, r3
 8001348:	6a38      	ldr	r0, [r7, #32]
 800134a:	f004 fa29 	bl	80057a0 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800134e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001352:	f001 fee7 	bl	8003124 <HAL_Delay>
	HAL_GPIO_WritePin(SDN_GPIO, SDN_Pin, GPIO_PIN_RESET);
 8001356:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001358:	2200      	movs	r2, #0
 800135a:	4619      	mov	r1, r3
 800135c:	6a38      	ldr	r0, [r7, #32]
 800135e:	f004 fa1f 	bl	80057a0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001362:	2064      	movs	r0, #100	; 0x64
 8001364:	f001 fede 	bl	8003124 <HAL_Delay>
	/* Create buffer for SPI messages */
	uint8_t init_buf[8];

	/* Check Connections are correct and device is communicating */

	S2LP_Read( dev, DEVICE_INFO1_ADDR, 2, init_buf );
 8001368:	f107 0310 	add.w	r3, r7, #16
 800136c:	2202      	movs	r2, #2
 800136e:	21f0      	movs	r1, #240	; 0xf0
 8001370:	68f8      	ldr	r0, [r7, #12]
 8001372:	f000 fa8b 	bl	800188c <S2LP_Read>

	if ((init_buf[0] != 0x03) | (init_buf[1] != 0x91))
 8001376:	7c3b      	ldrb	r3, [r7, #16]
 8001378:	2b03      	cmp	r3, #3
 800137a:	bf14      	ite	ne
 800137c:	2301      	movne	r3, #1
 800137e:	2300      	moveq	r3, #0
 8001380:	b2da      	uxtb	r2, r3
 8001382:	7c7b      	ldrb	r3, [r7, #17]
 8001384:	2b91      	cmp	r3, #145	; 0x91
 8001386:	bf14      	ite	ne
 8001388:	2301      	movne	r3, #1
 800138a:	2300      	moveq	r3, #0
 800138c:	b2db      	uxtb	r3, r3
 800138e:	4313      	orrs	r3, r2
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <S2LP_Initialise+0x90>
	{
		return 255;
 8001396:	23ff      	movs	r3, #255	; 0xff
 8001398:	e079      	b.n	800148e <S2LP_Initialise+0x184>
	 * Currently 437MHz
	 * See Communications Spreadsheet
	 */

//	436.975MHz
	init_buf[0] = 0x52; 	// SYNT3 [7:5] PLL_CP_ISEL, 4 BS, [3:0] Setting PLL programmable divider
 800139a:	2352      	movs	r3, #82	; 0x52
 800139c:	743b      	strb	r3, [r7, #16]
	init_buf[1] = 0x2F; 	// SYNT2 Setting PLL programmable divider
 800139e:	232f      	movs	r3, #47	; 0x2f
 80013a0:	747b      	strb	r3, [r7, #17]
	init_buf[2] = 0x53; 	// SYNT1 Setting PLL programmable divider
 80013a2:	2353      	movs	r3, #83	; 0x53
 80013a4:	74bb      	strb	r3, [r7, #18]
	init_buf[3] = 0xF8; 	// SYNT0 Setting PLL programmable divider
 80013a6:	23f8      	movs	r3, #248	; 0xf8
 80013a8:	74fb      	strb	r3, [r7, #19]
//	init_buf[0] = 0x52; 	// SYNT3 [7:5] PLL_CP_ISEL, 4 BS, [3:0] Setting PLL programmable divider
//	init_buf[1] = 0x2F; 	// SYNT2 Setting PLL programmable divider
//	init_buf[2] = 0x5C; 	// SYNT1 Setting PLL programmable divider
//	init_buf[3] = 0x29; 	// SYNT0 Setting PLL programmable divider

	S2LP_Write( dev, SYNT3, 4, init_buf);
 80013aa:	f107 0310 	add.w	r3, r7, #16
 80013ae:	2204      	movs	r2, #4
 80013b0:	2105      	movs	r1, #5
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f000 faa4 	bl	8001900 <S2LP_Write>

	/*
	 * Select datarate, modulation and frequency deviation
	 * Currently 9600bps, 2FSK, 3KHz
	 */
	init_buf[0] = 0x92; 	// MOD4 MSB of DATARATE_M
 80013b8:	2392      	movs	r3, #146	; 0x92
 80013ba:	743b      	strb	r3, [r7, #16]
	init_buf[1] = 0xA7; 	// MOD3 LSB of DATARATE_M
 80013bc:	23a7      	movs	r3, #167	; 0xa7
 80013be:	747b      	strb	r3, [r7, #17]
	init_buf[2] = 0x05; 	// MOD2 [7:4] MOD_TYPE = 0x0, [3:0] DATARATE_E = [CHANGE] -- THIS VALUE CHANGES THE DATA RATE WELL
 80013c0:	2305      	movs	r3, #5
 80013c2:	74bb      	strb	r3, [r7, #18]
	init_buf[3] = 0x00; 	// MOD1 [7:4] unrelated, [3:0] FDEV_E
 80013c4:	2300      	movs	r3, #0
 80013c6:	74fb      	strb	r3, [r7, #19]
	init_buf[4] = 0xFB; 	// MOD0 FDEV_M
 80013c8:	23fb      	movs	r3, #251	; 0xfb
 80013ca:	753b      	strb	r3, [r7, #20]
//	init_buf[1] = 0x54; 	// MOD3 LSB of DATARATE_M
//	init_buf[2] = 0x00; 	// MOD2 [7:4] MOD_TYPE = 0x0, [3:0] DATARATE_E = 0x2
//	init_buf[3] = 0x00; 	// MOD1 [7:4] unrelated, [3:0] FDEV_E
//	init_buf[4] = 0xFB; 	// MOD0 FDEV_M

	S2LP_Write( dev, MOD4, 5, init_buf );
 80013cc:	f107 0310 	add.w	r3, r7, #16
 80013d0:	2205      	movs	r2, #5
 80013d2:	210e      	movs	r1, #14
 80013d4:	68f8      	ldr	r0, [r7, #12]
 80013d6:	f000 fa93 	bl	8001900 <S2LP_Write>

	/*
	 * Select packet characteristics
	 */

	init_buf[0] = 0x80; 	// PCKTCTRL6 0x80 initial value
 80013da:	2380      	movs	r3, #128	; 0x80
 80013dc:	743b      	strb	r3, [r7, #16]
	init_buf[1] = 0xC0; 	// PCKTCTRL5 0x10 initial value
 80013de:	23c0      	movs	r3, #192	; 0xc0
 80013e0:	747b      	strb	r3, [r7, #17]
	init_buf[2] = 0x00; 	// PCKTCTRL4
 80013e2:	2300      	movs	r3, #0
 80013e4:	74bb      	strb	r3, [r7, #18]
	init_buf[3] = 0x04; 	// PCKTCTRL3 Select Normal mode RX Mode
 80013e6:	2304      	movs	r3, #4
 80013e8:	74fb      	strb	r3, [r7, #19]
	init_buf[4] = 0x00; 	// PCKTCTRL2
 80013ea:	2300      	movs	r3, #0
 80013ec:	753b      	strb	r3, [r7, #20]
//	init_buf[5] = 0x40; 	// PCKTCTRL1 Normal TX Mode, ENABLE WHITENING MODE
	init_buf[5] = 0x00;		// PCKTCTRL1 Normal TX Mode, No WHITENING, NO CRC
 80013ee:	2300      	movs	r3, #0
 80013f0:	757b      	strb	r3, [r7, #21]
//	init_buf[5] = 0x10; 	// PCKTCTRL1 Normal TX Mode, ENABLE WHITENING MODE, NO CRC
	init_buf[6] = 0x00; 	// PCKTLEN1
 80013f2:	2300      	movs	r3, #0
 80013f4:	75bb      	strb	r3, [r7, #22]
	init_buf[7] = 0x01; 	// PCKTLEN0 SET DEFAULT
 80013f6:	2301      	movs	r3, #1
 80013f8:	75fb      	strb	r3, [r7, #23]

	S2LP_Write( dev, PCKTCTRL6, 8, init_buf );
 80013fa:	f107 0310 	add.w	r3, r7, #16
 80013fe:	2208      	movs	r2, #8
 8001400:	212b      	movs	r1, #43	; 0x2b
 8001402:	68f8      	ldr	r0, [r7, #12]
 8001404:	f000 fa7c 	bl	8001900 <S2LP_Write>

	init_buf[0] = 0x04; 	// Set Postamble length
 8001408:	2304      	movs	r3, #4
 800140a:	743b      	strb	r3, [r7, #16]

	S2LP_Write( dev, PCKT_PSTMBL, 1, init_buf );
 800140c:	f107 0310 	add.w	r3, r7, #16
 8001410:	2201      	movs	r2, #1
 8001412:	2138      	movs	r1, #56	; 0x38
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	f000 fa73 	bl	8001900 <S2LP_Write>

	/*
	 * Select RX State
	 */

	init_buf[0] = 0x00; 	// Protocol2
 800141a:	2300      	movs	r3, #0
 800141c:	743b      	strb	r3, [r7, #16]

	S2LP_Write( dev, PROTOCOL2, 1, init_buf);
 800141e:	f107 0310 	add.w	r3, r7, #16
 8001422:	2201      	movs	r2, #1
 8001424:	2139      	movs	r1, #57	; 0x39
 8001426:	68f8      	ldr	r0, [r7, #12]
 8001428:	f000 fa6a 	bl	8001900 <S2LP_Write>

//	init_buf[0] = 0x01; 	// PCKT Options
	init_buf[0] = 0x00; 	// PCKT Options IGNORE CRC ON RX
 800142c:	2300      	movs	r3, #0
 800142e:	743b      	strb	r3, [r7, #16]

	S2LP_Write( dev, PCKT_FLT_OPTIONS, 1, init_buf);
 8001430:	f107 0310 	add.w	r3, r7, #16
 8001434:	2201      	movs	r2, #1
 8001436:	2140      	movs	r1, #64	; 0x40
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	f000 fa61 	bl	8001900 <S2LP_Write>

	init_buf[0] = 0x55; 	// ANT_SELECT_CONF
 800143e:	2355      	movs	r3, #85	; 0x55
 8001440:	743b      	strb	r3, [r7, #16]

	S2LP_Write( dev, ANT_SELECT_CONF, 1, init_buf);
 8001442:	f107 0310 	add.w	r3, r7, #16
 8001446:	2201      	movs	r2, #1
 8001448:	211f      	movs	r1, #31
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f000 fa58 	bl	8001900 <S2LP_Write>

	/*
	 * Select interrupt options on S2LP GPIO pins
	 */

	init_buf[0] = 0x02; 	// GPIO0_CONF
 8001450:	2302      	movs	r3, #2
 8001452:	743b      	strb	r3, [r7, #16]
	init_buf[1] = 0xA2; 	// GPIO1_CONF
 8001454:	23a2      	movs	r3, #162	; 0xa2
 8001456:	747b      	strb	r3, [r7, #17]
	init_buf[2] = 0xA2; 	// GPIO2_CONF
 8001458:	23a2      	movs	r3, #162	; 0xa2
 800145a:	74bb      	strb	r3, [r7, #18]
	init_buf[3] = 0xA2; 	// GPIO3_CONF
 800145c:	23a2      	movs	r3, #162	; 0xa2
 800145e:	74fb      	strb	r3, [r7, #19]

	S2LP_Write( dev, GPIO0_CONF, 4, init_buf );
 8001460:	f107 0310 	add.w	r3, r7, #16
 8001464:	2204      	movs	r2, #4
 8001466:	2100      	movs	r1, #0
 8001468:	68f8      	ldr	r0, [r7, #12]
 800146a:	f000 fa49 	bl	8001900 <S2LP_Write>

	init_buf[0] = 0x00; 	// IRQ_MASK3
 800146e:	2300      	movs	r3, #0
 8001470:	743b      	strb	r3, [r7, #16]
	init_buf[1] = 0x00; 	// IRQ_MASK2
 8001472:	2300      	movs	r3, #0
 8001474:	747b      	strb	r3, [r7, #17]
	init_buf[2] = 0x00; 	// IRQ_MASK1
 8001476:	2300      	movs	r3, #0
 8001478:	74bb      	strb	r3, [r7, #18]
//	init_buf[3] = 0x05; 	// IRQ_MASK0 RX DATA READY & TX DATA SENT
	init_buf[3] = 0x04; 	// IRQ_MASK0 TX DATA SENT
 800147a:	2304      	movs	r3, #4
 800147c:	74fb      	strb	r3, [r7, #19]

	S2LP_Write( dev, IRQ_MASK3, 4, init_buf );
 800147e:	f107 0310 	add.w	r3, r7, #16
 8001482:	2204      	movs	r2, #4
 8001484:	2150      	movs	r1, #80	; 0x50
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f000 fa3a 	bl	8001900 <S2LP_Write>

	return 0;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <S2LP_TransmitMessage>:
/*
 * HIGH-LEVEL FUNCTIONS
 */

uint8_t S2LP_TransmitMessage( S2LP *dev, uint8_t msg_len, uint8_t *msg )
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b084      	sub	sp, #16
 800149a:	af00      	add	r7, sp, #0
 800149c:	60f8      	str	r0, [r7, #12]
 800149e:	460b      	mov	r3, r1
 80014a0:	607a      	str	r2, [r7, #4]
 80014a2:	72fb      	strb	r3, [r7, #11]
	 * Transmit message function, care must be taken to leave enough time
	 * for the S2LP to send the message before a new message is sent
	 */


	msg_len = S2LP_AX25Packet(dev, msg, msg_len);
 80014a4:	7afb      	ldrb	r3, [r7, #11]
 80014a6:	461a      	mov	r2, r3
 80014a8:	6879      	ldr	r1, [r7, #4]
 80014aa:	68f8      	ldr	r0, [r7, #12]
 80014ac:	f000 f831 	bl	8001512 <S2LP_AX25Packet>
 80014b0:	4603      	mov	r3, r0
 80014b2:	72fb      	strb	r3, [r7, #11]

	while (dev->TX_STATE)
 80014b4:	e002      	b.n	80014bc <S2LP_TransmitMessage+0x26>
		HAL_Delay(5);
 80014b6:	2005      	movs	r0, #5
 80014b8:	f001 fe34 	bl	8003124 <HAL_Delay>
	while (dev->TX_STATE)
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	7d1b      	ldrb	r3, [r3, #20]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1f8      	bne.n	80014b6 <S2LP_TransmitMessage+0x20>

	dev->TX_STATE = 1;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2201      	movs	r2, #1
 80014c8:	751a      	strb	r2, [r3, #20]

	S2LP_Command( dev, CMD_SABORT );
 80014ca:	2167      	movs	r1, #103	; 0x67
 80014cc:	68f8      	ldr	r0, [r7, #12]
 80014ce:	f000 f9af 	bl	8001830 <S2LP_Command>

	S2LP_Command(dev, CMD_FLUSHTXFIFO);
 80014d2:	2172      	movs	r1, #114	; 0x72
 80014d4:	68f8      	ldr	r0, [r7, #12]
 80014d6:	f000 f9ab 	bl	8001830 <S2LP_Command>

	S2LP_SetMsgLen(dev, msg_len);
 80014da:	7afb      	ldrb	r3, [r7, #11]
 80014dc:	4619      	mov	r1, r3
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f000 f968 	bl	80017b4 <S2LP_SetMsgLen>

	S2LP_Write( dev, FIFO_ADDRESS, msg_len, dev->TX_BUFF );
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	3315      	adds	r3, #21
 80014e8:	7afa      	ldrb	r2, [r7, #11]
 80014ea:	21ff      	movs	r1, #255	; 0xff
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f000 fa07 	bl	8001900 <S2LP_Write>

	S2LP_Command( dev, CMD_LOCKTX );
 80014f2:	2166      	movs	r1, #102	; 0x66
 80014f4:	68f8      	ldr	r0, [r7, #12]
 80014f6:	f000 f99b 	bl	8001830 <S2LP_Command>

	HAL_Delay(5);
 80014fa:	2005      	movs	r0, #5
 80014fc:	f001 fe12 	bl	8003124 <HAL_Delay>

	S2LP_Command( dev, CMD_TX );
 8001500:	2160      	movs	r1, #96	; 0x60
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	f000 f994 	bl	8001830 <S2LP_Command>

	return 0;
 8001508:	2300      	movs	r3, #0

}
 800150a:	4618      	mov	r0, r3
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <S2LP_AX25Packet>:

uint8_t S2LP_AX25Packet(S2LP *dev, uint8_t *msg, uint8_t msg_len)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b088      	sub	sp, #32
 8001516:	af00      	add	r7, sp, #0
 8001518:	60f8      	str	r0, [r7, #12]
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	4613      	mov	r3, r2
 800151e:	71fb      	strb	r3, [r7, #7]
	uint8_t bit;
	uint8_t ones_row = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	77bb      	strb	r3, [r7, #30]
	uint8_t zeros_row = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	777b      	strb	r3, [r7, #29]
	uint16_t crc = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	82bb      	strh	r3, [r7, #20]

	dev->TX_BUFF[0] = AX_FLAG;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	227e      	movs	r2, #126	; 0x7e
 8001530:	755a      	strb	r2, [r3, #21]
	uint16_t packetsize = 8;
 8001532:	2308      	movs	r3, #8
 8001534:	837b      	strh	r3, [r7, #26]

	for (uint8_t i = 0; i < msg_len+2; i++)
 8001536:	2300      	movs	r3, #0
 8001538:	767b      	strb	r3, [r7, #25]
 800153a:	e0c0      	b.n	80016be <S2LP_AX25Packet+0x1ac>
	{
		for (uint8_t j = 0; j < 8; j++)
 800153c:	2300      	movs	r3, #0
 800153e:	763b      	strb	r3, [r7, #24]
 8001540:	e0b6      	b.n	80016b0 <S2LP_AX25Packet+0x19e>
		{
			if (i < msg_len)
 8001542:	7e7a      	ldrb	r2, [r7, #25]
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	429a      	cmp	r2, r3
 8001548:	d213      	bcs.n	8001572 <S2LP_AX25Packet+0x60>
			{
				bit = (msg[i] >> j) & 0x1;
 800154a:	7e7b      	ldrb	r3, [r7, #25]
 800154c:	68ba      	ldr	r2, [r7, #8]
 800154e:	4413      	add	r3, r2
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	461a      	mov	r2, r3
 8001554:	7e3b      	ldrb	r3, [r7, #24]
 8001556:	fa42 f303 	asr.w	r3, r2, r3
 800155a:	b2db      	uxtb	r3, r3
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	77fb      	strb	r3, [r7, #31]
				S2LP_update_crc(&crc, bit);
 8001562:	7ffa      	ldrb	r2, [r7, #31]
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	4611      	mov	r1, r2
 800156a:	4618      	mov	r0, r3
 800156c:	f000 f934 	bl	80017d8 <S2LP_update_crc>
 8001570:	e00d      	b.n	800158e <S2LP_AX25Packet+0x7c>
			}
			else
			{
				bit = (crc >> (j + 8*(i-msg_len))) & 0x1;
 8001572:	8abb      	ldrh	r3, [r7, #20]
 8001574:	4618      	mov	r0, r3
 8001576:	7e3a      	ldrb	r2, [r7, #24]
 8001578:	7e79      	ldrb	r1, [r7, #25]
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	1acb      	subs	r3, r1, r3
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	4413      	add	r3, r2
 8001582:	fa40 f303 	asr.w	r3, r0, r3
 8001586:	b2db      	uxtb	r3, r3
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	77fb      	strb	r3, [r7, #31]
			}

			if (bit)
 800158e:	7ffb      	ldrb	r3, [r7, #31]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <S2LP_AX25Packet+0x8e>
			{
				ones_row++;
 8001594:	7fbb      	ldrb	r3, [r7, #30]
 8001596:	3301      	adds	r3, #1
 8001598:	77bb      	strb	r3, [r7, #30]
				zeros_row = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	777b      	strb	r3, [r7, #29]
 800159e:	e004      	b.n	80015aa <S2LP_AX25Packet+0x98>
			}
			else
			{
				zeros_row++;
 80015a0:	7f7b      	ldrb	r3, [r7, #29]
 80015a2:	3301      	adds	r3, #1
 80015a4:	777b      	strb	r3, [r7, #29]
				ones_row = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	77bb      	strb	r3, [r7, #30]
			}
			dev->TX_BUFF[packetsize >> 3] &= ~(1 << (packetsize & 7));
 80015aa:	8b7b      	ldrh	r3, [r7, #26]
 80015ac:	08db      	lsrs	r3, r3, #3
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	461a      	mov	r2, r3
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4413      	add	r3, r2
 80015b6:	7d5b      	ldrb	r3, [r3, #21]
 80015b8:	b25a      	sxtb	r2, r3
 80015ba:	8b7b      	ldrh	r3, [r7, #26]
 80015bc:	f003 0307 	and.w	r3, r3, #7
 80015c0:	2101      	movs	r1, #1
 80015c2:	fa01 f303 	lsl.w	r3, r1, r3
 80015c6:	b25b      	sxtb	r3, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	b25b      	sxtb	r3, r3
 80015cc:	4013      	ands	r3, r2
 80015ce:	b25a      	sxtb	r2, r3
 80015d0:	8b7b      	ldrh	r3, [r7, #26]
 80015d2:	08db      	lsrs	r3, r3, #3
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	4619      	mov	r1, r3
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	440b      	add	r3, r1
 80015de:	755a      	strb	r2, [r3, #21]
			dev->TX_BUFF[packetsize >> 3] |= bit << (packetsize & 7);
 80015e0:	8b7b      	ldrh	r3, [r7, #26]
 80015e2:	08db      	lsrs	r3, r3, #3
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	461a      	mov	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4413      	add	r3, r2
 80015ec:	7d5b      	ldrb	r3, [r3, #21]
 80015ee:	b25a      	sxtb	r2, r3
 80015f0:	7ff9      	ldrb	r1, [r7, #31]
 80015f2:	8b7b      	ldrh	r3, [r7, #26]
 80015f4:	f003 0307 	and.w	r3, r3, #7
 80015f8:	fa01 f303 	lsl.w	r3, r1, r3
 80015fc:	b25b      	sxtb	r3, r3
 80015fe:	4313      	orrs	r3, r2
 8001600:	b25a      	sxtb	r2, r3
 8001602:	8b7b      	ldrh	r3, [r7, #26]
 8001604:	08db      	lsrs	r3, r3, #3
 8001606:	b29b      	uxth	r3, r3
 8001608:	4619      	mov	r1, r3
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	440b      	add	r3, r1
 8001610:	755a      	strb	r2, [r3, #21]
			packetsize++;
 8001612:	8b7b      	ldrh	r3, [r7, #26]
 8001614:	3301      	adds	r3, #1
 8001616:	837b      	strh	r3, [r7, #26]
			if (ones_row == 5)
 8001618:	7fbb      	ldrb	r3, [r7, #30]
 800161a:	2b05      	cmp	r3, #5
 800161c:	d122      	bne.n	8001664 <S2LP_AX25Packet+0x152>
			{
				dev->TX_BUFF[packetsize >> 3] &= ~(1 << (packetsize & 7));
 800161e:	8b7b      	ldrh	r3, [r7, #26]
 8001620:	08db      	lsrs	r3, r3, #3
 8001622:	b29b      	uxth	r3, r3
 8001624:	461a      	mov	r2, r3
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	4413      	add	r3, r2
 800162a:	7d5b      	ldrb	r3, [r3, #21]
 800162c:	b25a      	sxtb	r2, r3
 800162e:	8b7b      	ldrh	r3, [r7, #26]
 8001630:	f003 0307 	and.w	r3, r3, #7
 8001634:	2101      	movs	r1, #1
 8001636:	fa01 f303 	lsl.w	r3, r1, r3
 800163a:	b25b      	sxtb	r3, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	b25b      	sxtb	r3, r3
 8001640:	4013      	ands	r3, r2
 8001642:	b25a      	sxtb	r2, r3
 8001644:	8b7b      	ldrh	r3, [r7, #26]
 8001646:	08db      	lsrs	r3, r3, #3
 8001648:	b29b      	uxth	r3, r3
 800164a:	4619      	mov	r1, r3
 800164c:	b2d2      	uxtb	r2, r2
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	440b      	add	r3, r1
 8001652:	755a      	strb	r2, [r3, #21]
				ones_row = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	77bb      	strb	r3, [r7, #30]
				zeros_row = 1;
 8001658:	2301      	movs	r3, #1
 800165a:	777b      	strb	r3, [r7, #29]
				packetsize++;
 800165c:	8b7b      	ldrh	r3, [r7, #26]
 800165e:	3301      	adds	r3, #1
 8001660:	837b      	strh	r3, [r7, #26]
 8001662:	e022      	b.n	80016aa <S2LP_AX25Packet+0x198>
			}
			else if(zeros_row == 5)
 8001664:	7f7b      	ldrb	r3, [r7, #29]
 8001666:	2b05      	cmp	r3, #5
 8001668:	d11f      	bne.n	80016aa <S2LP_AX25Packet+0x198>
			{
				dev->TX_BUFF[packetsize >> 3] |= 1 << (packetsize & 7);
 800166a:	8b7b      	ldrh	r3, [r7, #26]
 800166c:	08db      	lsrs	r3, r3, #3
 800166e:	b29b      	uxth	r3, r3
 8001670:	461a      	mov	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	4413      	add	r3, r2
 8001676:	7d5b      	ldrb	r3, [r3, #21]
 8001678:	b25a      	sxtb	r2, r3
 800167a:	8b7b      	ldrh	r3, [r7, #26]
 800167c:	f003 0307 	and.w	r3, r3, #7
 8001680:	2101      	movs	r1, #1
 8001682:	fa01 f303 	lsl.w	r3, r1, r3
 8001686:	b25b      	sxtb	r3, r3
 8001688:	4313      	orrs	r3, r2
 800168a:	b25a      	sxtb	r2, r3
 800168c:	8b7b      	ldrh	r3, [r7, #26]
 800168e:	08db      	lsrs	r3, r3, #3
 8001690:	b29b      	uxth	r3, r3
 8001692:	4619      	mov	r1, r3
 8001694:	b2d2      	uxtb	r2, r2
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	440b      	add	r3, r1
 800169a:	755a      	strb	r2, [r3, #21]
				zeros_row = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	777b      	strb	r3, [r7, #29]
				ones_row = 1;
 80016a0:	2301      	movs	r3, #1
 80016a2:	77bb      	strb	r3, [r7, #30]
				packetsize++;
 80016a4:	8b7b      	ldrh	r3, [r7, #26]
 80016a6:	3301      	adds	r3, #1
 80016a8:	837b      	strh	r3, [r7, #26]
		for (uint8_t j = 0; j < 8; j++)
 80016aa:	7e3b      	ldrb	r3, [r7, #24]
 80016ac:	3301      	adds	r3, #1
 80016ae:	763b      	strb	r3, [r7, #24]
 80016b0:	7e3b      	ldrb	r3, [r7, #24]
 80016b2:	2b07      	cmp	r3, #7
 80016b4:	f67f af45 	bls.w	8001542 <S2LP_AX25Packet+0x30>
	for (uint8_t i = 0; i < msg_len+2; i++)
 80016b8:	7e7b      	ldrb	r3, [r7, #25]
 80016ba:	3301      	adds	r3, #1
 80016bc:	767b      	strb	r3, [r7, #25]
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	1c5a      	adds	r2, r3, #1
 80016c2:	7e7b      	ldrb	r3, [r7, #25]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	f6bf af39 	bge.w	800153c <S2LP_AX25Packet+0x2a>
			}
		}
	}

	for (uint8_t i = 0; i < 8; i++)
 80016ca:	2300      	movs	r3, #0
 80016cc:	75fb      	strb	r3, [r7, #23]
 80016ce:	e041      	b.n	8001754 <S2LP_AX25Packet+0x242>
	{
		bit = (AX_FLAG >> i) & 0x1;
 80016d0:	7dfb      	ldrb	r3, [r7, #23]
 80016d2:	227e      	movs	r2, #126	; 0x7e
 80016d4:	fa42 f303 	asr.w	r3, r2, r3
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	77fb      	strb	r3, [r7, #31]
		dev->TX_BUFF[packetsize >> 3] &= ~(1 << (packetsize & 7));
 80016e0:	8b7b      	ldrh	r3, [r7, #26]
 80016e2:	08db      	lsrs	r3, r3, #3
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	461a      	mov	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4413      	add	r3, r2
 80016ec:	7d5b      	ldrb	r3, [r3, #21]
 80016ee:	b25a      	sxtb	r2, r3
 80016f0:	8b7b      	ldrh	r3, [r7, #26]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	2101      	movs	r1, #1
 80016f8:	fa01 f303 	lsl.w	r3, r1, r3
 80016fc:	b25b      	sxtb	r3, r3
 80016fe:	43db      	mvns	r3, r3
 8001700:	b25b      	sxtb	r3, r3
 8001702:	4013      	ands	r3, r2
 8001704:	b25a      	sxtb	r2, r3
 8001706:	8b7b      	ldrh	r3, [r7, #26]
 8001708:	08db      	lsrs	r3, r3, #3
 800170a:	b29b      	uxth	r3, r3
 800170c:	4619      	mov	r1, r3
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	440b      	add	r3, r1
 8001714:	755a      	strb	r2, [r3, #21]
		dev->TX_BUFF[packetsize >> 3] |= bit << (packetsize & 7);
 8001716:	8b7b      	ldrh	r3, [r7, #26]
 8001718:	08db      	lsrs	r3, r3, #3
 800171a:	b29b      	uxth	r3, r3
 800171c:	461a      	mov	r2, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4413      	add	r3, r2
 8001722:	7d5b      	ldrb	r3, [r3, #21]
 8001724:	b25a      	sxtb	r2, r3
 8001726:	7ff9      	ldrb	r1, [r7, #31]
 8001728:	8b7b      	ldrh	r3, [r7, #26]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	fa01 f303 	lsl.w	r3, r1, r3
 8001732:	b25b      	sxtb	r3, r3
 8001734:	4313      	orrs	r3, r2
 8001736:	b25a      	sxtb	r2, r3
 8001738:	8b7b      	ldrh	r3, [r7, #26]
 800173a:	08db      	lsrs	r3, r3, #3
 800173c:	b29b      	uxth	r3, r3
 800173e:	4619      	mov	r1, r3
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	440b      	add	r3, r1
 8001746:	755a      	strb	r2, [r3, #21]
		packetsize++;
 8001748:	8b7b      	ldrh	r3, [r7, #26]
 800174a:	3301      	adds	r3, #1
 800174c:	837b      	strh	r3, [r7, #26]
	for (uint8_t i = 0; i < 8; i++)
 800174e:	7dfb      	ldrb	r3, [r7, #23]
 8001750:	3301      	adds	r3, #1
 8001752:	75fb      	strb	r3, [r7, #23]
 8001754:	7dfb      	ldrb	r3, [r7, #23]
 8001756:	2b07      	cmp	r3, #7
 8001758:	d9ba      	bls.n	80016d0 <S2LP_AX25Packet+0x1be>
	}

	while (packetsize%8)
 800175a:	e01d      	b.n	8001798 <S2LP_AX25Packet+0x286>
	{
		dev->TX_BUFF[packetsize >> 3] &= ~(1 << (packetsize & 7));
 800175c:	8b7b      	ldrh	r3, [r7, #26]
 800175e:	08db      	lsrs	r3, r3, #3
 8001760:	b29b      	uxth	r3, r3
 8001762:	461a      	mov	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4413      	add	r3, r2
 8001768:	7d5b      	ldrb	r3, [r3, #21]
 800176a:	b25a      	sxtb	r2, r3
 800176c:	8b7b      	ldrh	r3, [r7, #26]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	2101      	movs	r1, #1
 8001774:	fa01 f303 	lsl.w	r3, r1, r3
 8001778:	b25b      	sxtb	r3, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	b25b      	sxtb	r3, r3
 800177e:	4013      	ands	r3, r2
 8001780:	b25a      	sxtb	r2, r3
 8001782:	8b7b      	ldrh	r3, [r7, #26]
 8001784:	08db      	lsrs	r3, r3, #3
 8001786:	b29b      	uxth	r3, r3
 8001788:	4619      	mov	r1, r3
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	440b      	add	r3, r1
 8001790:	755a      	strb	r2, [r3, #21]
		packetsize++;
 8001792:	8b7b      	ldrh	r3, [r7, #26]
 8001794:	3301      	adds	r3, #1
 8001796:	837b      	strh	r3, [r7, #26]
	while (packetsize%8)
 8001798:	8b7b      	ldrh	r3, [r7, #26]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	b29b      	uxth	r3, r3
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1db      	bne.n	800175c <S2LP_AX25Packet+0x24a>
	}

	return packetsize/8;
 80017a4:	8b7b      	ldrh	r3, [r7, #26]
 80017a6:	08db      	lsrs	r3, r3, #3
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	b2db      	uxtb	r3, r3

}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3720      	adds	r7, #32
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <S2LP_SetMsgLen>:

uint8_t S2LP_SetMsgLen( S2LP *dev, uint8_t msg_len )
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	460b      	mov	r3, r1
 80017be:	70fb      	strb	r3, [r7, #3]

	S2LP_Write( dev, PCKTLEN0, 1, &msg_len );
 80017c0:	1cfb      	adds	r3, r7, #3
 80017c2:	2201      	movs	r2, #1
 80017c4:	2132      	movs	r1, #50	; 0x32
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f000 f89a 	bl	8001900 <S2LP_Write>

	return 0;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <S2LP_update_crc>:
/*
 * LOW-LEVEL FUNCTIONS
 */

void S2LP_update_crc( uint16_t *crc, uint8_t bit)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	70fb      	strb	r3, [r7, #3]
	*crc ^= bit;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	881a      	ldrh	r2, [r3, #0]
 80017e8:	78fb      	ldrb	r3, [r7, #3]
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	4053      	eors	r3, r2
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	801a      	strh	r2, [r3, #0]
	if (*crc & 1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d009      	beq.n	8001814 <S2LP_update_crc+0x3c>
		*crc = (*crc >> 1) ^ CRC_POLY;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	085b      	lsrs	r3, r3, #1
 8001806:	b29a      	uxth	r2, r3
 8001808:	4b08      	ldr	r3, [pc, #32]	; (800182c <S2LP_update_crc+0x54>)
 800180a:	4053      	eors	r3, r2
 800180c:	b29a      	uxth	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	801a      	strh	r2, [r3, #0]
	else
		*crc = *crc >> 1;
}
 8001812:	e005      	b.n	8001820 <S2LP_update_crc+0x48>
		*crc = *crc >> 1;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	085b      	lsrs	r3, r3, #1
 800181a:	b29a      	uxth	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	801a      	strh	r2, [r3, #0]
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	ffff8408 	.word	0xffff8408

08001830 <S2LP_Command>:

HAL_StatusTypeDef S2LP_Command( S2LP *dev, uint8_t command)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af02      	add	r7, sp, #8
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	70fb      	strb	r3, [r7, #3]
	uint8_t header[2] = {CMD_HEADER, command};
 800183c:	2380      	movs	r3, #128	; 0x80
 800183e:	733b      	strb	r3, [r7, #12]
 8001840:	78fb      	ldrb	r3, [r7, #3]
 8001842:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin( dev->CS_GPIO, dev->CS_Pin, GPIO_PIN_RESET );
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6858      	ldr	r0, [r3, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	891b      	ldrh	r3, [r3, #8]
 800184c:	2200      	movs	r2, #0
 800184e:	4619      	mov	r1, r3
 8001850:	f003 ffa6 	bl	80057a0 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive( dev->spiHandle, (uint8_t *) header, (uint8_t *) dev->MC_STATE, 2, HAL_MAX_DELAY );
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6818      	ldr	r0, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f103 0212 	add.w	r2, r3, #18
 800185e:	f107 010c 	add.w	r1, r7, #12
 8001862:	f04f 33ff 	mov.w	r3, #4294967295
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	2302      	movs	r3, #2
 800186a:	f005 fca8 	bl	80071be <HAL_SPI_TransmitReceive>
 800186e:	4603      	mov	r3, r0
 8001870:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin( dev->CS_GPIO, dev->CS_Pin, GPIO_PIN_SET );
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6858      	ldr	r0, [r3, #4]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	891b      	ldrh	r3, [r3, #8]
 800187a:	2201      	movs	r2, #1
 800187c:	4619      	mov	r1, r3
 800187e:	f003 ff8f 	bl	80057a0 <HAL_GPIO_WritePin>

	return status;
 8001882:	7bfb      	ldrb	r3, [r7, #15]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <S2LP_Read>:

HAL_StatusTypeDef S2LP_Read( S2LP *dev, uint8_t address, uint8_t numBytes, uint8_t* recBuffer)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af02      	add	r7, sp, #8
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	460b      	mov	r3, r1
 8001898:	72fb      	strb	r3, [r7, #11]
 800189a:	4613      	mov	r3, r2
 800189c:	72bb      	strb	r3, [r7, #10]
	uint8_t header[2] = {READ_HEADER, address};
 800189e:	2301      	movs	r3, #1
 80018a0:	753b      	strb	r3, [r7, #20]
 80018a2:	7afb      	ldrb	r3, [r7, #11]
 80018a4:	757b      	strb	r3, [r7, #21]

	HAL_GPIO_WritePin( dev->CS_GPIO, dev->CS_Pin, GPIO_PIN_RESET );
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6858      	ldr	r0, [r3, #4]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	891b      	ldrh	r3, [r3, #8]
 80018ae:	2200      	movs	r2, #0
 80018b0:	4619      	mov	r1, r3
 80018b2:	f003 ff75 	bl	80057a0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive( dev->spiHandle, header, dev->MC_STATE, 2, HAL_MAX_DELAY );
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6818      	ldr	r0, [r3, #0]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f103 0212 	add.w	r2, r3, #18
 80018c0:	f107 0114 	add.w	r1, r7, #20
 80018c4:	f04f 33ff 	mov.w	r3, #4294967295
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	2302      	movs	r3, #2
 80018cc:	f005 fc77 	bl	80071be <HAL_SPI_TransmitReceive>
	HAL_StatusTypeDef status = HAL_SPI_Receive( dev->spiHandle, recBuffer , numBytes, HAL_MAX_DELAY );
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6818      	ldr	r0, [r3, #0]
 80018d4:	7abb      	ldrb	r3, [r7, #10]
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	f04f 33ff 	mov.w	r3, #4294967295
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	f005 fb3e 	bl	8006f5e <HAL_SPI_Receive>
 80018e2:	4603      	mov	r3, r0
 80018e4:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin( dev->CS_GPIO, dev->CS_Pin, GPIO_PIN_SET );
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6858      	ldr	r0, [r3, #4]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	891b      	ldrh	r3, [r3, #8]
 80018ee:	2201      	movs	r2, #1
 80018f0:	4619      	mov	r1, r3
 80018f2:	f003 ff55 	bl	80057a0 <HAL_GPIO_WritePin>

	return status;
 80018f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <S2LP_Write>:

HAL_StatusTypeDef S2LP_Write( S2LP *dev, uint8_t address, uint8_t numBytes, uint8_t* sendBuffer)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b088      	sub	sp, #32
 8001904:	af02      	add	r7, sp, #8
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	607b      	str	r3, [r7, #4]
 800190a:	460b      	mov	r3, r1
 800190c:	72fb      	strb	r3, [r7, #11]
 800190e:	4613      	mov	r3, r2
 8001910:	72bb      	strb	r3, [r7, #10]
	uint8_t header[2] = {WRITE_HEADER, address};
 8001912:	2300      	movs	r3, #0
 8001914:	753b      	strb	r3, [r7, #20]
 8001916:	7afb      	ldrb	r3, [r7, #11]
 8001918:	757b      	strb	r3, [r7, #21]

	HAL_GPIO_WritePin( dev->CS_GPIO, dev->CS_Pin, GPIO_PIN_RESET );
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6858      	ldr	r0, [r3, #4]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	891b      	ldrh	r3, [r3, #8]
 8001922:	2200      	movs	r2, #0
 8001924:	4619      	mov	r1, r3
 8001926:	f003 ff3b 	bl	80057a0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive( dev->spiHandle, header, dev->MC_STATE, 2, HAL_MAX_DELAY );
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6818      	ldr	r0, [r3, #0]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f103 0212 	add.w	r2, r3, #18
 8001934:	f107 0114 	add.w	r1, r7, #20
 8001938:	f04f 33ff 	mov.w	r3, #4294967295
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	2302      	movs	r3, #2
 8001940:	f005 fc3d 	bl	80071be <HAL_SPI_TransmitReceive>
	HAL_StatusTypeDef status = HAL_SPI_Transmit( dev->spiHandle, sendBuffer , numBytes, HAL_MAX_DELAY );
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6818      	ldr	r0, [r3, #0]
 8001948:	7abb      	ldrb	r3, [r7, #10]
 800194a:	b29a      	uxth	r2, r3
 800194c:	f04f 33ff 	mov.w	r3, #4294967295
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	f005 f996 	bl	8006c82 <HAL_SPI_Transmit>
 8001956:	4603      	mov	r3, r0
 8001958:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin( dev->CS_GPIO, dev->CS_Pin, GPIO_PIN_SET );
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6858      	ldr	r0, [r3, #4]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	891b      	ldrh	r3, [r3, #8]
 8001962:	2201      	movs	r2, #1
 8001964:	4619      	mov	r1, r3
 8001966:	f003 ff1b 	bl	80057a0 <HAL_GPIO_WritePin>

	return status;
 800196a:	7dfb      	ldrb	r3, [r7, #23]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_0_IRQ_Pin)
 800197e:	88fb      	ldrh	r3, [r7, #6]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d109      	bne.n	8001998 <HAL_GPIO_EXTI_Callback+0x24>
	{
		uint8_t irq_state;
		uhf.TX_STATE = 0;
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001986:	2200      	movs	r2, #0
 8001988:	751a      	strb	r2, [r3, #20]
		S2LP_Read(&uhf, IRQ_STATUS0, 1, &irq_state);
 800198a:	f107 030f 	add.w	r3, r7, #15
 800198e:	2201      	movs	r2, #1
 8001990:	21fd      	movs	r1, #253	; 0xfd
 8001992:	4803      	ldr	r0, [pc, #12]	; (80019a0 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001994:	f7ff ff7a 	bl	800188c <S2LP_Read>
	}
}
 8001998:	bf00      	nop
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	200003b8 	.word	0x200003b8

080019a4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback( CAN_HandleTypeDef *hcan )
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &comm.RXHeader, comm.RXdata);
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 80019ae:	4a07      	ldr	r2, [pc, #28]	; (80019cc <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80019b0:	2100      	movs	r1, #0
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f003 f8f9 	bl	8004baa <HAL_CAN_GetRxMessage>
	CAN_Receive( &comm );
 80019b8:	4805      	ldr	r0, [pc, #20]	; (80019d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80019ba:	f001 fa11 	bl	8002de0 <CAN_Receive>
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	200004a9 	.word	0x200004a9
 80019cc:	20000484 	.word	0x20000484
 80019d0:	20000468 	.word	0x20000468

080019d4 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	if(htim == &htim16)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a05      	ldr	r2, [pc, #20]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d102      	bne.n	80019ea <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		NRX1_TIMRX( &vhf_TIM );
 80019e4:	4804      	ldr	r0, [pc, #16]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80019e6:	f7ff fa79 	bl	8000edc <NRX1_TIMRX>
	}
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	200002e8 	.word	0x200002e8
 80019f8:	20000410 	.word	0x20000410

080019fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a02:	f001 fb1b 	bl	800303c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a06:	f000 f865 	bl	8001ad4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a0a:	f000 f9e3 	bl	8001dd4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001a0e:	f000 f9b1 	bl	8001d74 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001a12:	f000 f94b 	bl	8001cac <MX_SPI1_Init>
  MX_CAN1_Init();
 8001a16:	f000 f913 	bl	8001c40 <MX_CAN1_Init>
  MX_ADC1_Init();
 8001a1a:	f000 f8ad 	bl	8001b78 <MX_ADC1_Init>
  MX_TIM16_Init();
 8001a1e:	f000 f983 	bl	8001d28 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  NRX1_Initialise_TIM( &vhf_TIM, GPIOA, GPIO_PIN_10, &hadc1, &htim16);
 8001a22:	4b23      	ldr	r3, [pc, #140]	; (8001ab0 <main+0xb4>)
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	4b23      	ldr	r3, [pc, #140]	; (8001ab4 <main+0xb8>)
 8001a28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a2c:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001a30:	4821      	ldr	r0, [pc, #132]	; (8001ab8 <main+0xbc>)
 8001a32:	f7ff fa3b 	bl	8000eac <NRX1_Initialise_TIM>

  S2LP_Initialise( &uhf, &hspi1, S2LP_CS_GPIO_Port, S2LP_CS_Pin, S2LP_SDN_GPIO_Port, S2LP_SDN_Pin );
 8001a36:	2308      	movs	r3, #8
 8001a38:	9301      	str	r3, [sp, #4]
 8001a3a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	2310      	movs	r3, #16
 8001a42:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a46:	491d      	ldr	r1, [pc, #116]	; (8001abc <main+0xc0>)
 8001a48:	481d      	ldr	r0, [pc, #116]	; (8001ac0 <main+0xc4>)
 8001a4a:	f7ff fc5e 	bl	800130a <S2LP_Initialise>

  CAN_Initialise( &comm, &hcan1, SAT_RCS, 0x0F0, 0, 10 );
 8001a4e:	230a      	movs	r3, #10
 8001a50:	9301      	str	r3, [sp, #4]
 8001a52:	2300      	movs	r3, #0
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	23f0      	movs	r3, #240	; 0xf0
 8001a58:	2202      	movs	r2, #2
 8001a5a:	491a      	ldr	r1, [pc, #104]	; (8001ac4 <main+0xc8>)
 8001a5c:	481a      	ldr	r0, [pc, #104]	; (8001ac8 <main+0xcc>)
 8001a5e:	f001 f89c 	bl	8002b9a <CAN_Initialise>

//  S2LP_TransmitIncreasing(&uhf, 2);

  uint32_t time = HAL_GetTick();
 8001a62:	f001 fb53 	bl	800310c <HAL_GetTick>
 8001a66:	6078      	str	r0, [r7, #4]
  {
	  /*
	   * INPUT TRIGGERED FUNCTIONS
	   */

	  RF_PROCESS( &uhf, &vhf_TIM, &comm, &tel );
 8001a68:	4b18      	ldr	r3, [pc, #96]	; (8001acc <main+0xd0>)
 8001a6a:	4a17      	ldr	r2, [pc, #92]	; (8001ac8 <main+0xcc>)
 8001a6c:	4912      	ldr	r1, [pc, #72]	; (8001ab8 <main+0xbc>)
 8001a6e:	4814      	ldr	r0, [pc, #80]	; (8001ac0 <main+0xc4>)
 8001a70:	f000 fa38 	bl	8001ee4 <RF_PROCESS>

	  CAN_PROCESS( &uhf, &comm, &tel );
 8001a74:	4a15      	ldr	r2, [pc, #84]	; (8001acc <main+0xd0>)
 8001a76:	4914      	ldr	r1, [pc, #80]	; (8001ac8 <main+0xcc>)
 8001a78:	4811      	ldr	r0, [pc, #68]	; (8001ac0 <main+0xc4>)
 8001a7a:	f000 faf7 	bl	800206c <CAN_PROCESS>

	  /*
	   * SCHEDULED FUNCTIONS
	   */

	  if (HAL_GetTick() - time > 500)
 8001a7e:	f001 fb45 	bl	800310c <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a8c:	d906      	bls.n	8001a9c <main+0xa0>
	  {
		  time = HAL_GetTick();
 8001a8e:	f001 fb3d 	bl	800310c <HAL_GetTick>
 8001a92:	6078      	str	r0, [r7, #4]
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001a94:	2108      	movs	r1, #8
 8001a96:	480e      	ldr	r0, [pc, #56]	; (8001ad0 <main+0xd4>)
 8001a98:	f003 fe9a 	bl	80057d0 <HAL_GPIO_TogglePin>

	  /*
	   * EVERY LOOP FUNCTIONS
	   */

	  if (vhf_TIM.adc_RSSI == 1)
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <main+0xbc>)
 8001a9e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d1e0      	bne.n	8001a68 <main+0x6c>
	  {
		  getRSSI_TIM(&vhf_TIM);
 8001aa6:	4804      	ldr	r0, [pc, #16]	; (8001ab8 <main+0xbc>)
 8001aa8:	f7ff fc0c 	bl	80012c4 <getRSSI_TIM>
	  RF_PROCESS( &uhf, &vhf_TIM, &comm, &tel );
 8001aac:	e7dc      	b.n	8001a68 <main+0x6c>
 8001aae:	bf00      	nop
 8001ab0:	200002e8 	.word	0x200002e8
 8001ab4:	200001f8 	.word	0x200001f8
 8001ab8:	20000410 	.word	0x20000410
 8001abc:	20000284 	.word	0x20000284
 8001ac0:	200003b8 	.word	0x200003b8
 8001ac4:	2000025c 	.word	0x2000025c
 8001ac8:	20000468 	.word	0x20000468
 8001acc:	2000057c 	.word	0x2000057c
 8001ad0:	48000400 	.word	0x48000400

08001ad4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b096      	sub	sp, #88	; 0x58
 8001ad8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ada:	f107 0314 	add.w	r3, r7, #20
 8001ade:	2244      	movs	r2, #68	; 0x44
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f006 fe04 	bl	80086f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ae8:	463b      	mov	r3, r7
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	605a      	str	r2, [r3, #4]
 8001af0:	609a      	str	r2, [r3, #8]
 8001af2:	60da      	str	r2, [r3, #12]
 8001af4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001af6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001afa:	f003 fea9 	bl	8005850 <HAL_PWREx_ControlVoltageScaling>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001b04:	f000 f9e8 	bl	8001ed8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b10:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b12:	2310      	movs	r3, #16
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b16:	2302      	movs	r3, #2
 8001b18:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001b22:	230c      	movs	r3, #12
 8001b24:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001b26:	2307      	movs	r3, #7
 8001b28:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8001b2e:	2304      	movs	r3, #4
 8001b30:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b32:	f107 0314 	add.w	r3, r7, #20
 8001b36:	4618      	mov	r0, r3
 8001b38:	f003 fee0 	bl	80058fc <HAL_RCC_OscConfig>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001b42:	f000 f9c9 	bl	8001ed8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b46:	230f      	movs	r3, #15
 8001b48:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b5a:	463b      	mov	r3, r7
 8001b5c:	2102      	movs	r1, #2
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f004 fae0 	bl	8006124 <HAL_RCC_ClockConfig>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001b6a:	f000 f9b5 	bl	8001ed8 <Error_Handler>
  }
}
 8001b6e:	bf00      	nop
 8001b70:	3758      	adds	r7, #88	; 0x58
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b7e:	463b      	mov	r3, r7
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
 8001b8c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b8e:	4b29      	ldr	r3, [pc, #164]	; (8001c34 <MX_ADC1_Init+0xbc>)
 8001b90:	4a29      	ldr	r2, [pc, #164]	; (8001c38 <MX_ADC1_Init+0xc0>)
 8001b92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001b94:	4b27      	ldr	r3, [pc, #156]	; (8001c34 <MX_ADC1_Init+0xbc>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001b9a:	4b26      	ldr	r3, [pc, #152]	; (8001c34 <MX_ADC1_Init+0xbc>)
 8001b9c:	2210      	movs	r2, #16
 8001b9e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ba0:	4b24      	ldr	r3, [pc, #144]	; (8001c34 <MX_ADC1_Init+0xbc>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ba6:	4b23      	ldr	r3, [pc, #140]	; (8001c34 <MX_ADC1_Init+0xbc>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bac:	4b21      	ldr	r3, [pc, #132]	; (8001c34 <MX_ADC1_Init+0xbc>)
 8001bae:	2204      	movs	r2, #4
 8001bb0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001bb2:	4b20      	ldr	r3, [pc, #128]	; (8001c34 <MX_ADC1_Init+0xbc>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001bb8:	4b1e      	ldr	r3, [pc, #120]	; (8001c34 <MX_ADC1_Init+0xbc>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001bbe:	4b1d      	ldr	r3, [pc, #116]	; (8001c34 <MX_ADC1_Init+0xbc>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bc4:	4b1b      	ldr	r3, [pc, #108]	; (8001c34 <MX_ADC1_Init+0xbc>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bcc:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <MX_ADC1_Init+0xbc>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bd2:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <MX_ADC1_Init+0xbc>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001bd8:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <MX_ADC1_Init+0xbc>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001be0:	4b14      	ldr	r3, [pc, #80]	; (8001c34 <MX_ADC1_Init+0xbc>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001be6:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <MX_ADC1_Init+0xbc>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bee:	4811      	ldr	r0, [pc, #68]	; (8001c34 <MX_ADC1_Init+0xbc>)
 8001bf0:	f001 fcd2 	bl	8003598 <HAL_ADC_Init>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001bfa:	f000 f96d 	bl	8001ed8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <MX_ADC1_Init+0xc4>)
 8001c00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c02:	2306      	movs	r3, #6
 8001c04:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001c06:	2300      	movs	r3, #0
 8001c08:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c0a:	237f      	movs	r3, #127	; 0x7f
 8001c0c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c0e:	2304      	movs	r3, #4
 8001c10:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c16:	463b      	mov	r3, r7
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4806      	ldr	r0, [pc, #24]	; (8001c34 <MX_ADC1_Init+0xbc>)
 8001c1c:	f001 ff36 	bl	8003a8c <HAL_ADC_ConfigChannel>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001c26:	f000 f957 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c2a:	bf00      	nop
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	200001f8 	.word	0x200001f8
 8001c38:	50040000 	.word	0x50040000
 8001c3c:	19200040 	.word	0x19200040

08001c40 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001c44:	4b17      	ldr	r3, [pc, #92]	; (8001ca4 <MX_CAN1_Init+0x64>)
 8001c46:	4a18      	ldr	r2, [pc, #96]	; (8001ca8 <MX_CAN1_Init+0x68>)
 8001c48:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8001c4a:	4b16      	ldr	r3, [pc, #88]	; (8001ca4 <MX_CAN1_Init+0x64>)
 8001c4c:	2203      	movs	r2, #3
 8001c4e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001c50:	4b14      	ldr	r3, [pc, #80]	; (8001ca4 <MX_CAN1_Init+0x64>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001c56:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <MX_CAN1_Init+0x64>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001c5c:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <MX_CAN1_Init+0x64>)
 8001c5e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8001c62:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001c64:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <MX_CAN1_Init+0x64>)
 8001c66:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c6a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001c6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ca4 <MX_CAN1_Init+0x64>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001c72:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <MX_CAN1_Init+0x64>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001c78:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <MX_CAN1_Init+0x64>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001c7e:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <MX_CAN1_Init+0x64>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001c84:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <MX_CAN1_Init+0x64>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001c8a:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <MX_CAN1_Init+0x64>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001c90:	4804      	ldr	r0, [pc, #16]	; (8001ca4 <MX_CAN1_Init+0x64>)
 8001c92:	f002 fc7c 	bl	800458e <HAL_CAN_Init>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001c9c:	f000 f91c 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001ca0:	bf00      	nop
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	2000025c 	.word	0x2000025c
 8001ca8:	40006400 	.word	0x40006400

08001cac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001cb0:	4b1b      	ldr	r3, [pc, #108]	; (8001d20 <MX_SPI1_Init+0x74>)
 8001cb2:	4a1c      	ldr	r2, [pc, #112]	; (8001d24 <MX_SPI1_Init+0x78>)
 8001cb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cb6:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <MX_SPI1_Init+0x74>)
 8001cb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cbe:	4b18      	ldr	r3, [pc, #96]	; (8001d20 <MX_SPI1_Init+0x74>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cc4:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <MX_SPI1_Init+0x74>)
 8001cc6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001cca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ccc:	4b14      	ldr	r3, [pc, #80]	; (8001d20 <MX_SPI1_Init+0x74>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cd2:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <MX_SPI1_Init+0x74>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cd8:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <MX_SPI1_Init+0x74>)
 8001cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cde:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001ce0:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <MX_SPI1_Init+0x74>)
 8001ce2:	2210      	movs	r2, #16
 8001ce4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ce6:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <MX_SPI1_Init+0x74>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cec:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <MX_SPI1_Init+0x74>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <MX_SPI1_Init+0x74>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001cf8:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <MX_SPI1_Init+0x74>)
 8001cfa:	2207      	movs	r2, #7
 8001cfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001cfe:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <MX_SPI1_Init+0x74>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d04:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <MX_SPI1_Init+0x74>)
 8001d06:	2208      	movs	r2, #8
 8001d08:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d0a:	4805      	ldr	r0, [pc, #20]	; (8001d20 <MX_SPI1_Init+0x74>)
 8001d0c:	f004 ff16 	bl	8006b3c <HAL_SPI_Init>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001d16:	f000 f8df 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000284 	.word	0x20000284
 8001d24:	40013000 	.word	0x40013000

08001d28 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <MX_TIM16_Init+0x44>)
 8001d2e:	4a10      	ldr	r2, [pc, #64]	; (8001d70 <MX_TIM16_Init+0x48>)
 8001d30:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1-1;
 8001d32:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <MX_TIM16_Init+0x44>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <MX_TIM16_Init+0x44>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 625-1;
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <MX_TIM16_Init+0x44>)
 8001d40:	f44f 721c 	mov.w	r2, #624	; 0x270
 8001d44:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <MX_TIM16_Init+0x44>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001d4c:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <MX_TIM16_Init+0x44>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <MX_TIM16_Init+0x44>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001d58:	4804      	ldr	r0, [pc, #16]	; (8001d6c <MX_TIM16_Init+0x44>)
 8001d5a:	f005 fdff 	bl	800795c <HAL_TIM_Base_Init>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001d64:	f000 f8b8 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001d68:	bf00      	nop
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	200002e8 	.word	0x200002e8
 8001d70:	40014400 	.word	0x40014400

08001d74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d78:	4b14      	ldr	r3, [pc, #80]	; (8001dcc <MX_USART2_UART_Init+0x58>)
 8001d7a:	4a15      	ldr	r2, [pc, #84]	; (8001dd0 <MX_USART2_UART_Init+0x5c>)
 8001d7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d7e:	4b13      	ldr	r3, [pc, #76]	; (8001dcc <MX_USART2_UART_Init+0x58>)
 8001d80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d86:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <MX_USART2_UART_Init+0x58>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d8c:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <MX_USART2_UART_Init+0x58>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d92:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <MX_USART2_UART_Init+0x58>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d98:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <MX_USART2_UART_Init+0x58>)
 8001d9a:	220c      	movs	r2, #12
 8001d9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d9e:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <MX_USART2_UART_Init+0x58>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001da4:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <MX_USART2_UART_Init+0x58>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001daa:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <MX_USART2_UART_Init+0x58>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001db0:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <MX_USART2_UART_Init+0x58>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001db6:	4805      	ldr	r0, [pc, #20]	; (8001dcc <MX_USART2_UART_Init+0x58>)
 8001db8:	f006 f846 	bl	8007e48 <HAL_UART_Init>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001dc2:	f000 f889 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000334 	.word	0x20000334
 8001dd0:	40004400 	.word	0x40004400

08001dd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b088      	sub	sp, #32
 8001dd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dda:	f107 030c 	add.w	r3, r7, #12
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	605a      	str	r2, [r3, #4]
 8001de4:	609a      	str	r2, [r3, #8]
 8001de6:	60da      	str	r2, [r3, #12]
 8001de8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dea:	4b39      	ldr	r3, [pc, #228]	; (8001ed0 <MX_GPIO_Init+0xfc>)
 8001dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dee:	4a38      	ldr	r2, [pc, #224]	; (8001ed0 <MX_GPIO_Init+0xfc>)
 8001df0:	f043 0304 	orr.w	r3, r3, #4
 8001df4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001df6:	4b36      	ldr	r3, [pc, #216]	; (8001ed0 <MX_GPIO_Init+0xfc>)
 8001df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfa:	f003 0304 	and.w	r3, r3, #4
 8001dfe:	60bb      	str	r3, [r7, #8]
 8001e00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e02:	4b33      	ldr	r3, [pc, #204]	; (8001ed0 <MX_GPIO_Init+0xfc>)
 8001e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e06:	4a32      	ldr	r2, [pc, #200]	; (8001ed0 <MX_GPIO_Init+0xfc>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e0e:	4b30      	ldr	r3, [pc, #192]	; (8001ed0 <MX_GPIO_Init+0xfc>)
 8001e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	607b      	str	r3, [r7, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1a:	4b2d      	ldr	r3, [pc, #180]	; (8001ed0 <MX_GPIO_Init+0xfc>)
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1e:	4a2c      	ldr	r2, [pc, #176]	; (8001ed0 <MX_GPIO_Init+0xfc>)
 8001e20:	f043 0302 	orr.w	r3, r3, #2
 8001e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e26:	4b2a      	ldr	r3, [pc, #168]	; (8001ed0 <MX_GPIO_Init+0xfc>)
 8001e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	603b      	str	r3, [r7, #0]
 8001e30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, S2LP_SDN_Pin|S2LP_CS_Pin, GPIO_PIN_RESET);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2118      	movs	r1, #24
 8001e36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e3a:	f003 fcb1 	bl	80057a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|NRX1_LD_Pin, GPIO_PIN_RESET);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2128      	movs	r1, #40	; 0x28
 8001e42:	4824      	ldr	r0, [pc, #144]	; (8001ed4 <MX_GPIO_Init+0x100>)
 8001e44:	f003 fcac 	bl	80057a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : S2LP_SDN_Pin S2LP_CS_Pin */
  GPIO_InitStruct.Pin = S2LP_SDN_Pin|S2LP_CS_Pin;
 8001e48:	2318      	movs	r3, #24
 8001e4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e54:	2300      	movs	r3, #0
 8001e56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e58:	f107 030c 	add.w	r3, r7, #12
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e62:	f003 fb1b 	bl	800549c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_0_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_0_IRQ_Pin;
 8001e66:	2301      	movs	r3, #1
 8001e68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e6a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIO_0_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001e74:	f107 030c 	add.w	r3, r7, #12
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4816      	ldr	r0, [pc, #88]	; (8001ed4 <MX_GPIO_Init+0x100>)
 8001e7c:	f003 fb0e 	bl	800549c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e86:	2300      	movs	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8e:	f107 030c 	add.w	r3, r7, #12
 8001e92:	4619      	mov	r1, r3
 8001e94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e98:	f003 fb00 	bl	800549c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin NRX1_LD_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|NRX1_LD_Pin;
 8001e9c:	2328      	movs	r3, #40	; 0x28
 8001e9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eac:	f107 030c 	add.w	r3, r7, #12
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4808      	ldr	r0, [pc, #32]	; (8001ed4 <MX_GPIO_Init+0x100>)
 8001eb4:	f003 faf2 	bl	800549c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	2100      	movs	r1, #0
 8001ebc:	2006      	movs	r0, #6
 8001ebe:	f003 fab6 	bl	800542e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001ec2:	2006      	movs	r0, #6
 8001ec4:	f003 facf 	bl	8005466 <HAL_NVIC_EnableIRQ>

}
 8001ec8:	bf00      	nop
 8001eca:	3720      	adds	r7, #32
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	48000400 	.word	0x48000400

08001ed8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001edc:	b672      	cpsid	i
}
 8001ede:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ee0:	e7fe      	b.n	8001ee0 <Error_Handler+0x8>
	...

08001ee4 <RF_PROCESS>:
/*
 * HIGH-LEVEL FUNCTIONS
 */
//void RF_PROCESS( S2LP *s2lp, NRX1_TIM *nrx1, CANBUS *canbus, TELEMETRY *tel, UART_HandleTypeDef *huart )
void RF_PROCESS( S2LP *s2lp, NRX1_TIM *nrx1, CANBUS *canbus, TELEMETRY *tel )
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
 8001ef0:	603b      	str	r3, [r7, #0]
	 */
	// Assuming that we always process the last message before the next one

	CAN_TX_ID TX_ID;

	if ( nrx1->flag_end )
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 80b1 	beq.w	8002060 <RF_PROCESS+0x17c>
	{
		switch (nrx1->buffer[3])
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	7a5b      	ldrb	r3, [r3, #9]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	f000 808b 	beq.w	800201e <RF_PROCESS+0x13a>
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	f300 80a5 	bgt.w	8002058 <RF_PROCESS+0x174>
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d002      	beq.n	8001f18 <RF_PROCESS+0x34>
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d02a      	beq.n	8001f6c <RF_PROCESS+0x88>
 8001f16:	e09f      	b.n	8002058 <RF_PROCESS+0x174>
			 * buffer[3]: MSG type (in this case: TEL -> 0)
			 * buffer[4]: NODE TO REQUEST
			 * buffer[5]: TEL_ID
			 * buffer[6]: RESPONSE /SET = 1 /REQUEST = 0 /INTERNAL UPDATE 2
			 */
			if (nrx1->buffer[6] == 0) // GS ALWAYS SENDS REQUEST
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	7b1b      	ldrb	r3, [r3, #12]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f040 8098 	bne.w	8002052 <RF_PROCESS+0x16e>
			{
				if (nrx1->buffer[4] == SAT_RCS) // BASIC RF TELEMETRY REQUEST
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	7a9b      	ldrb	r3, [r3, #10]
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d107      	bne.n	8001f3a <RF_PROCESS+0x56>
				{
					RF_TRANSMIT_TEL( s2lp, tel, nrx1->buffer[5] );
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	7adb      	ldrb	r3, [r3, #11]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	6839      	ldr	r1, [r7, #0]
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f000 f926 	bl	8002184 <RF_TRANSMIT_TEL>
				{
					TX_ID = CAN_setID( SAT_RCS, nrx1->buffer[4], MSG_TEL );
					CAN_Transmit( canbus, TX_ID, (uint8_t*) &nrx1->buffer[5], 2 ); // SENDS [ID][REQ]
				}
			}
			break;
 8001f38:	e08b      	b.n	8002052 <RF_PROCESS+0x16e>
					TX_ID = CAN_setID( SAT_RCS, nrx1->buffer[4], MSG_TEL );
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	7a9b      	ldrb	r3, [r3, #10]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	4619      	mov	r1, r3
 8001f42:	2002      	movs	r0, #2
 8001f44:	f000 fe93 	bl	8002c6e <CAN_setID>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	743a      	strb	r2, [r7, #16]
 8001f4e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001f52:	747a      	strb	r2, [r7, #17]
 8001f54:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001f58:	74bb      	strb	r3, [r7, #18]
					CAN_Transmit( canbus, TX_ID, (uint8_t*) &nrx1->buffer[5], 2 ); // SENDS [ID][REQ]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	f103 020b 	add.w	r2, r3, #11
 8001f60:	2302      	movs	r3, #2
 8001f62:	6939      	ldr	r1, [r7, #16]
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 feab 	bl	8002cc0 <CAN_Transmit>
			break;
 8001f6a:	e072      	b.n	8002052 <RF_PROCESS+0x16e>
			 * NRX buffer starts SAT then message
			 * buffer[3]: MSG type (in this case: CMD -> 1)
			 * buffer[4]: NODE TO CMD
			 * buffer[5]: CMD_ID
			 */
			if ( nrx1->buffer[4] == SAT_RCS )
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	7a9b      	ldrb	r3, [r3, #10]
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d13b      	bne.n	8001fec <RF_PROCESS+0x108>
			{
				if (nrx1->buffer[5] == TASK_RFUNIT)
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	7adb      	ldrb	r3, [r3, #11]
 8001f78:	2b12      	cmp	r3, #18
 8001f7a:	d116      	bne.n	8001faa <RF_PROCESS+0xc6>
				{
					for (uint8_t i = 0; i < 10; i++)
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	75fb      	strb	r3, [r7, #23]
 8001f80:	e009      	b.n	8001f96 <RF_PROCESS+0xb2>
					{
						HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001f82:	2108      	movs	r1, #8
 8001f84:	4838      	ldr	r0, [pc, #224]	; (8002068 <RF_PROCESS+0x184>)
 8001f86:	f003 fc23 	bl	80057d0 <HAL_GPIO_TogglePin>
						HAL_Delay(100);
 8001f8a:	2064      	movs	r0, #100	; 0x64
 8001f8c:	f001 f8ca 	bl	8003124 <HAL_Delay>
					for (uint8_t i = 0; i < 10; i++)
 8001f90:	7dfb      	ldrb	r3, [r7, #23]
 8001f92:	3301      	adds	r3, #1
 8001f94:	75fb      	strb	r3, [r7, #23]
 8001f96:	7dfb      	ldrb	r3, [r7, #23]
 8001f98:	2b09      	cmp	r3, #9
 8001f9a:	d9f2      	bls.n	8001f82 <RF_PROCESS+0x9e>
					}
					RF_TRANSMIT_ACK( s2lp, SAT_RCS, TASK_RFUNIT, 0 );
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	2212      	movs	r2, #18
 8001fa0:	2102      	movs	r1, #2
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f000 f8ca 	bl	800213c <RF_TRANSMIT_ACK>
			else
			{
				TX_ID = CAN_setID( SAT_RCS, nrx1->buffer[4], MSG_CMD );
				CAN_Transmit( canbus, TX_ID, (uint8_t*) &nrx1->buffer[5], 1 );
			}
			break;
 8001fa8:	e055      	b.n	8002056 <RF_PROCESS+0x172>
				else if( nrx1->buffer[5] == 23 )
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	7adb      	ldrb	r3, [r3, #11]
 8001fae:	2b17      	cmp	r3, #23
 8001fb0:	d151      	bne.n	8002056 <RF_PROCESS+0x172>
					RF_TRANSMIT_ACK( s2lp, SAT_RCS, 23, 0 );
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	2217      	movs	r2, #23
 8001fb6:	2102      	movs	r1, #2
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f000 f8bf 	bl	800213c <RF_TRANSMIT_ACK>
					for (uint8_t i = 0; i < 4; i++)
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	75bb      	strb	r3, [r7, #22]
 8001fc2:	e009      	b.n	8001fd8 <RF_PROCESS+0xf4>
						HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001fc4:	2108      	movs	r1, #8
 8001fc6:	4828      	ldr	r0, [pc, #160]	; (8002068 <RF_PROCESS+0x184>)
 8001fc8:	f003 fc02 	bl	80057d0 <HAL_GPIO_TogglePin>
						HAL_Delay(100);
 8001fcc:	2064      	movs	r0, #100	; 0x64
 8001fce:	f001 f8a9 	bl	8003124 <HAL_Delay>
					for (uint8_t i = 0; i < 4; i++)
 8001fd2:	7dbb      	ldrb	r3, [r7, #22]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	75bb      	strb	r3, [r7, #22]
 8001fd8:	7dbb      	ldrb	r3, [r7, #22]
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	d9f2      	bls.n	8001fc4 <RF_PROCESS+0xe0>
					RF_TRANSMIT_ACK( s2lp, SAT_RCS, 23, 0 );
 8001fde:	2300      	movs	r3, #0
 8001fe0:	2217      	movs	r2, #23
 8001fe2:	2102      	movs	r1, #2
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f000 f8a9 	bl	800213c <RF_TRANSMIT_ACK>
			break;
 8001fea:	e034      	b.n	8002056 <RF_PROCESS+0x172>
				TX_ID = CAN_setID( SAT_RCS, nrx1->buffer[4], MSG_CMD );
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	7a9b      	ldrb	r3, [r3, #10]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	2002      	movs	r0, #2
 8001ff6:	f000 fe3a 	bl	8002c6e <CAN_setID>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	743a      	strb	r2, [r7, #16]
 8002000:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002004:	747a      	strb	r2, [r7, #17]
 8002006:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800200a:	74bb      	strb	r3, [r7, #18]
				CAN_Transmit( canbus, TX_ID, (uint8_t*) &nrx1->buffer[5], 1 );
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	f103 020b 	add.w	r2, r3, #11
 8002012:	2301      	movs	r3, #1
 8002014:	6939      	ldr	r1, [r7, #16]
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 fe52 	bl	8002cc0 <CAN_Transmit>
			break;
 800201c:	e01b      	b.n	8002056 <RF_PROCESS+0x172>
			 * buffer[4]: DESTINATION NODE ID
			 * buffer[5]: MESSAGE LENGTH
			 */

			//Set Up CAN ID
			TX_ID = CAN_setID( SAT_RCS, nrx1->buffer[4], MSG_DIR );
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	7a9b      	ldrb	r3, [r3, #10]
 8002022:	2202      	movs	r2, #2
 8002024:	4619      	mov	r1, r3
 8002026:	2002      	movs	r0, #2
 8002028:	f000 fe21 	bl	8002c6e <CAN_setID>
 800202c:	4603      	mov	r3, r0
 800202e:	461a      	mov	r2, r3
 8002030:	743a      	strb	r2, [r7, #16]
 8002032:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002036:	747a      	strb	r2, [r7, #17]
 8002038:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800203c:	74bb      	strb	r3, [r7, #18]

			// Add message to CAN
			CAN_Transmit( canbus, TX_ID, (uint8_t*) &nrx1->buffer[6], nrx1->buffer[5] );
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	f103 020c 	add.w	r2, r3, #12
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	7adb      	ldrb	r3, [r3, #11]
 8002048:	6939      	ldr	r1, [r7, #16]
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 fe38 	bl	8002cc0 <CAN_Transmit>
			break;
 8002050:	e002      	b.n	8002058 <RF_PROCESS+0x174>
			break;
 8002052:	bf00      	nop
 8002054:	e000      	b.n	8002058 <RF_PROCESS+0x174>
			break;
 8002056:	bf00      	nop
		}
		nrx1->flag_end = 0;
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

	/*
	 * TRANSMIT BEACON STEP
	 * Regularly transmit beacon
	 */
}
 8002060:	bf00      	nop
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	48000400 	.word	0x48000400

0800206c <CAN_PROCESS>:

void CAN_PROCESS( S2LP *s2lp, CANBUS *canbus, TELEMETRY *tel )
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
	for (uint8_t i = 0; i < OTHER_NODES; i++)
 8002078:	2300      	movs	r3, #0
 800207a:	75fb      	strb	r3, [r7, #23]
 800207c:	e056      	b.n	800212c <CAN_PROCESS+0xc0>
	{
		if (canbus->RX_received_flag[i] == 1)
 800207e:	7dfb      	ldrb	r3, [r7, #23]
 8002080:	68ba      	ldr	r2, [r7, #8]
 8002082:	4413      	add	r3, r2
 8002084:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8002088:	2b01      	cmp	r3, #1
 800208a:	d14c      	bne.n	8002126 <CAN_PROCESS+0xba>
			source: canbus->RXstack[i][1] & 0xF;
			len: canbus->RXstack[i][2];
			data start: canbus->RXstack[i][3]
			 */

			switch(canbus->RXstack[i][0] & 0x3)
 800208c:	7dfb      	ldrb	r3, [r7, #23]
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	019b      	lsls	r3, r3, #6
 8002092:	4413      	add	r3, r2
 8002094:	3389      	adds	r3, #137	; 0x89
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	f003 0303 	and.w	r3, r3, #3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d029      	beq.n	80020f4 <CAN_PROCESS+0x88>
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	dc3b      	bgt.n	800211c <CAN_PROCESS+0xb0>
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <CAN_PROCESS+0x40>
 80020a8:	2b01      	cmp	r3, #1
						break;
					}
				case 1:
					// COMMAND CASE

					break;
 80020aa:	e036      	b.n	800211a <CAN_PROCESS+0xae>
					switch (canbus->RXstack[i][4])
 80020ac:	7dfb      	ldrb	r3, [r7, #23]
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	019b      	lsls	r3, r3, #6
 80020b2:	4413      	add	r3, r2
 80020b4:	338d      	adds	r3, #141	; 0x8d
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d017      	beq.n	80020ec <CAN_PROCESS+0x80>
 80020bc:	2b02      	cmp	r3, #2
 80020be:	dc2c      	bgt.n	800211a <CAN_PROCESS+0xae>
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d015      	beq.n	80020f0 <CAN_PROCESS+0x84>
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d128      	bne.n	800211a <CAN_PROCESS+0xae>
							S2LP_TransmitMessage(s2lp, canbus->RXstack[i][2] + 3, &canbus->RXstack[i][0]);
 80020c8:	7dfb      	ldrb	r3, [r7, #23]
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	019b      	lsls	r3, r3, #6
 80020ce:	4413      	add	r3, r2
 80020d0:	338b      	adds	r3, #139	; 0x8b
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	3303      	adds	r3, #3
 80020d6:	b2d9      	uxtb	r1, r3
 80020d8:	7dfb      	ldrb	r3, [r7, #23]
 80020da:	019b      	lsls	r3, r3, #6
 80020dc:	3388      	adds	r3, #136	; 0x88
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	4413      	add	r3, r2
 80020e2:	3301      	adds	r3, #1
 80020e4:	461a      	mov	r2, r3
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f7ff f9d5 	bl	8001496 <S2LP_TransmitMessage>
						break;
 80020ec:	bf00      	nop
 80020ee:	e014      	b.n	800211a <CAN_PROCESS+0xae>
							break;
 80020f0:	bf00      	nop
					break;
 80020f2:	e012      	b.n	800211a <CAN_PROCESS+0xae>
				case 2:
					// DIRECT CASE
					S2LP_TransmitMessage(s2lp, canbus->RXstack[i][2] + 3, &canbus->RXstack[i][0]);
 80020f4:	7dfb      	ldrb	r3, [r7, #23]
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	019b      	lsls	r3, r3, #6
 80020fa:	4413      	add	r3, r2
 80020fc:	338b      	adds	r3, #139	; 0x8b
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	3303      	adds	r3, #3
 8002102:	b2d9      	uxtb	r1, r3
 8002104:	7dfb      	ldrb	r3, [r7, #23]
 8002106:	019b      	lsls	r3, r3, #6
 8002108:	3388      	adds	r3, #136	; 0x88
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	4413      	add	r3, r2
 800210e:	3301      	adds	r3, #1
 8002110:	461a      	mov	r2, r3
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f7ff f9bf 	bl	8001496 <S2LP_TransmitMessage>
					break;
 8002118:	e000      	b.n	800211c <CAN_PROCESS+0xb0>
					break;
 800211a:	bf00      	nop
			}

			// Clear flags
			CAN_CLEAR( canbus, i );
 800211c:	7dfb      	ldrb	r3, [r7, #23]
 800211e:	4619      	mov	r1, r3
 8002120:	68b8      	ldr	r0, [r7, #8]
 8002122:	f000 ff57 	bl	8002fd4 <CAN_CLEAR>
	for (uint8_t i = 0; i < OTHER_NODES; i++)
 8002126:	7dfb      	ldrb	r3, [r7, #23]
 8002128:	3301      	adds	r3, #1
 800212a:	75fb      	strb	r3, [r7, #23]
 800212c:	7dfb      	ldrb	r3, [r7, #23]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d9a5      	bls.n	800207e <CAN_PROCESS+0x12>
		}
	}
}
 8002132:	bf00      	nop
 8002134:	bf00      	nop
 8002136:	3718      	adds	r7, #24
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <RF_TRANSMIT_ACK>:
/*
 * LOW-LEVEL FUNCTIONS
 */

void RF_TRANSMIT_ACK( S2LP *s2lp, uint8_t source, uint8_t taskID, uint8_t acknack )
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	4608      	mov	r0, r1
 8002146:	4611      	mov	r1, r2
 8002148:	461a      	mov	r2, r3
 800214a:	4603      	mov	r3, r0
 800214c:	70fb      	strb	r3, [r7, #3]
 800214e:	460b      	mov	r3, r1
 8002150:	70bb      	strb	r3, [r7, #2]
 8002152:	4613      	mov	r3, r2
 8002154:	707b      	strb	r3, [r7, #1]
	uint8_t ack_buf[7];
	ack_buf[0] = MSG_DIR;
 8002156:	2302      	movs	r3, #2
 8002158:	723b      	strb	r3, [r7, #8]
	ack_buf[1] = source;
 800215a:	78fb      	ldrb	r3, [r7, #3]
 800215c:	727b      	strb	r3, [r7, #9]
	ack_buf[2] = 3;
 800215e:	2303      	movs	r3, #3
 8002160:	72bb      	strb	r3, [r7, #10]
	ack_buf[3] = TASK_ACK;
 8002162:	2310      	movs	r3, #16
 8002164:	72fb      	strb	r3, [r7, #11]
	ack_buf[4] = taskID;
 8002166:	78bb      	ldrb	r3, [r7, #2]
 8002168:	733b      	strb	r3, [r7, #12]
	ack_buf[5] = acknack;
 800216a:	787b      	ldrb	r3, [r7, #1]
 800216c:	737b      	strb	r3, [r7, #13]
	S2LP_TransmitMessage( s2lp, 6, ack_buf );
 800216e:	f107 0308 	add.w	r3, r7, #8
 8002172:	461a      	mov	r2, r3
 8002174:	2106      	movs	r1, #6
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff f98d 	bl	8001496 <S2LP_TransmitMessage>
}
 800217c:	bf00      	nop
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <RF_TRANSMIT_TEL>:

void RF_TRANSMIT_TEL( S2LP *s2lp, TELEMETRY *tel, uint8_t tel_no )
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08e      	sub	sp, #56	; 0x38
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	4613      	mov	r3, r2
 8002190:	71fb      	strb	r3, [r7, #7]
	uint8_t TEL_MSG[27] = "TEL";
 8002192:	4bc7      	ldr	r3, [pc, #796]	; (80024b0 <RF_TRANSMIT_TEL+0x32c>)
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	f107 0318 	add.w	r3, r7, #24
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	605a      	str	r2, [r3, #4]
 80021a0:	609a      	str	r2, [r3, #8]
 80021a2:	60da      	str	r2, [r3, #12]
 80021a4:	611a      	str	r2, [r3, #16]
 80021a6:	f8c3 2013 	str.w	r2, [r3, #19]
	uint8_t TEL_LEN;
	switch( tel_no )
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	f200 81dc 	bhi.w	800256a <RF_TRANSMIT_TEL+0x3e6>
 80021b2:	a201      	add	r2, pc, #4	; (adr r2, 80021b8 <RF_TRANSMIT_TEL+0x34>)
 80021b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b8:	080021dd 	.word	0x080021dd
 80021bc:	08002269 	.word	0x08002269
 80021c0:	080022f9 	.word	0x080022f9
 80021c4:	08002329 	.word	0x08002329
 80021c8:	08002359 	.word	0x08002359
 80021cc:	080023ed 	.word	0x080023ed
 80021d0:	0800240f 	.word	0x0800240f
 80021d4:	080024a3 	.word	0x080024a3
 80021d8:	0800253b 	.word	0x0800253b
		case 0:
			/*
			 * ACC DATA UINT16_t[3]
			 * TEL:(uint16_t):(uint16_t):(uint16_t) = 3 + 1 + 2 + 1 + 2 + 1 + 2 = 12
			 */
			TEL_LEN = 12;
 80021dc:	230c      	movs	r3, #12
 80021de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			for ( uint8_t i = 0; i < 3; i++ )
 80021e2:	2300      	movs	r3, #0
 80021e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80021e8:	e031      	b.n	800224e <RF_TRANSMIT_TEL+0xca>
			{
				TEL_MSG[3*i+4] = (tel->OBC_acc[i] >> 8) & 0x00FF;
 80021ea:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80021f4:	0a1b      	lsrs	r3, r3, #8
 80021f6:	b299      	uxth	r1, r3
 80021f8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80021fc:	4613      	mov	r3, r2
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	4413      	add	r3, r2
 8002202:	3304      	adds	r3, #4
 8002204:	b2ca      	uxtb	r2, r1
 8002206:	3338      	adds	r3, #56	; 0x38
 8002208:	443b      	add	r3, r7
 800220a:	f803 2c24 	strb.w	r2, [r3, #-36]
				TEL_MSG[3*i+5] = (tel->OBC_acc[i]) & 0x00FF;
 800220e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8002218:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800221c:	4613      	mov	r3, r2
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	4413      	add	r3, r2
 8002222:	3305      	adds	r3, #5
 8002224:	b2ca      	uxtb	r2, r1
 8002226:	3338      	adds	r3, #56	; 0x38
 8002228:	443b      	add	r3, r7
 800222a:	f803 2c24 	strb.w	r2, [r3, #-36]
				TEL_MSG[3*i+3] = 58; // Set : between values
 800222e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	4613      	mov	r3, r2
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	4413      	add	r3, r2
 800223a:	3338      	adds	r3, #56	; 0x38
 800223c:	443b      	add	r3, r7
 800223e:	223a      	movs	r2, #58	; 0x3a
 8002240:	f803 2c24 	strb.w	r2, [r3, #-36]
			for ( uint8_t i = 0; i < 3; i++ )
 8002244:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002248:	3301      	adds	r3, #1
 800224a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800224e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002252:	2b02      	cmp	r3, #2
 8002254:	d9c9      	bls.n	80021ea <RF_TRANSMIT_TEL+0x66>
			}
//			S2LP_SetMsgLen( s2lp, TEL_LEN );
			S2LP_TransmitMessage( s2lp, TEL_LEN, TEL_MSG );
 8002256:	f107 0214 	add.w	r2, r7, #20
 800225a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800225e:	4619      	mov	r1, r3
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f7ff f918 	bl	8001496 <S2LP_TransmitMessage>
			break;
 8002266:	e187      	b.n	8002578 <RF_TRANSMIT_TEL+0x3f4>
		case 1:
			/*
			 * GYRO DATA UINT16_t[3]
			 * TEL:(uint16_t):(uint16_t):(uint16_t) = 3 + 1 + 2 + 1 + 2 + 1 + 2 = 12
			 */
			TEL_LEN = 12;
 8002268:	230c      	movs	r3, #12
 800226a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			for ( uint8_t i = 0; i < 3; i++ )
 800226e:	2300      	movs	r3, #0
 8002270:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002274:	e033      	b.n	80022de <RF_TRANSMIT_TEL+0x15a>
			{
				TEL_MSG[3*i+4] = (tel->OBC_gyro[i] >> 8) & 0x00FF;
 8002276:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	4413      	add	r3, r2
 8002280:	88db      	ldrh	r3, [r3, #6]
 8002282:	0a1b      	lsrs	r3, r3, #8
 8002284:	b299      	uxth	r1, r3
 8002286:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800228a:	4613      	mov	r3, r2
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	4413      	add	r3, r2
 8002290:	3304      	adds	r3, #4
 8002292:	b2ca      	uxtb	r2, r1
 8002294:	3338      	adds	r3, #56	; 0x38
 8002296:	443b      	add	r3, r7
 8002298:	f803 2c24 	strb.w	r2, [r3, #-36]
				TEL_MSG[3*i+5] = (tel->OBC_gyro[i]) & 0x00FF;
 800229c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80022a0:	68ba      	ldr	r2, [r7, #8]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	4413      	add	r3, r2
 80022a6:	88d9      	ldrh	r1, [r3, #6]
 80022a8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80022ac:	4613      	mov	r3, r2
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	4413      	add	r3, r2
 80022b2:	3305      	adds	r3, #5
 80022b4:	b2ca      	uxtb	r2, r1
 80022b6:	3338      	adds	r3, #56	; 0x38
 80022b8:	443b      	add	r3, r7
 80022ba:	f803 2c24 	strb.w	r2, [r3, #-36]
				TEL_MSG[3*i+3] = 58; // Set : between values
 80022be:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80022c2:	1c5a      	adds	r2, r3, #1
 80022c4:	4613      	mov	r3, r2
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	4413      	add	r3, r2
 80022ca:	3338      	adds	r3, #56	; 0x38
 80022cc:	443b      	add	r3, r7
 80022ce:	223a      	movs	r2, #58	; 0x3a
 80022d0:	f803 2c24 	strb.w	r2, [r3, #-36]
			for ( uint8_t i = 0; i < 3; i++ )
 80022d4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80022d8:	3301      	adds	r3, #1
 80022da:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80022de:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d9c7      	bls.n	8002276 <RF_TRANSMIT_TEL+0xf2>
			}
//			S2LP_SetMsgLen( s2lp, TEL_LEN );
			S2LP_TransmitMessage( s2lp, TEL_LEN, TEL_MSG );
 80022e6:	f107 0214 	add.w	r2, r7, #20
 80022ea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80022ee:	4619      	mov	r1, r3
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f7ff f8d0 	bl	8001496 <S2LP_TransmitMessage>
			break;
 80022f6:	e13f      	b.n	8002578 <RF_TRANSMIT_TEL+0x3f4>
		case 2:
			/*
			 * COMP DATA UINT16_t -- Value in degrees
			 * TEL:(uint16_t) = 3 + 1 + 2 = 6
			 */
			TEL_LEN = 6;
 80022f8:	2306      	movs	r3, #6
 80022fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			TEL_MSG[5] = (tel->OBC_comp >> 8) & 0x00FF;
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	899b      	ldrh	r3, [r3, #12]
 8002302:	0a1b      	lsrs	r3, r3, #8
 8002304:	b29b      	uxth	r3, r3
 8002306:	b2db      	uxtb	r3, r3
 8002308:	767b      	strb	r3, [r7, #25]
			TEL_MSG[6] = (tel->OBC_comp) & 0x00FF;
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	899b      	ldrh	r3, [r3, #12]
 800230e:	b2db      	uxtb	r3, r3
 8002310:	76bb      	strb	r3, [r7, #26]
			TEL_MSG[4] = 58; // Set : between values
 8002312:	233a      	movs	r3, #58	; 0x3a
 8002314:	763b      	strb	r3, [r7, #24]

//			S2LP_SetMsgLen( s2lp, TEL_LEN );
			S2LP_TransmitMessage( s2lp, TEL_LEN, TEL_MSG );
 8002316:	f107 0214 	add.w	r2, r7, #20
 800231a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800231e:	4619      	mov	r1, r3
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f7ff f8b8 	bl	8001496 <S2LP_TransmitMessage>
			break;
 8002326:	e127      	b.n	8002578 <RF_TRANSMIT_TEL+0x3f4>
		case 3:
			/*
			 * TEMPERATURE DATA UINT16_t
			 * TEL:(uint16_t) = 3 + 1 + 2 = 6
			 */
			TEL_LEN = 6;
 8002328:	2306      	movs	r3, #6
 800232a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			TEL_MSG[4] = (tel->OBC_temp >> 8) & 0x00FF;
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	8a1b      	ldrh	r3, [r3, #16]
 8002332:	0a1b      	lsrs	r3, r3, #8
 8002334:	b29b      	uxth	r3, r3
 8002336:	b2db      	uxtb	r3, r3
 8002338:	763b      	strb	r3, [r7, #24]
			TEL_MSG[5] = (tel->OBC_temp) & 0x00FF;
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	8a1b      	ldrh	r3, [r3, #16]
 800233e:	b2db      	uxtb	r3, r3
 8002340:	767b      	strb	r3, [r7, #25]
			TEL_MSG[3] = 58; // Set : between values
 8002342:	233a      	movs	r3, #58	; 0x3a
 8002344:	75fb      	strb	r3, [r7, #23]

//			S2LP_SetMsgLen( s2lp, TEL_LEN );
			S2LP_TransmitMessage( s2lp, TEL_LEN, TEL_MSG );
 8002346:	f107 0214 	add.w	r2, r7, #20
 800234a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800234e:	4619      	mov	r1, r3
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f7ff f8a0 	bl	8001496 <S2LP_TransmitMessage>
			break;
 8002356:	e10f      	b.n	8002578 <RF_TRANSMIT_TEL+0x3f4>
			/*
			 * POSITION AND POSE DATA UINT16_t[3]
			 * X, Y, ANGLE
			 * TEL:(uint16_t):(uint16_t):(uint16_t) = 3 + 1 + 2 + 1 + 2 + 1 + 2 = 12
			 */
			TEL_LEN = 12;
 8002358:	230c      	movs	r3, #12
 800235a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			for ( uint8_t i = 0; i < 3; i++ )
 800235e:	2300      	movs	r3, #0
 8002360:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002364:	e035      	b.n	80023d2 <RF_TRANSMIT_TEL+0x24e>
			{
				TEL_MSG[3*i+4] = (tel->ADCS_position_pose[i] >> 8) & 0x00FF;
 8002366:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	3308      	adds	r3, #8
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	4413      	add	r3, r2
 8002372:	885b      	ldrh	r3, [r3, #2]
 8002374:	0a1b      	lsrs	r3, r3, #8
 8002376:	b299      	uxth	r1, r3
 8002378:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800237c:	4613      	mov	r3, r2
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	4413      	add	r3, r2
 8002382:	3304      	adds	r3, #4
 8002384:	b2ca      	uxtb	r2, r1
 8002386:	3338      	adds	r3, #56	; 0x38
 8002388:	443b      	add	r3, r7
 800238a:	f803 2c24 	strb.w	r2, [r3, #-36]
				TEL_MSG[3*i+5] = (tel->ADCS_position_pose[i]) & 0x00FF;
 800238e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	3308      	adds	r3, #8
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	4413      	add	r3, r2
 800239a:	8859      	ldrh	r1, [r3, #2]
 800239c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80023a0:	4613      	mov	r3, r2
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	4413      	add	r3, r2
 80023a6:	3305      	adds	r3, #5
 80023a8:	b2ca      	uxtb	r2, r1
 80023aa:	3338      	adds	r3, #56	; 0x38
 80023ac:	443b      	add	r3, r7
 80023ae:	f803 2c24 	strb.w	r2, [r3, #-36]
				TEL_MSG[3*i+3] = 58; // Set : between values
 80023b2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80023b6:	1c5a      	adds	r2, r3, #1
 80023b8:	4613      	mov	r3, r2
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	4413      	add	r3, r2
 80023be:	3338      	adds	r3, #56	; 0x38
 80023c0:	443b      	add	r3, r7
 80023c2:	223a      	movs	r2, #58	; 0x3a
 80023c4:	f803 2c24 	strb.w	r2, [r3, #-36]
			for ( uint8_t i = 0; i < 3; i++ )
 80023c8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80023cc:	3301      	adds	r3, #1
 80023ce:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80023d2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d9c5      	bls.n	8002366 <RF_TRANSMIT_TEL+0x1e2>
			}
//			S2LP_SetMsgLen( s2lp, TEL_LEN );
			S2LP_TransmitMessage( s2lp, TEL_LEN, TEL_MSG );
 80023da:	f107 0214 	add.w	r2, r7, #20
 80023de:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80023e2:	4619      	mov	r1, r3
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f7ff f856 	bl	8001496 <S2LP_TransmitMessage>
			break;
 80023ea:	e0c5      	b.n	8002578 <RF_TRANSMIT_TEL+0x3f4>
		case 5:
			/*
			 * SWITCH DATA UINT8_t
			 * TEL:(uint8_t) = 3 + 1 + 1
			 */
			TEL_LEN = 5;
 80023ec:	2305      	movs	r3, #5
 80023ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			TEL_MSG[4] = tel->EPS_switch;
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	7e1b      	ldrb	r3, [r3, #24]
 80023f6:	763b      	strb	r3, [r7, #24]
			TEL_MSG[3] = 58; // Set : between values
 80023f8:	233a      	movs	r3, #58	; 0x3a
 80023fa:	75fb      	strb	r3, [r7, #23]
//			S2LP_SetMsgLen( s2lp, TEL_LEN );
			S2LP_TransmitMessage( s2lp, TEL_LEN, TEL_MSG );
 80023fc:	f107 0214 	add.w	r2, r7, #20
 8002400:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002404:	4619      	mov	r1, r3
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f7ff f845 	bl	8001496 <S2LP_TransmitMessage>
			break;
 800240c:	e0b4      	b.n	8002578 <RF_TRANSMIT_TEL+0x3f4>
		case 6:
			/*
			 * CURRENT MEASUREMENTS DATA UINT16_t[3]
			 * TEL:(uint16_t):(uint16_t):(uint16_t):(uint16_t):(uint16_t):(uint16_t):(uint16_t):(uint16_t) = 3 + 1 + 2 + 1 + 2 + 1 + 2 + 1 + 2 + 1 + 2 + 1 + 2 + 1 + 2 + 1 + 2 = 27
			 */
			TEL_LEN = 27;
 800240e:	231b      	movs	r3, #27
 8002410:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			for ( uint8_t i = 0; i < 8; i++ )
 8002414:	2300      	movs	r3, #0
 8002416:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800241a:	e035      	b.n	8002488 <RF_TRANSMIT_TEL+0x304>
			{
				TEL_MSG[3*i+4] = (tel->EPS_current[i] >> 8) & 0x00FF;
 800241c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	330c      	adds	r3, #12
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	4413      	add	r3, r2
 8002428:	885b      	ldrh	r3, [r3, #2]
 800242a:	0a1b      	lsrs	r3, r3, #8
 800242c:	b299      	uxth	r1, r3
 800242e:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8002432:	4613      	mov	r3, r2
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	4413      	add	r3, r2
 8002438:	3304      	adds	r3, #4
 800243a:	b2ca      	uxtb	r2, r1
 800243c:	3338      	adds	r3, #56	; 0x38
 800243e:	443b      	add	r3, r7
 8002440:	f803 2c24 	strb.w	r2, [r3, #-36]
				TEL_MSG[3*i+5] = (tel->EPS_current[i]) & 0x00FF;
 8002444:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	330c      	adds	r3, #12
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	4413      	add	r3, r2
 8002450:	8859      	ldrh	r1, [r3, #2]
 8002452:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8002456:	4613      	mov	r3, r2
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	4413      	add	r3, r2
 800245c:	3305      	adds	r3, #5
 800245e:	b2ca      	uxtb	r2, r1
 8002460:	3338      	adds	r3, #56	; 0x38
 8002462:	443b      	add	r3, r7
 8002464:	f803 2c24 	strb.w	r2, [r3, #-36]
				TEL_MSG[3*i+3] = 58; // Set : between values
 8002468:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800246c:	1c5a      	adds	r2, r3, #1
 800246e:	4613      	mov	r3, r2
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	4413      	add	r3, r2
 8002474:	3338      	adds	r3, #56	; 0x38
 8002476:	443b      	add	r3, r7
 8002478:	223a      	movs	r2, #58	; 0x3a
 800247a:	f803 2c24 	strb.w	r2, [r3, #-36]
			for ( uint8_t i = 0; i < 8; i++ )
 800247e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002482:	3301      	adds	r3, #1
 8002484:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002488:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800248c:	2b07      	cmp	r3, #7
 800248e:	d9c5      	bls.n	800241c <RF_TRANSMIT_TEL+0x298>
			}
//			S2LP_SetMsgLen( s2lp, TEL_LEN );
			S2LP_TransmitMessage( s2lp, TEL_LEN, TEL_MSG );
 8002490:	f107 0214 	add.w	r2, r7, #20
 8002494:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002498:	4619      	mov	r1, r3
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f7fe fffb 	bl	8001496 <S2LP_TransmitMessage>
			break;
 80024a0:	e06a      	b.n	8002578 <RF_TRANSMIT_TEL+0x3f4>
		case 7:
			/*
			 * VOLTAGE MEASUREMENTS DATA UINT16_t[3]
			 * TEL:(uint16_t):(uint16_t):(uint16_t) = 3 + 1 + 2 + 1 + 2 + 1 + 2 = 12
			 */
			TEL_LEN = 12;
 80024a2:	230c      	movs	r3, #12
 80024a4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			for ( uint8_t i = 0; i < 3; i++ )
 80024a8:	2300      	movs	r3, #0
 80024aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80024ae:	e037      	b.n	8002520 <RF_TRANSMIT_TEL+0x39c>
 80024b0:	004c4554 	.word	0x004c4554
			{
				TEL_MSG[3*i+4] = (tel->EPS_voltage[i] >> 8) & 0x00FF;
 80024b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	3314      	adds	r3, #20
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	4413      	add	r3, r2
 80024c0:	885b      	ldrh	r3, [r3, #2]
 80024c2:	0a1b      	lsrs	r3, r3, #8
 80024c4:	b299      	uxth	r1, r3
 80024c6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80024ca:	4613      	mov	r3, r2
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4413      	add	r3, r2
 80024d0:	3304      	adds	r3, #4
 80024d2:	b2ca      	uxtb	r2, r1
 80024d4:	3338      	adds	r3, #56	; 0x38
 80024d6:	443b      	add	r3, r7
 80024d8:	f803 2c24 	strb.w	r2, [r3, #-36]
				TEL_MSG[3*i+5] = (tel->EPS_voltage[i]) & 0x00FF;
 80024dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80024e0:	68ba      	ldr	r2, [r7, #8]
 80024e2:	3314      	adds	r3, #20
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	4413      	add	r3, r2
 80024e8:	8859      	ldrh	r1, [r3, #2]
 80024ea:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80024ee:	4613      	mov	r3, r2
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	4413      	add	r3, r2
 80024f4:	3305      	adds	r3, #5
 80024f6:	b2ca      	uxtb	r2, r1
 80024f8:	3338      	adds	r3, #56	; 0x38
 80024fa:	443b      	add	r3, r7
 80024fc:	f803 2c24 	strb.w	r2, [r3, #-36]
				TEL_MSG[3*i+3] = 58; // Set : between values
 8002500:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002504:	1c5a      	adds	r2, r3, #1
 8002506:	4613      	mov	r3, r2
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	4413      	add	r3, r2
 800250c:	3338      	adds	r3, #56	; 0x38
 800250e:	443b      	add	r3, r7
 8002510:	223a      	movs	r2, #58	; 0x3a
 8002512:	f803 2c24 	strb.w	r2, [r3, #-36]
			for ( uint8_t i = 0; i < 3; i++ )
 8002516:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800251a:	3301      	adds	r3, #1
 800251c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002520:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002524:	2b02      	cmp	r3, #2
 8002526:	d9c5      	bls.n	80024b4 <RF_TRANSMIT_TEL+0x330>
			}
//			S2LP_SetMsgLen( s2lp, TEL_LEN );
			S2LP_TransmitMessage( s2lp, TEL_LEN, TEL_MSG );
 8002528:	f107 0214 	add.w	r2, r7, #20
 800252c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002530:	4619      	mov	r1, r3
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f7fe ffaf 	bl	8001496 <S2LP_TransmitMessage>
			break;
 8002538:	e01e      	b.n	8002578 <RF_TRANSMIT_TEL+0x3f4>
		case 8:
			/*
			 * RSSI DATA UINT16_t
			 * TEL:(uint16_t) = 3 + 1 + 2 = 6
			 */
			TEL_LEN = 6;
 800253a:	2306      	movs	r3, #6
 800253c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			TEL_MSG[4] = (tel->RF_rssi >> 8) & 0x00FF;
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002544:	0a1b      	lsrs	r3, r3, #8
 8002546:	b29b      	uxth	r3, r3
 8002548:	b2db      	uxtb	r3, r3
 800254a:	763b      	strb	r3, [r7, #24]
			TEL_MSG[5] = (tel->RF_rssi) & 0x00FF;
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002550:	b2db      	uxtb	r3, r3
 8002552:	767b      	strb	r3, [r7, #25]
			TEL_MSG[3] = 58; // Set : between values
 8002554:	233a      	movs	r3, #58	; 0x3a
 8002556:	75fb      	strb	r3, [r7, #23]

//			S2LP_SetMsgLen( s2lp, TEL_LEN );
			S2LP_TransmitMessage( s2lp, TEL_LEN, TEL_MSG );
 8002558:	f107 0214 	add.w	r2, r7, #20
 800255c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002560:	4619      	mov	r1, r3
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f7fe ff97 	bl	8001496 <S2LP_TransmitMessage>
			break;
 8002568:	e006      	b.n	8002578 <RF_TRANSMIT_TEL+0x3f4>

		default:
			RF_TRANSMIT_ACK(s2lp, SAT_RCS, TASK_TEL, 1);
 800256a:	2301      	movs	r3, #1
 800256c:	2211      	movs	r2, #17
 800256e:	2102      	movs	r1, #2
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f7ff fde3 	bl	800213c <RF_TRANSMIT_ACK>
			break;
 8002576:	bf00      	nop
	}
}
 8002578:	bf00      	nop
 800257a:	3738      	adds	r7, #56	; 0x38
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002586:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <HAL_MspInit+0x44>)
 8002588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800258a:	4a0e      	ldr	r2, [pc, #56]	; (80025c4 <HAL_MspInit+0x44>)
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	6613      	str	r3, [r2, #96]	; 0x60
 8002592:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <HAL_MspInit+0x44>)
 8002594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	607b      	str	r3, [r7, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <HAL_MspInit+0x44>)
 80025a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a2:	4a08      	ldr	r2, [pc, #32]	; (80025c4 <HAL_MspInit+0x44>)
 80025a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a8:	6593      	str	r3, [r2, #88]	; 0x58
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <HAL_MspInit+0x44>)
 80025ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b2:	603b      	str	r3, [r7, #0]
 80025b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40021000 	.word	0x40021000

080025c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b09e      	sub	sp, #120	; 0x78
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	605a      	str	r2, [r3, #4]
 80025da:	609a      	str	r2, [r3, #8]
 80025dc:	60da      	str	r2, [r3, #12]
 80025de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025e0:	f107 0310 	add.w	r3, r7, #16
 80025e4:	2254      	movs	r2, #84	; 0x54
 80025e6:	2100      	movs	r1, #0
 80025e8:	4618      	mov	r0, r3
 80025ea:	f006 f881 	bl	80086f0 <memset>
  if(hadc->Instance==ADC1)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a25      	ldr	r2, [pc, #148]	; (8002688 <HAL_ADC_MspInit+0xc0>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d143      	bne.n	8002680 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80025f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025fc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80025fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002602:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8002604:	2302      	movs	r3, #2
 8002606:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002608:	2301      	movs	r3, #1
 800260a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800260c:	2308      	movs	r3, #8
 800260e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002610:	2307      	movs	r3, #7
 8002612:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002614:	2302      	movs	r3, #2
 8002616:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002618:	2302      	movs	r3, #2
 800261a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800261c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002620:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002622:	f107 0310 	add.w	r3, r7, #16
 8002626:	4618      	mov	r0, r3
 8002628:	f003 ffa0 	bl	800656c <HAL_RCCEx_PeriphCLKConfig>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8002632:	f7ff fc51 	bl	8001ed8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002636:	4b15      	ldr	r3, [pc, #84]	; (800268c <HAL_ADC_MspInit+0xc4>)
 8002638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263a:	4a14      	ldr	r2, [pc, #80]	; (800268c <HAL_ADC_MspInit+0xc4>)
 800263c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002642:	4b12      	ldr	r3, [pc, #72]	; (800268c <HAL_ADC_MspInit+0xc4>)
 8002644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002646:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264e:	4b0f      	ldr	r3, [pc, #60]	; (800268c <HAL_ADC_MspInit+0xc4>)
 8002650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002652:	4a0e      	ldr	r2, [pc, #56]	; (800268c <HAL_ADC_MspInit+0xc4>)
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	64d3      	str	r3, [r2, #76]	; 0x4c
 800265a:	4b0c      	ldr	r3, [pc, #48]	; (800268c <HAL_ADC_MspInit+0xc4>)
 800265c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	60bb      	str	r3, [r7, #8]
 8002664:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002666:	2302      	movs	r3, #2
 8002668:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800266a:	230b      	movs	r3, #11
 800266c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266e:	2300      	movs	r3, #0
 8002670:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002672:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002676:	4619      	mov	r1, r3
 8002678:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800267c:	f002 ff0e 	bl	800549c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002680:	bf00      	nop
 8002682:	3778      	adds	r7, #120	; 0x78
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	50040000 	.word	0x50040000
 800268c:	40021000 	.word	0x40021000

08002690 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08a      	sub	sp, #40	; 0x28
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002698:	f107 0314 	add.w	r3, r7, #20
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	60da      	str	r2, [r3, #12]
 80026a6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a1c      	ldr	r2, [pc, #112]	; (8002720 <HAL_CAN_MspInit+0x90>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d131      	bne.n	8002716 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80026b2:	4b1c      	ldr	r3, [pc, #112]	; (8002724 <HAL_CAN_MspInit+0x94>)
 80026b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b6:	4a1b      	ldr	r2, [pc, #108]	; (8002724 <HAL_CAN_MspInit+0x94>)
 80026b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026bc:	6593      	str	r3, [r2, #88]	; 0x58
 80026be:	4b19      	ldr	r3, [pc, #100]	; (8002724 <HAL_CAN_MspInit+0x94>)
 80026c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c6:	613b      	str	r3, [r7, #16]
 80026c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ca:	4b16      	ldr	r3, [pc, #88]	; (8002724 <HAL_CAN_MspInit+0x94>)
 80026cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ce:	4a15      	ldr	r2, [pc, #84]	; (8002724 <HAL_CAN_MspInit+0x94>)
 80026d0:	f043 0301 	orr.w	r3, r3, #1
 80026d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026d6:	4b13      	ldr	r3, [pc, #76]	; (8002724 <HAL_CAN_MspInit+0x94>)
 80026d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80026e2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80026e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e8:	2302      	movs	r3, #2
 80026ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ec:	2300      	movs	r3, #0
 80026ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f0:	2303      	movs	r3, #3
 80026f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80026f4:	2309      	movs	r3, #9
 80026f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f8:	f107 0314 	add.w	r3, r7, #20
 80026fc:	4619      	mov	r1, r3
 80026fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002702:	f002 fecb 	bl	800549c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002706:	2200      	movs	r2, #0
 8002708:	2100      	movs	r1, #0
 800270a:	2014      	movs	r0, #20
 800270c:	f002 fe8f 	bl	800542e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002710:	2014      	movs	r0, #20
 8002712:	f002 fea8 	bl	8005466 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002716:	bf00      	nop
 8002718:	3728      	adds	r7, #40	; 0x28
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40006400 	.word	0x40006400
 8002724:	40021000 	.word	0x40021000

08002728 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08a      	sub	sp, #40	; 0x28
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002730:	f107 0314 	add.w	r3, r7, #20
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	605a      	str	r2, [r3, #4]
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	60da      	str	r2, [r3, #12]
 800273e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a17      	ldr	r2, [pc, #92]	; (80027a4 <HAL_SPI_MspInit+0x7c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d128      	bne.n	800279c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800274a:	4b17      	ldr	r3, [pc, #92]	; (80027a8 <HAL_SPI_MspInit+0x80>)
 800274c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800274e:	4a16      	ldr	r2, [pc, #88]	; (80027a8 <HAL_SPI_MspInit+0x80>)
 8002750:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002754:	6613      	str	r3, [r2, #96]	; 0x60
 8002756:	4b14      	ldr	r3, [pc, #80]	; (80027a8 <HAL_SPI_MspInit+0x80>)
 8002758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800275a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002762:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <HAL_SPI_MspInit+0x80>)
 8002764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002766:	4a10      	ldr	r2, [pc, #64]	; (80027a8 <HAL_SPI_MspInit+0x80>)
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800276e:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <HAL_SPI_MspInit+0x80>)
 8002770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800277a:	23e0      	movs	r3, #224	; 0xe0
 800277c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277e:	2302      	movs	r3, #2
 8002780:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002782:	2300      	movs	r3, #0
 8002784:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002786:	2303      	movs	r3, #3
 8002788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800278a:	2305      	movs	r3, #5
 800278c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800278e:	f107 0314 	add.w	r3, r7, #20
 8002792:	4619      	mov	r1, r3
 8002794:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002798:	f002 fe80 	bl	800549c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800279c:	bf00      	nop
 800279e:	3728      	adds	r7, #40	; 0x28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40013000 	.word	0x40013000
 80027a8:	40021000 	.word	0x40021000

080027ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a0d      	ldr	r2, [pc, #52]	; (80027f0 <HAL_TIM_Base_MspInit+0x44>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d113      	bne.n	80027e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80027be:	4b0d      	ldr	r3, [pc, #52]	; (80027f4 <HAL_TIM_Base_MspInit+0x48>)
 80027c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c2:	4a0c      	ldr	r2, [pc, #48]	; (80027f4 <HAL_TIM_Base_MspInit+0x48>)
 80027c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c8:	6613      	str	r3, [r2, #96]	; 0x60
 80027ca:	4b0a      	ldr	r3, [pc, #40]	; (80027f4 <HAL_TIM_Base_MspInit+0x48>)
 80027cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80027d6:	2200      	movs	r2, #0
 80027d8:	2100      	movs	r1, #0
 80027da:	2019      	movs	r0, #25
 80027dc:	f002 fe27 	bl	800542e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80027e0:	2019      	movs	r0, #25
 80027e2:	f002 fe40 	bl	8005466 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80027e6:	bf00      	nop
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40014400 	.word	0x40014400
 80027f4:	40021000 	.word	0x40021000

080027f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b09e      	sub	sp, #120	; 0x78
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002800:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	605a      	str	r2, [r3, #4]
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	60da      	str	r2, [r3, #12]
 800280e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002810:	f107 0310 	add.w	r3, r7, #16
 8002814:	2254      	movs	r2, #84	; 0x54
 8002816:	2100      	movs	r1, #0
 8002818:	4618      	mov	r0, r3
 800281a:	f005 ff69 	bl	80086f0 <memset>
  if(huart->Instance==USART2)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a28      	ldr	r2, [pc, #160]	; (80028c4 <HAL_UART_MspInit+0xcc>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d148      	bne.n	80028ba <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002828:	2302      	movs	r3, #2
 800282a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800282c:	2300      	movs	r3, #0
 800282e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002830:	f107 0310 	add.w	r3, r7, #16
 8002834:	4618      	mov	r0, r3
 8002836:	f003 fe99 	bl	800656c <HAL_RCCEx_PeriphCLKConfig>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002840:	f7ff fb4a 	bl	8001ed8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002844:	4b20      	ldr	r3, [pc, #128]	; (80028c8 <HAL_UART_MspInit+0xd0>)
 8002846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002848:	4a1f      	ldr	r2, [pc, #124]	; (80028c8 <HAL_UART_MspInit+0xd0>)
 800284a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800284e:	6593      	str	r3, [r2, #88]	; 0x58
 8002850:	4b1d      	ldr	r3, [pc, #116]	; (80028c8 <HAL_UART_MspInit+0xd0>)
 8002852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800285c:	4b1a      	ldr	r3, [pc, #104]	; (80028c8 <HAL_UART_MspInit+0xd0>)
 800285e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002860:	4a19      	ldr	r2, [pc, #100]	; (80028c8 <HAL_UART_MspInit+0xd0>)
 8002862:	f043 0301 	orr.w	r3, r3, #1
 8002866:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002868:	4b17      	ldr	r3, [pc, #92]	; (80028c8 <HAL_UART_MspInit+0xd0>)
 800286a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002874:	2304      	movs	r3, #4
 8002876:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002878:	2302      	movs	r3, #2
 800287a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	2300      	movs	r3, #0
 800287e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002880:	2303      	movs	r3, #3
 8002882:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002884:	2307      	movs	r3, #7
 8002886:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002888:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800288c:	4619      	mov	r1, r3
 800288e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002892:	f002 fe03 	bl	800549c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800289a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289c:	2302      	movs	r3, #2
 800289e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a4:	2303      	movs	r3, #3
 80028a6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80028a8:	2303      	movs	r3, #3
 80028aa:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80028ac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80028b0:	4619      	mov	r1, r3
 80028b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028b6:	f002 fdf1 	bl	800549c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80028ba:	bf00      	nop
 80028bc:	3778      	adds	r7, #120	; 0x78
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40004400 	.word	0x40004400
 80028c8:	40021000 	.word	0x40021000

080028cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028d0:	e7fe      	b.n	80028d0 <NMI_Handler+0x4>

080028d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028d2:	b480      	push	{r7}
 80028d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028d6:	e7fe      	b.n	80028d6 <HardFault_Handler+0x4>

080028d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028dc:	e7fe      	b.n	80028dc <MemManage_Handler+0x4>

080028de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028de:	b480      	push	{r7}
 80028e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028e2:	e7fe      	b.n	80028e2 <BusFault_Handler+0x4>

080028e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028e8:	e7fe      	b.n	80028e8 <UsageFault_Handler+0x4>

080028ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028fc:	bf00      	nop
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002906:	b480      	push	{r7}
 8002908:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800290a:	bf00      	nop
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002918:	f000 fbe4 	bl	80030e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800291c:	bf00      	nop
 800291e:	bd80      	pop	{r7, pc}

08002920 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_0_IRQ_Pin);
 8002924:	2001      	movs	r0, #1
 8002926:	f002 ff6d 	bl	8005804 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
	...

08002930 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002934:	4802      	ldr	r0, [pc, #8]	; (8002940 <CAN1_RX0_IRQHandler+0x10>)
 8002936:	f002 fa70 	bl	8004e1a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	2000025c 	.word	0x2000025c

08002944 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002948:	4802      	ldr	r0, [pc, #8]	; (8002954 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800294a:	f005 f8b3 	bl	8007ab4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	200002e8 	.word	0x200002e8

08002958 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
	return 1;
 800295c:	2301      	movs	r3, #1
}
 800295e:	4618      	mov	r0, r3
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <_kill>:

int _kill(int pid, int sig)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002972:	f005 fe93 	bl	800869c <__errno>
 8002976:	4603      	mov	r3, r0
 8002978:	2216      	movs	r2, #22
 800297a:	601a      	str	r2, [r3, #0]
	return -1;
 800297c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002980:	4618      	mov	r0, r3
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <_exit>:

void _exit (int status)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002990:	f04f 31ff 	mov.w	r1, #4294967295
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f7ff ffe7 	bl	8002968 <_kill>
	while (1) {}		/* Make sure we hang here */
 800299a:	e7fe      	b.n	800299a <_exit+0x12>

0800299c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029a8:	2300      	movs	r3, #0
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	e00a      	b.n	80029c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80029ae:	f3af 8000 	nop.w
 80029b2:	4601      	mov	r1, r0
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	1c5a      	adds	r2, r3, #1
 80029b8:	60ba      	str	r2, [r7, #8]
 80029ba:	b2ca      	uxtb	r2, r1
 80029bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	3301      	adds	r3, #1
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	dbf0      	blt.n	80029ae <_read+0x12>
	}

return len;
 80029cc:	687b      	ldr	r3, [r7, #4]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b086      	sub	sp, #24
 80029da:	af00      	add	r7, sp, #0
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e2:	2300      	movs	r3, #0
 80029e4:	617b      	str	r3, [r7, #20]
 80029e6:	e009      	b.n	80029fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	1c5a      	adds	r2, r3, #1
 80029ec:	60ba      	str	r2, [r7, #8]
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	3301      	adds	r3, #1
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	dbf1      	blt.n	80029e8 <_write+0x12>
	}
	return len;
 8002a04:	687b      	ldr	r3, [r7, #4]
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <_close>:

int _close(int file)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
	return -1;
 8002a16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
 8002a2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a36:	605a      	str	r2, [r3, #4]
	return 0;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <_isatty>:

int _isatty(int file)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
	return 1;
 8002a4e:	2301      	movs	r3, #1
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
	return 0;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
	...

08002a78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a80:	4a14      	ldr	r2, [pc, #80]	; (8002ad4 <_sbrk+0x5c>)
 8002a82:	4b15      	ldr	r3, [pc, #84]	; (8002ad8 <_sbrk+0x60>)
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a8c:	4b13      	ldr	r3, [pc, #76]	; (8002adc <_sbrk+0x64>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d102      	bne.n	8002a9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a94:	4b11      	ldr	r3, [pc, #68]	; (8002adc <_sbrk+0x64>)
 8002a96:	4a12      	ldr	r2, [pc, #72]	; (8002ae0 <_sbrk+0x68>)
 8002a98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a9a:	4b10      	ldr	r3, [pc, #64]	; (8002adc <_sbrk+0x64>)
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d207      	bcs.n	8002ab8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002aa8:	f005 fdf8 	bl	800869c <__errno>
 8002aac:	4603      	mov	r3, r0
 8002aae:	220c      	movs	r2, #12
 8002ab0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab6:	e009      	b.n	8002acc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ab8:	4b08      	ldr	r3, [pc, #32]	; (8002adc <_sbrk+0x64>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002abe:	4b07      	ldr	r3, [pc, #28]	; (8002adc <_sbrk+0x64>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	4a05      	ldr	r2, [pc, #20]	; (8002adc <_sbrk+0x64>)
 8002ac8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002aca:	68fb      	ldr	r3, [r7, #12]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	20010000 	.word	0x20010000
 8002ad8:	00000400 	.word	0x00000400
 8002adc:	200005b0 	.word	0x200005b0
 8002ae0:	200005c8 	.word	0x200005c8

08002ae4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002ae8:	4b15      	ldr	r3, [pc, #84]	; (8002b40 <SystemInit+0x5c>)
 8002aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aee:	4a14      	ldr	r2, [pc, #80]	; (8002b40 <SystemInit+0x5c>)
 8002af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002af8:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <SystemInit+0x60>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a11      	ldr	r2, [pc, #68]	; (8002b44 <SystemInit+0x60>)
 8002afe:	f043 0301 	orr.w	r3, r3, #1
 8002b02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002b04:	4b0f      	ldr	r3, [pc, #60]	; (8002b44 <SystemInit+0x60>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002b0a:	4b0e      	ldr	r3, [pc, #56]	; (8002b44 <SystemInit+0x60>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a0d      	ldr	r2, [pc, #52]	; (8002b44 <SystemInit+0x60>)
 8002b10:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002b14:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002b18:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002b1a:	4b0a      	ldr	r3, [pc, #40]	; (8002b44 <SystemInit+0x60>)
 8002b1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b20:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002b22:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <SystemInit+0x60>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a07      	ldr	r2, [pc, #28]	; (8002b44 <SystemInit+0x60>)
 8002b28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b2c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002b2e:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <SystemInit+0x60>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	619a      	str	r2, [r3, #24]
}
 8002b34:	bf00      	nop
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	e000ed00 	.word	0xe000ed00
 8002b44:	40021000 	.word	0x40021000

08002b48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002b48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b4c:	f7ff ffca 	bl	8002ae4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002b50:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002b52:	e003      	b.n	8002b5c <LoopCopyDataInit>

08002b54 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002b54:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002b56:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002b58:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002b5a:	3104      	adds	r1, #4

08002b5c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002b5c:	480a      	ldr	r0, [pc, #40]	; (8002b88 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002b5e:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <LoopForever+0xe>)
	adds	r2, r0, r1
 8002b60:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002b62:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002b64:	d3f6      	bcc.n	8002b54 <CopyDataInit>
	ldr	r2, =_sbss
 8002b66:	4a0a      	ldr	r2, [pc, #40]	; (8002b90 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002b68:	e002      	b.n	8002b70 <LoopFillZerobss>

08002b6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002b6a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002b6c:	f842 3b04 	str.w	r3, [r2], #4

08002b70 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002b70:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <LoopForever+0x16>)
	cmp	r2, r3
 8002b72:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002b74:	d3f9      	bcc.n	8002b6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b76:	f005 fd97 	bl	80086a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b7a:	f7fe ff3f 	bl	80019fc <main>

08002b7e <LoopForever>:

LoopForever:
    b LoopForever
 8002b7e:	e7fe      	b.n	8002b7e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002b80:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002b84:	0800b57c 	.word	0x0800b57c
	ldr	r0, =_sdata
 8002b88:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002b8c:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8002b90:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8002b94:	200005c8 	.word	0x200005c8

08002b98 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b98:	e7fe      	b.n	8002b98 <ADC1_IRQHandler>

08002b9a <CAN_Initialise>:
 */

uint8_t CAN_Initialise( CANBUS *dev, CAN_HandleTypeDef *CANHandle,
						uint16_t nodeID, uint16_t filterMASK,
						uint8_t selectFIFO, uint8_t filterBANK )
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b090      	sub	sp, #64	; 0x40
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	60f8      	str	r0, [r7, #12]
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	4611      	mov	r1, r2
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	460b      	mov	r3, r1
 8002baa:	80fb      	strh	r3, [r7, #6]
 8002bac:	4613      	mov	r3, r2
 8002bae:	80bb      	strh	r3, [r7, #4]
	dev->nodeID = nodeID;
 8002bb0:	88fb      	ldrh	r3, [r7, #6]
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	/* Set CAN device ID */
	dev->canHandle = CANHandle;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	601a      	str	r2, [r3, #0]

	CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	637b      	str	r3, [r7, #52]	; 0x34
	canfilterconfig.FilterBank = filterBANK;  // which filter bank to use from the assigned ones
 8002bc4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002bc8:	62bb      	str	r3, [r7, #40]	; 0x28
	canfilterconfig.FilterFIFOAssignment = selectFIFO;
 8002bca:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
	canfilterconfig.FilterIdHigh = (nodeID<<4)<<5;
 8002bd0:	88fb      	ldrh	r3, [r7, #6]
 8002bd2:	025b      	lsls	r3, r3, #9
 8002bd4:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterIdLow = 0;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterMaskIdHigh = filterMASK<<5;
 8002bda:	88bb      	ldrh	r3, [r7, #4]
 8002bdc:	015b      	lsls	r3, r3, #5
 8002bde:	61fb      	str	r3, [r7, #28]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8002be0:	2300      	movs	r3, #0
 8002be2:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002be4:	2300      	movs	r3, #0
 8002be6:	62fb      	str	r3, [r7, #44]	; 0x2c
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002be8:	2301      	movs	r3, #1
 8002bea:	633b      	str	r3, [r7, #48]	; 0x30
	canfilterconfig.SlaveStartFilterBank = 27;
 8002bec:	231b      	movs	r3, #27
 8002bee:	63bb      	str	r3, [r7, #56]	; 0x38
	// Max value for cut -- Only matters for F4 with slave filter banks

	HAL_CAN_ConfigFilter( dev->canHandle, &canfilterconfig );
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f107 0214 	add.w	r2, r7, #20
 8002bf8:	4611      	mov	r1, r2
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f001 fdc2 	bl	8004784 <HAL_CAN_ConfigFilter>

	dev->TXHeader.DLC = 8;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2208      	movs	r2, #8
 8002c04:	615a      	str	r2, [r3, #20]
	dev->TXHeader.IDE = CAN_ID_STD;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	60da      	str	r2, [r3, #12]
	dev->TXHeader.RTR = CAN_RTR_DATA;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	611a      	str	r2, [r3, #16]
	dev->TXHeader.TransmitGlobalTime = DISABLE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	761a      	strb	r2, [r3, #24]

	for (uint8_t i = 0; i<OTHER_NODES;i++ )
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002c1e:	e012      	b.n	8002c46 <CAN_Initialise+0xac>
	{
		// Used by driver to place messages in a buffer
		dev->RX_message_pointer[i] = 0;
 8002c20:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	4413      	add	r3, r2
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

		// Used by device to read in messages
		dev->RX_received_flag[i] = 0;
 8002c2e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	4413      	add	r3, r2
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
	for (uint8_t i = 0; i<OTHER_NODES;i++ )
 8002c3c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002c40:	3301      	adds	r3, #1
 8002c42:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002c46:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d9e8      	bls.n	8002c20 <CAN_Initialise+0x86>
	}



	// CAN Setup
	HAL_CAN_Start( dev->canHandle );
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f001 fe60 	bl	8004918 <HAL_CAN_Start>

	// Activate the notification
	HAL_CAN_ActivateNotification( dev->canHandle, CAN_IT_RX_FIFO0_MSG_PENDING );
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2102      	movs	r1, #2
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f002 f8b5 	bl	8004dce <HAL_CAN_ActivateNotification>

	return 0;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3740      	adds	r7, #64	; 0x40
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <CAN_setID>:

	return 0;
}

CAN_TX_ID CAN_setID( uint8_t source, uint8_t dest, uint8_t type )
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b085      	sub	sp, #20
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	4603      	mov	r3, r0
 8002c76:	71fb      	strb	r3, [r7, #7]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	71bb      	strb	r3, [r7, #6]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	717b      	strb	r3, [r7, #5]
	CAN_TX_ID temp;
	temp.source = source;
 8002c80:	79fb      	ldrb	r3, [r7, #7]
 8002c82:	723b      	strb	r3, [r7, #8]
	temp.dest = dest;
 8002c84:	79bb      	ldrb	r3, [r7, #6]
 8002c86:	727b      	strb	r3, [r7, #9]
	temp.type = type;
 8002c88:	797b      	ldrb	r3, [r7, #5]
 8002c8a:	72bb      	strb	r3, [r7, #10]
	return temp;
 8002c8c:	f107 030c 	add.w	r3, r7, #12
 8002c90:	f107 0208 	add.w	r2, r7, #8
 8002c94:	6812      	ldr	r2, [r2, #0]
 8002c96:	4611      	mov	r1, r2
 8002c98:	8019      	strh	r1, [r3, #0]
 8002c9a:	3302      	adds	r3, #2
 8002c9c:	0c12      	lsrs	r2, r2, #16
 8002c9e:	701a      	strb	r2, [r3, #0]
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	7b3a      	ldrb	r2, [r7, #12]
 8002ca4:	f362 0307 	bfi	r3, r2, #0, #8
 8002ca8:	7b7a      	ldrb	r2, [r7, #13]
 8002caa:	f362 230f 	bfi	r3, r2, #8, #8
 8002cae:	7bba      	ldrb	r2, [r7, #14]
 8002cb0:	f362 4317 	bfi	r3, r2, #16, #8
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <CAN_Transmit>:
 * 		Message to be sent
 * 		Length of message to be sent
 * Outputs:
 *  	Error counter -- normal running should always be zero
 */
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
 8002ccc:	70fb      	strb	r3, [r7, #3]
	// Fragmentation Step
	uint8_t no_frames = CAN_Fragment( dev, message, message_len );
 8002cce:	78fb      	ldrb	r3, [r7, #3]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 f93f 	bl	8002f58 <CAN_Fragment>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	74fb      	strb	r3, [r7, #19]

	/*
	 * Transmission step
	 * Transmit all values in TXstack on multiple messages back to back
	 */
	uint8_t errorNum = 0;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	75fb      	strb	r3, [r7, #23]

	HAL_StatusTypeDef status;
	dev->TXHeader.StdId = (uint16_t) (0x1 << 10) |(ID.type << 8) | (ID.dest << 4) | ID.source;
 8002ce2:	7abb      	ldrb	r3, [r7, #10]
 8002ce4:	021b      	lsls	r3, r3, #8
 8002ce6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002cea:	7a7b      	ldrb	r3, [r7, #9]
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	7a3a      	ldrb	r2, [r7, #8]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	605a      	str	r2, [r3, #4]
	dev->TXHeader.DLC = 8;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2208      	movs	r2, #8
 8002cfe:	615a      	str	r2, [r3, #20]
	uint8_t frame_len = 8;
 8002d00:	2308      	movs	r3, #8
 8002d02:	75bb      	strb	r3, [r7, #22]

	for (uint8_t i = 0; i < no_frames; i++) // Loop through all total number of frames
 8002d04:	2300      	movs	r3, #0
 8002d06:	757b      	strb	r3, [r7, #21]
 8002d08:	e061      	b.n	8002dce <CAN_Transmit+0x10e>
	{
		if (i == no_frames-1) // Check if this is the last frame
 8002d0a:	7d7a      	ldrb	r2, [r7, #21]
 8002d0c:	7cfb      	ldrb	r3, [r7, #19]
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d111      	bne.n	8002d38 <CAN_Transmit+0x78>
		{
			frame_len = (message_len+2)%8; // Update the frame length to fit the  data
 8002d14:	78fb      	ldrb	r3, [r7, #3]
 8002d16:	3302      	adds	r3, #2
 8002d18:	425a      	negs	r2, r3
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	f002 0207 	and.w	r2, r2, #7
 8002d22:	bf58      	it	pl
 8002d24:	4253      	negpl	r3, r2
 8002d26:	75bb      	strb	r3, [r7, #22]
			// If there are a perfect number of frames
			if (frame_len == 0)
 8002d28:	7dbb      	ldrb	r3, [r7, #22]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <CAN_Transmit+0x72>
				frame_len = 8;
 8002d2e:	2308      	movs	r3, #8
 8002d30:	75bb      	strb	r3, [r7, #22]
			dev->TXHeader.DLC = frame_len; // Update the TXHeader
 8002d32:	7dba      	ldrb	r2, [r7, #22]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	615a      	str	r2, [r3, #20]
		}

		for (uint8_t j = 0; j<frame_len ; j++ )
 8002d38:	2300      	movs	r3, #0
 8002d3a:	753b      	strb	r3, [r7, #20]
 8002d3c:	e010      	b.n	8002d60 <CAN_Transmit+0xa0>
		{
			dev->TXdata[j] = dev->TXstack[j+8*i]; // Move data from TXstack to TXdata which will be sent
 8002d3e:	7d3a      	ldrb	r2, [r7, #20]
 8002d40:	7d7b      	ldrb	r3, [r7, #21]
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	441a      	add	r2, r3
 8002d46:	7d3b      	ldrb	r3, [r7, #20]
 8002d48:	68f9      	ldr	r1, [r7, #12]
 8002d4a:	440a      	add	r2, r1
 8002d4c:	f892 1049 	ldrb.w	r1, [r2, #73]	; 0x49
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	4413      	add	r3, r2
 8002d54:	460a      	mov	r2, r1
 8002d56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		for (uint8_t j = 0; j<frame_len ; j++ )
 8002d5a:	7d3b      	ldrb	r3, [r7, #20]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	753b      	strb	r3, [r7, #20]
 8002d60:	7d3a      	ldrb	r2, [r7, #20]
 8002d62:	7dbb      	ldrb	r3, [r7, #22]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d3ea      	bcc.n	8002d3e <CAN_Transmit+0x7e>
		/*
		 * Check if there is an available mailbox to send message
		 * If there is none, wait for one to become available
		 * Can be done better (TX Interrupt)
		 */
		while (HAL_CAN_GetTxMailboxesFreeLevel( dev->canHandle ) == 0)
 8002d68:	e002      	b.n	8002d70 <CAN_Transmit+0xb0>
		{
			HAL_Delay(1);
 8002d6a:	2001      	movs	r0, #1
 8002d6c:	f000 f9da 	bl	8003124 <HAL_Delay>
		while (HAL_CAN_GetTxMailboxesFreeLevel( dev->canHandle ) == 0)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f001 fee3 	bl	8004b40 <HAL_CAN_GetTxMailboxesFreeLevel>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0f4      	beq.n	8002d6a <CAN_Transmit+0xaa>
		}

		status = HAL_CAN_AddTxMessage( dev->canHandle, &dev->TXHeader, dev->TXdata, &dev->TxMailbox );
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6818      	ldr	r0, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	1d19      	adds	r1, r3, #4
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f103 0239 	add.w	r2, r3, #57	; 0x39
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8002d94:	f001 fe04 	bl	80049a0 <HAL_CAN_AddTxMessage>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	74bb      	strb	r3, [r7, #18]
//		status = HAL_CAN_AddTxMessage( dev->canHandle, &dev->TXHeader, TXdata, &dev->TxMailbox );

		errorNum += ( status != HAL_OK );
 8002d9c:	7cbb      	ldrb	r3, [r7, #18]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	bf14      	ite	ne
 8002da2:	2301      	movne	r3, #1
 8002da4:	2300      	moveq	r3, #0
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	461a      	mov	r2, r3
 8002daa:	7dfb      	ldrb	r3, [r7, #23]
 8002dac:	4413      	add	r3, r2
 8002dae:	75fb      	strb	r3, [r7, #23]

		if (i == 0)
 8002db0:	7d7b      	ldrb	r3, [r7, #21]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d105      	bne.n	8002dc2 <CAN_Transmit+0x102>
		{
			dev->TXHeader.StdId &= ~(0x1 << 10);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	605a      	str	r2, [r3, #4]
		}

		HAL_Delay(1);
 8002dc2:	2001      	movs	r0, #1
 8002dc4:	f000 f9ae 	bl	8003124 <HAL_Delay>
	for (uint8_t i = 0; i < no_frames; i++) // Loop through all total number of frames
 8002dc8:	7d7b      	ldrb	r3, [r7, #21]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	757b      	strb	r3, [r7, #21]
 8002dce:	7d7a      	ldrb	r2, [r7, #21]
 8002dd0:	7cfb      	ldrb	r3, [r7, #19]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d399      	bcc.n	8002d0a <CAN_Transmit+0x4a>
	}
	return errorNum;
 8002dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <CAN_Receive>:

HAL_StatusTypeDef CAN_Receive( CANBUS *dev )
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
	uint8_t msgBox = 0;
 8002de8:	2300      	movs	r3, #0
 8002dea:	73fb      	strb	r3, [r7, #15]

	// If a message is the first to be transferred
	if ((dev->RXHeader.StdId>>10 & 1) == 1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	69db      	ldr	r3, [r3, #28]
 8002df0:	0a9b      	lsrs	r3, r3, #10
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d04f      	beq.n	8002e9a <CAN_Receive+0xba>
	{
		for (;msgBox < OTHER_NODES; msgBox++)
 8002dfa:	e02c      	b.n	8002e56 <CAN_Receive+0x76>
		{
			// Look for an empty message box to put message from this ID into
			if (dev->RX_message_pointer[msgBox] == 0)
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	4413      	add	r3, r2
 8002e02:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d122      	bne.n	8002e50 <CAN_Receive+0x70>
			{
//				dev->RX_message_len[msgBox] = dev->RXdata[0];
				dev->RXstack[msgBox][0] = (uint8_t) ((dev->RXHeader.StdId >> 8) & 0xFF);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	0a1a      	lsrs	r2, r3, #8
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
 8002e12:	b2d1      	uxtb	r1, r2
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	019b      	lsls	r3, r3, #6
 8002e18:	4413      	add	r3, r2
 8002e1a:	3389      	adds	r3, #137	; 0x89
 8002e1c:	460a      	mov	r2, r1
 8002e1e:	701a      	strb	r2, [r3, #0]
				dev->RXstack[msgBox][1] = (uint8_t) (dev->RXHeader.StdId & 0xFF);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69da      	ldr	r2, [r3, #28]
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
 8002e26:	b2d1      	uxtb	r1, r2
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	019b      	lsls	r3, r3, #6
 8002e2c:	4413      	add	r3, r2
 8002e2e:	338a      	adds	r3, #138	; 0x8a
 8002e30:	460a      	mov	r2, r1
 8002e32:	701a      	strb	r2, [r3, #0]
				dev->RX_message_pointer[msgBox] += 2;
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
 8002e3e:	7bfb      	ldrb	r3, [r7, #15]
 8002e40:	3202      	adds	r2, #2
 8002e42:	b2d1      	uxtb	r1, r2
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	4413      	add	r3, r2
 8002e48:	460a      	mov	r2, r1
 8002e4a:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				break;
 8002e4e:	e029      	b.n	8002ea4 <CAN_Receive+0xc4>
		for (;msgBox < OTHER_NODES; msgBox++)
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
 8002e52:	3301      	adds	r3, #1
 8002e54:	73fb      	strb	r3, [r7, #15]
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d9cf      	bls.n	8002dfc <CAN_Receive+0x1c>
 8002e5c:	e022      	b.n	8002ea4 <CAN_Receive+0xc4>
	{
		for (;msgBox < OTHER_NODES; msgBox++)
		{
			// Need to correct the header as now the message is no longer new

			if (dev->RXHeader.StdId == (uint16_t) ((dev->RXstack[msgBox][0] & 0xFB)<<8 | dev->RXstack[msgBox][1]))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69da      	ldr	r2, [r3, #28]
 8002e62:	7bfb      	ldrb	r3, [r7, #15]
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	019b      	lsls	r3, r3, #6
 8002e68:	440b      	add	r3, r1
 8002e6a:	3389      	adds	r3, #137	; 0x89
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	021b      	lsls	r3, r3, #8
 8002e70:	b21b      	sxth	r3, r3
 8002e72:	f423 639f 	bic.w	r3, r3, #1272	; 0x4f8
 8002e76:	f023 0307 	bic.w	r3, r3, #7
 8002e7a:	b219      	sxth	r1, r3
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	019b      	lsls	r3, r3, #6
 8002e82:	4403      	add	r3, r0
 8002e84:	338a      	adds	r3, #138	; 0x8a
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	b21b      	sxth	r3, r3
 8002e8a:	430b      	orrs	r3, r1
 8002e8c:	b21b      	sxth	r3, r3
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d006      	beq.n	8002ea2 <CAN_Receive+0xc2>
		for (;msgBox < OTHER_NODES; msgBox++)
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
 8002e96:	3301      	adds	r3, #1
 8002e98:	73fb      	strb	r3, [r7, #15]
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d9de      	bls.n	8002e5e <CAN_Receive+0x7e>
 8002ea0:	e000      	b.n	8002ea4 <CAN_Receive+0xc4>
				break;
 8002ea2:	bf00      	nop
		}
	}

	if (msgBox == OTHER_NODES)
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d101      	bne.n	8002eae <CAN_Receive+0xce>
	{
		return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e04e      	b.n	8002f4c <CAN_Receive+0x16c>
	}

	// Not handling case with no information
	for ( uint8_t i = 0; i < dev->RXHeader.DLC; i++ )
 8002eae:	2300      	movs	r3, #0
 8002eb0:	73bb      	strb	r3, [r7, #14]
 8002eb2:	e021      	b.n	8002ef8 <CAN_Receive+0x118>
	{
		dev->RXstack[msgBox][dev->RX_message_pointer[msgBox]] = dev->RXdata[i];
 8002eb4:	7bba      	ldrb	r2, [r7, #14]
 8002eb6:	7bfb      	ldrb	r3, [r7, #15]
 8002eb8:	7bf9      	ldrb	r1, [r7, #15]
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	4401      	add	r1, r0
 8002ebe:	f891 1110 	ldrb.w	r1, [r1, #272]	; 0x110
 8002ec2:	4608      	mov	r0, r1
 8002ec4:	6879      	ldr	r1, [r7, #4]
 8002ec6:	440a      	add	r2, r1
 8002ec8:	f892 1041 	ldrb.w	r1, [r2, #65]	; 0x41
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	019b      	lsls	r3, r3, #6
 8002ed0:	4413      	add	r3, r2
 8002ed2:	4403      	add	r3, r0
 8002ed4:	3389      	adds	r3, #137	; 0x89
 8002ed6:	460a      	mov	r2, r1
 8002ed8:	701a      	strb	r2, [r3, #0]
		dev->RX_message_pointer[msgBox]++;
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	441a      	add	r2, r3
 8002ee0:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
 8002ee4:	3201      	adds	r2, #1
 8002ee6:	b2d1      	uxtb	r1, r2
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	4413      	add	r3, r2
 8002eec:	460a      	mov	r2, r1
 8002eee:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
	for ( uint8_t i = 0; i < dev->RXHeader.DLC; i++ )
 8002ef2:	7bbb      	ldrb	r3, [r7, #14]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	73bb      	strb	r3, [r7, #14]
 8002ef8:	7bba      	ldrb	r2, [r7, #14]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d3d8      	bcc.n	8002eb4 <CAN_Receive+0xd4>
	}

	// Check if message has been fully received
	if (dev->RX_message_pointer[msgBox] > dev->RXstack[msgBox][2] + 3){
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	4413      	add	r3, r2
 8002f08:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	019b      	lsls	r3, r3, #6
 8002f14:	4413      	add	r3, r2
 8002f16:	338b      	adds	r3, #139	; 0x8b
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	3303      	adds	r3, #3
 8002f1c:	4299      	cmp	r1, r3
 8002f1e:	dd14      	ble.n	8002f4a <CAN_Receive+0x16a>
		// Check if message was received including termination character
		if (dev->RXstack[msgBox][dev->RX_message_pointer[msgBox]-1] == 0xFF)
 8002f20:	7bfa      	ldrb	r2, [r7, #15]
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	440b      	add	r3, r1
 8002f28:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	0192      	lsls	r2, r2, #6
 8002f32:	440a      	add	r2, r1
 8002f34:	4413      	add	r3, r2
 8002f36:	3389      	adds	r3, #137	; 0x89
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2bff      	cmp	r3, #255	; 0xff
 8002f3c:	d105      	bne.n	8002f4a <CAN_Receive+0x16a>
		{
			// Raise flag to say message can be read
			dev->RX_received_flag[msgBox] = 1;
 8002f3e:	7bfb      	ldrb	r3, [r7, #15]
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	4413      	add	r3, r2
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
//			dev->RX_message_pointer[msgBox] = 0;
		}
		// Need to create else error handling -- may leave as out of scope
	}
	return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <CAN_Fragment>:
 * 		CAN Bus object, message and message length
 * Outputs:
 * 		Updates CAN Bus object
 * 		Returns the number of frames that will be sent
 */
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b087      	sub	sp, #28
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	4613      	mov	r3, r2
 8002f64:	71fb      	strb	r3, [r7, #7]
	 * Take in a message, puts it into an understandable format
	 * Returns the number of 8 byte frames required
	*/

	// Set first value of message to number of bytes being transmitted
	dev->TXstack[0] = message_len;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	79fa      	ldrb	r2, [r7, #7]
 8002f6a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

	uint8_t i = 0;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	75fb      	strb	r3, [r7, #23]
	// Fill following bytes with information in message
	for (; i < message_len; i++)
 8002f72:	e00d      	b.n	8002f90 <CAN_Fragment+0x38>
	{
		dev->TXstack[i+1] = message[i];
 8002f74:	7dfb      	ldrb	r3, [r7, #23]
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	441a      	add	r2, r3
 8002f7a:	7dfb      	ldrb	r3, [r7, #23]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	7811      	ldrb	r1, [r2, #0]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	4413      	add	r3, r2
 8002f84:	460a      	mov	r2, r1
 8002f86:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	for (; i < message_len; i++)
 8002f8a:	7dfb      	ldrb	r3, [r7, #23]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	75fb      	strb	r3, [r7, #23]
 8002f90:	7dfa      	ldrb	r2, [r7, #23]
 8002f92:	79fb      	ldrb	r3, [r7, #7]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d3ed      	bcc.n	8002f74 <CAN_Fragment+0x1c>
	}
	// Add end character
	dev->TXstack[i+1] = 0xFF;
 8002f98:	7dfb      	ldrb	r3, [r7, #23]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	22ff      	movs	r2, #255	; 0xff
 8002fa2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	i += 2;
 8002fa6:	7dfb      	ldrb	r3, [r7, #23]
 8002fa8:	3302      	adds	r3, #2
 8002faa:	75fb      	strb	r3, [r7, #23]

	return (i/8 + (i%8 > 0));
 8002fac:	7dfb      	ldrb	r3, [r7, #23]
 8002fae:	08db      	lsrs	r3, r3, #3
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	7dfa      	ldrb	r2, [r7, #23]
 8002fb4:	f002 0207 	and.w	r2, r2, #7
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	2a00      	cmp	r2, #0
 8002fbc:	bf14      	ite	ne
 8002fbe:	2201      	movne	r2, #1
 8002fc0:	2200      	moveq	r2, #0
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	b2db      	uxtb	r3, r3
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	371c      	adds	r7, #28
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <CAN_CLEAR>:

void CAN_CLEAR( CANBUS *dev, uint8_t buffer )
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	70fb      	strb	r3, [r7, #3]
	for (; dev->RX_message_pointer[buffer] > 0 ; dev->RX_message_pointer[buffer]--)
 8002fe0:	e019      	b.n	8003016 <CAN_CLEAR+0x42>
	{
		dev->RXstack[buffer][dev->RX_message_pointer[buffer]-1] = 0;
 8002fe2:	78fa      	ldrb	r2, [r7, #3]
 8002fe4:	78fb      	ldrb	r3, [r7, #3]
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	440b      	add	r3, r1
 8002fea:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	0192      	lsls	r2, r2, #6
 8002ff4:	440a      	add	r2, r1
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3389      	adds	r3, #137	; 0x89
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	701a      	strb	r2, [r3, #0]
	for (; dev->RX_message_pointer[buffer] > 0 ; dev->RX_message_pointer[buffer]--)
 8002ffe:	78fb      	ldrb	r3, [r7, #3]
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	441a      	add	r2, r3
 8003004:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
 8003008:	3a01      	subs	r2, #1
 800300a:	b2d1      	uxtb	r1, r2
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	4413      	add	r3, r2
 8003010:	460a      	mov	r2, r1
 8003012:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 8003016:	78fb      	ldrb	r3, [r7, #3]
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	4413      	add	r3, r2
 800301c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1de      	bne.n	8002fe2 <CAN_CLEAR+0xe>
	}
	dev->RX_received_flag[buffer] = 0;
 8003024:	78fb      	ldrb	r3, [r7, #3]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	4413      	add	r3, r2
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003042:	2300      	movs	r3, #0
 8003044:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003046:	2003      	movs	r0, #3
 8003048:	f002 f9e6 	bl	8005418 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800304c:	2000      	movs	r0, #0
 800304e:	f000 f80d 	bl	800306c <HAL_InitTick>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d002      	beq.n	800305e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	71fb      	strb	r3, [r7, #7]
 800305c:	e001      	b.n	8003062 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800305e:	f7ff fa8f 	bl	8002580 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003062:	79fb      	ldrb	r3, [r7, #7]
}
 8003064:	4618      	mov	r0, r3
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003074:	2300      	movs	r3, #0
 8003076:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003078:	4b17      	ldr	r3, [pc, #92]	; (80030d8 <HAL_InitTick+0x6c>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d023      	beq.n	80030c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003080:	4b16      	ldr	r3, [pc, #88]	; (80030dc <HAL_InitTick+0x70>)
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	4b14      	ldr	r3, [pc, #80]	; (80030d8 <HAL_InitTick+0x6c>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	4619      	mov	r1, r3
 800308a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800308e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003092:	fbb2 f3f3 	udiv	r3, r2, r3
 8003096:	4618      	mov	r0, r3
 8003098:	f002 f9f3 	bl	8005482 <HAL_SYSTICK_Config>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10f      	bne.n	80030c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b0f      	cmp	r3, #15
 80030a6:	d809      	bhi.n	80030bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030a8:	2200      	movs	r2, #0
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	f04f 30ff 	mov.w	r0, #4294967295
 80030b0:	f002 f9bd 	bl	800542e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80030b4:	4a0a      	ldr	r2, [pc, #40]	; (80030e0 <HAL_InitTick+0x74>)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	e007      	b.n	80030cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	73fb      	strb	r3, [r7, #15]
 80030c0:	e004      	b.n	80030cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	73fb      	strb	r3, [r7, #15]
 80030c6:	e001      	b.n	80030cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	20000008 	.word	0x20000008
 80030dc:	20000000 	.word	0x20000000
 80030e0:	20000004 	.word	0x20000004

080030e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80030e8:	4b06      	ldr	r3, [pc, #24]	; (8003104 <HAL_IncTick+0x20>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	461a      	mov	r2, r3
 80030ee:	4b06      	ldr	r3, [pc, #24]	; (8003108 <HAL_IncTick+0x24>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4413      	add	r3, r2
 80030f4:	4a04      	ldr	r2, [pc, #16]	; (8003108 <HAL_IncTick+0x24>)
 80030f6:	6013      	str	r3, [r2, #0]
}
 80030f8:	bf00      	nop
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	20000008 	.word	0x20000008
 8003108:	200005b4 	.word	0x200005b4

0800310c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  return uwTick;
 8003110:	4b03      	ldr	r3, [pc, #12]	; (8003120 <HAL_GetTick+0x14>)
 8003112:	681b      	ldr	r3, [r3, #0]
}
 8003114:	4618      	mov	r0, r3
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	200005b4 	.word	0x200005b4

08003124 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800312c:	f7ff ffee 	bl	800310c <HAL_GetTick>
 8003130:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313c:	d005      	beq.n	800314a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800313e:	4b0a      	ldr	r3, [pc, #40]	; (8003168 <HAL_Delay+0x44>)
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	461a      	mov	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4413      	add	r3, r2
 8003148:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800314a:	bf00      	nop
 800314c:	f7ff ffde 	bl	800310c <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	429a      	cmp	r2, r3
 800315a:	d8f7      	bhi.n	800314c <HAL_Delay+0x28>
  {
  }
}
 800315c:	bf00      	nop
 800315e:	bf00      	nop
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	20000008 	.word	0x20000008

0800316c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	431a      	orrs	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	609a      	str	r2, [r3, #8]
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
 800319a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	609a      	str	r2, [r3, #8]
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b087      	sub	sp, #28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
 80031e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	3360      	adds	r3, #96	; 0x60
 80031e6:	461a      	mov	r2, r3
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	4b08      	ldr	r3, [pc, #32]	; (8003218 <LL_ADC_SetOffset+0x44>)
 80031f6:	4013      	ands	r3, r2
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	4313      	orrs	r3, r2
 8003204:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800320c:	bf00      	nop
 800320e:	371c      	adds	r7, #28
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	03fff000 	.word	0x03fff000

0800321c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	3360      	adds	r3, #96	; 0x60
 800322a:	461a      	mov	r2, r3
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800323c:	4618      	mov	r0, r3
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003248:	b480      	push	{r7}
 800324a:	b087      	sub	sp, #28
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	3360      	adds	r3, #96	; 0x60
 8003258:	461a      	mov	r2, r3
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	431a      	orrs	r2, r3
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003272:	bf00      	nop
 8003274:	371c      	adds	r7, #28
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800327e:	b480      	push	{r7}
 8003280:	b083      	sub	sp, #12
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003292:	2301      	movs	r3, #1
 8003294:	e000      	b.n	8003298 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b087      	sub	sp, #28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	3330      	adds	r3, #48	; 0x30
 80032b4:	461a      	mov	r2, r3
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	0a1b      	lsrs	r3, r3, #8
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	f003 030c 	and.w	r3, r3, #12
 80032c0:	4413      	add	r3, r2
 80032c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f003 031f 	and.w	r3, r3, #31
 80032ce:	211f      	movs	r1, #31
 80032d0:	fa01 f303 	lsl.w	r3, r1, r3
 80032d4:	43db      	mvns	r3, r3
 80032d6:	401a      	ands	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	0e9b      	lsrs	r3, r3, #26
 80032dc:	f003 011f 	and.w	r1, r3, #31
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	f003 031f 	and.w	r3, r3, #31
 80032e6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ea:	431a      	orrs	r2, r3
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80032f0:	bf00      	nop
 80032f2:	371c      	adds	r7, #28
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b087      	sub	sp, #28
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	3314      	adds	r3, #20
 800330c:	461a      	mov	r2, r3
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	0e5b      	lsrs	r3, r3, #25
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	4413      	add	r3, r2
 800331a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	0d1b      	lsrs	r3, r3, #20
 8003324:	f003 031f 	and.w	r3, r3, #31
 8003328:	2107      	movs	r1, #7
 800332a:	fa01 f303 	lsl.w	r3, r1, r3
 800332e:	43db      	mvns	r3, r3
 8003330:	401a      	ands	r2, r3
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	0d1b      	lsrs	r3, r3, #20
 8003336:	f003 031f 	and.w	r3, r3, #31
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	fa01 f303 	lsl.w	r3, r1, r3
 8003340:	431a      	orrs	r2, r3
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003346:	bf00      	nop
 8003348:	371c      	adds	r7, #28
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
	...

08003354 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800336c:	43db      	mvns	r3, r3
 800336e:	401a      	ands	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f003 0318 	and.w	r3, r3, #24
 8003376:	4908      	ldr	r1, [pc, #32]	; (8003398 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003378:	40d9      	lsrs	r1, r3
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	400b      	ands	r3, r1
 800337e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003382:	431a      	orrs	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800338a:	bf00      	nop
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	0007ffff 	.word	0x0007ffff

0800339c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80033ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6093      	str	r3, [r2, #8]
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033d4:	d101      	bne.n	80033da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80033d6:	2301      	movs	r3, #1
 80033d8:	e000      	b.n	80033dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80033f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003420:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003424:	d101      	bne.n	800342a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003426:	2301      	movs	r3, #1
 8003428:	e000      	b.n	800342c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003448:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800344c:	f043 0201 	orr.w	r2, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003470:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003474:	f043 0202 	orr.w	r2, r3, #2
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b01      	cmp	r3, #1
 800349a:	d101      	bne.n	80034a0 <LL_ADC_IsEnabled+0x18>
 800349c:	2301      	movs	r3, #1
 800349e:	e000      	b.n	80034a2 <LL_ADC_IsEnabled+0x1a>
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80034ae:	b480      	push	{r7}
 80034b0:	b083      	sub	sp, #12
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d101      	bne.n	80034c6 <LL_ADC_IsDisableOngoing+0x18>
 80034c2:	2301      	movs	r3, #1
 80034c4:	e000      	b.n	80034c8 <LL_ADC_IsDisableOngoing+0x1a>
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80034e8:	f043 0204 	orr.w	r2, r3, #4
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800350c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003510:	f043 0210 	orr.w	r2, r3, #16
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b04      	cmp	r3, #4
 8003536:	d101      	bne.n	800353c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800355a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800355e:	f043 0220 	orr.w	r2, r3, #32
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 0308 	and.w	r3, r3, #8
 8003582:	2b08      	cmp	r3, #8
 8003584:	d101      	bne.n	800358a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b088      	sub	sp, #32
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035a0:	2300      	movs	r3, #0
 80035a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80035a4:	2300      	movs	r3, #0
 80035a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e12c      	b.n	800380c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d109      	bne.n	80035d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f7ff f801 	bl	80025c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff fef1 	bl	80033c0 <LL_ADC_IsDeepPowerDownEnabled>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d004      	beq.n	80035ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff fed7 	bl	800339c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7ff ff0c 	bl	8003410 <LL_ADC_IsInternalRegulatorEnabled>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d115      	bne.n	800362a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff fef0 	bl	80033e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003608:	4b82      	ldr	r3, [pc, #520]	; (8003814 <HAL_ADC_Init+0x27c>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	099b      	lsrs	r3, r3, #6
 800360e:	4a82      	ldr	r2, [pc, #520]	; (8003818 <HAL_ADC_Init+0x280>)
 8003610:	fba2 2303 	umull	r2, r3, r2, r3
 8003614:	099b      	lsrs	r3, r3, #6
 8003616:	3301      	adds	r3, #1
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800361c:	e002      	b.n	8003624 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	3b01      	subs	r3, #1
 8003622:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f9      	bne.n	800361e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff feee 	bl	8003410 <LL_ADC_IsInternalRegulatorEnabled>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10d      	bne.n	8003656 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800363e:	f043 0210 	orr.w	r2, r3, #16
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364a:	f043 0201 	orr.w	r2, r3, #1
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff ff62 	bl	8003524 <LL_ADC_REG_IsConversionOngoing>
 8003660:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003666:	f003 0310 	and.w	r3, r3, #16
 800366a:	2b00      	cmp	r3, #0
 800366c:	f040 80c5 	bne.w	80037fa <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	2b00      	cmp	r3, #0
 8003674:	f040 80c1 	bne.w	80037fa <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003680:	f043 0202 	orr.w	r2, r3, #2
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff fefb 	bl	8003488 <LL_ADC_IsEnabled>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10b      	bne.n	80036b0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003698:	4860      	ldr	r0, [pc, #384]	; (800381c <HAL_ADC_Init+0x284>)
 800369a:	f7ff fef5 	bl	8003488 <LL_ADC_IsEnabled>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d105      	bne.n	80036b0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	4619      	mov	r1, r3
 80036aa:	485d      	ldr	r0, [pc, #372]	; (8003820 <HAL_ADC_Init+0x288>)
 80036ac:	f7ff fd5e 	bl	800316c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	7e5b      	ldrb	r3, [r3, #25]
 80036b4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036ba:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80036c0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80036c6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036ce:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036d0:	4313      	orrs	r3, r2
 80036d2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d106      	bne.n	80036ec <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e2:	3b01      	subs	r3, #1
 80036e4:	045b      	lsls	r3, r3, #17
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d009      	beq.n	8003708 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003700:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	4313      	orrs	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	4b45      	ldr	r3, [pc, #276]	; (8003824 <HAL_ADC_Init+0x28c>)
 8003710:	4013      	ands	r3, r2
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	6812      	ldr	r2, [r2, #0]
 8003716:	69b9      	ldr	r1, [r7, #24]
 8003718:	430b      	orrs	r3, r1
 800371a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff feff 	bl	8003524 <LL_ADC_REG_IsConversionOngoing>
 8003726:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff ff20 	bl	8003572 <LL_ADC_INJ_IsConversionOngoing>
 8003732:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d13d      	bne.n	80037b6 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d13a      	bne.n	80037b6 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003744:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800374c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800374e:	4313      	orrs	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800375c:	f023 0302 	bic.w	r3, r3, #2
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6812      	ldr	r2, [r2, #0]
 8003764:	69b9      	ldr	r1, [r7, #24]
 8003766:	430b      	orrs	r3, r1
 8003768:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003770:	2b01      	cmp	r3, #1
 8003772:	d118      	bne.n	80037a6 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800377e:	f023 0304 	bic.w	r3, r3, #4
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800378a:	4311      	orrs	r1, r2
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003790:	4311      	orrs	r1, r2
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003796:	430a      	orrs	r2, r1
 8003798:	431a      	orrs	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0201 	orr.w	r2, r2, #1
 80037a2:	611a      	str	r2, [r3, #16]
 80037a4:	e007      	b.n	80037b6 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	691a      	ldr	r2, [r3, #16]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0201 	bic.w	r2, r2, #1
 80037b4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d10c      	bne.n	80037d8 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c4:	f023 010f 	bic.w	r1, r3, #15
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	1e5a      	subs	r2, r3, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	631a      	str	r2, [r3, #48]	; 0x30
 80037d6:	e007      	b.n	80037e8 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 020f 	bic.w	r2, r2, #15
 80037e6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ec:	f023 0303 	bic.w	r3, r3, #3
 80037f0:	f043 0201 	orr.w	r2, r3, #1
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	655a      	str	r2, [r3, #84]	; 0x54
 80037f8:	e007      	b.n	800380a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fe:	f043 0210 	orr.w	r2, r3, #16
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800380a:	7ffb      	ldrb	r3, [r7, #31]
}
 800380c:	4618      	mov	r0, r3
 800380e:	3720      	adds	r7, #32
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	20000000 	.word	0x20000000
 8003818:	053e2d63 	.word	0x053e2d63
 800381c:	50040000 	.word	0x50040000
 8003820:	50040300 	.word	0x50040300
 8003824:	fff0c007 	.word	0xfff0c007

08003828 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4618      	mov	r0, r3
 8003836:	f7ff fe75 	bl	8003524 <LL_ADC_REG_IsConversionOngoing>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d14f      	bne.n	80038e0 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003846:	2b01      	cmp	r3, #1
 8003848:	d101      	bne.n	800384e <HAL_ADC_Start+0x26>
 800384a:	2302      	movs	r3, #2
 800384c:	e04b      	b.n	80038e6 <HAL_ADC_Start+0xbe>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 fdb4 	bl	80043c4 <ADC_Enable>
 800385c:	4603      	mov	r3, r0
 800385e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003860:	7bfb      	ldrb	r3, [r7, #15]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d137      	bne.n	80038d6 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800386e:	f023 0301 	bic.w	r3, r3, #1
 8003872:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800387e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003886:	d106      	bne.n	8003896 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388c:	f023 0206 	bic.w	r2, r3, #6
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	659a      	str	r2, [r3, #88]	; 0x58
 8003894:	e002      	b.n	800389c <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	221c      	movs	r2, #28
 80038a2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d007      	beq.n	80038ca <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80038c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff fe00 	bl	80034d4 <LL_ADC_REG_StartConversion>
 80038d4:	e006      	b.n	80038e4 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80038de:	e001      	b.n	80038e4 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80038e0:	2302      	movs	r3, #2
 80038e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b084      	sub	sp, #16
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d101      	bne.n	8003904 <HAL_ADC_Stop+0x16>
 8003900:	2302      	movs	r3, #2
 8003902:	e023      	b.n	800394c <HAL_ADC_Stop+0x5e>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800390c:	2103      	movs	r1, #3
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 fc9c 	bl	800424c <ADC_ConversionStop>
 8003914:	4603      	mov	r3, r0
 8003916:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003918:	7bfb      	ldrb	r3, [r7, #15]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d111      	bne.n	8003942 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 fdd6 	bl	80044d0 <ADC_Disable>
 8003924:	4603      	mov	r3, r0
 8003926:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003928:	7bfb      	ldrb	r3, [r7, #15]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d109      	bne.n	8003942 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003932:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003936:	f023 0301 	bic.w	r3, r3, #1
 800393a:	f043 0201 	orr.w	r2, r3, #1
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800394a:	7bfb      	ldrb	r3, [r7, #15]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	2b08      	cmp	r3, #8
 8003964:	d102      	bne.n	800396c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003966:	2308      	movs	r3, #8
 8003968:	617b      	str	r3, [r7, #20]
 800396a:	e010      	b.n	800398e <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d007      	beq.n	800398a <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800397e:	f043 0220 	orr.w	r2, r3, #32
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e06f      	b.n	8003a6a <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800398a:	2304      	movs	r3, #4
 800398c:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800398e:	f7ff fbbd 	bl	800310c <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003994:	e021      	b.n	80039da <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800399c:	d01d      	beq.n	80039da <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800399e:	f7ff fbb5 	bl	800310c <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d302      	bcc.n	80039b4 <HAL_ADC_PollForConversion+0x60>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d112      	bne.n	80039da <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	4013      	ands	r3, r2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10b      	bne.n	80039da <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c6:	f043 0204 	orr.w	r2, r3, #4
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e047      	b.n	8003a6a <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	4013      	ands	r3, r2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0d6      	beq.n	8003996 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7ff fc40 	bl	800327e <LL_ADC_REG_IsTriggerSourceSWStart>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d01c      	beq.n	8003a3e <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	7e5b      	ldrb	r3, [r3, #25]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d118      	bne.n	8003a3e <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b08      	cmp	r3, #8
 8003a18:	d111      	bne.n	8003a3e <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d105      	bne.n	8003a3e <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a36:	f043 0201 	orr.w	r2, r3, #1
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	d104      	bne.n	8003a56 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2208      	movs	r2, #8
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	e008      	b.n	8003a68 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d103      	bne.n	8003a68 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	220c      	movs	r2, #12
 8003a66:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3718      	adds	r7, #24
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b0b6      	sub	sp, #216	; 0xd8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a96:	2300      	movs	r3, #0
 8003a98:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d101      	bne.n	8003aae <HAL_ADC_ConfigChannel+0x22>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e3b9      	b.n	8004222 <HAL_ADC_ConfigChannel+0x796>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7ff fd32 	bl	8003524 <LL_ADC_REG_IsConversionOngoing>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f040 839e 	bne.w	8004204 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2b05      	cmp	r3, #5
 8003ace:	d824      	bhi.n	8003b1a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	3b02      	subs	r3, #2
 8003ad6:	2b03      	cmp	r3, #3
 8003ad8:	d81b      	bhi.n	8003b12 <HAL_ADC_ConfigChannel+0x86>
 8003ada:	a201      	add	r2, pc, #4	; (adr r2, 8003ae0 <HAL_ADC_ConfigChannel+0x54>)
 8003adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae0:	08003af1 	.word	0x08003af1
 8003ae4:	08003af9 	.word	0x08003af9
 8003ae8:	08003b01 	.word	0x08003b01
 8003aec:	08003b09 	.word	0x08003b09
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	220c      	movs	r2, #12
 8003af4:	605a      	str	r2, [r3, #4]
          break;
 8003af6:	e011      	b.n	8003b1c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	2212      	movs	r2, #18
 8003afc:	605a      	str	r2, [r3, #4]
          break;
 8003afe:	e00d      	b.n	8003b1c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	2218      	movs	r2, #24
 8003b04:	605a      	str	r2, [r3, #4]
          break;
 8003b06:	e009      	b.n	8003b1c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b0e:	605a      	str	r2, [r3, #4]
          break;
 8003b10:	e004      	b.n	8003b1c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2206      	movs	r2, #6
 8003b16:	605a      	str	r2, [r3, #4]
          break;
 8003b18:	e000      	b.n	8003b1c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003b1a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6818      	ldr	r0, [r3, #0]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	6859      	ldr	r1, [r3, #4]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	461a      	mov	r2, r3
 8003b2a:	f7ff fbbb 	bl	80032a4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7ff fcf6 	bl	8003524 <LL_ADC_REG_IsConversionOngoing>
 8003b38:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7ff fd16 	bl	8003572 <LL_ADC_INJ_IsConversionOngoing>
 8003b46:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b4a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f040 81a6 	bne.w	8003ea0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f040 81a1 	bne.w	8003ea0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6818      	ldr	r0, [r3, #0]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	6819      	ldr	r1, [r3, #0]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	f7ff fbc6 	bl	80032fc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	695a      	ldr	r2, [r3, #20]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	08db      	lsrs	r3, r3, #3
 8003b7c:	f003 0303 	and.w	r3, r3, #3
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	fa02 f303 	lsl.w	r3, r2, r3
 8003b86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d00a      	beq.n	8003ba8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6818      	ldr	r0, [r3, #0]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	6919      	ldr	r1, [r3, #16]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ba2:	f7ff fb17 	bl	80031d4 <LL_ADC_SetOffset>
 8003ba6:	e17b      	b.n	8003ea0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2100      	movs	r1, #0
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7ff fb34 	bl	800321c <LL_ADC_GetOffsetChannel>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10a      	bne.n	8003bd4 <HAL_ADC_ConfigChannel+0x148>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7ff fb29 	bl	800321c <LL_ADC_GetOffsetChannel>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	0e9b      	lsrs	r3, r3, #26
 8003bce:	f003 021f 	and.w	r2, r3, #31
 8003bd2:	e01e      	b.n	8003c12 <HAL_ADC_ConfigChannel+0x186>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2100      	movs	r1, #0
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff fb1e 	bl	800321c <LL_ADC_GetOffsetChannel>
 8003be0:	4603      	mov	r3, r0
 8003be2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003bea:	fa93 f3a3 	rbit	r3, r3
 8003bee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003bf2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003bf6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003bfa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003c02:	2320      	movs	r3, #32
 8003c04:	e004      	b.n	8003c10 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003c06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c0a:	fab3 f383 	clz	r3, r3
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d105      	bne.n	8003c2a <HAL_ADC_ConfigChannel+0x19e>
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	0e9b      	lsrs	r3, r3, #26
 8003c24:	f003 031f 	and.w	r3, r3, #31
 8003c28:	e018      	b.n	8003c5c <HAL_ADC_ConfigChannel+0x1d0>
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003c36:	fa93 f3a3 	rbit	r3, r3
 8003c3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003c3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003c46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003c4e:	2320      	movs	r3, #32
 8003c50:	e004      	b.n	8003c5c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003c52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c56:	fab3 f383 	clz	r3, r3
 8003c5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d106      	bne.n	8003c6e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2200      	movs	r2, #0
 8003c66:	2100      	movs	r1, #0
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff faed 	bl	8003248 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2101      	movs	r1, #1
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7ff fad1 	bl	800321c <LL_ADC_GetOffsetChannel>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10a      	bne.n	8003c9a <HAL_ADC_ConfigChannel+0x20e>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2101      	movs	r1, #1
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7ff fac6 	bl	800321c <LL_ADC_GetOffsetChannel>
 8003c90:	4603      	mov	r3, r0
 8003c92:	0e9b      	lsrs	r3, r3, #26
 8003c94:	f003 021f 	and.w	r2, r3, #31
 8003c98:	e01e      	b.n	8003cd8 <HAL_ADC_ConfigChannel+0x24c>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7ff fabb 	bl	800321c <LL_ADC_GetOffsetChannel>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003cb0:	fa93 f3a3 	rbit	r3, r3
 8003cb4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003cb8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003cbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003cc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003cc8:	2320      	movs	r3, #32
 8003cca:	e004      	b.n	8003cd6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003ccc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003cd0:	fab3 f383 	clz	r3, r3
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d105      	bne.n	8003cf0 <HAL_ADC_ConfigChannel+0x264>
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	0e9b      	lsrs	r3, r3, #26
 8003cea:	f003 031f 	and.w	r3, r3, #31
 8003cee:	e018      	b.n	8003d22 <HAL_ADC_ConfigChannel+0x296>
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cfc:	fa93 f3a3 	rbit	r3, r3
 8003d00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003d04:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003d08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003d0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003d14:	2320      	movs	r3, #32
 8003d16:	e004      	b.n	8003d22 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003d18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d1c:	fab3 f383 	clz	r3, r3
 8003d20:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d106      	bne.n	8003d34 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff fa8a 	bl	8003248 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2102      	movs	r1, #2
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7ff fa6e 	bl	800321c <LL_ADC_GetOffsetChannel>
 8003d40:	4603      	mov	r3, r0
 8003d42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10a      	bne.n	8003d60 <HAL_ADC_ConfigChannel+0x2d4>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2102      	movs	r1, #2
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7ff fa63 	bl	800321c <LL_ADC_GetOffsetChannel>
 8003d56:	4603      	mov	r3, r0
 8003d58:	0e9b      	lsrs	r3, r3, #26
 8003d5a:	f003 021f 	and.w	r2, r3, #31
 8003d5e:	e01e      	b.n	8003d9e <HAL_ADC_ConfigChannel+0x312>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2102      	movs	r1, #2
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7ff fa58 	bl	800321c <LL_ADC_GetOffsetChannel>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d76:	fa93 f3a3 	rbit	r3, r3
 8003d7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003d7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003d86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003d8e:	2320      	movs	r3, #32
 8003d90:	e004      	b.n	8003d9c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003d92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d96:	fab3 f383 	clz	r3, r3
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d105      	bne.n	8003db6 <HAL_ADC_ConfigChannel+0x32a>
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	0e9b      	lsrs	r3, r3, #26
 8003db0:	f003 031f 	and.w	r3, r3, #31
 8003db4:	e016      	b.n	8003de4 <HAL_ADC_ConfigChannel+0x358>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dbe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003dc2:	fa93 f3a3 	rbit	r3, r3
 8003dc6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003dc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003dca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003dce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003dd6:	2320      	movs	r3, #32
 8003dd8:	e004      	b.n	8003de4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003dda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003dde:	fab3 f383 	clz	r3, r3
 8003de2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d106      	bne.n	8003df6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2200      	movs	r2, #0
 8003dee:	2102      	movs	r1, #2
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7ff fa29 	bl	8003248 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2103      	movs	r1, #3
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff fa0d 	bl	800321c <LL_ADC_GetOffsetChannel>
 8003e02:	4603      	mov	r3, r0
 8003e04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10a      	bne.n	8003e22 <HAL_ADC_ConfigChannel+0x396>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2103      	movs	r1, #3
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7ff fa02 	bl	800321c <LL_ADC_GetOffsetChannel>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	0e9b      	lsrs	r3, r3, #26
 8003e1c:	f003 021f 	and.w	r2, r3, #31
 8003e20:	e017      	b.n	8003e52 <HAL_ADC_ConfigChannel+0x3c6>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2103      	movs	r1, #3
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff f9f7 	bl	800321c <LL_ADC_GetOffsetChannel>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e34:	fa93 f3a3 	rbit	r3, r3
 8003e38:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003e3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e3c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003e3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003e44:	2320      	movs	r3, #32
 8003e46:	e003      	b.n	8003e50 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003e48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e4a:	fab3 f383 	clz	r3, r3
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d105      	bne.n	8003e6a <HAL_ADC_ConfigChannel+0x3de>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	0e9b      	lsrs	r3, r3, #26
 8003e64:	f003 031f 	and.w	r3, r3, #31
 8003e68:	e011      	b.n	8003e8e <HAL_ADC_ConfigChannel+0x402>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e72:	fa93 f3a3 	rbit	r3, r3
 8003e76:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003e78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e7a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003e82:	2320      	movs	r3, #32
 8003e84:	e003      	b.n	8003e8e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003e86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e88:	fab3 f383 	clz	r3, r3
 8003e8c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d106      	bne.n	8003ea0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2200      	movs	r2, #0
 8003e98:	2103      	movs	r1, #3
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7ff f9d4 	bl	8003248 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7ff faef 	bl	8003488 <LL_ADC_IsEnabled>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f040 813f 	bne.w	8004130 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6818      	ldr	r0, [r3, #0]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	6819      	ldr	r1, [r3, #0]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	f7ff fa48 	bl	8003354 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	4a8e      	ldr	r2, [pc, #568]	; (8004104 <HAL_ADC_ConfigChannel+0x678>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	f040 8130 	bne.w	8004130 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10b      	bne.n	8003ef8 <HAL_ADC_ConfigChannel+0x46c>
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	0e9b      	lsrs	r3, r3, #26
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	f003 031f 	and.w	r3, r3, #31
 8003eec:	2b09      	cmp	r3, #9
 8003eee:	bf94      	ite	ls
 8003ef0:	2301      	movls	r3, #1
 8003ef2:	2300      	movhi	r3, #0
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	e019      	b.n	8003f2c <HAL_ADC_ConfigChannel+0x4a0>
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f00:	fa93 f3a3 	rbit	r3, r3
 8003f04:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003f06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f08:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003f0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003f10:	2320      	movs	r3, #32
 8003f12:	e003      	b.n	8003f1c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003f14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f16:	fab3 f383 	clz	r3, r3
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	f003 031f 	and.w	r3, r3, #31
 8003f22:	2b09      	cmp	r3, #9
 8003f24:	bf94      	ite	ls
 8003f26:	2301      	movls	r3, #1
 8003f28:	2300      	movhi	r3, #0
 8003f2a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d079      	beq.n	8004024 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d107      	bne.n	8003f4c <HAL_ADC_ConfigChannel+0x4c0>
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	0e9b      	lsrs	r3, r3, #26
 8003f42:	3301      	adds	r3, #1
 8003f44:	069b      	lsls	r3, r3, #26
 8003f46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f4a:	e015      	b.n	8003f78 <HAL_ADC_ConfigChannel+0x4ec>
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f54:	fa93 f3a3 	rbit	r3, r3
 8003f58:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f5c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003f5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003f64:	2320      	movs	r3, #32
 8003f66:	e003      	b.n	8003f70 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f6a:	fab3 f383 	clz	r3, r3
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	3301      	adds	r3, #1
 8003f72:	069b      	lsls	r3, r3, #26
 8003f74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d109      	bne.n	8003f98 <HAL_ADC_ConfigChannel+0x50c>
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	0e9b      	lsrs	r3, r3, #26
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	f003 031f 	and.w	r3, r3, #31
 8003f90:	2101      	movs	r1, #1
 8003f92:	fa01 f303 	lsl.w	r3, r1, r3
 8003f96:	e017      	b.n	8003fc8 <HAL_ADC_ConfigChannel+0x53c>
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fa0:	fa93 f3a3 	rbit	r3, r3
 8003fa4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003fa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fa8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003faa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003fb0:	2320      	movs	r3, #32
 8003fb2:	e003      	b.n	8003fbc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003fb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fb6:	fab3 f383 	clz	r3, r3
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	f003 031f 	and.w	r3, r3, #31
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc8:	ea42 0103 	orr.w	r1, r2, r3
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10a      	bne.n	8003fee <HAL_ADC_ConfigChannel+0x562>
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	0e9b      	lsrs	r3, r3, #26
 8003fde:	3301      	adds	r3, #1
 8003fe0:	f003 021f 	and.w	r2, r3, #31
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	4413      	add	r3, r2
 8003fea:	051b      	lsls	r3, r3, #20
 8003fec:	e018      	b.n	8004020 <HAL_ADC_ConfigChannel+0x594>
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff6:	fa93 f3a3 	rbit	r3, r3
 8003ffa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004006:	2320      	movs	r3, #32
 8004008:	e003      	b.n	8004012 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800400a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800400c:	fab3 f383 	clz	r3, r3
 8004010:	b2db      	uxtb	r3, r3
 8004012:	3301      	adds	r3, #1
 8004014:	f003 021f 	and.w	r2, r3, #31
 8004018:	4613      	mov	r3, r2
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	4413      	add	r3, r2
 800401e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004020:	430b      	orrs	r3, r1
 8004022:	e080      	b.n	8004126 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800402c:	2b00      	cmp	r3, #0
 800402e:	d107      	bne.n	8004040 <HAL_ADC_ConfigChannel+0x5b4>
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	0e9b      	lsrs	r3, r3, #26
 8004036:	3301      	adds	r3, #1
 8004038:	069b      	lsls	r3, r3, #26
 800403a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800403e:	e015      	b.n	800406c <HAL_ADC_ConfigChannel+0x5e0>
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004048:	fa93 f3a3 	rbit	r3, r3
 800404c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800404e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004050:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8004058:	2320      	movs	r3, #32
 800405a:	e003      	b.n	8004064 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800405c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405e:	fab3 f383 	clz	r3, r3
 8004062:	b2db      	uxtb	r3, r3
 8004064:	3301      	adds	r3, #1
 8004066:	069b      	lsls	r3, r3, #26
 8004068:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004074:	2b00      	cmp	r3, #0
 8004076:	d109      	bne.n	800408c <HAL_ADC_ConfigChannel+0x600>
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	0e9b      	lsrs	r3, r3, #26
 800407e:	3301      	adds	r3, #1
 8004080:	f003 031f 	and.w	r3, r3, #31
 8004084:	2101      	movs	r1, #1
 8004086:	fa01 f303 	lsl.w	r3, r1, r3
 800408a:	e017      	b.n	80040bc <HAL_ADC_ConfigChannel+0x630>
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	fa93 f3a3 	rbit	r3, r3
 8004098:	61fb      	str	r3, [r7, #28]
  return result;
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d101      	bne.n	80040a8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80040a4:	2320      	movs	r3, #32
 80040a6:	e003      	b.n	80040b0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80040a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040aa:	fab3 f383 	clz	r3, r3
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	3301      	adds	r3, #1
 80040b2:	f003 031f 	and.w	r3, r3, #31
 80040b6:	2101      	movs	r1, #1
 80040b8:	fa01 f303 	lsl.w	r3, r1, r3
 80040bc:	ea42 0103 	orr.w	r1, r2, r3
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10d      	bne.n	80040e8 <HAL_ADC_ConfigChannel+0x65c>
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	0e9b      	lsrs	r3, r3, #26
 80040d2:	3301      	adds	r3, #1
 80040d4:	f003 021f 	and.w	r2, r3, #31
 80040d8:	4613      	mov	r3, r2
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	4413      	add	r3, r2
 80040de:	3b1e      	subs	r3, #30
 80040e0:	051b      	lsls	r3, r3, #20
 80040e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80040e6:	e01d      	b.n	8004124 <HAL_ADC_ConfigChannel+0x698>
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	fa93 f3a3 	rbit	r3, r3
 80040f4:	613b      	str	r3, [r7, #16]
  return result;
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d103      	bne.n	8004108 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004100:	2320      	movs	r3, #32
 8004102:	e005      	b.n	8004110 <HAL_ADC_ConfigChannel+0x684>
 8004104:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	fab3 f383 	clz	r3, r3
 800410e:	b2db      	uxtb	r3, r3
 8004110:	3301      	adds	r3, #1
 8004112:	f003 021f 	and.w	r2, r3, #31
 8004116:	4613      	mov	r3, r2
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	4413      	add	r3, r2
 800411c:	3b1e      	subs	r3, #30
 800411e:	051b      	lsls	r3, r3, #20
 8004120:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004124:	430b      	orrs	r3, r1
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	6892      	ldr	r2, [r2, #8]
 800412a:	4619      	mov	r1, r3
 800412c:	f7ff f8e6 	bl	80032fc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	4b3d      	ldr	r3, [pc, #244]	; (800422c <HAL_ADC_ConfigChannel+0x7a0>)
 8004136:	4013      	ands	r3, r2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d06c      	beq.n	8004216 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800413c:	483c      	ldr	r0, [pc, #240]	; (8004230 <HAL_ADC_ConfigChannel+0x7a4>)
 800413e:	f7ff f83b 	bl	80031b8 <LL_ADC_GetCommonPathInternalCh>
 8004142:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a3a      	ldr	r2, [pc, #232]	; (8004234 <HAL_ADC_ConfigChannel+0x7a8>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d127      	bne.n	80041a0 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004150:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004154:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d121      	bne.n	80041a0 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a35      	ldr	r2, [pc, #212]	; (8004238 <HAL_ADC_ConfigChannel+0x7ac>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d157      	bne.n	8004216 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004166:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800416a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800416e:	4619      	mov	r1, r3
 8004170:	482f      	ldr	r0, [pc, #188]	; (8004230 <HAL_ADC_ConfigChannel+0x7a4>)
 8004172:	f7ff f80e 	bl	8003192 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004176:	4b31      	ldr	r3, [pc, #196]	; (800423c <HAL_ADC_ConfigChannel+0x7b0>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	099b      	lsrs	r3, r3, #6
 800417c:	4a30      	ldr	r2, [pc, #192]	; (8004240 <HAL_ADC_ConfigChannel+0x7b4>)
 800417e:	fba2 2303 	umull	r2, r3, r2, r3
 8004182:	099b      	lsrs	r3, r3, #6
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	4613      	mov	r3, r2
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	4413      	add	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004190:	e002      	b.n	8004198 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	3b01      	subs	r3, #1
 8004196:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1f9      	bne.n	8004192 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800419e:	e03a      	b.n	8004216 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a27      	ldr	r2, [pc, #156]	; (8004244 <HAL_ADC_ConfigChannel+0x7b8>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d113      	bne.n	80041d2 <HAL_ADC_ConfigChannel+0x746>
 80041aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10d      	bne.n	80041d2 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a1f      	ldr	r2, [pc, #124]	; (8004238 <HAL_ADC_ConfigChannel+0x7ac>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d12a      	bne.n	8004216 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041c8:	4619      	mov	r1, r3
 80041ca:	4819      	ldr	r0, [pc, #100]	; (8004230 <HAL_ADC_ConfigChannel+0x7a4>)
 80041cc:	f7fe ffe1 	bl	8003192 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80041d0:	e021      	b.n	8004216 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a1c      	ldr	r2, [pc, #112]	; (8004248 <HAL_ADC_ConfigChannel+0x7bc>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d11c      	bne.n	8004216 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80041dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d116      	bne.n	8004216 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a12      	ldr	r2, [pc, #72]	; (8004238 <HAL_ADC_ConfigChannel+0x7ac>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d111      	bne.n	8004216 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80041fa:	4619      	mov	r1, r3
 80041fc:	480c      	ldr	r0, [pc, #48]	; (8004230 <HAL_ADC_ConfigChannel+0x7a4>)
 80041fe:	f7fe ffc8 	bl	8003192 <LL_ADC_SetCommonPathInternalCh>
 8004202:	e008      	b.n	8004216 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004208:	f043 0220 	orr.w	r2, r3, #32
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800421e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004222:	4618      	mov	r0, r3
 8004224:	37d8      	adds	r7, #216	; 0xd8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	80080000 	.word	0x80080000
 8004230:	50040300 	.word	0x50040300
 8004234:	c7520000 	.word	0xc7520000
 8004238:	50040000 	.word	0x50040000
 800423c:	20000000 	.word	0x20000000
 8004240:	053e2d63 	.word	0x053e2d63
 8004244:	cb840000 	.word	0xcb840000
 8004248:	80000001 	.word	0x80000001

0800424c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b088      	sub	sp, #32
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004256:	2300      	movs	r3, #0
 8004258:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff f95e 	bl	8003524 <LL_ADC_REG_IsConversionOngoing>
 8004268:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff f97f 	bl	8003572 <LL_ADC_INJ_IsConversionOngoing>
 8004274:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d103      	bne.n	8004284 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2b00      	cmp	r3, #0
 8004280:	f000 8098 	beq.w	80043b4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d02a      	beq.n	80042e8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	7e5b      	ldrb	r3, [r3, #25]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d126      	bne.n	80042e8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	7e1b      	ldrb	r3, [r3, #24]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d122      	bne.n	80042e8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80042a2:	2301      	movs	r3, #1
 80042a4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80042a6:	e014      	b.n	80042d2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	4a45      	ldr	r2, [pc, #276]	; (80043c0 <ADC_ConversionStop+0x174>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d90d      	bls.n	80042cc <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b4:	f043 0210 	orr.w	r2, r3, #16
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c0:	f043 0201 	orr.w	r2, r3, #1
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e074      	b.n	80043b6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	3301      	adds	r3, #1
 80042d0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042dc:	2b40      	cmp	r3, #64	; 0x40
 80042de:	d1e3      	bne.n	80042a8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2240      	movs	r2, #64	; 0x40
 80042e6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d014      	beq.n	8004318 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7ff f916 	bl	8003524 <LL_ADC_REG_IsConversionOngoing>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00c      	beq.n	8004318 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff f8d3 	bl	80034ae <LL_ADC_IsDisableOngoing>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d104      	bne.n	8004318 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4618      	mov	r0, r3
 8004314:	f7ff f8f2 	bl	80034fc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d014      	beq.n	8004348 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4618      	mov	r0, r3
 8004324:	f7ff f925 	bl	8003572 <LL_ADC_INJ_IsConversionOngoing>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00c      	beq.n	8004348 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff f8bb 	bl	80034ae <LL_ADC_IsDisableOngoing>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d104      	bne.n	8004348 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4618      	mov	r0, r3
 8004344:	f7ff f901 	bl	800354a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	2b02      	cmp	r3, #2
 800434c:	d005      	beq.n	800435a <ADC_ConversionStop+0x10e>
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	2b03      	cmp	r3, #3
 8004352:	d105      	bne.n	8004360 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004354:	230c      	movs	r3, #12
 8004356:	617b      	str	r3, [r7, #20]
        break;
 8004358:	e005      	b.n	8004366 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800435a:	2308      	movs	r3, #8
 800435c:	617b      	str	r3, [r7, #20]
        break;
 800435e:	e002      	b.n	8004366 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004360:	2304      	movs	r3, #4
 8004362:	617b      	str	r3, [r7, #20]
        break;
 8004364:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004366:	f7fe fed1 	bl	800310c <HAL_GetTick>
 800436a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800436c:	e01b      	b.n	80043a6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800436e:	f7fe fecd 	bl	800310c <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b05      	cmp	r3, #5
 800437a:	d914      	bls.n	80043a6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	4013      	ands	r3, r2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00d      	beq.n	80043a6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438e:	f043 0210 	orr.w	r2, r3, #16
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800439a:	f043 0201 	orr.w	r2, r3, #1
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e007      	b.n	80043b6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	689a      	ldr	r2, [r3, #8]
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	4013      	ands	r3, r2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1dc      	bne.n	800436e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3720      	adds	r7, #32
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	a33fffff 	.word	0xa33fffff

080043c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80043cc:	2300      	movs	r3, #0
 80043ce:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7ff f857 	bl	8003488 <LL_ADC_IsEnabled>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d169      	bne.n	80044b4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689a      	ldr	r2, [r3, #8]
 80043e6:	4b36      	ldr	r3, [pc, #216]	; (80044c0 <ADC_Enable+0xfc>)
 80043e8:	4013      	ands	r3, r2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00d      	beq.n	800440a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f2:	f043 0210 	orr.w	r2, r3, #16
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fe:	f043 0201 	orr.w	r2, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e055      	b.n	80044b6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff f812 	bl	8003438 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004414:	482b      	ldr	r0, [pc, #172]	; (80044c4 <ADC_Enable+0x100>)
 8004416:	f7fe fecf 	bl	80031b8 <LL_ADC_GetCommonPathInternalCh>
 800441a:	4603      	mov	r3, r0
 800441c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d013      	beq.n	800444c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004424:	4b28      	ldr	r3, [pc, #160]	; (80044c8 <ADC_Enable+0x104>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	099b      	lsrs	r3, r3, #6
 800442a:	4a28      	ldr	r2, [pc, #160]	; (80044cc <ADC_Enable+0x108>)
 800442c:	fba2 2303 	umull	r2, r3, r2, r3
 8004430:	099b      	lsrs	r3, r3, #6
 8004432:	1c5a      	adds	r2, r3, #1
 8004434:	4613      	mov	r3, r2
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	4413      	add	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800443e:	e002      	b.n	8004446 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	3b01      	subs	r3, #1
 8004444:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1f9      	bne.n	8004440 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800444c:	f7fe fe5e 	bl	800310c <HAL_GetTick>
 8004450:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004452:	e028      	b.n	80044a6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4618      	mov	r0, r3
 800445a:	f7ff f815 	bl	8003488 <LL_ADC_IsEnabled>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d104      	bne.n	800446e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4618      	mov	r0, r3
 800446a:	f7fe ffe5 	bl	8003438 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800446e:	f7fe fe4d 	bl	800310c <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d914      	bls.n	80044a6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b01      	cmp	r3, #1
 8004488:	d00d      	beq.n	80044a6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448e:	f043 0210 	orr.w	r2, r3, #16
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449a:	f043 0201 	orr.w	r2, r3, #1
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e007      	b.n	80044b6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d1cf      	bne.n	8004454 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	8000003f 	.word	0x8000003f
 80044c4:	50040300 	.word	0x50040300
 80044c8:	20000000 	.word	0x20000000
 80044cc:	053e2d63 	.word	0x053e2d63

080044d0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4618      	mov	r0, r3
 80044de:	f7fe ffe6 	bl	80034ae <LL_ADC_IsDisableOngoing>
 80044e2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7fe ffcd 	bl	8003488 <LL_ADC_IsEnabled>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d047      	beq.n	8004584 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d144      	bne.n	8004584 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f003 030d 	and.w	r3, r3, #13
 8004504:	2b01      	cmp	r3, #1
 8004506:	d10c      	bne.n	8004522 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4618      	mov	r0, r3
 800450e:	f7fe ffa7 	bl	8003460 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2203      	movs	r2, #3
 8004518:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800451a:	f7fe fdf7 	bl	800310c <HAL_GetTick>
 800451e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004520:	e029      	b.n	8004576 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004526:	f043 0210 	orr.w	r2, r3, #16
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004532:	f043 0201 	orr.w	r2, r3, #1
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e023      	b.n	8004586 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800453e:	f7fe fde5 	bl	800310c <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d914      	bls.n	8004576 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00d      	beq.n	8004576 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800455e:	f043 0210 	orr.w	r2, r3, #16
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800456a:	f043 0201 	orr.w	r2, r3, #1
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e007      	b.n	8004586 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1dc      	bne.n	800453e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b084      	sub	sp, #16
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e0ed      	b.n	800477c <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d102      	bne.n	80045b2 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7fe f86f 	bl	8002690 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f042 0201 	orr.w	r2, r2, #1
 80045c0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045c2:	f7fe fda3 	bl	800310c <HAL_GetTick>
 80045c6:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80045c8:	e012      	b.n	80045f0 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80045ca:	f7fe fd9f 	bl	800310c <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b0a      	cmp	r3, #10
 80045d6:	d90b      	bls.n	80045f0 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2205      	movs	r2, #5
 80045e8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e0c5      	b.n	800477c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0e5      	beq.n	80045ca <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0202 	bic.w	r2, r2, #2
 800460c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800460e:	f7fe fd7d 	bl	800310c <HAL_GetTick>
 8004612:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004614:	e012      	b.n	800463c <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004616:	f7fe fd79 	bl	800310c <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b0a      	cmp	r3, #10
 8004622:	d90b      	bls.n	800463c <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2205      	movs	r2, #5
 8004634:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e09f      	b.n	800477c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1e5      	bne.n	8004616 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	7e1b      	ldrb	r3, [r3, #24]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d108      	bne.n	8004664 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	e007      	b.n	8004674 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004672:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	7e5b      	ldrb	r3, [r3, #25]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d108      	bne.n	800468e <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800468a:	601a      	str	r2, [r3, #0]
 800468c:	e007      	b.n	800469e <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800469c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	7e9b      	ldrb	r3, [r3, #26]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d108      	bne.n	80046b8 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f042 0220 	orr.w	r2, r2, #32
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	e007      	b.n	80046c8 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 0220 	bic.w	r2, r2, #32
 80046c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	7edb      	ldrb	r3, [r3, #27]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d108      	bne.n	80046e2 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0210 	bic.w	r2, r2, #16
 80046de:	601a      	str	r2, [r3, #0]
 80046e0:	e007      	b.n	80046f2 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f042 0210 	orr.w	r2, r2, #16
 80046f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	7f1b      	ldrb	r3, [r3, #28]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d108      	bne.n	800470c <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f042 0208 	orr.w	r2, r2, #8
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	e007      	b.n	800471c <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 0208 	bic.w	r2, r2, #8
 800471a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	7f5b      	ldrb	r3, [r3, #29]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d108      	bne.n	8004736 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f042 0204 	orr.w	r2, r2, #4
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	e007      	b.n	8004746 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f022 0204 	bic.w	r2, r2, #4
 8004744:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	689a      	ldr	r2, [r3, #8]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	431a      	orrs	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	ea42 0103 	orr.w	r1, r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	1e5a      	subs	r2, r3, #1
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	430a      	orrs	r2, r1
 800476a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004784:	b480      	push	{r7}
 8004786:	b087      	sub	sp, #28
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 3020 	ldrb.w	r3, [r3, #32]
 800479a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800479c:	7cfb      	ldrb	r3, [r7, #19]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d003      	beq.n	80047aa <HAL_CAN_ConfigFilter+0x26>
 80047a2:	7cfb      	ldrb	r3, [r7, #19]
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	f040 80aa 	bne.w	80048fe <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80047b0:	f043 0201 	orr.w	r2, r3, #1
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	f003 031f 	and.w	r3, r3, #31
 80047c2:	2201      	movs	r2, #1
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	43db      	mvns	r3, r3
 80047d4:	401a      	ands	r2, r3
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	69db      	ldr	r3, [r3, #28]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d123      	bne.n	800482c <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	43db      	mvns	r3, r3
 80047ee:	401a      	ands	r2, r3
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004802:	683a      	ldr	r2, [r7, #0]
 8004804:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004806:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	3248      	adds	r2, #72	; 0x48
 800480c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004820:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004822:	6979      	ldr	r1, [r7, #20]
 8004824:	3348      	adds	r3, #72	; 0x48
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	440b      	add	r3, r1
 800482a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	69db      	ldr	r3, [r3, #28]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d122      	bne.n	800487a <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	431a      	orrs	r2, r3
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004854:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	3248      	adds	r2, #72	; 0x48
 800485a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800486e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004870:	6979      	ldr	r1, [r7, #20]
 8004872:	3348      	adds	r3, #72	; 0x48
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	440b      	add	r3, r1
 8004878:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d109      	bne.n	8004896 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	43db      	mvns	r3, r3
 800488c:	401a      	ands	r2, r3
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004894:	e007      	b.n	80048a6 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	431a      	orrs	r2, r3
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d109      	bne.n	80048c2 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	43db      	mvns	r3, r3
 80048b8:	401a      	ands	r2, r3
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80048c0:	e007      	b.n	80048d2 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	431a      	orrs	r2, r3
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d107      	bne.n	80048ea <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	431a      	orrs	r2, r3
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80048f0:	f023 0201 	bic.w	r2, r3, #1
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80048fa:	2300      	movs	r3, #0
 80048fc:	e006      	b.n	800490c <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
  }
}
 800490c:	4618      	mov	r0, r3
 800490e:	371c      	adds	r7, #28
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b01      	cmp	r3, #1
 800492a:	d12e      	bne.n	800498a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2202      	movs	r2, #2
 8004930:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f022 0201 	bic.w	r2, r2, #1
 8004942:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004944:	f7fe fbe2 	bl	800310c <HAL_GetTick>
 8004948:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800494a:	e012      	b.n	8004972 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800494c:	f7fe fbde 	bl	800310c <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b0a      	cmp	r3, #10
 8004958:	d90b      	bls.n	8004972 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2205      	movs	r2, #5
 800496a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e012      	b.n	8004998 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1e5      	bne.n	800494c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004986:	2300      	movs	r3, #0
 8004988:	e006      	b.n	8004998 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
  }
}
 8004998:	4618      	mov	r0, r3
 800499a:	3710      	adds	r7, #16
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b089      	sub	sp, #36	; 0x24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
 80049ac:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049b4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80049be:	7ffb      	ldrb	r3, [r7, #31]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d003      	beq.n	80049cc <HAL_CAN_AddTxMessage+0x2c>
 80049c4:	7ffb      	ldrb	r3, [r7, #31]
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	f040 80ad 	bne.w	8004b26 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10a      	bne.n	80049ec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d105      	bne.n	80049ec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f000 8095 	beq.w	8004b16 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	0e1b      	lsrs	r3, r3, #24
 80049f0:	f003 0303 	and.w	r3, r3, #3
 80049f4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80049f6:	2201      	movs	r2, #1
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	409a      	lsls	r2, r3
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10d      	bne.n	8004a24 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004a12:	68f9      	ldr	r1, [r7, #12]
 8004a14:	6809      	ldr	r1, [r1, #0]
 8004a16:	431a      	orrs	r2, r3
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	3318      	adds	r3, #24
 8004a1c:	011b      	lsls	r3, r3, #4
 8004a1e:	440b      	add	r3, r1
 8004a20:	601a      	str	r2, [r3, #0]
 8004a22:	e00f      	b.n	8004a44 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004a2e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004a34:	68f9      	ldr	r1, [r7, #12]
 8004a36:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004a38:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	3318      	adds	r3, #24
 8004a3e:	011b      	lsls	r3, r3, #4
 8004a40:	440b      	add	r3, r1
 8004a42:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6819      	ldr	r1, [r3, #0]
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	691a      	ldr	r2, [r3, #16]
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	3318      	adds	r3, #24
 8004a50:	011b      	lsls	r3, r3, #4
 8004a52:	440b      	add	r3, r1
 8004a54:	3304      	adds	r3, #4
 8004a56:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	7d1b      	ldrb	r3, [r3, #20]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d111      	bne.n	8004a84 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	3318      	adds	r3, #24
 8004a68:	011b      	lsls	r3, r3, #4
 8004a6a:	4413      	add	r3, r2
 8004a6c:	3304      	adds	r3, #4
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	6811      	ldr	r1, [r2, #0]
 8004a74:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	3318      	adds	r3, #24
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	440b      	add	r3, r1
 8004a80:	3304      	adds	r3, #4
 8004a82:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	3307      	adds	r3, #7
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	061a      	lsls	r2, r3, #24
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	3306      	adds	r3, #6
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	041b      	lsls	r3, r3, #16
 8004a94:	431a      	orrs	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	3305      	adds	r3, #5
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	021b      	lsls	r3, r3, #8
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	3204      	adds	r2, #4
 8004aa4:	7812      	ldrb	r2, [r2, #0]
 8004aa6:	4610      	mov	r0, r2
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	6811      	ldr	r1, [r2, #0]
 8004aac:	ea43 0200 	orr.w	r2, r3, r0
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	011b      	lsls	r3, r3, #4
 8004ab4:	440b      	add	r3, r1
 8004ab6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004aba:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3303      	adds	r3, #3
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	061a      	lsls	r2, r3, #24
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	3302      	adds	r3, #2
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	041b      	lsls	r3, r3, #16
 8004acc:	431a      	orrs	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	021b      	lsls	r3, r3, #8
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	7812      	ldrb	r2, [r2, #0]
 8004adc:	4610      	mov	r0, r2
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	6811      	ldr	r1, [r2, #0]
 8004ae2:	ea43 0200 	orr.w	r2, r3, r0
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	011b      	lsls	r3, r3, #4
 8004aea:	440b      	add	r3, r1
 8004aec:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004af0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	3318      	adds	r3, #24
 8004afa:	011b      	lsls	r3, r3, #4
 8004afc:	4413      	add	r3, r2
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	6811      	ldr	r1, [r2, #0]
 8004b04:	f043 0201 	orr.w	r2, r3, #1
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	3318      	adds	r3, #24
 8004b0c:	011b      	lsls	r3, r3, #4
 8004b0e:	440b      	add	r3, r1
 8004b10:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	e00e      	b.n	8004b34 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e006      	b.n	8004b34 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
  }
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3724      	adds	r7, #36	; 0x24
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b52:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8004b54:	7afb      	ldrb	r3, [r7, #11]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d002      	beq.n	8004b60 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8004b5a:	7afb      	ldrb	r3, [r7, #11]
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d11d      	bne.n	8004b9c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d002      	beq.n	8004b74 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	3301      	adds	r3, #1
 8004b72:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d002      	beq.n	8004b88 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	3301      	adds	r3, #1
 8004b86:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d002      	beq.n	8004b9c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004baa:	b480      	push	{r7}
 8004bac:	b087      	sub	sp, #28
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	60f8      	str	r0, [r7, #12]
 8004bb2:	60b9      	str	r1, [r7, #8]
 8004bb4:	607a      	str	r2, [r7, #4]
 8004bb6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bbe:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004bc0:	7dfb      	ldrb	r3, [r7, #23]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d003      	beq.n	8004bce <HAL_CAN_GetRxMessage+0x24>
 8004bc6:	7dfb      	ldrb	r3, [r7, #23]
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	f040 80f3 	bne.w	8004db4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10e      	bne.n	8004bf2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f003 0303 	and.w	r3, r3, #3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d116      	bne.n	8004c10 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e0e7      	b.n	8004dc2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	f003 0303 	and.w	r3, r3, #3
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d107      	bne.n	8004c10 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c04:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e0d8      	b.n	8004dc2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	331b      	adds	r3, #27
 8004c18:	011b      	lsls	r3, r3, #4
 8004c1a:	4413      	add	r3, r2
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0204 	and.w	r2, r3, #4
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10c      	bne.n	8004c48 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	331b      	adds	r3, #27
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	4413      	add	r3, r2
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	0d5b      	lsrs	r3, r3, #21
 8004c3e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	601a      	str	r2, [r3, #0]
 8004c46:	e00b      	b.n	8004c60 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	331b      	adds	r3, #27
 8004c50:	011b      	lsls	r3, r3, #4
 8004c52:	4413      	add	r3, r2
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	08db      	lsrs	r3, r3, #3
 8004c58:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	331b      	adds	r3, #27
 8004c68:	011b      	lsls	r3, r3, #4
 8004c6a:	4413      	add	r3, r2
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0202 	and.w	r2, r3, #2
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	331b      	adds	r3, #27
 8004c7e:	011b      	lsls	r3, r3, #4
 8004c80:	4413      	add	r3, r2
 8004c82:	3304      	adds	r3, #4
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 020f 	and.w	r2, r3, #15
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	331b      	adds	r3, #27
 8004c96:	011b      	lsls	r3, r3, #4
 8004c98:	4413      	add	r3, r2
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	0a1b      	lsrs	r3, r3, #8
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	331b      	adds	r3, #27
 8004cae:	011b      	lsls	r3, r3, #4
 8004cb0:	4413      	add	r3, r2
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	0c1b      	lsrs	r3, r3, #16
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	011b      	lsls	r3, r3, #4
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	b2da      	uxtb	r2, r3
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	011b      	lsls	r3, r3, #4
 8004cdc:	4413      	add	r3, r2
 8004cde:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	0a1a      	lsrs	r2, r3, #8
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	3301      	adds	r3, #1
 8004cea:	b2d2      	uxtb	r2, r2
 8004cec:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	011b      	lsls	r3, r3, #4
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	0c1a      	lsrs	r2, r3, #16
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	3302      	adds	r3, #2
 8004d04:	b2d2      	uxtb	r2, r2
 8004d06:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	011b      	lsls	r3, r3, #4
 8004d10:	4413      	add	r3, r2
 8004d12:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	0e1a      	lsrs	r2, r3, #24
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	3303      	adds	r3, #3
 8004d1e:	b2d2      	uxtb	r2, r2
 8004d20:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	011b      	lsls	r3, r3, #4
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	3304      	adds	r3, #4
 8004d36:	b2d2      	uxtb	r2, r2
 8004d38:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	011b      	lsls	r3, r3, #4
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	0a1a      	lsrs	r2, r3, #8
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	3305      	adds	r3, #5
 8004d50:	b2d2      	uxtb	r2, r2
 8004d52:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	011b      	lsls	r3, r3, #4
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	0c1a      	lsrs	r2, r3, #16
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	3306      	adds	r3, #6
 8004d6a:	b2d2      	uxtb	r2, r2
 8004d6c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	011b      	lsls	r3, r3, #4
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	0e1a      	lsrs	r2, r3, #24
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	3307      	adds	r3, #7
 8004d84:	b2d2      	uxtb	r2, r2
 8004d86:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d108      	bne.n	8004da0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68da      	ldr	r2, [r3, #12]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f042 0220 	orr.w	r2, r2, #32
 8004d9c:	60da      	str	r2, [r3, #12]
 8004d9e:	e007      	b.n	8004db0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	691a      	ldr	r2, [r3, #16]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f042 0220 	orr.w	r2, r2, #32
 8004dae:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004db0:	2300      	movs	r3, #0
 8004db2:	e006      	b.n	8004dc2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
  }
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	371c      	adds	r7, #28
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b085      	sub	sp, #20
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
 8004dd6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dde:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d002      	beq.n	8004dec <HAL_CAN_ActivateNotification+0x1e>
 8004de6:	7bfb      	ldrb	r3, [r7, #15]
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d109      	bne.n	8004e00 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6959      	ldr	r1, [r3, #20]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	e006      	b.n	8004e0e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e04:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
  }
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3714      	adds	r7, #20
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b08a      	sub	sp, #40	; 0x28
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004e22:	2300      	movs	r3, #0
 8004e24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004e56:	6a3b      	ldr	r3, [r7, #32]
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d07c      	beq.n	8004f5a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d023      	beq.n	8004eb2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d003      	beq.n	8004e84 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 f983 	bl	8005188 <HAL_CAN_TxMailbox0CompleteCallback>
 8004e82:	e016      	b.n	8004eb2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	f003 0304 	and.w	r3, r3, #4
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d004      	beq.n	8004e98 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004e94:	627b      	str	r3, [r7, #36]	; 0x24
 8004e96:	e00c      	b.n	8004eb2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	f003 0308 	and.w	r3, r3, #8
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d004      	beq.n	8004eac <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eaa:	e002      	b.n	8004eb2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f989 	bl	80051c4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d024      	beq.n	8004f06 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ec4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d003      	beq.n	8004ed8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 f963 	bl	800519c <HAL_CAN_TxMailbox1CompleteCallback>
 8004ed6:	e016      	b.n	8004f06 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d004      	beq.n	8004eec <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eea:	e00c      	b.n	8004f06 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d004      	beq.n	8004f00 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004efc:	627b      	str	r3, [r7, #36]	; 0x24
 8004efe:	e002      	b.n	8004f06 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 f969 	bl	80051d8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d024      	beq.n	8004f5a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004f18:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d003      	beq.n	8004f2c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 f943 	bl	80051b0 <HAL_CAN_TxMailbox2CompleteCallback>
 8004f2a:	e016      	b.n	8004f5a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d004      	beq.n	8004f40 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f3e:	e00c      	b.n	8004f5a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d004      	beq.n	8004f54 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f50:	627b      	str	r3, [r7, #36]	; 0x24
 8004f52:	e002      	b.n	8004f5a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 f949 	bl	80051ec <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	f003 0308 	and.w	r3, r3, #8
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00c      	beq.n	8004f7e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	f003 0310 	and.w	r3, r3, #16
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d007      	beq.n	8004f7e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f74:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2210      	movs	r2, #16
 8004f7c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004f7e:	6a3b      	ldr	r3, [r7, #32]
 8004f80:	f003 0304 	and.w	r3, r3, #4
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d00b      	beq.n	8004fa0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f003 0308 	and.w	r3, r3, #8
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d006      	beq.n	8004fa0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2208      	movs	r2, #8
 8004f98:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f930 	bl	8005200 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d009      	beq.n	8004fbe <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	f003 0303 	and.w	r3, r3, #3
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d002      	beq.n	8004fbe <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f7fc fcf3 	bl	80019a4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004fbe:	6a3b      	ldr	r3, [r7, #32]
 8004fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00c      	beq.n	8004fe2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	f003 0310 	and.w	r3, r3, #16
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d007      	beq.n	8004fe2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fd8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2210      	movs	r2, #16
 8004fe0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	f003 0320 	and.w	r3, r3, #32
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00b      	beq.n	8005004 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f003 0308 	and.w	r3, r3, #8
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d006      	beq.n	8005004 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2208      	movs	r2, #8
 8004ffc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f912 	bl	8005228 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005004:	6a3b      	ldr	r3, [r7, #32]
 8005006:	f003 0310 	and.w	r3, r3, #16
 800500a:	2b00      	cmp	r3, #0
 800500c:	d009      	beq.n	8005022 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	f003 0303 	and.w	r3, r3, #3
 8005018:	2b00      	cmp	r3, #0
 800501a:	d002      	beq.n	8005022 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 f8f9 	bl	8005214 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005022:	6a3b      	ldr	r3, [r7, #32]
 8005024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00b      	beq.n	8005044 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	f003 0310 	and.w	r3, r3, #16
 8005032:	2b00      	cmp	r3, #0
 8005034:	d006      	beq.n	8005044 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2210      	movs	r2, #16
 800503c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f8fc 	bl	800523c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005044:	6a3b      	ldr	r3, [r7, #32]
 8005046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00b      	beq.n	8005066 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	f003 0308 	and.w	r3, r3, #8
 8005054:	2b00      	cmp	r3, #0
 8005056:	d006      	beq.n	8005066 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2208      	movs	r2, #8
 800505e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f8f5 	bl	8005250 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005066:	6a3b      	ldr	r3, [r7, #32]
 8005068:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d07b      	beq.n	8005168 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	f003 0304 	and.w	r3, r3, #4
 8005076:	2b00      	cmp	r3, #0
 8005078:	d072      	beq.n	8005160 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800507a:	6a3b      	ldr	r3, [r7, #32]
 800507c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005080:	2b00      	cmp	r3, #0
 8005082:	d008      	beq.n	8005096 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800508a:	2b00      	cmp	r3, #0
 800508c:	d003      	beq.n	8005096 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005090:	f043 0301 	orr.w	r3, r3, #1
 8005094:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005096:	6a3b      	ldr	r3, [r7, #32]
 8005098:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800509c:	2b00      	cmp	r3, #0
 800509e:	d008      	beq.n	80050b2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d003      	beq.n	80050b2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	f043 0302 	orr.w	r3, r3, #2
 80050b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80050b2:	6a3b      	ldr	r3, [r7, #32]
 80050b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d008      	beq.n	80050ce <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80050c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c8:	f043 0304 	orr.w	r3, r3, #4
 80050cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80050ce:	6a3b      	ldr	r3, [r7, #32]
 80050d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d043      	beq.n	8005160 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d03e      	beq.n	8005160 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050e8:	2b60      	cmp	r3, #96	; 0x60
 80050ea:	d02b      	beq.n	8005144 <HAL_CAN_IRQHandler+0x32a>
 80050ec:	2b60      	cmp	r3, #96	; 0x60
 80050ee:	d82e      	bhi.n	800514e <HAL_CAN_IRQHandler+0x334>
 80050f0:	2b50      	cmp	r3, #80	; 0x50
 80050f2:	d022      	beq.n	800513a <HAL_CAN_IRQHandler+0x320>
 80050f4:	2b50      	cmp	r3, #80	; 0x50
 80050f6:	d82a      	bhi.n	800514e <HAL_CAN_IRQHandler+0x334>
 80050f8:	2b40      	cmp	r3, #64	; 0x40
 80050fa:	d019      	beq.n	8005130 <HAL_CAN_IRQHandler+0x316>
 80050fc:	2b40      	cmp	r3, #64	; 0x40
 80050fe:	d826      	bhi.n	800514e <HAL_CAN_IRQHandler+0x334>
 8005100:	2b30      	cmp	r3, #48	; 0x30
 8005102:	d010      	beq.n	8005126 <HAL_CAN_IRQHandler+0x30c>
 8005104:	2b30      	cmp	r3, #48	; 0x30
 8005106:	d822      	bhi.n	800514e <HAL_CAN_IRQHandler+0x334>
 8005108:	2b10      	cmp	r3, #16
 800510a:	d002      	beq.n	8005112 <HAL_CAN_IRQHandler+0x2f8>
 800510c:	2b20      	cmp	r3, #32
 800510e:	d005      	beq.n	800511c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005110:	e01d      	b.n	800514e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	f043 0308 	orr.w	r3, r3, #8
 8005118:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800511a:	e019      	b.n	8005150 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800511c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511e:	f043 0310 	orr.w	r3, r3, #16
 8005122:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005124:	e014      	b.n	8005150 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	f043 0320 	orr.w	r3, r3, #32
 800512c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800512e:	e00f      	b.n	8005150 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005136:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005138:	e00a      	b.n	8005150 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005140:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005142:	e005      	b.n	8005150 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800514a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800514c:	e000      	b.n	8005150 <HAL_CAN_IRQHandler+0x336>
            break;
 800514e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	699a      	ldr	r2, [r3, #24]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800515e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2204      	movs	r2, #4
 8005166:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516a:	2b00      	cmp	r3, #0
 800516c:	d008      	beq.n	8005180 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	431a      	orrs	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f872 	bl	8005264 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005180:	bf00      	nop
 8005182:	3728      	adds	r7, #40	; 0x28
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f003 0307 	and.w	r3, r3, #7
 8005286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005288:	4b0c      	ldr	r3, [pc, #48]	; (80052bc <__NVIC_SetPriorityGrouping+0x44>)
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005294:	4013      	ands	r3, r2
 8005296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80052a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80052a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80052aa:	4a04      	ldr	r2, [pc, #16]	; (80052bc <__NVIC_SetPriorityGrouping+0x44>)
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	60d3      	str	r3, [r2, #12]
}
 80052b0:	bf00      	nop
 80052b2:	3714      	adds	r7, #20
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr
 80052bc:	e000ed00 	.word	0xe000ed00

080052c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80052c0:	b480      	push	{r7}
 80052c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052c4:	4b04      	ldr	r3, [pc, #16]	; (80052d8 <__NVIC_GetPriorityGrouping+0x18>)
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	0a1b      	lsrs	r3, r3, #8
 80052ca:	f003 0307 	and.w	r3, r3, #7
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	e000ed00 	.word	0xe000ed00

080052dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	4603      	mov	r3, r0
 80052e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	db0b      	blt.n	8005306 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052ee:	79fb      	ldrb	r3, [r7, #7]
 80052f0:	f003 021f 	and.w	r2, r3, #31
 80052f4:	4907      	ldr	r1, [pc, #28]	; (8005314 <__NVIC_EnableIRQ+0x38>)
 80052f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052fa:	095b      	lsrs	r3, r3, #5
 80052fc:	2001      	movs	r0, #1
 80052fe:	fa00 f202 	lsl.w	r2, r0, r2
 8005302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005306:	bf00      	nop
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	e000e100 	.word	0xe000e100

08005318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	4603      	mov	r3, r0
 8005320:	6039      	str	r1, [r7, #0]
 8005322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005328:	2b00      	cmp	r3, #0
 800532a:	db0a      	blt.n	8005342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	b2da      	uxtb	r2, r3
 8005330:	490c      	ldr	r1, [pc, #48]	; (8005364 <__NVIC_SetPriority+0x4c>)
 8005332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005336:	0112      	lsls	r2, r2, #4
 8005338:	b2d2      	uxtb	r2, r2
 800533a:	440b      	add	r3, r1
 800533c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005340:	e00a      	b.n	8005358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	b2da      	uxtb	r2, r3
 8005346:	4908      	ldr	r1, [pc, #32]	; (8005368 <__NVIC_SetPriority+0x50>)
 8005348:	79fb      	ldrb	r3, [r7, #7]
 800534a:	f003 030f 	and.w	r3, r3, #15
 800534e:	3b04      	subs	r3, #4
 8005350:	0112      	lsls	r2, r2, #4
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	440b      	add	r3, r1
 8005356:	761a      	strb	r2, [r3, #24]
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	e000e100 	.word	0xe000e100
 8005368:	e000ed00 	.word	0xe000ed00

0800536c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800536c:	b480      	push	{r7}
 800536e:	b089      	sub	sp, #36	; 0x24
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f003 0307 	and.w	r3, r3, #7
 800537e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	f1c3 0307 	rsb	r3, r3, #7
 8005386:	2b04      	cmp	r3, #4
 8005388:	bf28      	it	cs
 800538a:	2304      	movcs	r3, #4
 800538c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	3304      	adds	r3, #4
 8005392:	2b06      	cmp	r3, #6
 8005394:	d902      	bls.n	800539c <NVIC_EncodePriority+0x30>
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	3b03      	subs	r3, #3
 800539a:	e000      	b.n	800539e <NVIC_EncodePriority+0x32>
 800539c:	2300      	movs	r3, #0
 800539e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053a0:	f04f 32ff 	mov.w	r2, #4294967295
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	fa02 f303 	lsl.w	r3, r2, r3
 80053aa:	43da      	mvns	r2, r3
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	401a      	ands	r2, r3
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053b4:	f04f 31ff 	mov.w	r1, #4294967295
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	fa01 f303 	lsl.w	r3, r1, r3
 80053be:	43d9      	mvns	r1, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053c4:	4313      	orrs	r3, r2
         );
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3724      	adds	r7, #36	; 0x24
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
	...

080053d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	3b01      	subs	r3, #1
 80053e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053e4:	d301      	bcc.n	80053ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80053e6:	2301      	movs	r3, #1
 80053e8:	e00f      	b.n	800540a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80053ea:	4a0a      	ldr	r2, [pc, #40]	; (8005414 <SysTick_Config+0x40>)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	3b01      	subs	r3, #1
 80053f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80053f2:	210f      	movs	r1, #15
 80053f4:	f04f 30ff 	mov.w	r0, #4294967295
 80053f8:	f7ff ff8e 	bl	8005318 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053fc:	4b05      	ldr	r3, [pc, #20]	; (8005414 <SysTick_Config+0x40>)
 80053fe:	2200      	movs	r2, #0
 8005400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005402:	4b04      	ldr	r3, [pc, #16]	; (8005414 <SysTick_Config+0x40>)
 8005404:	2207      	movs	r2, #7
 8005406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	e000e010 	.word	0xe000e010

08005418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f7ff ff29 	bl	8005278 <__NVIC_SetPriorityGrouping>
}
 8005426:	bf00      	nop
 8005428:	3708      	adds	r7, #8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b086      	sub	sp, #24
 8005432:	af00      	add	r7, sp, #0
 8005434:	4603      	mov	r3, r0
 8005436:	60b9      	str	r1, [r7, #8]
 8005438:	607a      	str	r2, [r7, #4]
 800543a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800543c:	2300      	movs	r3, #0
 800543e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005440:	f7ff ff3e 	bl	80052c0 <__NVIC_GetPriorityGrouping>
 8005444:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	68b9      	ldr	r1, [r7, #8]
 800544a:	6978      	ldr	r0, [r7, #20]
 800544c:	f7ff ff8e 	bl	800536c <NVIC_EncodePriority>
 8005450:	4602      	mov	r2, r0
 8005452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005456:	4611      	mov	r1, r2
 8005458:	4618      	mov	r0, r3
 800545a:	f7ff ff5d 	bl	8005318 <__NVIC_SetPriority>
}
 800545e:	bf00      	nop
 8005460:	3718      	adds	r7, #24
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b082      	sub	sp, #8
 800546a:	af00      	add	r7, sp, #0
 800546c:	4603      	mov	r3, r0
 800546e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005474:	4618      	mov	r0, r3
 8005476:	f7ff ff31 	bl	80052dc <__NVIC_EnableIRQ>
}
 800547a:	bf00      	nop
 800547c:	3708      	adds	r7, #8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b082      	sub	sp, #8
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7ff ffa2 	bl	80053d4 <SysTick_Config>
 8005490:	4603      	mov	r3, r0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
	...

0800549c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800549c:	b480      	push	{r7}
 800549e:	b087      	sub	sp, #28
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80054a6:	2300      	movs	r3, #0
 80054a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054aa:	e148      	b.n	800573e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	2101      	movs	r1, #1
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	fa01 f303 	lsl.w	r3, r1, r3
 80054b8:	4013      	ands	r3, r2
 80054ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f000 813a 	beq.w	8005738 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f003 0303 	and.w	r3, r3, #3
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d005      	beq.n	80054dc <HAL_GPIO_Init+0x40>
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f003 0303 	and.w	r3, r3, #3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d130      	bne.n	800553e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	005b      	lsls	r3, r3, #1
 80054e6:	2203      	movs	r2, #3
 80054e8:	fa02 f303 	lsl.w	r3, r2, r3
 80054ec:	43db      	mvns	r3, r3
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	4013      	ands	r3, r2
 80054f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	68da      	ldr	r2, [r3, #12]
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	4313      	orrs	r3, r2
 8005504:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005512:	2201      	movs	r2, #1
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	fa02 f303 	lsl.w	r3, r2, r3
 800551a:	43db      	mvns	r3, r3
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	4013      	ands	r3, r2
 8005520:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	091b      	lsrs	r3, r3, #4
 8005528:	f003 0201 	and.w	r2, r3, #1
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	fa02 f303 	lsl.w	r3, r2, r3
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	4313      	orrs	r3, r2
 8005536:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f003 0303 	and.w	r3, r3, #3
 8005546:	2b03      	cmp	r3, #3
 8005548:	d017      	beq.n	800557a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	005b      	lsls	r3, r3, #1
 8005554:	2203      	movs	r2, #3
 8005556:	fa02 f303 	lsl.w	r3, r2, r3
 800555a:	43db      	mvns	r3, r3
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	4013      	ands	r3, r2
 8005560:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	689a      	ldr	r2, [r3, #8]
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	fa02 f303 	lsl.w	r3, r2, r3
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	4313      	orrs	r3, r2
 8005572:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f003 0303 	and.w	r3, r3, #3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d123      	bne.n	80055ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	08da      	lsrs	r2, r3, #3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	3208      	adds	r2, #8
 800558e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005592:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f003 0307 	and.w	r3, r3, #7
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	220f      	movs	r2, #15
 800559e:	fa02 f303 	lsl.w	r3, r2, r3
 80055a2:	43db      	mvns	r3, r3
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	4013      	ands	r3, r2
 80055a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	691a      	ldr	r2, [r3, #16]
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f003 0307 	and.w	r3, r3, #7
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	4313      	orrs	r3, r2
 80055be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	08da      	lsrs	r2, r3, #3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	3208      	adds	r2, #8
 80055c8:	6939      	ldr	r1, [r7, #16]
 80055ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	005b      	lsls	r3, r3, #1
 80055d8:	2203      	movs	r2, #3
 80055da:	fa02 f303 	lsl.w	r3, r2, r3
 80055de:	43db      	mvns	r3, r3
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	4013      	ands	r3, r2
 80055e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f003 0203 	and.w	r2, r3, #3
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	005b      	lsls	r3, r3, #1
 80055f2:	fa02 f303 	lsl.w	r3, r2, r3
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800560a:	2b00      	cmp	r3, #0
 800560c:	f000 8094 	beq.w	8005738 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005610:	4b52      	ldr	r3, [pc, #328]	; (800575c <HAL_GPIO_Init+0x2c0>)
 8005612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005614:	4a51      	ldr	r2, [pc, #324]	; (800575c <HAL_GPIO_Init+0x2c0>)
 8005616:	f043 0301 	orr.w	r3, r3, #1
 800561a:	6613      	str	r3, [r2, #96]	; 0x60
 800561c:	4b4f      	ldr	r3, [pc, #316]	; (800575c <HAL_GPIO_Init+0x2c0>)
 800561e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	60bb      	str	r3, [r7, #8]
 8005626:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005628:	4a4d      	ldr	r2, [pc, #308]	; (8005760 <HAL_GPIO_Init+0x2c4>)
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	089b      	lsrs	r3, r3, #2
 800562e:	3302      	adds	r3, #2
 8005630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005634:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	f003 0303 	and.w	r3, r3, #3
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	220f      	movs	r2, #15
 8005640:	fa02 f303 	lsl.w	r3, r2, r3
 8005644:	43db      	mvns	r3, r3
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	4013      	ands	r3, r2
 800564a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005652:	d00d      	beq.n	8005670 <HAL_GPIO_Init+0x1d4>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a43      	ldr	r2, [pc, #268]	; (8005764 <HAL_GPIO_Init+0x2c8>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d007      	beq.n	800566c <HAL_GPIO_Init+0x1d0>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a42      	ldr	r2, [pc, #264]	; (8005768 <HAL_GPIO_Init+0x2cc>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d101      	bne.n	8005668 <HAL_GPIO_Init+0x1cc>
 8005664:	2302      	movs	r3, #2
 8005666:	e004      	b.n	8005672 <HAL_GPIO_Init+0x1d6>
 8005668:	2307      	movs	r3, #7
 800566a:	e002      	b.n	8005672 <HAL_GPIO_Init+0x1d6>
 800566c:	2301      	movs	r3, #1
 800566e:	e000      	b.n	8005672 <HAL_GPIO_Init+0x1d6>
 8005670:	2300      	movs	r3, #0
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	f002 0203 	and.w	r2, r2, #3
 8005678:	0092      	lsls	r2, r2, #2
 800567a:	4093      	lsls	r3, r2
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	4313      	orrs	r3, r2
 8005680:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005682:	4937      	ldr	r1, [pc, #220]	; (8005760 <HAL_GPIO_Init+0x2c4>)
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	089b      	lsrs	r3, r3, #2
 8005688:	3302      	adds	r3, #2
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005690:	4b36      	ldr	r3, [pc, #216]	; (800576c <HAL_GPIO_Init+0x2d0>)
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	43db      	mvns	r3, r3
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	4013      	ands	r3, r2
 800569e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d003      	beq.n	80056b4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80056b4:	4a2d      	ldr	r2, [pc, #180]	; (800576c <HAL_GPIO_Init+0x2d0>)
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80056ba:	4b2c      	ldr	r3, [pc, #176]	; (800576c <HAL_GPIO_Init+0x2d0>)
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	43db      	mvns	r3, r3
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	4013      	ands	r3, r2
 80056c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d003      	beq.n	80056de <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4313      	orrs	r3, r2
 80056dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80056de:	4a23      	ldr	r2, [pc, #140]	; (800576c <HAL_GPIO_Init+0x2d0>)
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80056e4:	4b21      	ldr	r3, [pc, #132]	; (800576c <HAL_GPIO_Init+0x2d0>)
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	43db      	mvns	r3, r3
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	4013      	ands	r3, r2
 80056f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d003      	beq.n	8005708 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	4313      	orrs	r3, r2
 8005706:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005708:	4a18      	ldr	r2, [pc, #96]	; (800576c <HAL_GPIO_Init+0x2d0>)
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800570e:	4b17      	ldr	r3, [pc, #92]	; (800576c <HAL_GPIO_Init+0x2d0>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	43db      	mvns	r3, r3
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	4013      	ands	r3, r2
 800571c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d003      	beq.n	8005732 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4313      	orrs	r3, r2
 8005730:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005732:	4a0e      	ldr	r2, [pc, #56]	; (800576c <HAL_GPIO_Init+0x2d0>)
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	3301      	adds	r3, #1
 800573c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	fa22 f303 	lsr.w	r3, r2, r3
 8005748:	2b00      	cmp	r3, #0
 800574a:	f47f aeaf 	bne.w	80054ac <HAL_GPIO_Init+0x10>
  }
}
 800574e:	bf00      	nop
 8005750:	bf00      	nop
 8005752:	371c      	adds	r7, #28
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr
 800575c:	40021000 	.word	0x40021000
 8005760:	40010000 	.word	0x40010000
 8005764:	48000400 	.word	0x48000400
 8005768:	48000800 	.word	0x48000800
 800576c:	40010400 	.word	0x40010400

08005770 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	460b      	mov	r3, r1
 800577a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	691a      	ldr	r2, [r3, #16]
 8005780:	887b      	ldrh	r3, [r7, #2]
 8005782:	4013      	ands	r3, r2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d002      	beq.n	800578e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005788:	2301      	movs	r3, #1
 800578a:	73fb      	strb	r3, [r7, #15]
 800578c:	e001      	b.n	8005792 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800578e:	2300      	movs	r3, #0
 8005790:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005792:	7bfb      	ldrb	r3, [r7, #15]
}
 8005794:	4618      	mov	r0, r3
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	460b      	mov	r3, r1
 80057aa:	807b      	strh	r3, [r7, #2]
 80057ac:	4613      	mov	r3, r2
 80057ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80057b0:	787b      	ldrb	r3, [r7, #1]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d003      	beq.n	80057be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80057b6:	887a      	ldrh	r2, [r7, #2]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80057bc:	e002      	b.n	80057c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80057be:	887a      	ldrh	r2, [r7, #2]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	460b      	mov	r3, r1
 80057da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	695b      	ldr	r3, [r3, #20]
 80057e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80057e2:	887a      	ldrh	r2, [r7, #2]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4013      	ands	r3, r2
 80057e8:	041a      	lsls	r2, r3, #16
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	43d9      	mvns	r1, r3
 80057ee:	887b      	ldrh	r3, [r7, #2]
 80057f0:	400b      	ands	r3, r1
 80057f2:	431a      	orrs	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	619a      	str	r2, [r3, #24]
}
 80057f8:	bf00      	nop
 80057fa:	3714      	adds	r7, #20
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	4603      	mov	r3, r0
 800580c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800580e:	4b08      	ldr	r3, [pc, #32]	; (8005830 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005810:	695a      	ldr	r2, [r3, #20]
 8005812:	88fb      	ldrh	r3, [r7, #6]
 8005814:	4013      	ands	r3, r2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d006      	beq.n	8005828 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800581a:	4a05      	ldr	r2, [pc, #20]	; (8005830 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800581c:	88fb      	ldrh	r3, [r7, #6]
 800581e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005820:	88fb      	ldrh	r3, [r7, #6]
 8005822:	4618      	mov	r0, r3
 8005824:	f7fc f8a6 	bl	8001974 <HAL_GPIO_EXTI_Callback>
  }
}
 8005828:	bf00      	nop
 800582a:	3708      	adds	r7, #8
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	40010400 	.word	0x40010400

08005834 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005834:	b480      	push	{r7}
 8005836:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005838:	4b04      	ldr	r3, [pc, #16]	; (800584c <HAL_PWREx_GetVoltageRange+0x18>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005840:	4618      	mov	r0, r3
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	40007000 	.word	0x40007000

08005850 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800585e:	d130      	bne.n	80058c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005860:	4b23      	ldr	r3, [pc, #140]	; (80058f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800586c:	d038      	beq.n	80058e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800586e:	4b20      	ldr	r3, [pc, #128]	; (80058f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005876:	4a1e      	ldr	r2, [pc, #120]	; (80058f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005878:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800587c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800587e:	4b1d      	ldr	r3, [pc, #116]	; (80058f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2232      	movs	r2, #50	; 0x32
 8005884:	fb02 f303 	mul.w	r3, r2, r3
 8005888:	4a1b      	ldr	r2, [pc, #108]	; (80058f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800588a:	fba2 2303 	umull	r2, r3, r2, r3
 800588e:	0c9b      	lsrs	r3, r3, #18
 8005890:	3301      	adds	r3, #1
 8005892:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005894:	e002      	b.n	800589c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	3b01      	subs	r3, #1
 800589a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800589c:	4b14      	ldr	r3, [pc, #80]	; (80058f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058a8:	d102      	bne.n	80058b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1f2      	bne.n	8005896 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80058b0:	4b0f      	ldr	r3, [pc, #60]	; (80058f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058bc:	d110      	bne.n	80058e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e00f      	b.n	80058e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80058c2:	4b0b      	ldr	r3, [pc, #44]	; (80058f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80058ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ce:	d007      	beq.n	80058e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80058d0:	4b07      	ldr	r3, [pc, #28]	; (80058f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80058d8:	4a05      	ldr	r2, [pc, #20]	; (80058f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3714      	adds	r7, #20
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	40007000 	.word	0x40007000
 80058f4:	20000000 	.word	0x20000000
 80058f8:	431bde83 	.word	0x431bde83

080058fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b088      	sub	sp, #32
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d102      	bne.n	8005910 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	f000 bc02 	b.w	8006114 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005910:	4b96      	ldr	r3, [pc, #600]	; (8005b6c <HAL_RCC_OscConfig+0x270>)
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f003 030c 	and.w	r3, r3, #12
 8005918:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800591a:	4b94      	ldr	r3, [pc, #592]	; (8005b6c <HAL_RCC_OscConfig+0x270>)
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	f003 0303 	and.w	r3, r3, #3
 8005922:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0310 	and.w	r3, r3, #16
 800592c:	2b00      	cmp	r3, #0
 800592e:	f000 80e4 	beq.w	8005afa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d007      	beq.n	8005948 <HAL_RCC_OscConfig+0x4c>
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	2b0c      	cmp	r3, #12
 800593c:	f040 808b 	bne.w	8005a56 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	2b01      	cmp	r3, #1
 8005944:	f040 8087 	bne.w	8005a56 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005948:	4b88      	ldr	r3, [pc, #544]	; (8005b6c <HAL_RCC_OscConfig+0x270>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b00      	cmp	r3, #0
 8005952:	d005      	beq.n	8005960 <HAL_RCC_OscConfig+0x64>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d101      	bne.n	8005960 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e3d9      	b.n	8006114 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a1a      	ldr	r2, [r3, #32]
 8005964:	4b81      	ldr	r3, [pc, #516]	; (8005b6c <HAL_RCC_OscConfig+0x270>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0308 	and.w	r3, r3, #8
 800596c:	2b00      	cmp	r3, #0
 800596e:	d004      	beq.n	800597a <HAL_RCC_OscConfig+0x7e>
 8005970:	4b7e      	ldr	r3, [pc, #504]	; (8005b6c <HAL_RCC_OscConfig+0x270>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005978:	e005      	b.n	8005986 <HAL_RCC_OscConfig+0x8a>
 800597a:	4b7c      	ldr	r3, [pc, #496]	; (8005b6c <HAL_RCC_OscConfig+0x270>)
 800597c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005980:	091b      	lsrs	r3, r3, #4
 8005982:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005986:	4293      	cmp	r3, r2
 8005988:	d223      	bcs.n	80059d2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	4618      	mov	r0, r3
 8005990:	f000 fd8c 	bl	80064ac <RCC_SetFlashLatencyFromMSIRange>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d001      	beq.n	800599e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e3ba      	b.n	8006114 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800599e:	4b73      	ldr	r3, [pc, #460]	; (8005b6c <HAL_RCC_OscConfig+0x270>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a72      	ldr	r2, [pc, #456]	; (8005b6c <HAL_RCC_OscConfig+0x270>)
 80059a4:	f043 0308 	orr.w	r3, r3, #8
 80059a8:	6013      	str	r3, [r2, #0]
 80059aa:	4b70      	ldr	r3, [pc, #448]	; (8005b6c <HAL_RCC_OscConfig+0x270>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	496d      	ldr	r1, [pc, #436]	; (8005b6c <HAL_RCC_OscConfig+0x270>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80059bc:	4b6b      	ldr	r3, [pc, #428]	; (8005b6c <HAL_RCC_OscConfig+0x270>)
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	69db      	ldr	r3, [r3, #28]
 80059c8:	021b      	lsls	r3, r3, #8
 80059ca:	4968      	ldr	r1, [pc, #416]	; (8005b6c <HAL_RCC_OscConfig+0x270>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	604b      	str	r3, [r1, #4]
 80059d0:	e025      	b.n	8005a1e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059d2:	4b66      	ldr	r3, [pc, #408]	; (8005b6c <HAL_RCC_OscConfig+0x270>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a65      	ldr	r2, [pc, #404]	; (8005b6c <HAL_RCC_OscConfig+0x270>)
 80059d8:	f043 0308 	orr.w	r3, r3, #8
 80059dc:	6013      	str	r3, [r2, #0]
 80059de:	4b63      	ldr	r3, [pc, #396]	; (8005b6c <HAL_RCC_OscConfig+0x270>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	4960      	ldr	r1, [pc, #384]	; (8005b6c <HAL_RCC_OscConfig+0x270>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80059f0:	4b5e      	ldr	r3, [pc, #376]	; (8005b6c <HAL_RCC_OscConfig+0x270>)
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	69db      	ldr	r3, [r3, #28]
 80059fc:	021b      	lsls	r3, r3, #8
 80059fe:	495b      	ldr	r1, [pc, #364]	; (8005b6c <HAL_RCC_OscConfig+0x270>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d109      	bne.n	8005a1e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f000 fd4c 	bl	80064ac <RCC_SetFlashLatencyFromMSIRange>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d001      	beq.n	8005a1e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e37a      	b.n	8006114 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a1e:	f000 fc81 	bl	8006324 <HAL_RCC_GetSysClockFreq>
 8005a22:	4602      	mov	r2, r0
 8005a24:	4b51      	ldr	r3, [pc, #324]	; (8005b6c <HAL_RCC_OscConfig+0x270>)
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	091b      	lsrs	r3, r3, #4
 8005a2a:	f003 030f 	and.w	r3, r3, #15
 8005a2e:	4950      	ldr	r1, [pc, #320]	; (8005b70 <HAL_RCC_OscConfig+0x274>)
 8005a30:	5ccb      	ldrb	r3, [r1, r3]
 8005a32:	f003 031f 	and.w	r3, r3, #31
 8005a36:	fa22 f303 	lsr.w	r3, r2, r3
 8005a3a:	4a4e      	ldr	r2, [pc, #312]	; (8005b74 <HAL_RCC_OscConfig+0x278>)
 8005a3c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005a3e:	4b4e      	ldr	r3, [pc, #312]	; (8005b78 <HAL_RCC_OscConfig+0x27c>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7fd fb12 	bl	800306c <HAL_InitTick>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005a4c:	7bfb      	ldrb	r3, [r7, #15]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d052      	beq.n	8005af8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005a52:	7bfb      	ldrb	r3, [r7, #15]
 8005a54:	e35e      	b.n	8006114 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d032      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005a5e:	4b43      	ldr	r3, [pc, #268]	; (8005b6c <HAL_RCC_OscConfig+0x270>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a42      	ldr	r2, [pc, #264]	; (8005b6c <HAL_RCC_OscConfig+0x270>)
 8005a64:	f043 0301 	orr.w	r3, r3, #1
 8005a68:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005a6a:	f7fd fb4f 	bl	800310c <HAL_GetTick>
 8005a6e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a70:	e008      	b.n	8005a84 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a72:	f7fd fb4b 	bl	800310c <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d901      	bls.n	8005a84 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e347      	b.n	8006114 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a84:	4b39      	ldr	r3, [pc, #228]	; (8005b6c <HAL_RCC_OscConfig+0x270>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0302 	and.w	r3, r3, #2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d0f0      	beq.n	8005a72 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a90:	4b36      	ldr	r3, [pc, #216]	; (8005b6c <HAL_RCC_OscConfig+0x270>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a35      	ldr	r2, [pc, #212]	; (8005b6c <HAL_RCC_OscConfig+0x270>)
 8005a96:	f043 0308 	orr.w	r3, r3, #8
 8005a9a:	6013      	str	r3, [r2, #0]
 8005a9c:	4b33      	ldr	r3, [pc, #204]	; (8005b6c <HAL_RCC_OscConfig+0x270>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a1b      	ldr	r3, [r3, #32]
 8005aa8:	4930      	ldr	r1, [pc, #192]	; (8005b6c <HAL_RCC_OscConfig+0x270>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005aae:	4b2f      	ldr	r3, [pc, #188]	; (8005b6c <HAL_RCC_OscConfig+0x270>)
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	69db      	ldr	r3, [r3, #28]
 8005aba:	021b      	lsls	r3, r3, #8
 8005abc:	492b      	ldr	r1, [pc, #172]	; (8005b6c <HAL_RCC_OscConfig+0x270>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	604b      	str	r3, [r1, #4]
 8005ac2:	e01a      	b.n	8005afa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005ac4:	4b29      	ldr	r3, [pc, #164]	; (8005b6c <HAL_RCC_OscConfig+0x270>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a28      	ldr	r2, [pc, #160]	; (8005b6c <HAL_RCC_OscConfig+0x270>)
 8005aca:	f023 0301 	bic.w	r3, r3, #1
 8005ace:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ad0:	f7fd fb1c 	bl	800310c <HAL_GetTick>
 8005ad4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005ad6:	e008      	b.n	8005aea <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ad8:	f7fd fb18 	bl	800310c <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d901      	bls.n	8005aea <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e314      	b.n	8006114 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005aea:	4b20      	ldr	r3, [pc, #128]	; (8005b6c <HAL_RCC_OscConfig+0x270>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1f0      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x1dc>
 8005af6:	e000      	b.n	8005afa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005af8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d073      	beq.n	8005bee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	2b08      	cmp	r3, #8
 8005b0a:	d005      	beq.n	8005b18 <HAL_RCC_OscConfig+0x21c>
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	2b0c      	cmp	r3, #12
 8005b10:	d10e      	bne.n	8005b30 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	2b03      	cmp	r3, #3
 8005b16:	d10b      	bne.n	8005b30 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b18:	4b14      	ldr	r3, [pc, #80]	; (8005b6c <HAL_RCC_OscConfig+0x270>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d063      	beq.n	8005bec <HAL_RCC_OscConfig+0x2f0>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d15f      	bne.n	8005bec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e2f1      	b.n	8006114 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b38:	d106      	bne.n	8005b48 <HAL_RCC_OscConfig+0x24c>
 8005b3a:	4b0c      	ldr	r3, [pc, #48]	; (8005b6c <HAL_RCC_OscConfig+0x270>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a0b      	ldr	r2, [pc, #44]	; (8005b6c <HAL_RCC_OscConfig+0x270>)
 8005b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b44:	6013      	str	r3, [r2, #0]
 8005b46:	e025      	b.n	8005b94 <HAL_RCC_OscConfig+0x298>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b50:	d114      	bne.n	8005b7c <HAL_RCC_OscConfig+0x280>
 8005b52:	4b06      	ldr	r3, [pc, #24]	; (8005b6c <HAL_RCC_OscConfig+0x270>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a05      	ldr	r2, [pc, #20]	; (8005b6c <HAL_RCC_OscConfig+0x270>)
 8005b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b5c:	6013      	str	r3, [r2, #0]
 8005b5e:	4b03      	ldr	r3, [pc, #12]	; (8005b6c <HAL_RCC_OscConfig+0x270>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a02      	ldr	r2, [pc, #8]	; (8005b6c <HAL_RCC_OscConfig+0x270>)
 8005b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b68:	6013      	str	r3, [r2, #0]
 8005b6a:	e013      	b.n	8005b94 <HAL_RCC_OscConfig+0x298>
 8005b6c:	40021000 	.word	0x40021000
 8005b70:	0800b148 	.word	0x0800b148
 8005b74:	20000000 	.word	0x20000000
 8005b78:	20000004 	.word	0x20000004
 8005b7c:	4ba0      	ldr	r3, [pc, #640]	; (8005e00 <HAL_RCC_OscConfig+0x504>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a9f      	ldr	r2, [pc, #636]	; (8005e00 <HAL_RCC_OscConfig+0x504>)
 8005b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b86:	6013      	str	r3, [r2, #0]
 8005b88:	4b9d      	ldr	r3, [pc, #628]	; (8005e00 <HAL_RCC_OscConfig+0x504>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a9c      	ldr	r2, [pc, #624]	; (8005e00 <HAL_RCC_OscConfig+0x504>)
 8005b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d013      	beq.n	8005bc4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b9c:	f7fd fab6 	bl	800310c <HAL_GetTick>
 8005ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ba2:	e008      	b.n	8005bb6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ba4:	f7fd fab2 	bl	800310c <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b64      	cmp	r3, #100	; 0x64
 8005bb0:	d901      	bls.n	8005bb6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e2ae      	b.n	8006114 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bb6:	4b92      	ldr	r3, [pc, #584]	; (8005e00 <HAL_RCC_OscConfig+0x504>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d0f0      	beq.n	8005ba4 <HAL_RCC_OscConfig+0x2a8>
 8005bc2:	e014      	b.n	8005bee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bc4:	f7fd faa2 	bl	800310c <HAL_GetTick>
 8005bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005bca:	e008      	b.n	8005bde <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bcc:	f7fd fa9e 	bl	800310c <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	2b64      	cmp	r3, #100	; 0x64
 8005bd8:	d901      	bls.n	8005bde <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e29a      	b.n	8006114 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005bde:	4b88      	ldr	r3, [pc, #544]	; (8005e00 <HAL_RCC_OscConfig+0x504>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1f0      	bne.n	8005bcc <HAL_RCC_OscConfig+0x2d0>
 8005bea:	e000      	b.n	8005bee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0302 	and.w	r3, r3, #2
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d060      	beq.n	8005cbc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	2b04      	cmp	r3, #4
 8005bfe:	d005      	beq.n	8005c0c <HAL_RCC_OscConfig+0x310>
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	2b0c      	cmp	r3, #12
 8005c04:	d119      	bne.n	8005c3a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d116      	bne.n	8005c3a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c0c:	4b7c      	ldr	r3, [pc, #496]	; (8005e00 <HAL_RCC_OscConfig+0x504>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d005      	beq.n	8005c24 <HAL_RCC_OscConfig+0x328>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e277      	b.n	8006114 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c24:	4b76      	ldr	r3, [pc, #472]	; (8005e00 <HAL_RCC_OscConfig+0x504>)
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	061b      	lsls	r3, r3, #24
 8005c32:	4973      	ldr	r1, [pc, #460]	; (8005e00 <HAL_RCC_OscConfig+0x504>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c38:	e040      	b.n	8005cbc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d023      	beq.n	8005c8a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c42:	4b6f      	ldr	r3, [pc, #444]	; (8005e00 <HAL_RCC_OscConfig+0x504>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a6e      	ldr	r2, [pc, #440]	; (8005e00 <HAL_RCC_OscConfig+0x504>)
 8005c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c4e:	f7fd fa5d 	bl	800310c <HAL_GetTick>
 8005c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c54:	e008      	b.n	8005c68 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c56:	f7fd fa59 	bl	800310c <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d901      	bls.n	8005c68 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e255      	b.n	8006114 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c68:	4b65      	ldr	r3, [pc, #404]	; (8005e00 <HAL_RCC_OscConfig+0x504>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d0f0      	beq.n	8005c56 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c74:	4b62      	ldr	r3, [pc, #392]	; (8005e00 <HAL_RCC_OscConfig+0x504>)
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	061b      	lsls	r3, r3, #24
 8005c82:	495f      	ldr	r1, [pc, #380]	; (8005e00 <HAL_RCC_OscConfig+0x504>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	604b      	str	r3, [r1, #4]
 8005c88:	e018      	b.n	8005cbc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c8a:	4b5d      	ldr	r3, [pc, #372]	; (8005e00 <HAL_RCC_OscConfig+0x504>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a5c      	ldr	r2, [pc, #368]	; (8005e00 <HAL_RCC_OscConfig+0x504>)
 8005c90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c96:	f7fd fa39 	bl	800310c <HAL_GetTick>
 8005c9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c9c:	e008      	b.n	8005cb0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c9e:	f7fd fa35 	bl	800310c <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d901      	bls.n	8005cb0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e231      	b.n	8006114 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005cb0:	4b53      	ldr	r3, [pc, #332]	; (8005e00 <HAL_RCC_OscConfig+0x504>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1f0      	bne.n	8005c9e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0308 	and.w	r3, r3, #8
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d03c      	beq.n	8005d42 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	695b      	ldr	r3, [r3, #20]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d01c      	beq.n	8005d0a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cd0:	4b4b      	ldr	r3, [pc, #300]	; (8005e00 <HAL_RCC_OscConfig+0x504>)
 8005cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cd6:	4a4a      	ldr	r2, [pc, #296]	; (8005e00 <HAL_RCC_OscConfig+0x504>)
 8005cd8:	f043 0301 	orr.w	r3, r3, #1
 8005cdc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ce0:	f7fd fa14 	bl	800310c <HAL_GetTick>
 8005ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ce6:	e008      	b.n	8005cfa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ce8:	f7fd fa10 	bl	800310c <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d901      	bls.n	8005cfa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e20c      	b.n	8006114 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005cfa:	4b41      	ldr	r3, [pc, #260]	; (8005e00 <HAL_RCC_OscConfig+0x504>)
 8005cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d00:	f003 0302 	and.w	r3, r3, #2
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d0ef      	beq.n	8005ce8 <HAL_RCC_OscConfig+0x3ec>
 8005d08:	e01b      	b.n	8005d42 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d0a:	4b3d      	ldr	r3, [pc, #244]	; (8005e00 <HAL_RCC_OscConfig+0x504>)
 8005d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d10:	4a3b      	ldr	r2, [pc, #236]	; (8005e00 <HAL_RCC_OscConfig+0x504>)
 8005d12:	f023 0301 	bic.w	r3, r3, #1
 8005d16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d1a:	f7fd f9f7 	bl	800310c <HAL_GetTick>
 8005d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d20:	e008      	b.n	8005d34 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d22:	f7fd f9f3 	bl	800310c <HAL_GetTick>
 8005d26:	4602      	mov	r2, r0
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d901      	bls.n	8005d34 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e1ef      	b.n	8006114 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d34:	4b32      	ldr	r3, [pc, #200]	; (8005e00 <HAL_RCC_OscConfig+0x504>)
 8005d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1ef      	bne.n	8005d22 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0304 	and.w	r3, r3, #4
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f000 80a6 	beq.w	8005e9c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d50:	2300      	movs	r3, #0
 8005d52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005d54:	4b2a      	ldr	r3, [pc, #168]	; (8005e00 <HAL_RCC_OscConfig+0x504>)
 8005d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10d      	bne.n	8005d7c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d60:	4b27      	ldr	r3, [pc, #156]	; (8005e00 <HAL_RCC_OscConfig+0x504>)
 8005d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d64:	4a26      	ldr	r2, [pc, #152]	; (8005e00 <HAL_RCC_OscConfig+0x504>)
 8005d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d6a:	6593      	str	r3, [r2, #88]	; 0x58
 8005d6c:	4b24      	ldr	r3, [pc, #144]	; (8005e00 <HAL_RCC_OscConfig+0x504>)
 8005d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d74:	60bb      	str	r3, [r7, #8]
 8005d76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d7c:	4b21      	ldr	r3, [pc, #132]	; (8005e04 <HAL_RCC_OscConfig+0x508>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d118      	bne.n	8005dba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d88:	4b1e      	ldr	r3, [pc, #120]	; (8005e04 <HAL_RCC_OscConfig+0x508>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a1d      	ldr	r2, [pc, #116]	; (8005e04 <HAL_RCC_OscConfig+0x508>)
 8005d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d94:	f7fd f9ba 	bl	800310c <HAL_GetTick>
 8005d98:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d9a:	e008      	b.n	8005dae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d9c:	f7fd f9b6 	bl	800310c <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e1b2      	b.n	8006114 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005dae:	4b15      	ldr	r3, [pc, #84]	; (8005e04 <HAL_RCC_OscConfig+0x508>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d0f0      	beq.n	8005d9c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d108      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x4d8>
 8005dc2:	4b0f      	ldr	r3, [pc, #60]	; (8005e00 <HAL_RCC_OscConfig+0x504>)
 8005dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc8:	4a0d      	ldr	r2, [pc, #52]	; (8005e00 <HAL_RCC_OscConfig+0x504>)
 8005dca:	f043 0301 	orr.w	r3, r3, #1
 8005dce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005dd2:	e029      	b.n	8005e28 <HAL_RCC_OscConfig+0x52c>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	2b05      	cmp	r3, #5
 8005dda:	d115      	bne.n	8005e08 <HAL_RCC_OscConfig+0x50c>
 8005ddc:	4b08      	ldr	r3, [pc, #32]	; (8005e00 <HAL_RCC_OscConfig+0x504>)
 8005dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005de2:	4a07      	ldr	r2, [pc, #28]	; (8005e00 <HAL_RCC_OscConfig+0x504>)
 8005de4:	f043 0304 	orr.w	r3, r3, #4
 8005de8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005dec:	4b04      	ldr	r3, [pc, #16]	; (8005e00 <HAL_RCC_OscConfig+0x504>)
 8005dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df2:	4a03      	ldr	r2, [pc, #12]	; (8005e00 <HAL_RCC_OscConfig+0x504>)
 8005df4:	f043 0301 	orr.w	r3, r3, #1
 8005df8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005dfc:	e014      	b.n	8005e28 <HAL_RCC_OscConfig+0x52c>
 8005dfe:	bf00      	nop
 8005e00:	40021000 	.word	0x40021000
 8005e04:	40007000 	.word	0x40007000
 8005e08:	4b9a      	ldr	r3, [pc, #616]	; (8006074 <HAL_RCC_OscConfig+0x778>)
 8005e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e0e:	4a99      	ldr	r2, [pc, #612]	; (8006074 <HAL_RCC_OscConfig+0x778>)
 8005e10:	f023 0301 	bic.w	r3, r3, #1
 8005e14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e18:	4b96      	ldr	r3, [pc, #600]	; (8006074 <HAL_RCC_OscConfig+0x778>)
 8005e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e1e:	4a95      	ldr	r2, [pc, #596]	; (8006074 <HAL_RCC_OscConfig+0x778>)
 8005e20:	f023 0304 	bic.w	r3, r3, #4
 8005e24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d016      	beq.n	8005e5e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e30:	f7fd f96c 	bl	800310c <HAL_GetTick>
 8005e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e36:	e00a      	b.n	8005e4e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e38:	f7fd f968 	bl	800310c <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d901      	bls.n	8005e4e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e162      	b.n	8006114 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e4e:	4b89      	ldr	r3, [pc, #548]	; (8006074 <HAL_RCC_OscConfig+0x778>)
 8005e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e54:	f003 0302 	and.w	r3, r3, #2
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d0ed      	beq.n	8005e38 <HAL_RCC_OscConfig+0x53c>
 8005e5c:	e015      	b.n	8005e8a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e5e:	f7fd f955 	bl	800310c <HAL_GetTick>
 8005e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e64:	e00a      	b.n	8005e7c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e66:	f7fd f951 	bl	800310c <HAL_GetTick>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d901      	bls.n	8005e7c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e14b      	b.n	8006114 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e7c:	4b7d      	ldr	r3, [pc, #500]	; (8006074 <HAL_RCC_OscConfig+0x778>)
 8005e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1ed      	bne.n	8005e66 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e8a:	7ffb      	ldrb	r3, [r7, #31]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d105      	bne.n	8005e9c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e90:	4b78      	ldr	r3, [pc, #480]	; (8006074 <HAL_RCC_OscConfig+0x778>)
 8005e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e94:	4a77      	ldr	r2, [pc, #476]	; (8006074 <HAL_RCC_OscConfig+0x778>)
 8005e96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e9a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 0320 	and.w	r3, r3, #32
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d03c      	beq.n	8005f22 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d01c      	beq.n	8005eea <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005eb0:	4b70      	ldr	r3, [pc, #448]	; (8006074 <HAL_RCC_OscConfig+0x778>)
 8005eb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005eb6:	4a6f      	ldr	r2, [pc, #444]	; (8006074 <HAL_RCC_OscConfig+0x778>)
 8005eb8:	f043 0301 	orr.w	r3, r3, #1
 8005ebc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ec0:	f7fd f924 	bl	800310c <HAL_GetTick>
 8005ec4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005ec6:	e008      	b.n	8005eda <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ec8:	f7fd f920 	bl	800310c <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d901      	bls.n	8005eda <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e11c      	b.n	8006114 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005eda:	4b66      	ldr	r3, [pc, #408]	; (8006074 <HAL_RCC_OscConfig+0x778>)
 8005edc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ee0:	f003 0302 	and.w	r3, r3, #2
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d0ef      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x5cc>
 8005ee8:	e01b      	b.n	8005f22 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005eea:	4b62      	ldr	r3, [pc, #392]	; (8006074 <HAL_RCC_OscConfig+0x778>)
 8005eec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ef0:	4a60      	ldr	r2, [pc, #384]	; (8006074 <HAL_RCC_OscConfig+0x778>)
 8005ef2:	f023 0301 	bic.w	r3, r3, #1
 8005ef6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005efa:	f7fd f907 	bl	800310c <HAL_GetTick>
 8005efe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f00:	e008      	b.n	8005f14 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f02:	f7fd f903 	bl	800310c <HAL_GetTick>
 8005f06:	4602      	mov	r2, r0
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d901      	bls.n	8005f14 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e0ff      	b.n	8006114 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f14:	4b57      	ldr	r3, [pc, #348]	; (8006074 <HAL_RCC_OscConfig+0x778>)
 8005f16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1ef      	bne.n	8005f02 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f000 80f3 	beq.w	8006112 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	f040 80c9 	bne.w	80060c8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005f36:	4b4f      	ldr	r3, [pc, #316]	; (8006074 <HAL_RCC_OscConfig+0x778>)
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	f003 0203 	and.w	r2, r3, #3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d12c      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f54:	3b01      	subs	r3, #1
 8005f56:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d123      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f66:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d11b      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f76:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d113      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f86:	085b      	lsrs	r3, r3, #1
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d109      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9a:	085b      	lsrs	r3, r3, #1
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d06b      	beq.n	800607c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	2b0c      	cmp	r3, #12
 8005fa8:	d062      	beq.n	8006070 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005faa:	4b32      	ldr	r3, [pc, #200]	; (8006074 <HAL_RCC_OscConfig+0x778>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d001      	beq.n	8005fba <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e0ac      	b.n	8006114 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005fba:	4b2e      	ldr	r3, [pc, #184]	; (8006074 <HAL_RCC_OscConfig+0x778>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a2d      	ldr	r2, [pc, #180]	; (8006074 <HAL_RCC_OscConfig+0x778>)
 8005fc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fc4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005fc6:	f7fd f8a1 	bl	800310c <HAL_GetTick>
 8005fca:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fcc:	e008      	b.n	8005fe0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fce:	f7fd f89d 	bl	800310c <HAL_GetTick>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d901      	bls.n	8005fe0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e099      	b.n	8006114 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fe0:	4b24      	ldr	r3, [pc, #144]	; (8006074 <HAL_RCC_OscConfig+0x778>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1f0      	bne.n	8005fce <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fec:	4b21      	ldr	r3, [pc, #132]	; (8006074 <HAL_RCC_OscConfig+0x778>)
 8005fee:	68da      	ldr	r2, [r3, #12]
 8005ff0:	4b21      	ldr	r3, [pc, #132]	; (8006078 <HAL_RCC_OscConfig+0x77c>)
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005ffc:	3a01      	subs	r2, #1
 8005ffe:	0112      	lsls	r2, r2, #4
 8006000:	4311      	orrs	r1, r2
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006006:	0212      	lsls	r2, r2, #8
 8006008:	4311      	orrs	r1, r2
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800600e:	0852      	lsrs	r2, r2, #1
 8006010:	3a01      	subs	r2, #1
 8006012:	0552      	lsls	r2, r2, #21
 8006014:	4311      	orrs	r1, r2
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800601a:	0852      	lsrs	r2, r2, #1
 800601c:	3a01      	subs	r2, #1
 800601e:	0652      	lsls	r2, r2, #25
 8006020:	4311      	orrs	r1, r2
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006026:	06d2      	lsls	r2, r2, #27
 8006028:	430a      	orrs	r2, r1
 800602a:	4912      	ldr	r1, [pc, #72]	; (8006074 <HAL_RCC_OscConfig+0x778>)
 800602c:	4313      	orrs	r3, r2
 800602e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006030:	4b10      	ldr	r3, [pc, #64]	; (8006074 <HAL_RCC_OscConfig+0x778>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a0f      	ldr	r2, [pc, #60]	; (8006074 <HAL_RCC_OscConfig+0x778>)
 8006036:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800603a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800603c:	4b0d      	ldr	r3, [pc, #52]	; (8006074 <HAL_RCC_OscConfig+0x778>)
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	4a0c      	ldr	r2, [pc, #48]	; (8006074 <HAL_RCC_OscConfig+0x778>)
 8006042:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006046:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006048:	f7fd f860 	bl	800310c <HAL_GetTick>
 800604c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800604e:	e008      	b.n	8006062 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006050:	f7fd f85c 	bl	800310c <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	2b02      	cmp	r3, #2
 800605c:	d901      	bls.n	8006062 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e058      	b.n	8006114 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006062:	4b04      	ldr	r3, [pc, #16]	; (8006074 <HAL_RCC_OscConfig+0x778>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d0f0      	beq.n	8006050 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800606e:	e050      	b.n	8006112 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e04f      	b.n	8006114 <HAL_RCC_OscConfig+0x818>
 8006074:	40021000 	.word	0x40021000
 8006078:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800607c:	4b27      	ldr	r3, [pc, #156]	; (800611c <HAL_RCC_OscConfig+0x820>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d144      	bne.n	8006112 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006088:	4b24      	ldr	r3, [pc, #144]	; (800611c <HAL_RCC_OscConfig+0x820>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a23      	ldr	r2, [pc, #140]	; (800611c <HAL_RCC_OscConfig+0x820>)
 800608e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006092:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006094:	4b21      	ldr	r3, [pc, #132]	; (800611c <HAL_RCC_OscConfig+0x820>)
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	4a20      	ldr	r2, [pc, #128]	; (800611c <HAL_RCC_OscConfig+0x820>)
 800609a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800609e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80060a0:	f7fd f834 	bl	800310c <HAL_GetTick>
 80060a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060a6:	e008      	b.n	80060ba <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060a8:	f7fd f830 	bl	800310c <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d901      	bls.n	80060ba <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e02c      	b.n	8006114 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060ba:	4b18      	ldr	r3, [pc, #96]	; (800611c <HAL_RCC_OscConfig+0x820>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d0f0      	beq.n	80060a8 <HAL_RCC_OscConfig+0x7ac>
 80060c6:	e024      	b.n	8006112 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	2b0c      	cmp	r3, #12
 80060cc:	d01f      	beq.n	800610e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ce:	4b13      	ldr	r3, [pc, #76]	; (800611c <HAL_RCC_OscConfig+0x820>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a12      	ldr	r2, [pc, #72]	; (800611c <HAL_RCC_OscConfig+0x820>)
 80060d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060da:	f7fd f817 	bl	800310c <HAL_GetTick>
 80060de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060e0:	e008      	b.n	80060f4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060e2:	f7fd f813 	bl	800310c <HAL_GetTick>
 80060e6:	4602      	mov	r2, r0
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d901      	bls.n	80060f4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e00f      	b.n	8006114 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060f4:	4b09      	ldr	r3, [pc, #36]	; (800611c <HAL_RCC_OscConfig+0x820>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1f0      	bne.n	80060e2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006100:	4b06      	ldr	r3, [pc, #24]	; (800611c <HAL_RCC_OscConfig+0x820>)
 8006102:	68da      	ldr	r2, [r3, #12]
 8006104:	4905      	ldr	r1, [pc, #20]	; (800611c <HAL_RCC_OscConfig+0x820>)
 8006106:	4b06      	ldr	r3, [pc, #24]	; (8006120 <HAL_RCC_OscConfig+0x824>)
 8006108:	4013      	ands	r3, r2
 800610a:	60cb      	str	r3, [r1, #12]
 800610c:	e001      	b.n	8006112 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e000      	b.n	8006114 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3720      	adds	r7, #32
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	40021000 	.word	0x40021000
 8006120:	feeefffc 	.word	0xfeeefffc

08006124 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d101      	bne.n	8006138 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e0e7      	b.n	8006308 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006138:	4b75      	ldr	r3, [pc, #468]	; (8006310 <HAL_RCC_ClockConfig+0x1ec>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0307 	and.w	r3, r3, #7
 8006140:	683a      	ldr	r2, [r7, #0]
 8006142:	429a      	cmp	r2, r3
 8006144:	d910      	bls.n	8006168 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006146:	4b72      	ldr	r3, [pc, #456]	; (8006310 <HAL_RCC_ClockConfig+0x1ec>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f023 0207 	bic.w	r2, r3, #7
 800614e:	4970      	ldr	r1, [pc, #448]	; (8006310 <HAL_RCC_ClockConfig+0x1ec>)
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	4313      	orrs	r3, r2
 8006154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006156:	4b6e      	ldr	r3, [pc, #440]	; (8006310 <HAL_RCC_ClockConfig+0x1ec>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0307 	and.w	r3, r3, #7
 800615e:	683a      	ldr	r2, [r7, #0]
 8006160:	429a      	cmp	r2, r3
 8006162:	d001      	beq.n	8006168 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e0cf      	b.n	8006308 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0302 	and.w	r3, r3, #2
 8006170:	2b00      	cmp	r3, #0
 8006172:	d010      	beq.n	8006196 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	689a      	ldr	r2, [r3, #8]
 8006178:	4b66      	ldr	r3, [pc, #408]	; (8006314 <HAL_RCC_ClockConfig+0x1f0>)
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006180:	429a      	cmp	r2, r3
 8006182:	d908      	bls.n	8006196 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006184:	4b63      	ldr	r3, [pc, #396]	; (8006314 <HAL_RCC_ClockConfig+0x1f0>)
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	4960      	ldr	r1, [pc, #384]	; (8006314 <HAL_RCC_ClockConfig+0x1f0>)
 8006192:	4313      	orrs	r3, r2
 8006194:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d04c      	beq.n	800623c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	2b03      	cmp	r3, #3
 80061a8:	d107      	bne.n	80061ba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061aa:	4b5a      	ldr	r3, [pc, #360]	; (8006314 <HAL_RCC_ClockConfig+0x1f0>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d121      	bne.n	80061fa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e0a6      	b.n	8006308 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d107      	bne.n	80061d2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80061c2:	4b54      	ldr	r3, [pc, #336]	; (8006314 <HAL_RCC_ClockConfig+0x1f0>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d115      	bne.n	80061fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e09a      	b.n	8006308 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d107      	bne.n	80061ea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80061da:	4b4e      	ldr	r3, [pc, #312]	; (8006314 <HAL_RCC_ClockConfig+0x1f0>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 0302 	and.w	r3, r3, #2
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d109      	bne.n	80061fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e08e      	b.n	8006308 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80061ea:	4b4a      	ldr	r3, [pc, #296]	; (8006314 <HAL_RCC_ClockConfig+0x1f0>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d101      	bne.n	80061fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e086      	b.n	8006308 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80061fa:	4b46      	ldr	r3, [pc, #280]	; (8006314 <HAL_RCC_ClockConfig+0x1f0>)
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f023 0203 	bic.w	r2, r3, #3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	4943      	ldr	r1, [pc, #268]	; (8006314 <HAL_RCC_ClockConfig+0x1f0>)
 8006208:	4313      	orrs	r3, r2
 800620a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800620c:	f7fc ff7e 	bl	800310c <HAL_GetTick>
 8006210:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006212:	e00a      	b.n	800622a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006214:	f7fc ff7a 	bl	800310c <HAL_GetTick>
 8006218:	4602      	mov	r2, r0
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006222:	4293      	cmp	r3, r2
 8006224:	d901      	bls.n	800622a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e06e      	b.n	8006308 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800622a:	4b3a      	ldr	r3, [pc, #232]	; (8006314 <HAL_RCC_ClockConfig+0x1f0>)
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f003 020c 	and.w	r2, r3, #12
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	429a      	cmp	r2, r3
 800623a:	d1eb      	bne.n	8006214 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0302 	and.w	r3, r3, #2
 8006244:	2b00      	cmp	r3, #0
 8006246:	d010      	beq.n	800626a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	689a      	ldr	r2, [r3, #8]
 800624c:	4b31      	ldr	r3, [pc, #196]	; (8006314 <HAL_RCC_ClockConfig+0x1f0>)
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006254:	429a      	cmp	r2, r3
 8006256:	d208      	bcs.n	800626a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006258:	4b2e      	ldr	r3, [pc, #184]	; (8006314 <HAL_RCC_ClockConfig+0x1f0>)
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	492b      	ldr	r1, [pc, #172]	; (8006314 <HAL_RCC_ClockConfig+0x1f0>)
 8006266:	4313      	orrs	r3, r2
 8006268:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800626a:	4b29      	ldr	r3, [pc, #164]	; (8006310 <HAL_RCC_ClockConfig+0x1ec>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0307 	and.w	r3, r3, #7
 8006272:	683a      	ldr	r2, [r7, #0]
 8006274:	429a      	cmp	r2, r3
 8006276:	d210      	bcs.n	800629a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006278:	4b25      	ldr	r3, [pc, #148]	; (8006310 <HAL_RCC_ClockConfig+0x1ec>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f023 0207 	bic.w	r2, r3, #7
 8006280:	4923      	ldr	r1, [pc, #140]	; (8006310 <HAL_RCC_ClockConfig+0x1ec>)
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	4313      	orrs	r3, r2
 8006286:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006288:	4b21      	ldr	r3, [pc, #132]	; (8006310 <HAL_RCC_ClockConfig+0x1ec>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0307 	and.w	r3, r3, #7
 8006290:	683a      	ldr	r2, [r7, #0]
 8006292:	429a      	cmp	r2, r3
 8006294:	d001      	beq.n	800629a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e036      	b.n	8006308 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0304 	and.w	r3, r3, #4
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d008      	beq.n	80062b8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062a6:	4b1b      	ldr	r3, [pc, #108]	; (8006314 <HAL_RCC_ClockConfig+0x1f0>)
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	4918      	ldr	r1, [pc, #96]	; (8006314 <HAL_RCC_ClockConfig+0x1f0>)
 80062b4:	4313      	orrs	r3, r2
 80062b6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0308 	and.w	r3, r3, #8
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d009      	beq.n	80062d8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062c4:	4b13      	ldr	r3, [pc, #76]	; (8006314 <HAL_RCC_ClockConfig+0x1f0>)
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	00db      	lsls	r3, r3, #3
 80062d2:	4910      	ldr	r1, [pc, #64]	; (8006314 <HAL_RCC_ClockConfig+0x1f0>)
 80062d4:	4313      	orrs	r3, r2
 80062d6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80062d8:	f000 f824 	bl	8006324 <HAL_RCC_GetSysClockFreq>
 80062dc:	4602      	mov	r2, r0
 80062de:	4b0d      	ldr	r3, [pc, #52]	; (8006314 <HAL_RCC_ClockConfig+0x1f0>)
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	091b      	lsrs	r3, r3, #4
 80062e4:	f003 030f 	and.w	r3, r3, #15
 80062e8:	490b      	ldr	r1, [pc, #44]	; (8006318 <HAL_RCC_ClockConfig+0x1f4>)
 80062ea:	5ccb      	ldrb	r3, [r1, r3]
 80062ec:	f003 031f 	and.w	r3, r3, #31
 80062f0:	fa22 f303 	lsr.w	r3, r2, r3
 80062f4:	4a09      	ldr	r2, [pc, #36]	; (800631c <HAL_RCC_ClockConfig+0x1f8>)
 80062f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80062f8:	4b09      	ldr	r3, [pc, #36]	; (8006320 <HAL_RCC_ClockConfig+0x1fc>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7fc feb5 	bl	800306c <HAL_InitTick>
 8006302:	4603      	mov	r3, r0
 8006304:	72fb      	strb	r3, [r7, #11]

  return status;
 8006306:	7afb      	ldrb	r3, [r7, #11]
}
 8006308:	4618      	mov	r0, r3
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	40022000 	.word	0x40022000
 8006314:	40021000 	.word	0x40021000
 8006318:	0800b148 	.word	0x0800b148
 800631c:	20000000 	.word	0x20000000
 8006320:	20000004 	.word	0x20000004

08006324 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006324:	b480      	push	{r7}
 8006326:	b089      	sub	sp, #36	; 0x24
 8006328:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800632a:	2300      	movs	r3, #0
 800632c:	61fb      	str	r3, [r7, #28]
 800632e:	2300      	movs	r3, #0
 8006330:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006332:	4b3e      	ldr	r3, [pc, #248]	; (800642c <HAL_RCC_GetSysClockFreq+0x108>)
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f003 030c 	and.w	r3, r3, #12
 800633a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800633c:	4b3b      	ldr	r3, [pc, #236]	; (800642c <HAL_RCC_GetSysClockFreq+0x108>)
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	f003 0303 	and.w	r3, r3, #3
 8006344:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d005      	beq.n	8006358 <HAL_RCC_GetSysClockFreq+0x34>
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	2b0c      	cmp	r3, #12
 8006350:	d121      	bne.n	8006396 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d11e      	bne.n	8006396 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006358:	4b34      	ldr	r3, [pc, #208]	; (800642c <HAL_RCC_GetSysClockFreq+0x108>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0308 	and.w	r3, r3, #8
 8006360:	2b00      	cmp	r3, #0
 8006362:	d107      	bne.n	8006374 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006364:	4b31      	ldr	r3, [pc, #196]	; (800642c <HAL_RCC_GetSysClockFreq+0x108>)
 8006366:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800636a:	0a1b      	lsrs	r3, r3, #8
 800636c:	f003 030f 	and.w	r3, r3, #15
 8006370:	61fb      	str	r3, [r7, #28]
 8006372:	e005      	b.n	8006380 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006374:	4b2d      	ldr	r3, [pc, #180]	; (800642c <HAL_RCC_GetSysClockFreq+0x108>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	091b      	lsrs	r3, r3, #4
 800637a:	f003 030f 	and.w	r3, r3, #15
 800637e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006380:	4a2b      	ldr	r2, [pc, #172]	; (8006430 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006388:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d10d      	bne.n	80063ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006394:	e00a      	b.n	80063ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	2b04      	cmp	r3, #4
 800639a:	d102      	bne.n	80063a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800639c:	4b25      	ldr	r3, [pc, #148]	; (8006434 <HAL_RCC_GetSysClockFreq+0x110>)
 800639e:	61bb      	str	r3, [r7, #24]
 80063a0:	e004      	b.n	80063ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	2b08      	cmp	r3, #8
 80063a6:	d101      	bne.n	80063ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80063a8:	4b23      	ldr	r3, [pc, #140]	; (8006438 <HAL_RCC_GetSysClockFreq+0x114>)
 80063aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	2b0c      	cmp	r3, #12
 80063b0:	d134      	bne.n	800641c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80063b2:	4b1e      	ldr	r3, [pc, #120]	; (800642c <HAL_RCC_GetSysClockFreq+0x108>)
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	f003 0303 	and.w	r3, r3, #3
 80063ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d003      	beq.n	80063ca <HAL_RCC_GetSysClockFreq+0xa6>
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	2b03      	cmp	r3, #3
 80063c6:	d003      	beq.n	80063d0 <HAL_RCC_GetSysClockFreq+0xac>
 80063c8:	e005      	b.n	80063d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80063ca:	4b1a      	ldr	r3, [pc, #104]	; (8006434 <HAL_RCC_GetSysClockFreq+0x110>)
 80063cc:	617b      	str	r3, [r7, #20]
      break;
 80063ce:	e005      	b.n	80063dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80063d0:	4b19      	ldr	r3, [pc, #100]	; (8006438 <HAL_RCC_GetSysClockFreq+0x114>)
 80063d2:	617b      	str	r3, [r7, #20]
      break;
 80063d4:	e002      	b.n	80063dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	617b      	str	r3, [r7, #20]
      break;
 80063da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80063dc:	4b13      	ldr	r3, [pc, #76]	; (800642c <HAL_RCC_GetSysClockFreq+0x108>)
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	091b      	lsrs	r3, r3, #4
 80063e2:	f003 0307 	and.w	r3, r3, #7
 80063e6:	3301      	adds	r3, #1
 80063e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80063ea:	4b10      	ldr	r3, [pc, #64]	; (800642c <HAL_RCC_GetSysClockFreq+0x108>)
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	0a1b      	lsrs	r3, r3, #8
 80063f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	fb03 f202 	mul.w	r2, r3, r2
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006400:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006402:	4b0a      	ldr	r3, [pc, #40]	; (800642c <HAL_RCC_GetSysClockFreq+0x108>)
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	0e5b      	lsrs	r3, r3, #25
 8006408:	f003 0303 	and.w	r3, r3, #3
 800640c:	3301      	adds	r3, #1
 800640e:	005b      	lsls	r3, r3, #1
 8006410:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	fbb2 f3f3 	udiv	r3, r2, r3
 800641a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800641c:	69bb      	ldr	r3, [r7, #24]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3724      	adds	r7, #36	; 0x24
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	40021000 	.word	0x40021000
 8006430:	0800b160 	.word	0x0800b160
 8006434:	00f42400 	.word	0x00f42400
 8006438:	007a1200 	.word	0x007a1200

0800643c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800643c:	b480      	push	{r7}
 800643e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006440:	4b03      	ldr	r3, [pc, #12]	; (8006450 <HAL_RCC_GetHCLKFreq+0x14>)
 8006442:	681b      	ldr	r3, [r3, #0]
}
 8006444:	4618      	mov	r0, r3
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	20000000 	.word	0x20000000

08006454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006458:	f7ff fff0 	bl	800643c <HAL_RCC_GetHCLKFreq>
 800645c:	4602      	mov	r2, r0
 800645e:	4b06      	ldr	r3, [pc, #24]	; (8006478 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	0a1b      	lsrs	r3, r3, #8
 8006464:	f003 0307 	and.w	r3, r3, #7
 8006468:	4904      	ldr	r1, [pc, #16]	; (800647c <HAL_RCC_GetPCLK1Freq+0x28>)
 800646a:	5ccb      	ldrb	r3, [r1, r3]
 800646c:	f003 031f 	and.w	r3, r3, #31
 8006470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006474:	4618      	mov	r0, r3
 8006476:	bd80      	pop	{r7, pc}
 8006478:	40021000 	.word	0x40021000
 800647c:	0800b158 	.word	0x0800b158

08006480 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006484:	f7ff ffda 	bl	800643c <HAL_RCC_GetHCLKFreq>
 8006488:	4602      	mov	r2, r0
 800648a:	4b06      	ldr	r3, [pc, #24]	; (80064a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	0adb      	lsrs	r3, r3, #11
 8006490:	f003 0307 	and.w	r3, r3, #7
 8006494:	4904      	ldr	r1, [pc, #16]	; (80064a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006496:	5ccb      	ldrb	r3, [r1, r3]
 8006498:	f003 031f 	and.w	r3, r3, #31
 800649c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	40021000 	.word	0x40021000
 80064a8:	0800b158 	.word	0x0800b158

080064ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80064b4:	2300      	movs	r3, #0
 80064b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80064b8:	4b2a      	ldr	r3, [pc, #168]	; (8006564 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d003      	beq.n	80064cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80064c4:	f7ff f9b6 	bl	8005834 <HAL_PWREx_GetVoltageRange>
 80064c8:	6178      	str	r0, [r7, #20]
 80064ca:	e014      	b.n	80064f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80064cc:	4b25      	ldr	r3, [pc, #148]	; (8006564 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d0:	4a24      	ldr	r2, [pc, #144]	; (8006564 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064d6:	6593      	str	r3, [r2, #88]	; 0x58
 80064d8:	4b22      	ldr	r3, [pc, #136]	; (8006564 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064e0:	60fb      	str	r3, [r7, #12]
 80064e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80064e4:	f7ff f9a6 	bl	8005834 <HAL_PWREx_GetVoltageRange>
 80064e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80064ea:	4b1e      	ldr	r3, [pc, #120]	; (8006564 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ee:	4a1d      	ldr	r2, [pc, #116]	; (8006564 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064fc:	d10b      	bne.n	8006516 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2b80      	cmp	r3, #128	; 0x80
 8006502:	d919      	bls.n	8006538 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2ba0      	cmp	r3, #160	; 0xa0
 8006508:	d902      	bls.n	8006510 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800650a:	2302      	movs	r3, #2
 800650c:	613b      	str	r3, [r7, #16]
 800650e:	e013      	b.n	8006538 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006510:	2301      	movs	r3, #1
 8006512:	613b      	str	r3, [r7, #16]
 8006514:	e010      	b.n	8006538 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2b80      	cmp	r3, #128	; 0x80
 800651a:	d902      	bls.n	8006522 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800651c:	2303      	movs	r3, #3
 800651e:	613b      	str	r3, [r7, #16]
 8006520:	e00a      	b.n	8006538 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2b80      	cmp	r3, #128	; 0x80
 8006526:	d102      	bne.n	800652e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006528:	2302      	movs	r3, #2
 800652a:	613b      	str	r3, [r7, #16]
 800652c:	e004      	b.n	8006538 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2b70      	cmp	r3, #112	; 0x70
 8006532:	d101      	bne.n	8006538 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006534:	2301      	movs	r3, #1
 8006536:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006538:	4b0b      	ldr	r3, [pc, #44]	; (8006568 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f023 0207 	bic.w	r2, r3, #7
 8006540:	4909      	ldr	r1, [pc, #36]	; (8006568 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	4313      	orrs	r3, r2
 8006546:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006548:	4b07      	ldr	r3, [pc, #28]	; (8006568 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0307 	and.w	r3, r3, #7
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	429a      	cmp	r2, r3
 8006554:	d001      	beq.n	800655a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e000      	b.n	800655c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3718      	adds	r7, #24
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	40021000 	.word	0x40021000
 8006568:	40022000 	.word	0x40022000

0800656c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b086      	sub	sp, #24
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006574:	2300      	movs	r3, #0
 8006576:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006578:	2300      	movs	r3, #0
 800657a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006584:	2b00      	cmp	r3, #0
 8006586:	d031      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800658c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006590:	d01a      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006592:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006596:	d814      	bhi.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006598:	2b00      	cmp	r3, #0
 800659a:	d009      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800659c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80065a0:	d10f      	bne.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80065a2:	4b5d      	ldr	r3, [pc, #372]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	4a5c      	ldr	r2, [pc, #368]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065ac:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80065ae:	e00c      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	3304      	adds	r3, #4
 80065b4:	2100      	movs	r1, #0
 80065b6:	4618      	mov	r0, r3
 80065b8:	f000 f9ce 	bl	8006958 <RCCEx_PLLSAI1_Config>
 80065bc:	4603      	mov	r3, r0
 80065be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80065c0:	e003      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	74fb      	strb	r3, [r7, #19]
      break;
 80065c6:	e000      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80065c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065ca:	7cfb      	ldrb	r3, [r7, #19]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d10b      	bne.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80065d0:	4b51      	ldr	r3, [pc, #324]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065de:	494e      	ldr	r1, [pc, #312]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065e0:	4313      	orrs	r3, r2
 80065e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80065e6:	e001      	b.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065e8:	7cfb      	ldrb	r3, [r7, #19]
 80065ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f000 809e 	beq.w	8006736 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065fa:	2300      	movs	r3, #0
 80065fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80065fe:	4b46      	ldr	r3, [pc, #280]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006606:	2b00      	cmp	r3, #0
 8006608:	d101      	bne.n	800660e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800660a:	2301      	movs	r3, #1
 800660c:	e000      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800660e:	2300      	movs	r3, #0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00d      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006614:	4b40      	ldr	r3, [pc, #256]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006618:	4a3f      	ldr	r2, [pc, #252]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800661a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800661e:	6593      	str	r3, [r2, #88]	; 0x58
 8006620:	4b3d      	ldr	r3, [pc, #244]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006628:	60bb      	str	r3, [r7, #8]
 800662a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800662c:	2301      	movs	r3, #1
 800662e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006630:	4b3a      	ldr	r3, [pc, #232]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a39      	ldr	r2, [pc, #228]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800663a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800663c:	f7fc fd66 	bl	800310c <HAL_GetTick>
 8006640:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006642:	e009      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006644:	f7fc fd62 	bl	800310c <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	2b02      	cmp	r3, #2
 8006650:	d902      	bls.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	74fb      	strb	r3, [r7, #19]
        break;
 8006656:	e005      	b.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006658:	4b30      	ldr	r3, [pc, #192]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006660:	2b00      	cmp	r3, #0
 8006662:	d0ef      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006664:	7cfb      	ldrb	r3, [r7, #19]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d15a      	bne.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800666a:	4b2b      	ldr	r3, [pc, #172]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800666c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006670:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006674:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d01e      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	429a      	cmp	r2, r3
 8006684:	d019      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006686:	4b24      	ldr	r3, [pc, #144]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800668c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006690:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006692:	4b21      	ldr	r3, [pc, #132]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006698:	4a1f      	ldr	r2, [pc, #124]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800669a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800669e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80066a2:	4b1d      	ldr	r3, [pc, #116]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066a8:	4a1b      	ldr	r2, [pc, #108]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80066b2:	4a19      	ldr	r2, [pc, #100]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	f003 0301 	and.w	r3, r3, #1
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d016      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066c4:	f7fc fd22 	bl	800310c <HAL_GetTick>
 80066c8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066ca:	e00b      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066cc:	f7fc fd1e 	bl	800310c <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80066da:	4293      	cmp	r3, r2
 80066dc:	d902      	bls.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	74fb      	strb	r3, [r7, #19]
            break;
 80066e2:	e006      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066e4:	4b0c      	ldr	r3, [pc, #48]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ea:	f003 0302 	and.w	r3, r3, #2
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d0ec      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80066f2:	7cfb      	ldrb	r3, [r7, #19]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d10b      	bne.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066f8:	4b07      	ldr	r3, [pc, #28]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006706:	4904      	ldr	r1, [pc, #16]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006708:	4313      	orrs	r3, r2
 800670a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800670e:	e009      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006710:	7cfb      	ldrb	r3, [r7, #19]
 8006712:	74bb      	strb	r3, [r7, #18]
 8006714:	e006      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006716:	bf00      	nop
 8006718:	40021000 	.word	0x40021000
 800671c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006720:	7cfb      	ldrb	r3, [r7, #19]
 8006722:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006724:	7c7b      	ldrb	r3, [r7, #17]
 8006726:	2b01      	cmp	r3, #1
 8006728:	d105      	bne.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800672a:	4b8a      	ldr	r3, [pc, #552]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800672c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800672e:	4a89      	ldr	r2, [pc, #548]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006730:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006734:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00a      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006742:	4b84      	ldr	r3, [pc, #528]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006748:	f023 0203 	bic.w	r2, r3, #3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a1b      	ldr	r3, [r3, #32]
 8006750:	4980      	ldr	r1, [pc, #512]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006752:	4313      	orrs	r3, r2
 8006754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 0302 	and.w	r3, r3, #2
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00a      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006764:	4b7b      	ldr	r3, [pc, #492]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800676a:	f023 020c 	bic.w	r2, r3, #12
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006772:	4978      	ldr	r1, [pc, #480]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006774:	4313      	orrs	r3, r2
 8006776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 0320 	and.w	r3, r3, #32
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00a      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006786:	4b73      	ldr	r3, [pc, #460]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800678c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006794:	496f      	ldr	r1, [pc, #444]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006796:	4313      	orrs	r3, r2
 8006798:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00a      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067a8:	4b6a      	ldr	r3, [pc, #424]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80067aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ae:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067b6:	4967      	ldr	r1, [pc, #412]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00a      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80067ca:	4b62      	ldr	r3, [pc, #392]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80067cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d8:	495e      	ldr	r1, [pc, #376]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00a      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80067ec:	4b59      	ldr	r3, [pc, #356]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80067ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fa:	4956      	ldr	r1, [pc, #344]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80067fc:	4313      	orrs	r3, r2
 80067fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00a      	beq.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800680e:	4b51      	ldr	r3, [pc, #324]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006814:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681c:	494d      	ldr	r1, [pc, #308]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800681e:	4313      	orrs	r3, r2
 8006820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d028      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006830:	4b48      	ldr	r3, [pc, #288]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006836:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683e:	4945      	ldr	r1, [pc, #276]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006840:	4313      	orrs	r3, r2
 8006842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800684e:	d106      	bne.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006850:	4b40      	ldr	r3, [pc, #256]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	4a3f      	ldr	r2, [pc, #252]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006856:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800685a:	60d3      	str	r3, [r2, #12]
 800685c:	e011      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006862:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006866:	d10c      	bne.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	3304      	adds	r3, #4
 800686c:	2101      	movs	r1, #1
 800686e:	4618      	mov	r0, r3
 8006870:	f000 f872 	bl	8006958 <RCCEx_PLLSAI1_Config>
 8006874:	4603      	mov	r3, r0
 8006876:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006878:	7cfb      	ldrb	r3, [r7, #19]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d001      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800687e:	7cfb      	ldrb	r3, [r7, #19]
 8006880:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d028      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800688e:	4b31      	ldr	r3, [pc, #196]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006894:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800689c:	492d      	ldr	r1, [pc, #180]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800689e:	4313      	orrs	r3, r2
 80068a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068ac:	d106      	bne.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068ae:	4b29      	ldr	r3, [pc, #164]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	4a28      	ldr	r2, [pc, #160]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80068b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068b8:	60d3      	str	r3, [r2, #12]
 80068ba:	e011      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068c4:	d10c      	bne.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	3304      	adds	r3, #4
 80068ca:	2101      	movs	r1, #1
 80068cc:	4618      	mov	r0, r3
 80068ce:	f000 f843 	bl	8006958 <RCCEx_PLLSAI1_Config>
 80068d2:	4603      	mov	r3, r0
 80068d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80068d6:	7cfb      	ldrb	r3, [r7, #19]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d001      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80068dc:	7cfb      	ldrb	r3, [r7, #19]
 80068de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d01c      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80068ec:	4b19      	ldr	r3, [pc, #100]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80068ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068fa:	4916      	ldr	r1, [pc, #88]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80068fc:	4313      	orrs	r3, r2
 80068fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006906:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800690a:	d10c      	bne.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	3304      	adds	r3, #4
 8006910:	2102      	movs	r1, #2
 8006912:	4618      	mov	r0, r3
 8006914:	f000 f820 	bl	8006958 <RCCEx_PLLSAI1_Config>
 8006918:	4603      	mov	r3, r0
 800691a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800691c:	7cfb      	ldrb	r3, [r7, #19]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d001      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8006922:	7cfb      	ldrb	r3, [r7, #19]
 8006924:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00a      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006932:	4b08      	ldr	r3, [pc, #32]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006938:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006940:	4904      	ldr	r1, [pc, #16]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006942:	4313      	orrs	r3, r2
 8006944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006948:	7cbb      	ldrb	r3, [r7, #18]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3718      	adds	r7, #24
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	40021000 	.word	0x40021000

08006958 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006962:	2300      	movs	r3, #0
 8006964:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006966:	4b74      	ldr	r3, [pc, #464]	; (8006b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	f003 0303 	and.w	r3, r3, #3
 800696e:	2b00      	cmp	r3, #0
 8006970:	d018      	beq.n	80069a4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006972:	4b71      	ldr	r3, [pc, #452]	; (8006b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	f003 0203 	and.w	r2, r3, #3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	429a      	cmp	r2, r3
 8006980:	d10d      	bne.n	800699e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
       ||
 8006986:	2b00      	cmp	r3, #0
 8006988:	d009      	beq.n	800699e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800698a:	4b6b      	ldr	r3, [pc, #428]	; (8006b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	091b      	lsrs	r3, r3, #4
 8006990:	f003 0307 	and.w	r3, r3, #7
 8006994:	1c5a      	adds	r2, r3, #1
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	685b      	ldr	r3, [r3, #4]
       ||
 800699a:	429a      	cmp	r2, r3
 800699c:	d047      	beq.n	8006a2e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	73fb      	strb	r3, [r7, #15]
 80069a2:	e044      	b.n	8006a2e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2b03      	cmp	r3, #3
 80069aa:	d018      	beq.n	80069de <RCCEx_PLLSAI1_Config+0x86>
 80069ac:	2b03      	cmp	r3, #3
 80069ae:	d825      	bhi.n	80069fc <RCCEx_PLLSAI1_Config+0xa4>
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d002      	beq.n	80069ba <RCCEx_PLLSAI1_Config+0x62>
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d009      	beq.n	80069cc <RCCEx_PLLSAI1_Config+0x74>
 80069b8:	e020      	b.n	80069fc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80069ba:	4b5f      	ldr	r3, [pc, #380]	; (8006b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0302 	and.w	r3, r3, #2
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d11d      	bne.n	8006a02 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069ca:	e01a      	b.n	8006a02 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80069cc:	4b5a      	ldr	r3, [pc, #360]	; (8006b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d116      	bne.n	8006a06 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069dc:	e013      	b.n	8006a06 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80069de:	4b56      	ldr	r3, [pc, #344]	; (8006b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d10f      	bne.n	8006a0a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80069ea:	4b53      	ldr	r3, [pc, #332]	; (8006b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d109      	bne.n	8006a0a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80069fa:	e006      	b.n	8006a0a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006a00:	e004      	b.n	8006a0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006a02:	bf00      	nop
 8006a04:	e002      	b.n	8006a0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006a06:	bf00      	nop
 8006a08:	e000      	b.n	8006a0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006a0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8006a0c:	7bfb      	ldrb	r3, [r7, #15]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10d      	bne.n	8006a2e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006a12:	4b49      	ldr	r3, [pc, #292]	; (8006b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6819      	ldr	r1, [r3, #0]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	3b01      	subs	r3, #1
 8006a24:	011b      	lsls	r3, r3, #4
 8006a26:	430b      	orrs	r3, r1
 8006a28:	4943      	ldr	r1, [pc, #268]	; (8006b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006a2e:	7bfb      	ldrb	r3, [r7, #15]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d17c      	bne.n	8006b2e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006a34:	4b40      	ldr	r3, [pc, #256]	; (8006b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a3f      	ldr	r2, [pc, #252]	; (8006b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a40:	f7fc fb64 	bl	800310c <HAL_GetTick>
 8006a44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006a46:	e009      	b.n	8006a5c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a48:	f7fc fb60 	bl	800310c <HAL_GetTick>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d902      	bls.n	8006a5c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	73fb      	strb	r3, [r7, #15]
        break;
 8006a5a:	e005      	b.n	8006a68 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006a5c:	4b36      	ldr	r3, [pc, #216]	; (8006b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1ef      	bne.n	8006a48 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006a68:	7bfb      	ldrb	r3, [r7, #15]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d15f      	bne.n	8006b2e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d110      	bne.n	8006a96 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a74:	4b30      	ldr	r3, [pc, #192]	; (8006b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006a7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	6892      	ldr	r2, [r2, #8]
 8006a84:	0211      	lsls	r1, r2, #8
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	68d2      	ldr	r2, [r2, #12]
 8006a8a:	06d2      	lsls	r2, r2, #27
 8006a8c:	430a      	orrs	r2, r1
 8006a8e:	492a      	ldr	r1, [pc, #168]	; (8006b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	610b      	str	r3, [r1, #16]
 8006a94:	e027      	b.n	8006ae6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d112      	bne.n	8006ac2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a9c:	4b26      	ldr	r3, [pc, #152]	; (8006b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006aa4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	6892      	ldr	r2, [r2, #8]
 8006aac:	0211      	lsls	r1, r2, #8
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	6912      	ldr	r2, [r2, #16]
 8006ab2:	0852      	lsrs	r2, r2, #1
 8006ab4:	3a01      	subs	r2, #1
 8006ab6:	0552      	lsls	r2, r2, #21
 8006ab8:	430a      	orrs	r2, r1
 8006aba:	491f      	ldr	r1, [pc, #124]	; (8006b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006abc:	4313      	orrs	r3, r2
 8006abe:	610b      	str	r3, [r1, #16]
 8006ac0:	e011      	b.n	8006ae6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ac2:	4b1d      	ldr	r3, [pc, #116]	; (8006b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006aca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	6892      	ldr	r2, [r2, #8]
 8006ad2:	0211      	lsls	r1, r2, #8
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	6952      	ldr	r2, [r2, #20]
 8006ad8:	0852      	lsrs	r2, r2, #1
 8006ada:	3a01      	subs	r2, #1
 8006adc:	0652      	lsls	r2, r2, #25
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	4915      	ldr	r1, [pc, #84]	; (8006b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006ae6:	4b14      	ldr	r3, [pc, #80]	; (8006b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a13      	ldr	r2, [pc, #76]	; (8006b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006aec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006af0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006af2:	f7fc fb0b 	bl	800310c <HAL_GetTick>
 8006af6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006af8:	e009      	b.n	8006b0e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006afa:	f7fc fb07 	bl	800310c <HAL_GetTick>
 8006afe:	4602      	mov	r2, r0
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d902      	bls.n	8006b0e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	73fb      	strb	r3, [r7, #15]
          break;
 8006b0c:	e005      	b.n	8006b1a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006b0e:	4b0a      	ldr	r3, [pc, #40]	; (8006b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d0ef      	beq.n	8006afa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006b1a:	7bfb      	ldrb	r3, [r7, #15]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d106      	bne.n	8006b2e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006b20:	4b05      	ldr	r3, [pc, #20]	; (8006b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b22:	691a      	ldr	r2, [r3, #16]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	699b      	ldr	r3, [r3, #24]
 8006b28:	4903      	ldr	r1, [pc, #12]	; (8006b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	40021000 	.word	0x40021000

08006b3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e095      	b.n	8006c7a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d108      	bne.n	8006b68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b5e:	d009      	beq.n	8006b74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	61da      	str	r2, [r3, #28]
 8006b66:	e005      	b.n	8006b74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d106      	bne.n	8006b94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7fb fdca 	bl	8002728 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2202      	movs	r2, #2
 8006b98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006baa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006bb4:	d902      	bls.n	8006bbc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	60fb      	str	r3, [r7, #12]
 8006bba:	e002      	b.n	8006bc2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006bc0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006bca:	d007      	beq.n	8006bdc <HAL_SPI_Init+0xa0>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006bd4:	d002      	beq.n	8006bdc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006bec:	431a      	orrs	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	f003 0302 	and.w	r3, r3, #2
 8006bf6:	431a      	orrs	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	695b      	ldr	r3, [r3, #20]
 8006bfc:	f003 0301 	and.w	r3, r3, #1
 8006c00:	431a      	orrs	r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c0a:	431a      	orrs	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	69db      	ldr	r3, [r3, #28]
 8006c10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c14:	431a      	orrs	r2, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c1e:	ea42 0103 	orr.w	r1, r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c26:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	0c1b      	lsrs	r3, r3, #16
 8006c38:	f003 0204 	and.w	r2, r3, #4
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c40:	f003 0310 	and.w	r3, r3, #16
 8006c44:	431a      	orrs	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c4a:	f003 0308 	and.w	r3, r3, #8
 8006c4e:	431a      	orrs	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006c58:	ea42 0103 	orr.w	r1, r2, r3
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	430a      	orrs	r2, r1
 8006c68:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b088      	sub	sp, #32
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	60f8      	str	r0, [r7, #12]
 8006c8a:	60b9      	str	r1, [r7, #8]
 8006c8c:	603b      	str	r3, [r7, #0]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c92:	2300      	movs	r3, #0
 8006c94:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d101      	bne.n	8006ca4 <HAL_SPI_Transmit+0x22>
 8006ca0:	2302      	movs	r3, #2
 8006ca2:	e158      	b.n	8006f56 <HAL_SPI_Transmit+0x2d4>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cac:	f7fc fa2e 	bl	800310c <HAL_GetTick>
 8006cb0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006cb2:	88fb      	ldrh	r3, [r7, #6]
 8006cb4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d002      	beq.n	8006cc8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006cc2:	2302      	movs	r3, #2
 8006cc4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006cc6:	e13d      	b.n	8006f44 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d002      	beq.n	8006cd4 <HAL_SPI_Transmit+0x52>
 8006cce:	88fb      	ldrh	r3, [r7, #6]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d102      	bne.n	8006cda <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006cd8:	e134      	b.n	8006f44 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2203      	movs	r2, #3
 8006cde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	88fa      	ldrh	r2, [r7, #6]
 8006cf2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	88fa      	ldrh	r2, [r7, #6]
 8006cf8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d24:	d10f      	bne.n	8006d46 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d44:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d50:	2b40      	cmp	r3, #64	; 0x40
 8006d52:	d007      	beq.n	8006d64 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d6c:	d94b      	bls.n	8006e06 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d002      	beq.n	8006d7c <HAL_SPI_Transmit+0xfa>
 8006d76:	8afb      	ldrh	r3, [r7, #22]
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d13e      	bne.n	8006dfa <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d80:	881a      	ldrh	r2, [r3, #0]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8c:	1c9a      	adds	r2, r3, #2
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006da0:	e02b      	b.n	8006dfa <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	f003 0302 	and.w	r3, r3, #2
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d112      	bne.n	8006dd6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db4:	881a      	ldrh	r2, [r3, #0]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc0:	1c9a      	adds	r2, r3, #2
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006dd4:	e011      	b.n	8006dfa <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dd6:	f7fc f999 	bl	800310c <HAL_GetTick>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	683a      	ldr	r2, [r7, #0]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d803      	bhi.n	8006dee <HAL_SPI_Transmit+0x16c>
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dec:	d102      	bne.n	8006df4 <HAL_SPI_Transmit+0x172>
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d102      	bne.n	8006dfa <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006df4:	2303      	movs	r3, #3
 8006df6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006df8:	e0a4      	b.n	8006f44 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1ce      	bne.n	8006da2 <HAL_SPI_Transmit+0x120>
 8006e04:	e07c      	b.n	8006f00 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d002      	beq.n	8006e14 <HAL_SPI_Transmit+0x192>
 8006e0e:	8afb      	ldrh	r3, [r7, #22]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d170      	bne.n	8006ef6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d912      	bls.n	8006e44 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e22:	881a      	ldrh	r2, [r3, #0]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2e:	1c9a      	adds	r2, r3, #2
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	3b02      	subs	r3, #2
 8006e3c:	b29a      	uxth	r2, r3
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e42:	e058      	b.n	8006ef6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	330c      	adds	r3, #12
 8006e4e:	7812      	ldrb	r2, [r2, #0]
 8006e50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e56:	1c5a      	adds	r2, r3, #1
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	3b01      	subs	r3, #1
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006e6a:	e044      	b.n	8006ef6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	f003 0302 	and.w	r3, r3, #2
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d12b      	bne.n	8006ed2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d912      	bls.n	8006eaa <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e88:	881a      	ldrh	r2, [r3, #0]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e94:	1c9a      	adds	r2, r3, #2
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	3b02      	subs	r3, #2
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ea8:	e025      	b.n	8006ef6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	330c      	adds	r3, #12
 8006eb4:	7812      	ldrb	r2, [r2, #0]
 8006eb6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ebc:	1c5a      	adds	r2, r3, #1
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ed0:	e011      	b.n	8006ef6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ed2:	f7fc f91b 	bl	800310c <HAL_GetTick>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	1ad3      	subs	r3, r2, r3
 8006edc:	683a      	ldr	r2, [r7, #0]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d803      	bhi.n	8006eea <HAL_SPI_Transmit+0x268>
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee8:	d102      	bne.n	8006ef0 <HAL_SPI_Transmit+0x26e>
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d102      	bne.n	8006ef6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006ef4:	e026      	b.n	8006f44 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d1b5      	bne.n	8006e6c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f00:	69ba      	ldr	r2, [r7, #24]
 8006f02:	6839      	ldr	r1, [r7, #0]
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f000 fce3 	bl	80078d0 <SPI_EndRxTxTransaction>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d002      	beq.n	8006f16 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2220      	movs	r2, #32
 8006f14:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10a      	bne.n	8006f34 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f1e:	2300      	movs	r3, #0
 8006f20:	613b      	str	r3, [r7, #16]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	613b      	str	r3, [r7, #16]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	613b      	str	r3, [r7, #16]
 8006f32:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d002      	beq.n	8006f42 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	77fb      	strb	r3, [r7, #31]
 8006f40:	e000      	b.n	8006f44 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006f42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006f54:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3720      	adds	r7, #32
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b088      	sub	sp, #32
 8006f62:	af02      	add	r7, sp, #8
 8006f64:	60f8      	str	r0, [r7, #12]
 8006f66:	60b9      	str	r1, [r7, #8]
 8006f68:	603b      	str	r3, [r7, #0]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f7a:	d112      	bne.n	8006fa2 <HAL_SPI_Receive+0x44>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d10e      	bne.n	8006fa2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2204      	movs	r2, #4
 8006f88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006f8c:	88fa      	ldrh	r2, [r7, #6]
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	9300      	str	r3, [sp, #0]
 8006f92:	4613      	mov	r3, r2
 8006f94:	68ba      	ldr	r2, [r7, #8]
 8006f96:	68b9      	ldr	r1, [r7, #8]
 8006f98:	68f8      	ldr	r0, [r7, #12]
 8006f9a:	f000 f910 	bl	80071be <HAL_SPI_TransmitReceive>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	e109      	b.n	80071b6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d101      	bne.n	8006fb0 <HAL_SPI_Receive+0x52>
 8006fac:	2302      	movs	r3, #2
 8006fae:	e102      	b.n	80071b6 <HAL_SPI_Receive+0x258>
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fb8:	f7fc f8a8 	bl	800310c <HAL_GetTick>
 8006fbc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d002      	beq.n	8006fd0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006fca:	2302      	movs	r3, #2
 8006fcc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006fce:	e0e9      	b.n	80071a4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d002      	beq.n	8006fdc <HAL_SPI_Receive+0x7e>
 8006fd6:	88fb      	ldrh	r3, [r7, #6]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d102      	bne.n	8006fe2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006fe0:	e0e0      	b.n	80071a4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2204      	movs	r2, #4
 8006fe6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	88fa      	ldrh	r2, [r7, #6]
 8006ffa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	88fa      	ldrh	r2, [r7, #6]
 8007002:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800702c:	d908      	bls.n	8007040 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	685a      	ldr	r2, [r3, #4]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800703c:	605a      	str	r2, [r3, #4]
 800703e:	e007      	b.n	8007050 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	685a      	ldr	r2, [r3, #4]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800704e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007058:	d10f      	bne.n	800707a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007068:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007078:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007084:	2b40      	cmp	r3, #64	; 0x40
 8007086:	d007      	beq.n	8007098 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007096:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80070a0:	d867      	bhi.n	8007172 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80070a2:	e030      	b.n	8007106 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	f003 0301 	and.w	r3, r3, #1
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d117      	bne.n	80070e2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f103 020c 	add.w	r2, r3, #12
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070be:	7812      	ldrb	r2, [r2, #0]
 80070c0:	b2d2      	uxtb	r2, r2
 80070c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c8:	1c5a      	adds	r2, r3, #1
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	3b01      	subs	r3, #1
 80070d8:	b29a      	uxth	r2, r3
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80070e0:	e011      	b.n	8007106 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070e2:	f7fc f813 	bl	800310c <HAL_GetTick>
 80070e6:	4602      	mov	r2, r0
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	1ad3      	subs	r3, r2, r3
 80070ec:	683a      	ldr	r2, [r7, #0]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d803      	bhi.n	80070fa <HAL_SPI_Receive+0x19c>
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f8:	d102      	bne.n	8007100 <HAL_SPI_Receive+0x1a2>
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d102      	bne.n	8007106 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8007100:	2303      	movs	r3, #3
 8007102:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007104:	e04e      	b.n	80071a4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800710c:	b29b      	uxth	r3, r3
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1c8      	bne.n	80070a4 <HAL_SPI_Receive+0x146>
 8007112:	e034      	b.n	800717e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	f003 0301 	and.w	r3, r3, #1
 800711e:	2b01      	cmp	r3, #1
 8007120:	d115      	bne.n	800714e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68da      	ldr	r2, [r3, #12]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712c:	b292      	uxth	r2, r2
 800712e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007134:	1c9a      	adds	r2, r3, #2
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007140:	b29b      	uxth	r3, r3
 8007142:	3b01      	subs	r3, #1
 8007144:	b29a      	uxth	r2, r3
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800714c:	e011      	b.n	8007172 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800714e:	f7fb ffdd 	bl	800310c <HAL_GetTick>
 8007152:	4602      	mov	r2, r0
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	683a      	ldr	r2, [r7, #0]
 800715a:	429a      	cmp	r2, r3
 800715c:	d803      	bhi.n	8007166 <HAL_SPI_Receive+0x208>
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007164:	d102      	bne.n	800716c <HAL_SPI_Receive+0x20e>
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d102      	bne.n	8007172 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800716c:	2303      	movs	r3, #3
 800716e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007170:	e018      	b.n	80071a4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007178:	b29b      	uxth	r3, r3
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1ca      	bne.n	8007114 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	6839      	ldr	r1, [r7, #0]
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f000 fb4c 	bl	8007820 <SPI_EndRxTransaction>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d002      	beq.n	8007194 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2220      	movs	r2, #32
 8007192:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007198:	2b00      	cmp	r3, #0
 800719a:	d002      	beq.n	80071a2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	75fb      	strb	r3, [r7, #23]
 80071a0:	e000      	b.n	80071a4 <HAL_SPI_Receive+0x246>
  }

error :
 80071a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80071b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3718      	adds	r7, #24
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b08a      	sub	sp, #40	; 0x28
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	60f8      	str	r0, [r7, #12]
 80071c6:	60b9      	str	r1, [r7, #8]
 80071c8:	607a      	str	r2, [r7, #4]
 80071ca:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80071cc:	2301      	movs	r3, #1
 80071ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80071d0:	2300      	movs	r3, #0
 80071d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d101      	bne.n	80071e4 <HAL_SPI_TransmitReceive+0x26>
 80071e0:	2302      	movs	r3, #2
 80071e2:	e1fb      	b.n	80075dc <HAL_SPI_TransmitReceive+0x41e>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071ec:	f7fb ff8e 	bl	800310c <HAL_GetTick>
 80071f0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80071f8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007200:	887b      	ldrh	r3, [r7, #2]
 8007202:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007204:	887b      	ldrh	r3, [r7, #2]
 8007206:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007208:	7efb      	ldrb	r3, [r7, #27]
 800720a:	2b01      	cmp	r3, #1
 800720c:	d00e      	beq.n	800722c <HAL_SPI_TransmitReceive+0x6e>
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007214:	d106      	bne.n	8007224 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d102      	bne.n	8007224 <HAL_SPI_TransmitReceive+0x66>
 800721e:	7efb      	ldrb	r3, [r7, #27]
 8007220:	2b04      	cmp	r3, #4
 8007222:	d003      	beq.n	800722c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007224:	2302      	movs	r3, #2
 8007226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800722a:	e1cd      	b.n	80075c8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d005      	beq.n	800723e <HAL_SPI_TransmitReceive+0x80>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d002      	beq.n	800723e <HAL_SPI_TransmitReceive+0x80>
 8007238:	887b      	ldrh	r3, [r7, #2]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d103      	bne.n	8007246 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007244:	e1c0      	b.n	80075c8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800724c:	b2db      	uxtb	r3, r3
 800724e:	2b04      	cmp	r3, #4
 8007250:	d003      	beq.n	800725a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2205      	movs	r2, #5
 8007256:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	887a      	ldrh	r2, [r7, #2]
 800726a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	887a      	ldrh	r2, [r7, #2]
 8007272:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	887a      	ldrh	r2, [r7, #2]
 8007280:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	887a      	ldrh	r2, [r7, #2]
 8007286:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2200      	movs	r2, #0
 8007292:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800729c:	d802      	bhi.n	80072a4 <HAL_SPI_TransmitReceive+0xe6>
 800729e:	8a3b      	ldrh	r3, [r7, #16]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d908      	bls.n	80072b6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	685a      	ldr	r2, [r3, #4]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80072b2:	605a      	str	r2, [r3, #4]
 80072b4:	e007      	b.n	80072c6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	685a      	ldr	r2, [r3, #4]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80072c4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d0:	2b40      	cmp	r3, #64	; 0x40
 80072d2:	d007      	beq.n	80072e4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80072ec:	d97c      	bls.n	80073e8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d002      	beq.n	80072fc <HAL_SPI_TransmitReceive+0x13e>
 80072f6:	8a7b      	ldrh	r3, [r7, #18]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d169      	bne.n	80073d0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007300:	881a      	ldrh	r2, [r3, #0]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730c:	1c9a      	adds	r2, r3, #2
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007316:	b29b      	uxth	r3, r3
 8007318:	3b01      	subs	r3, #1
 800731a:	b29a      	uxth	r2, r3
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007320:	e056      	b.n	80073d0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	f003 0302 	and.w	r3, r3, #2
 800732c:	2b02      	cmp	r3, #2
 800732e:	d11b      	bne.n	8007368 <HAL_SPI_TransmitReceive+0x1aa>
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007334:	b29b      	uxth	r3, r3
 8007336:	2b00      	cmp	r3, #0
 8007338:	d016      	beq.n	8007368 <HAL_SPI_TransmitReceive+0x1aa>
 800733a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733c:	2b01      	cmp	r3, #1
 800733e:	d113      	bne.n	8007368 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007344:	881a      	ldrh	r2, [r3, #0]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007350:	1c9a      	adds	r2, r3, #2
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800735a:	b29b      	uxth	r3, r3
 800735c:	3b01      	subs	r3, #1
 800735e:	b29a      	uxth	r2, r3
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007364:	2300      	movs	r3, #0
 8007366:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	f003 0301 	and.w	r3, r3, #1
 8007372:	2b01      	cmp	r3, #1
 8007374:	d11c      	bne.n	80073b0 <HAL_SPI_TransmitReceive+0x1f2>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800737c:	b29b      	uxth	r3, r3
 800737e:	2b00      	cmp	r3, #0
 8007380:	d016      	beq.n	80073b0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68da      	ldr	r2, [r3, #12]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738c:	b292      	uxth	r2, r2
 800738e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007394:	1c9a      	adds	r2, r3, #2
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	3b01      	subs	r3, #1
 80073a4:	b29a      	uxth	r2, r3
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80073ac:	2301      	movs	r3, #1
 80073ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80073b0:	f7fb feac 	bl	800310c <HAL_GetTick>
 80073b4:	4602      	mov	r2, r0
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073bc:	429a      	cmp	r2, r3
 80073be:	d807      	bhi.n	80073d0 <HAL_SPI_TransmitReceive+0x212>
 80073c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c6:	d003      	beq.n	80073d0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80073c8:	2303      	movs	r3, #3
 80073ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80073ce:	e0fb      	b.n	80075c8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1a3      	bne.n	8007322 <HAL_SPI_TransmitReceive+0x164>
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d19d      	bne.n	8007322 <HAL_SPI_TransmitReceive+0x164>
 80073e6:	e0df      	b.n	80075a8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d003      	beq.n	80073f8 <HAL_SPI_TransmitReceive+0x23a>
 80073f0:	8a7b      	ldrh	r3, [r7, #18]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	f040 80cb 	bne.w	800758e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d912      	bls.n	8007428 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007406:	881a      	ldrh	r2, [r3, #0]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007412:	1c9a      	adds	r2, r3, #2
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800741c:	b29b      	uxth	r3, r3
 800741e:	3b02      	subs	r3, #2
 8007420:	b29a      	uxth	r2, r3
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007426:	e0b2      	b.n	800758e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	330c      	adds	r3, #12
 8007432:	7812      	ldrb	r2, [r2, #0]
 8007434:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800743a:	1c5a      	adds	r2, r3, #1
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007444:	b29b      	uxth	r3, r3
 8007446:	3b01      	subs	r3, #1
 8007448:	b29a      	uxth	r2, r3
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800744e:	e09e      	b.n	800758e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	f003 0302 	and.w	r3, r3, #2
 800745a:	2b02      	cmp	r3, #2
 800745c:	d134      	bne.n	80074c8 <HAL_SPI_TransmitReceive+0x30a>
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007462:	b29b      	uxth	r3, r3
 8007464:	2b00      	cmp	r3, #0
 8007466:	d02f      	beq.n	80074c8 <HAL_SPI_TransmitReceive+0x30a>
 8007468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746a:	2b01      	cmp	r3, #1
 800746c:	d12c      	bne.n	80074c8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007472:	b29b      	uxth	r3, r3
 8007474:	2b01      	cmp	r3, #1
 8007476:	d912      	bls.n	800749e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747c:	881a      	ldrh	r2, [r3, #0]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007488:	1c9a      	adds	r2, r3, #2
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007492:	b29b      	uxth	r3, r3
 8007494:	3b02      	subs	r3, #2
 8007496:	b29a      	uxth	r2, r3
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800749c:	e012      	b.n	80074c4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	330c      	adds	r3, #12
 80074a8:	7812      	ldrb	r2, [r2, #0]
 80074aa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b0:	1c5a      	adds	r2, r3, #1
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	3b01      	subs	r3, #1
 80074be:	b29a      	uxth	r2, r3
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80074c4:	2300      	movs	r3, #0
 80074c6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	f003 0301 	and.w	r3, r3, #1
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d148      	bne.n	8007568 <HAL_SPI_TransmitReceive+0x3aa>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074dc:	b29b      	uxth	r3, r3
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d042      	beq.n	8007568 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d923      	bls.n	8007536 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68da      	ldr	r2, [r3, #12]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f8:	b292      	uxth	r2, r2
 80074fa:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007500:	1c9a      	adds	r2, r3, #2
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800750c:	b29b      	uxth	r3, r3
 800750e:	3b02      	subs	r3, #2
 8007510:	b29a      	uxth	r2, r3
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800751e:	b29b      	uxth	r3, r3
 8007520:	2b01      	cmp	r3, #1
 8007522:	d81f      	bhi.n	8007564 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	685a      	ldr	r2, [r3, #4]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007532:	605a      	str	r2, [r3, #4]
 8007534:	e016      	b.n	8007564 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f103 020c 	add.w	r2, r3, #12
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007542:	7812      	ldrb	r2, [r2, #0]
 8007544:	b2d2      	uxtb	r2, r2
 8007546:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754c:	1c5a      	adds	r2, r3, #1
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007558:	b29b      	uxth	r3, r3
 800755a:	3b01      	subs	r3, #1
 800755c:	b29a      	uxth	r2, r3
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007564:	2301      	movs	r3, #1
 8007566:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007568:	f7fb fdd0 	bl	800310c <HAL_GetTick>
 800756c:	4602      	mov	r2, r0
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007574:	429a      	cmp	r2, r3
 8007576:	d803      	bhi.n	8007580 <HAL_SPI_TransmitReceive+0x3c2>
 8007578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800757e:	d102      	bne.n	8007586 <HAL_SPI_TransmitReceive+0x3c8>
 8007580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007582:	2b00      	cmp	r3, #0
 8007584:	d103      	bne.n	800758e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007586:	2303      	movs	r3, #3
 8007588:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800758c:	e01c      	b.n	80075c8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007592:	b29b      	uxth	r3, r3
 8007594:	2b00      	cmp	r3, #0
 8007596:	f47f af5b 	bne.w	8007450 <HAL_SPI_TransmitReceive+0x292>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f47f af54 	bne.w	8007450 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075a8:	69fa      	ldr	r2, [r7, #28]
 80075aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f000 f98f 	bl	80078d0 <SPI_EndRxTxTransaction>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d006      	beq.n	80075c6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2220      	movs	r2, #32
 80075c2:	661a      	str	r2, [r3, #96]	; 0x60
 80075c4:	e000      	b.n	80075c8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80075c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80075d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3728      	adds	r7, #40	; 0x28
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b088      	sub	sp, #32
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	603b      	str	r3, [r7, #0]
 80075f0:	4613      	mov	r3, r2
 80075f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80075f4:	f7fb fd8a 	bl	800310c <HAL_GetTick>
 80075f8:	4602      	mov	r2, r0
 80075fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fc:	1a9b      	subs	r3, r3, r2
 80075fe:	683a      	ldr	r2, [r7, #0]
 8007600:	4413      	add	r3, r2
 8007602:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007604:	f7fb fd82 	bl	800310c <HAL_GetTick>
 8007608:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800760a:	4b39      	ldr	r3, [pc, #228]	; (80076f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	015b      	lsls	r3, r3, #5
 8007610:	0d1b      	lsrs	r3, r3, #20
 8007612:	69fa      	ldr	r2, [r7, #28]
 8007614:	fb02 f303 	mul.w	r3, r2, r3
 8007618:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800761a:	e054      	b.n	80076c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007622:	d050      	beq.n	80076c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007624:	f7fb fd72 	bl	800310c <HAL_GetTick>
 8007628:	4602      	mov	r2, r0
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	69fa      	ldr	r2, [r7, #28]
 8007630:	429a      	cmp	r2, r3
 8007632:	d902      	bls.n	800763a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d13d      	bne.n	80076b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	685a      	ldr	r2, [r3, #4]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007648:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007652:	d111      	bne.n	8007678 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800765c:	d004      	beq.n	8007668 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007666:	d107      	bne.n	8007678 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007676:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007680:	d10f      	bne.n	80076a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007690:	601a      	str	r2, [r3, #0]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80076a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80076b2:	2303      	movs	r3, #3
 80076b4:	e017      	b.n	80076e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d101      	bne.n	80076c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80076bc:	2300      	movs	r3, #0
 80076be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	3b01      	subs	r3, #1
 80076c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	689a      	ldr	r2, [r3, #8]
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	4013      	ands	r3, r2
 80076d0:	68ba      	ldr	r2, [r7, #8]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	bf0c      	ite	eq
 80076d6:	2301      	moveq	r3, #1
 80076d8:	2300      	movne	r3, #0
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	461a      	mov	r2, r3
 80076de:	79fb      	ldrb	r3, [r7, #7]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d19b      	bne.n	800761c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3720      	adds	r7, #32
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	20000000 	.word	0x20000000

080076f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b08a      	sub	sp, #40	; 0x28
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	607a      	str	r2, [r7, #4]
 8007700:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007702:	2300      	movs	r3, #0
 8007704:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007706:	f7fb fd01 	bl	800310c <HAL_GetTick>
 800770a:	4602      	mov	r2, r0
 800770c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770e:	1a9b      	subs	r3, r3, r2
 8007710:	683a      	ldr	r2, [r7, #0]
 8007712:	4413      	add	r3, r2
 8007714:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007716:	f7fb fcf9 	bl	800310c <HAL_GetTick>
 800771a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	330c      	adds	r3, #12
 8007722:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007724:	4b3d      	ldr	r3, [pc, #244]	; (800781c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	4613      	mov	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	4413      	add	r3, r2
 800772e:	00da      	lsls	r2, r3, #3
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	0d1b      	lsrs	r3, r3, #20
 8007734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007736:	fb02 f303 	mul.w	r3, r2, r3
 800773a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800773c:	e060      	b.n	8007800 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007744:	d107      	bne.n	8007756 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d104      	bne.n	8007756 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	b2db      	uxtb	r3, r3
 8007752:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007754:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800775c:	d050      	beq.n	8007800 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800775e:	f7fb fcd5 	bl	800310c <HAL_GetTick>
 8007762:	4602      	mov	r2, r0
 8007764:	6a3b      	ldr	r3, [r7, #32]
 8007766:	1ad3      	subs	r3, r2, r3
 8007768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800776a:	429a      	cmp	r2, r3
 800776c:	d902      	bls.n	8007774 <SPI_WaitFifoStateUntilTimeout+0x80>
 800776e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007770:	2b00      	cmp	r3, #0
 8007772:	d13d      	bne.n	80077f0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	685a      	ldr	r2, [r3, #4]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007782:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800778c:	d111      	bne.n	80077b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007796:	d004      	beq.n	80077a2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077a0:	d107      	bne.n	80077b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077ba:	d10f      	bne.n	80077dc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077ca:	601a      	str	r2, [r3, #0]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80077ec:	2303      	movs	r3, #3
 80077ee:	e010      	b.n	8007812 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d101      	bne.n	80077fa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80077f6:	2300      	movs	r3, #0
 80077f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	3b01      	subs	r3, #1
 80077fe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	689a      	ldr	r2, [r3, #8]
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	4013      	ands	r3, r2
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	429a      	cmp	r2, r3
 800780e:	d196      	bne.n	800773e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3728      	adds	r7, #40	; 0x28
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	20000000 	.word	0x20000000

08007820 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af02      	add	r7, sp, #8
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007834:	d111      	bne.n	800785a <SPI_EndRxTransaction+0x3a>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800783e:	d004      	beq.n	800784a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007848:	d107      	bne.n	800785a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007858:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	2200      	movs	r2, #0
 8007862:	2180      	movs	r1, #128	; 0x80
 8007864:	68f8      	ldr	r0, [r7, #12]
 8007866:	f7ff febd 	bl	80075e4 <SPI_WaitFlagStateUntilTimeout>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d007      	beq.n	8007880 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007874:	f043 0220 	orr.w	r2, r3, #32
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800787c:	2303      	movs	r3, #3
 800787e:	e023      	b.n	80078c8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007888:	d11d      	bne.n	80078c6 <SPI_EndRxTransaction+0xa6>
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007892:	d004      	beq.n	800789e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800789c:	d113      	bne.n	80078c6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	9300      	str	r3, [sp, #0]
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	f7ff ff22 	bl	80076f4 <SPI_WaitFifoStateUntilTimeout>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d007      	beq.n	80078c6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078ba:	f043 0220 	orr.w	r2, r3, #32
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80078c2:	2303      	movs	r3, #3
 80078c4:	e000      	b.n	80078c8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80078c6:	2300      	movs	r3, #0
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3710      	adds	r7, #16
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b086      	sub	sp, #24
 80078d4:	af02      	add	r7, sp, #8
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	9300      	str	r3, [sp, #0]
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	f7ff ff03 	bl	80076f4 <SPI_WaitFifoStateUntilTimeout>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d007      	beq.n	8007904 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078f8:	f043 0220 	orr.w	r2, r3, #32
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007900:	2303      	movs	r3, #3
 8007902:	e027      	b.n	8007954 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	9300      	str	r3, [sp, #0]
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	2200      	movs	r2, #0
 800790c:	2180      	movs	r1, #128	; 0x80
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f7ff fe68 	bl	80075e4 <SPI_WaitFlagStateUntilTimeout>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d007      	beq.n	800792a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800791e:	f043 0220 	orr.w	r2, r3, #32
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007926:	2303      	movs	r3, #3
 8007928:	e014      	b.n	8007954 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	2200      	movs	r2, #0
 8007932:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007936:	68f8      	ldr	r0, [r7, #12]
 8007938:	f7ff fedc 	bl	80076f4 <SPI_WaitFifoStateUntilTimeout>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d007      	beq.n	8007952 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007946:	f043 0220 	orr.w	r2, r3, #32
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800794e:	2303      	movs	r3, #3
 8007950:	e000      	b.n	8007954 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	3710      	adds	r7, #16
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d101      	bne.n	800796e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	e049      	b.n	8007a02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007974:	b2db      	uxtb	r3, r3
 8007976:	2b00      	cmp	r3, #0
 8007978:	d106      	bne.n	8007988 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f7fa ff12 	bl	80027ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2202      	movs	r2, #2
 800798c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	3304      	adds	r3, #4
 8007998:	4619      	mov	r1, r3
 800799a:	4610      	mov	r0, r2
 800799c:	f000 f9d2 	bl	8007d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a00:	2300      	movs	r3, #0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3708      	adds	r7, #8
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
	...

08007a0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b085      	sub	sp, #20
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d001      	beq.n	8007a24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	e03b      	b.n	8007a9c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2202      	movs	r2, #2
 8007a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68da      	ldr	r2, [r3, #12]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f042 0201 	orr.w	r2, r2, #1
 8007a3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a19      	ldr	r2, [pc, #100]	; (8007aa8 <HAL_TIM_Base_Start_IT+0x9c>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d009      	beq.n	8007a5a <HAL_TIM_Base_Start_IT+0x4e>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a4e:	d004      	beq.n	8007a5a <HAL_TIM_Base_Start_IT+0x4e>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a15      	ldr	r2, [pc, #84]	; (8007aac <HAL_TIM_Base_Start_IT+0xa0>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d115      	bne.n	8007a86 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	689a      	ldr	r2, [r3, #8]
 8007a60:	4b13      	ldr	r3, [pc, #76]	; (8007ab0 <HAL_TIM_Base_Start_IT+0xa4>)
 8007a62:	4013      	ands	r3, r2
 8007a64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2b06      	cmp	r3, #6
 8007a6a:	d015      	beq.n	8007a98 <HAL_TIM_Base_Start_IT+0x8c>
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a72:	d011      	beq.n	8007a98 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f042 0201 	orr.w	r2, r2, #1
 8007a82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a84:	e008      	b.n	8007a98 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f042 0201 	orr.w	r2, r2, #1
 8007a94:	601a      	str	r2, [r3, #0]
 8007a96:	e000      	b.n	8007a9a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a98:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3714      	adds	r7, #20
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr
 8007aa8:	40012c00 	.word	0x40012c00
 8007aac:	40014000 	.word	0x40014000
 8007ab0:	00010007 	.word	0x00010007

08007ab4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	f003 0302 	and.w	r3, r3, #2
 8007ac6:	2b02      	cmp	r3, #2
 8007ac8:	d122      	bne.n	8007b10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	f003 0302 	and.w	r3, r3, #2
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	d11b      	bne.n	8007b10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f06f 0202 	mvn.w	r2, #2
 8007ae0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	f003 0303 	and.w	r3, r3, #3
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d003      	beq.n	8007afe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f905 	bl	8007d06 <HAL_TIM_IC_CaptureCallback>
 8007afc:	e005      	b.n	8007b0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 f8f7 	bl	8007cf2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 f908 	bl	8007d1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	f003 0304 	and.w	r3, r3, #4
 8007b1a:	2b04      	cmp	r3, #4
 8007b1c:	d122      	bne.n	8007b64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	f003 0304 	and.w	r3, r3, #4
 8007b28:	2b04      	cmp	r3, #4
 8007b2a:	d11b      	bne.n	8007b64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f06f 0204 	mvn.w	r2, #4
 8007b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2202      	movs	r2, #2
 8007b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d003      	beq.n	8007b52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 f8db 	bl	8007d06 <HAL_TIM_IC_CaptureCallback>
 8007b50:	e005      	b.n	8007b5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f8cd 	bl	8007cf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 f8de 	bl	8007d1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	f003 0308 	and.w	r3, r3, #8
 8007b6e:	2b08      	cmp	r3, #8
 8007b70:	d122      	bne.n	8007bb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	f003 0308 	and.w	r3, r3, #8
 8007b7c:	2b08      	cmp	r3, #8
 8007b7e:	d11b      	bne.n	8007bb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f06f 0208 	mvn.w	r2, #8
 8007b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2204      	movs	r2, #4
 8007b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	69db      	ldr	r3, [r3, #28]
 8007b96:	f003 0303 	and.w	r3, r3, #3
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d003      	beq.n	8007ba6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f8b1 	bl	8007d06 <HAL_TIM_IC_CaptureCallback>
 8007ba4:	e005      	b.n	8007bb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f8a3 	bl	8007cf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 f8b4 	bl	8007d1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	f003 0310 	and.w	r3, r3, #16
 8007bc2:	2b10      	cmp	r3, #16
 8007bc4:	d122      	bne.n	8007c0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	f003 0310 	and.w	r3, r3, #16
 8007bd0:	2b10      	cmp	r3, #16
 8007bd2:	d11b      	bne.n	8007c0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f06f 0210 	mvn.w	r2, #16
 8007bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2208      	movs	r2, #8
 8007be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	69db      	ldr	r3, [r3, #28]
 8007bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d003      	beq.n	8007bfa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 f887 	bl	8007d06 <HAL_TIM_IC_CaptureCallback>
 8007bf8:	e005      	b.n	8007c06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 f879 	bl	8007cf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 f88a 	bl	8007d1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	f003 0301 	and.w	r3, r3, #1
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d10e      	bne.n	8007c38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	f003 0301 	and.w	r3, r3, #1
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d107      	bne.n	8007c38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f06f 0201 	mvn.w	r2, #1
 8007c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f7f9 fece 	bl	80019d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	691b      	ldr	r3, [r3, #16]
 8007c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c42:	2b80      	cmp	r3, #128	; 0x80
 8007c44:	d10e      	bne.n	8007c64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c50:	2b80      	cmp	r3, #128	; 0x80
 8007c52:	d107      	bne.n	8007c64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 f8de 	bl	8007e20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c72:	d10e      	bne.n	8007c92 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c7e:	2b80      	cmp	r3, #128	; 0x80
 8007c80:	d107      	bne.n	8007c92 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 f8d1 	bl	8007e34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c9c:	2b40      	cmp	r3, #64	; 0x40
 8007c9e:	d10e      	bne.n	8007cbe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007caa:	2b40      	cmp	r3, #64	; 0x40
 8007cac:	d107      	bne.n	8007cbe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 f838 	bl	8007d2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	691b      	ldr	r3, [r3, #16]
 8007cc4:	f003 0320 	and.w	r3, r3, #32
 8007cc8:	2b20      	cmp	r3, #32
 8007cca:	d10e      	bne.n	8007cea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	f003 0320 	and.w	r3, r3, #32
 8007cd6:	2b20      	cmp	r3, #32
 8007cd8:	d107      	bne.n	8007cea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f06f 0220 	mvn.w	r2, #32
 8007ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 f891 	bl	8007e0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007cea:	bf00      	nop
 8007cec:	3708      	adds	r7, #8
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007cf2:	b480      	push	{r7}
 8007cf4:	b083      	sub	sp, #12
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007cfa:	bf00      	nop
 8007cfc:	370c      	adds	r7, #12
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr

08007d06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d06:	b480      	push	{r7}
 8007d08:	b083      	sub	sp, #12
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d0e:	bf00      	nop
 8007d10:	370c      	adds	r7, #12
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr

08007d1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d1a:	b480      	push	{r7}
 8007d1c:	b083      	sub	sp, #12
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d22:	bf00      	nop
 8007d24:	370c      	adds	r7, #12
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b083      	sub	sp, #12
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d36:	bf00      	nop
 8007d38:	370c      	adds	r7, #12
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr
	...

08007d44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a2a      	ldr	r2, [pc, #168]	; (8007e00 <TIM_Base_SetConfig+0xbc>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d003      	beq.n	8007d64 <TIM_Base_SetConfig+0x20>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d62:	d108      	bne.n	8007d76 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4a21      	ldr	r2, [pc, #132]	; (8007e00 <TIM_Base_SetConfig+0xbc>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d00b      	beq.n	8007d96 <TIM_Base_SetConfig+0x52>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d84:	d007      	beq.n	8007d96 <TIM_Base_SetConfig+0x52>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4a1e      	ldr	r2, [pc, #120]	; (8007e04 <TIM_Base_SetConfig+0xc0>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d003      	beq.n	8007d96 <TIM_Base_SetConfig+0x52>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a1d      	ldr	r2, [pc, #116]	; (8007e08 <TIM_Base_SetConfig+0xc4>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d108      	bne.n	8007da8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	695b      	ldr	r3, [r3, #20]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	689a      	ldr	r2, [r3, #8]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	4a0c      	ldr	r2, [pc, #48]	; (8007e00 <TIM_Base_SetConfig+0xbc>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d007      	beq.n	8007de4 <TIM_Base_SetConfig+0xa0>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	4a0b      	ldr	r2, [pc, #44]	; (8007e04 <TIM_Base_SetConfig+0xc0>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d003      	beq.n	8007de4 <TIM_Base_SetConfig+0xa0>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	4a0a      	ldr	r2, [pc, #40]	; (8007e08 <TIM_Base_SetConfig+0xc4>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d103      	bne.n	8007dec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	691a      	ldr	r2, [r3, #16]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	615a      	str	r2, [r3, #20]
}
 8007df2:	bf00      	nop
 8007df4:	3714      	adds	r7, #20
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop
 8007e00:	40012c00 	.word	0x40012c00
 8007e04:	40014000 	.word	0x40014000
 8007e08:	40014400 	.word	0x40014400

08007e0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e14:	bf00      	nop
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e28:	bf00      	nop
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007e3c:	bf00      	nop
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d101      	bne.n	8007e5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	e040      	b.n	8007edc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d106      	bne.n	8007e70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f7fa fcc4 	bl	80027f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2224      	movs	r2, #36	; 0x24
 8007e74:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f022 0201 	bic.w	r2, r2, #1
 8007e84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 f82c 	bl	8007ee4 <UART_SetConfig>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d101      	bne.n	8007e96 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	e022      	b.n	8007edc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d002      	beq.n	8007ea4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 fa4c 	bl	800833c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	685a      	ldr	r2, [r3, #4]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007eb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	689a      	ldr	r2, [r3, #8]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ec2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f042 0201 	orr.w	r2, r2, #1
 8007ed2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 fad3 	bl	8008480 <UART_CheckIdleState>
 8007eda:	4603      	mov	r3, r0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ee8:	b08a      	sub	sp, #40	; 0x28
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	689a      	ldr	r2, [r3, #8]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	691b      	ldr	r3, [r3, #16]
 8007efc:	431a      	orrs	r2, r3
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	695b      	ldr	r3, [r3, #20]
 8007f02:	431a      	orrs	r2, r3
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	69db      	ldr	r3, [r3, #28]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	4bb4      	ldr	r3, [pc, #720]	; (80081e4 <UART_SetConfig+0x300>)
 8007f14:	4013      	ands	r3, r2
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	6812      	ldr	r2, [r2, #0]
 8007f1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f1c:	430b      	orrs	r3, r1
 8007f1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	68da      	ldr	r2, [r3, #12]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	430a      	orrs	r2, r1
 8007f34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	699b      	ldr	r3, [r3, #24]
 8007f3a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4aa9      	ldr	r2, [pc, #676]	; (80081e8 <UART_SetConfig+0x304>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d004      	beq.n	8007f50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6a1b      	ldr	r3, [r3, #32]
 8007f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f60:	430a      	orrs	r2, r1
 8007f62:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4aa0      	ldr	r2, [pc, #640]	; (80081ec <UART_SetConfig+0x308>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d126      	bne.n	8007fbc <UART_SetConfig+0xd8>
 8007f6e:	4ba0      	ldr	r3, [pc, #640]	; (80081f0 <UART_SetConfig+0x30c>)
 8007f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f74:	f003 0303 	and.w	r3, r3, #3
 8007f78:	2b03      	cmp	r3, #3
 8007f7a:	d81b      	bhi.n	8007fb4 <UART_SetConfig+0xd0>
 8007f7c:	a201      	add	r2, pc, #4	; (adr r2, 8007f84 <UART_SetConfig+0xa0>)
 8007f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f82:	bf00      	nop
 8007f84:	08007f95 	.word	0x08007f95
 8007f88:	08007fa5 	.word	0x08007fa5
 8007f8c:	08007f9d 	.word	0x08007f9d
 8007f90:	08007fad 	.word	0x08007fad
 8007f94:	2301      	movs	r3, #1
 8007f96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f9a:	e080      	b.n	800809e <UART_SetConfig+0x1ba>
 8007f9c:	2302      	movs	r3, #2
 8007f9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fa2:	e07c      	b.n	800809e <UART_SetConfig+0x1ba>
 8007fa4:	2304      	movs	r3, #4
 8007fa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007faa:	e078      	b.n	800809e <UART_SetConfig+0x1ba>
 8007fac:	2308      	movs	r3, #8
 8007fae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fb2:	e074      	b.n	800809e <UART_SetConfig+0x1ba>
 8007fb4:	2310      	movs	r3, #16
 8007fb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fba:	e070      	b.n	800809e <UART_SetConfig+0x1ba>
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a8c      	ldr	r2, [pc, #560]	; (80081f4 <UART_SetConfig+0x310>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d138      	bne.n	8008038 <UART_SetConfig+0x154>
 8007fc6:	4b8a      	ldr	r3, [pc, #552]	; (80081f0 <UART_SetConfig+0x30c>)
 8007fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fcc:	f003 030c 	and.w	r3, r3, #12
 8007fd0:	2b0c      	cmp	r3, #12
 8007fd2:	d82d      	bhi.n	8008030 <UART_SetConfig+0x14c>
 8007fd4:	a201      	add	r2, pc, #4	; (adr r2, 8007fdc <UART_SetConfig+0xf8>)
 8007fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fda:	bf00      	nop
 8007fdc:	08008011 	.word	0x08008011
 8007fe0:	08008031 	.word	0x08008031
 8007fe4:	08008031 	.word	0x08008031
 8007fe8:	08008031 	.word	0x08008031
 8007fec:	08008021 	.word	0x08008021
 8007ff0:	08008031 	.word	0x08008031
 8007ff4:	08008031 	.word	0x08008031
 8007ff8:	08008031 	.word	0x08008031
 8007ffc:	08008019 	.word	0x08008019
 8008000:	08008031 	.word	0x08008031
 8008004:	08008031 	.word	0x08008031
 8008008:	08008031 	.word	0x08008031
 800800c:	08008029 	.word	0x08008029
 8008010:	2300      	movs	r3, #0
 8008012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008016:	e042      	b.n	800809e <UART_SetConfig+0x1ba>
 8008018:	2302      	movs	r3, #2
 800801a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800801e:	e03e      	b.n	800809e <UART_SetConfig+0x1ba>
 8008020:	2304      	movs	r3, #4
 8008022:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008026:	e03a      	b.n	800809e <UART_SetConfig+0x1ba>
 8008028:	2308      	movs	r3, #8
 800802a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800802e:	e036      	b.n	800809e <UART_SetConfig+0x1ba>
 8008030:	2310      	movs	r3, #16
 8008032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008036:	e032      	b.n	800809e <UART_SetConfig+0x1ba>
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a6a      	ldr	r2, [pc, #424]	; (80081e8 <UART_SetConfig+0x304>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d12a      	bne.n	8008098 <UART_SetConfig+0x1b4>
 8008042:	4b6b      	ldr	r3, [pc, #428]	; (80081f0 <UART_SetConfig+0x30c>)
 8008044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008048:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800804c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008050:	d01a      	beq.n	8008088 <UART_SetConfig+0x1a4>
 8008052:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008056:	d81b      	bhi.n	8008090 <UART_SetConfig+0x1ac>
 8008058:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800805c:	d00c      	beq.n	8008078 <UART_SetConfig+0x194>
 800805e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008062:	d815      	bhi.n	8008090 <UART_SetConfig+0x1ac>
 8008064:	2b00      	cmp	r3, #0
 8008066:	d003      	beq.n	8008070 <UART_SetConfig+0x18c>
 8008068:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800806c:	d008      	beq.n	8008080 <UART_SetConfig+0x19c>
 800806e:	e00f      	b.n	8008090 <UART_SetConfig+0x1ac>
 8008070:	2300      	movs	r3, #0
 8008072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008076:	e012      	b.n	800809e <UART_SetConfig+0x1ba>
 8008078:	2302      	movs	r3, #2
 800807a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800807e:	e00e      	b.n	800809e <UART_SetConfig+0x1ba>
 8008080:	2304      	movs	r3, #4
 8008082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008086:	e00a      	b.n	800809e <UART_SetConfig+0x1ba>
 8008088:	2308      	movs	r3, #8
 800808a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800808e:	e006      	b.n	800809e <UART_SetConfig+0x1ba>
 8008090:	2310      	movs	r3, #16
 8008092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008096:	e002      	b.n	800809e <UART_SetConfig+0x1ba>
 8008098:	2310      	movs	r3, #16
 800809a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a51      	ldr	r2, [pc, #324]	; (80081e8 <UART_SetConfig+0x304>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d17a      	bne.n	800819e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80080a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80080ac:	2b08      	cmp	r3, #8
 80080ae:	d824      	bhi.n	80080fa <UART_SetConfig+0x216>
 80080b0:	a201      	add	r2, pc, #4	; (adr r2, 80080b8 <UART_SetConfig+0x1d4>)
 80080b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b6:	bf00      	nop
 80080b8:	080080dd 	.word	0x080080dd
 80080bc:	080080fb 	.word	0x080080fb
 80080c0:	080080e5 	.word	0x080080e5
 80080c4:	080080fb 	.word	0x080080fb
 80080c8:	080080eb 	.word	0x080080eb
 80080cc:	080080fb 	.word	0x080080fb
 80080d0:	080080fb 	.word	0x080080fb
 80080d4:	080080fb 	.word	0x080080fb
 80080d8:	080080f3 	.word	0x080080f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080dc:	f7fe f9ba 	bl	8006454 <HAL_RCC_GetPCLK1Freq>
 80080e0:	61f8      	str	r0, [r7, #28]
        break;
 80080e2:	e010      	b.n	8008106 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080e4:	4b44      	ldr	r3, [pc, #272]	; (80081f8 <UART_SetConfig+0x314>)
 80080e6:	61fb      	str	r3, [r7, #28]
        break;
 80080e8:	e00d      	b.n	8008106 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080ea:	f7fe f91b 	bl	8006324 <HAL_RCC_GetSysClockFreq>
 80080ee:	61f8      	str	r0, [r7, #28]
        break;
 80080f0:	e009      	b.n	8008106 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080f6:	61fb      	str	r3, [r7, #28]
        break;
 80080f8:	e005      	b.n	8008106 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80080fa:	2300      	movs	r3, #0
 80080fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008104:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	2b00      	cmp	r3, #0
 800810a:	f000 8107 	beq.w	800831c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	685a      	ldr	r2, [r3, #4]
 8008112:	4613      	mov	r3, r2
 8008114:	005b      	lsls	r3, r3, #1
 8008116:	4413      	add	r3, r2
 8008118:	69fa      	ldr	r2, [r7, #28]
 800811a:	429a      	cmp	r2, r3
 800811c:	d305      	bcc.n	800812a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008124:	69fa      	ldr	r2, [r7, #28]
 8008126:	429a      	cmp	r2, r3
 8008128:	d903      	bls.n	8008132 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008130:	e0f4      	b.n	800831c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	2200      	movs	r2, #0
 8008136:	461c      	mov	r4, r3
 8008138:	4615      	mov	r5, r2
 800813a:	f04f 0200 	mov.w	r2, #0
 800813e:	f04f 0300 	mov.w	r3, #0
 8008142:	022b      	lsls	r3, r5, #8
 8008144:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008148:	0222      	lsls	r2, r4, #8
 800814a:	68f9      	ldr	r1, [r7, #12]
 800814c:	6849      	ldr	r1, [r1, #4]
 800814e:	0849      	lsrs	r1, r1, #1
 8008150:	2000      	movs	r0, #0
 8008152:	4688      	mov	r8, r1
 8008154:	4681      	mov	r9, r0
 8008156:	eb12 0a08 	adds.w	sl, r2, r8
 800815a:	eb43 0b09 	adc.w	fp, r3, r9
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	603b      	str	r3, [r7, #0]
 8008166:	607a      	str	r2, [r7, #4]
 8008168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800816c:	4650      	mov	r0, sl
 800816e:	4659      	mov	r1, fp
 8008170:	f7f8 fd1a 	bl	8000ba8 <__aeabi_uldivmod>
 8008174:	4602      	mov	r2, r0
 8008176:	460b      	mov	r3, r1
 8008178:	4613      	mov	r3, r2
 800817a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800817c:	69bb      	ldr	r3, [r7, #24]
 800817e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008182:	d308      	bcc.n	8008196 <UART_SetConfig+0x2b2>
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800818a:	d204      	bcs.n	8008196 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	69ba      	ldr	r2, [r7, #24]
 8008192:	60da      	str	r2, [r3, #12]
 8008194:	e0c2      	b.n	800831c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800819c:	e0be      	b.n	800831c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	69db      	ldr	r3, [r3, #28]
 80081a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081a6:	d16a      	bne.n	800827e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80081a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80081ac:	2b08      	cmp	r3, #8
 80081ae:	d834      	bhi.n	800821a <UART_SetConfig+0x336>
 80081b0:	a201      	add	r2, pc, #4	; (adr r2, 80081b8 <UART_SetConfig+0x2d4>)
 80081b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b6:	bf00      	nop
 80081b8:	080081dd 	.word	0x080081dd
 80081bc:	080081fd 	.word	0x080081fd
 80081c0:	08008205 	.word	0x08008205
 80081c4:	0800821b 	.word	0x0800821b
 80081c8:	0800820b 	.word	0x0800820b
 80081cc:	0800821b 	.word	0x0800821b
 80081d0:	0800821b 	.word	0x0800821b
 80081d4:	0800821b 	.word	0x0800821b
 80081d8:	08008213 	.word	0x08008213
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081dc:	f7fe f93a 	bl	8006454 <HAL_RCC_GetPCLK1Freq>
 80081e0:	61f8      	str	r0, [r7, #28]
        break;
 80081e2:	e020      	b.n	8008226 <UART_SetConfig+0x342>
 80081e4:	efff69f3 	.word	0xefff69f3
 80081e8:	40008000 	.word	0x40008000
 80081ec:	40013800 	.word	0x40013800
 80081f0:	40021000 	.word	0x40021000
 80081f4:	40004400 	.word	0x40004400
 80081f8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081fc:	f7fe f940 	bl	8006480 <HAL_RCC_GetPCLK2Freq>
 8008200:	61f8      	str	r0, [r7, #28]
        break;
 8008202:	e010      	b.n	8008226 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008204:	4b4c      	ldr	r3, [pc, #304]	; (8008338 <UART_SetConfig+0x454>)
 8008206:	61fb      	str	r3, [r7, #28]
        break;
 8008208:	e00d      	b.n	8008226 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800820a:	f7fe f88b 	bl	8006324 <HAL_RCC_GetSysClockFreq>
 800820e:	61f8      	str	r0, [r7, #28]
        break;
 8008210:	e009      	b.n	8008226 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008216:	61fb      	str	r3, [r7, #28]
        break;
 8008218:	e005      	b.n	8008226 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800821a:	2300      	movs	r3, #0
 800821c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008224:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d077      	beq.n	800831c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	005a      	lsls	r2, r3, #1
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	085b      	lsrs	r3, r3, #1
 8008236:	441a      	add	r2, r3
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008240:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	2b0f      	cmp	r3, #15
 8008246:	d916      	bls.n	8008276 <UART_SetConfig+0x392>
 8008248:	69bb      	ldr	r3, [r7, #24]
 800824a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800824e:	d212      	bcs.n	8008276 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	b29b      	uxth	r3, r3
 8008254:	f023 030f 	bic.w	r3, r3, #15
 8008258:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800825a:	69bb      	ldr	r3, [r7, #24]
 800825c:	085b      	lsrs	r3, r3, #1
 800825e:	b29b      	uxth	r3, r3
 8008260:	f003 0307 	and.w	r3, r3, #7
 8008264:	b29a      	uxth	r2, r3
 8008266:	8afb      	ldrh	r3, [r7, #22]
 8008268:	4313      	orrs	r3, r2
 800826a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	8afa      	ldrh	r2, [r7, #22]
 8008272:	60da      	str	r2, [r3, #12]
 8008274:	e052      	b.n	800831c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800827c:	e04e      	b.n	800831c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800827e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008282:	2b08      	cmp	r3, #8
 8008284:	d827      	bhi.n	80082d6 <UART_SetConfig+0x3f2>
 8008286:	a201      	add	r2, pc, #4	; (adr r2, 800828c <UART_SetConfig+0x3a8>)
 8008288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800828c:	080082b1 	.word	0x080082b1
 8008290:	080082b9 	.word	0x080082b9
 8008294:	080082c1 	.word	0x080082c1
 8008298:	080082d7 	.word	0x080082d7
 800829c:	080082c7 	.word	0x080082c7
 80082a0:	080082d7 	.word	0x080082d7
 80082a4:	080082d7 	.word	0x080082d7
 80082a8:	080082d7 	.word	0x080082d7
 80082ac:	080082cf 	.word	0x080082cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082b0:	f7fe f8d0 	bl	8006454 <HAL_RCC_GetPCLK1Freq>
 80082b4:	61f8      	str	r0, [r7, #28]
        break;
 80082b6:	e014      	b.n	80082e2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082b8:	f7fe f8e2 	bl	8006480 <HAL_RCC_GetPCLK2Freq>
 80082bc:	61f8      	str	r0, [r7, #28]
        break;
 80082be:	e010      	b.n	80082e2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082c0:	4b1d      	ldr	r3, [pc, #116]	; (8008338 <UART_SetConfig+0x454>)
 80082c2:	61fb      	str	r3, [r7, #28]
        break;
 80082c4:	e00d      	b.n	80082e2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082c6:	f7fe f82d 	bl	8006324 <HAL_RCC_GetSysClockFreq>
 80082ca:	61f8      	str	r0, [r7, #28]
        break;
 80082cc:	e009      	b.n	80082e2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082d2:	61fb      	str	r3, [r7, #28]
        break;
 80082d4:	e005      	b.n	80082e2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80082d6:	2300      	movs	r3, #0
 80082d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80082e0:	bf00      	nop
    }

    if (pclk != 0U)
 80082e2:	69fb      	ldr	r3, [r7, #28]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d019      	beq.n	800831c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	085a      	lsrs	r2, r3, #1
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	441a      	add	r2, r3
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80082fa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	2b0f      	cmp	r3, #15
 8008300:	d909      	bls.n	8008316 <UART_SetConfig+0x432>
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008308:	d205      	bcs.n	8008316 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	b29a      	uxth	r2, r3
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	60da      	str	r2, [r3, #12]
 8008314:	e002      	b.n	800831c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2200      	movs	r2, #0
 8008320:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2200      	movs	r2, #0
 8008326:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008328:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800832c:	4618      	mov	r0, r3
 800832e:	3728      	adds	r7, #40	; 0x28
 8008330:	46bd      	mov	sp, r7
 8008332:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008336:	bf00      	nop
 8008338:	00f42400 	.word	0x00f42400

0800833c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008348:	f003 0301 	and.w	r3, r3, #1
 800834c:	2b00      	cmp	r3, #0
 800834e:	d00a      	beq.n	8008366 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	430a      	orrs	r2, r1
 8008364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836a:	f003 0302 	and.w	r3, r3, #2
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00a      	beq.n	8008388 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	430a      	orrs	r2, r1
 8008386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838c:	f003 0304 	and.w	r3, r3, #4
 8008390:	2b00      	cmp	r3, #0
 8008392:	d00a      	beq.n	80083aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	430a      	orrs	r2, r1
 80083a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ae:	f003 0308 	and.w	r3, r3, #8
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d00a      	beq.n	80083cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	430a      	orrs	r2, r1
 80083ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d0:	f003 0310 	and.w	r3, r3, #16
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00a      	beq.n	80083ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	430a      	orrs	r2, r1
 80083ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f2:	f003 0320 	and.w	r3, r3, #32
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00a      	beq.n	8008410 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	430a      	orrs	r2, r1
 800840e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008418:	2b00      	cmp	r3, #0
 800841a:	d01a      	beq.n	8008452 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	430a      	orrs	r2, r1
 8008430:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008436:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800843a:	d10a      	bne.n	8008452 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	430a      	orrs	r2, r1
 8008450:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00a      	beq.n	8008474 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	430a      	orrs	r2, r1
 8008472:	605a      	str	r2, [r3, #4]
  }
}
 8008474:	bf00      	nop
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b086      	sub	sp, #24
 8008484:	af02      	add	r7, sp, #8
 8008486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008490:	f7fa fe3c 	bl	800310c <HAL_GetTick>
 8008494:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 0308 	and.w	r3, r3, #8
 80084a0:	2b08      	cmp	r3, #8
 80084a2:	d10e      	bne.n	80084c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80084a8:	9300      	str	r3, [sp, #0]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2200      	movs	r2, #0
 80084ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 f82d 	bl	8008512 <UART_WaitOnFlagUntilTimeout>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d001      	beq.n	80084c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084be:	2303      	movs	r3, #3
 80084c0:	e023      	b.n	800850a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 0304 	and.w	r3, r3, #4
 80084cc:	2b04      	cmp	r3, #4
 80084ce:	d10e      	bne.n	80084ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80084d4:	9300      	str	r3, [sp, #0]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2200      	movs	r2, #0
 80084da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 f817 	bl	8008512 <UART_WaitOnFlagUntilTimeout>
 80084e4:	4603      	mov	r3, r0
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d001      	beq.n	80084ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084ea:	2303      	movs	r3, #3
 80084ec:	e00d      	b.n	800850a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2220      	movs	r2, #32
 80084f2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2220      	movs	r2, #32
 80084f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008508:	2300      	movs	r3, #0
}
 800850a:	4618      	mov	r0, r3
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b09c      	sub	sp, #112	; 0x70
 8008516:	af00      	add	r7, sp, #0
 8008518:	60f8      	str	r0, [r7, #12]
 800851a:	60b9      	str	r1, [r7, #8]
 800851c:	603b      	str	r3, [r7, #0]
 800851e:	4613      	mov	r3, r2
 8008520:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008522:	e0a5      	b.n	8008670 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008524:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800852a:	f000 80a1 	beq.w	8008670 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800852e:	f7fa fded 	bl	800310c <HAL_GetTick>
 8008532:	4602      	mov	r2, r0
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	1ad3      	subs	r3, r2, r3
 8008538:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800853a:	429a      	cmp	r2, r3
 800853c:	d302      	bcc.n	8008544 <UART_WaitOnFlagUntilTimeout+0x32>
 800853e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008540:	2b00      	cmp	r3, #0
 8008542:	d13e      	bne.n	80085c2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800854c:	e853 3f00 	ldrex	r3, [r3]
 8008550:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008554:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008558:	667b      	str	r3, [r7, #100]	; 0x64
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	461a      	mov	r2, r3
 8008560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008562:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008564:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008566:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008568:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800856a:	e841 2300 	strex	r3, r2, [r1]
 800856e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008570:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008572:	2b00      	cmp	r3, #0
 8008574:	d1e6      	bne.n	8008544 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	3308      	adds	r3, #8
 800857c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008580:	e853 3f00 	ldrex	r3, [r3]
 8008584:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008588:	f023 0301 	bic.w	r3, r3, #1
 800858c:	663b      	str	r3, [r7, #96]	; 0x60
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	3308      	adds	r3, #8
 8008594:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008596:	64ba      	str	r2, [r7, #72]	; 0x48
 8008598:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800859c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800859e:	e841 2300 	strex	r3, r2, [r1]
 80085a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80085a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d1e5      	bne.n	8008576 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2220      	movs	r2, #32
 80085ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2220      	movs	r2, #32
 80085b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2200      	movs	r2, #0
 80085ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80085be:	2303      	movs	r3, #3
 80085c0:	e067      	b.n	8008692 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f003 0304 	and.w	r3, r3, #4
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d04f      	beq.n	8008670 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	69db      	ldr	r3, [r3, #28]
 80085d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085de:	d147      	bne.n	8008670 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085e8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f2:	e853 3f00 	ldrex	r3, [r3]
 80085f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80085fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	461a      	mov	r2, r3
 8008606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008608:	637b      	str	r3, [r7, #52]	; 0x34
 800860a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800860e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008610:	e841 2300 	strex	r3, r2, [r1]
 8008614:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1e6      	bne.n	80085ea <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	3308      	adds	r3, #8
 8008622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	e853 3f00 	ldrex	r3, [r3]
 800862a:	613b      	str	r3, [r7, #16]
   return(result);
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	f023 0301 	bic.w	r3, r3, #1
 8008632:	66bb      	str	r3, [r7, #104]	; 0x68
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	3308      	adds	r3, #8
 800863a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800863c:	623a      	str	r2, [r7, #32]
 800863e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008640:	69f9      	ldr	r1, [r7, #28]
 8008642:	6a3a      	ldr	r2, [r7, #32]
 8008644:	e841 2300 	strex	r3, r2, [r1]
 8008648:	61bb      	str	r3, [r7, #24]
   return(result);
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d1e5      	bne.n	800861c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2220      	movs	r2, #32
 8008654:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2220      	movs	r2, #32
 800865a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2220      	movs	r2, #32
 8008660:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2200      	movs	r2, #0
 8008668:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800866c:	2303      	movs	r3, #3
 800866e:	e010      	b.n	8008692 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	69da      	ldr	r2, [r3, #28]
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	4013      	ands	r3, r2
 800867a:	68ba      	ldr	r2, [r7, #8]
 800867c:	429a      	cmp	r2, r3
 800867e:	bf0c      	ite	eq
 8008680:	2301      	moveq	r3, #1
 8008682:	2300      	movne	r3, #0
 8008684:	b2db      	uxtb	r3, r3
 8008686:	461a      	mov	r2, r3
 8008688:	79fb      	ldrb	r3, [r7, #7]
 800868a:	429a      	cmp	r2, r3
 800868c:	f43f af4a 	beq.w	8008524 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	3770      	adds	r7, #112	; 0x70
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
	...

0800869c <__errno>:
 800869c:	4b01      	ldr	r3, [pc, #4]	; (80086a4 <__errno+0x8>)
 800869e:	6818      	ldr	r0, [r3, #0]
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	2000000c 	.word	0x2000000c

080086a8 <__libc_init_array>:
 80086a8:	b570      	push	{r4, r5, r6, lr}
 80086aa:	4d0d      	ldr	r5, [pc, #52]	; (80086e0 <__libc_init_array+0x38>)
 80086ac:	4c0d      	ldr	r4, [pc, #52]	; (80086e4 <__libc_init_array+0x3c>)
 80086ae:	1b64      	subs	r4, r4, r5
 80086b0:	10a4      	asrs	r4, r4, #2
 80086b2:	2600      	movs	r6, #0
 80086b4:	42a6      	cmp	r6, r4
 80086b6:	d109      	bne.n	80086cc <__libc_init_array+0x24>
 80086b8:	4d0b      	ldr	r5, [pc, #44]	; (80086e8 <__libc_init_array+0x40>)
 80086ba:	4c0c      	ldr	r4, [pc, #48]	; (80086ec <__libc_init_array+0x44>)
 80086bc:	f002 fd38 	bl	800b130 <_init>
 80086c0:	1b64      	subs	r4, r4, r5
 80086c2:	10a4      	asrs	r4, r4, #2
 80086c4:	2600      	movs	r6, #0
 80086c6:	42a6      	cmp	r6, r4
 80086c8:	d105      	bne.n	80086d6 <__libc_init_array+0x2e>
 80086ca:	bd70      	pop	{r4, r5, r6, pc}
 80086cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80086d0:	4798      	blx	r3
 80086d2:	3601      	adds	r6, #1
 80086d4:	e7ee      	b.n	80086b4 <__libc_init_array+0xc>
 80086d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80086da:	4798      	blx	r3
 80086dc:	3601      	adds	r6, #1
 80086de:	e7f2      	b.n	80086c6 <__libc_init_array+0x1e>
 80086e0:	0800b574 	.word	0x0800b574
 80086e4:	0800b574 	.word	0x0800b574
 80086e8:	0800b574 	.word	0x0800b574
 80086ec:	0800b578 	.word	0x0800b578

080086f0 <memset>:
 80086f0:	4402      	add	r2, r0
 80086f2:	4603      	mov	r3, r0
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d100      	bne.n	80086fa <memset+0xa>
 80086f8:	4770      	bx	lr
 80086fa:	f803 1b01 	strb.w	r1, [r3], #1
 80086fe:	e7f9      	b.n	80086f4 <memset+0x4>

08008700 <__cvt>:
 8008700:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008704:	ec55 4b10 	vmov	r4, r5, d0
 8008708:	2d00      	cmp	r5, #0
 800870a:	460e      	mov	r6, r1
 800870c:	4619      	mov	r1, r3
 800870e:	462b      	mov	r3, r5
 8008710:	bfbb      	ittet	lt
 8008712:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008716:	461d      	movlt	r5, r3
 8008718:	2300      	movge	r3, #0
 800871a:	232d      	movlt	r3, #45	; 0x2d
 800871c:	700b      	strb	r3, [r1, #0]
 800871e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008720:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008724:	4691      	mov	r9, r2
 8008726:	f023 0820 	bic.w	r8, r3, #32
 800872a:	bfbc      	itt	lt
 800872c:	4622      	movlt	r2, r4
 800872e:	4614      	movlt	r4, r2
 8008730:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008734:	d005      	beq.n	8008742 <__cvt+0x42>
 8008736:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800873a:	d100      	bne.n	800873e <__cvt+0x3e>
 800873c:	3601      	adds	r6, #1
 800873e:	2102      	movs	r1, #2
 8008740:	e000      	b.n	8008744 <__cvt+0x44>
 8008742:	2103      	movs	r1, #3
 8008744:	ab03      	add	r3, sp, #12
 8008746:	9301      	str	r3, [sp, #4]
 8008748:	ab02      	add	r3, sp, #8
 800874a:	9300      	str	r3, [sp, #0]
 800874c:	ec45 4b10 	vmov	d0, r4, r5
 8008750:	4653      	mov	r3, sl
 8008752:	4632      	mov	r2, r6
 8008754:	f000 fccc 	bl	80090f0 <_dtoa_r>
 8008758:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800875c:	4607      	mov	r7, r0
 800875e:	d102      	bne.n	8008766 <__cvt+0x66>
 8008760:	f019 0f01 	tst.w	r9, #1
 8008764:	d022      	beq.n	80087ac <__cvt+0xac>
 8008766:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800876a:	eb07 0906 	add.w	r9, r7, r6
 800876e:	d110      	bne.n	8008792 <__cvt+0x92>
 8008770:	783b      	ldrb	r3, [r7, #0]
 8008772:	2b30      	cmp	r3, #48	; 0x30
 8008774:	d10a      	bne.n	800878c <__cvt+0x8c>
 8008776:	2200      	movs	r2, #0
 8008778:	2300      	movs	r3, #0
 800877a:	4620      	mov	r0, r4
 800877c:	4629      	mov	r1, r5
 800877e:	f7f8 f9a3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008782:	b918      	cbnz	r0, 800878c <__cvt+0x8c>
 8008784:	f1c6 0601 	rsb	r6, r6, #1
 8008788:	f8ca 6000 	str.w	r6, [sl]
 800878c:	f8da 3000 	ldr.w	r3, [sl]
 8008790:	4499      	add	r9, r3
 8008792:	2200      	movs	r2, #0
 8008794:	2300      	movs	r3, #0
 8008796:	4620      	mov	r0, r4
 8008798:	4629      	mov	r1, r5
 800879a:	f7f8 f995 	bl	8000ac8 <__aeabi_dcmpeq>
 800879e:	b108      	cbz	r0, 80087a4 <__cvt+0xa4>
 80087a0:	f8cd 900c 	str.w	r9, [sp, #12]
 80087a4:	2230      	movs	r2, #48	; 0x30
 80087a6:	9b03      	ldr	r3, [sp, #12]
 80087a8:	454b      	cmp	r3, r9
 80087aa:	d307      	bcc.n	80087bc <__cvt+0xbc>
 80087ac:	9b03      	ldr	r3, [sp, #12]
 80087ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087b0:	1bdb      	subs	r3, r3, r7
 80087b2:	4638      	mov	r0, r7
 80087b4:	6013      	str	r3, [r2, #0]
 80087b6:	b004      	add	sp, #16
 80087b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087bc:	1c59      	adds	r1, r3, #1
 80087be:	9103      	str	r1, [sp, #12]
 80087c0:	701a      	strb	r2, [r3, #0]
 80087c2:	e7f0      	b.n	80087a6 <__cvt+0xa6>

080087c4 <__exponent>:
 80087c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087c6:	4603      	mov	r3, r0
 80087c8:	2900      	cmp	r1, #0
 80087ca:	bfb8      	it	lt
 80087cc:	4249      	neglt	r1, r1
 80087ce:	f803 2b02 	strb.w	r2, [r3], #2
 80087d2:	bfb4      	ite	lt
 80087d4:	222d      	movlt	r2, #45	; 0x2d
 80087d6:	222b      	movge	r2, #43	; 0x2b
 80087d8:	2909      	cmp	r1, #9
 80087da:	7042      	strb	r2, [r0, #1]
 80087dc:	dd2a      	ble.n	8008834 <__exponent+0x70>
 80087de:	f10d 0407 	add.w	r4, sp, #7
 80087e2:	46a4      	mov	ip, r4
 80087e4:	270a      	movs	r7, #10
 80087e6:	46a6      	mov	lr, r4
 80087e8:	460a      	mov	r2, r1
 80087ea:	fb91 f6f7 	sdiv	r6, r1, r7
 80087ee:	fb07 1516 	mls	r5, r7, r6, r1
 80087f2:	3530      	adds	r5, #48	; 0x30
 80087f4:	2a63      	cmp	r2, #99	; 0x63
 80087f6:	f104 34ff 	add.w	r4, r4, #4294967295
 80087fa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80087fe:	4631      	mov	r1, r6
 8008800:	dcf1      	bgt.n	80087e6 <__exponent+0x22>
 8008802:	3130      	adds	r1, #48	; 0x30
 8008804:	f1ae 0502 	sub.w	r5, lr, #2
 8008808:	f804 1c01 	strb.w	r1, [r4, #-1]
 800880c:	1c44      	adds	r4, r0, #1
 800880e:	4629      	mov	r1, r5
 8008810:	4561      	cmp	r1, ip
 8008812:	d30a      	bcc.n	800882a <__exponent+0x66>
 8008814:	f10d 0209 	add.w	r2, sp, #9
 8008818:	eba2 020e 	sub.w	r2, r2, lr
 800881c:	4565      	cmp	r5, ip
 800881e:	bf88      	it	hi
 8008820:	2200      	movhi	r2, #0
 8008822:	4413      	add	r3, r2
 8008824:	1a18      	subs	r0, r3, r0
 8008826:	b003      	add	sp, #12
 8008828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800882a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800882e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008832:	e7ed      	b.n	8008810 <__exponent+0x4c>
 8008834:	2330      	movs	r3, #48	; 0x30
 8008836:	3130      	adds	r1, #48	; 0x30
 8008838:	7083      	strb	r3, [r0, #2]
 800883a:	70c1      	strb	r1, [r0, #3]
 800883c:	1d03      	adds	r3, r0, #4
 800883e:	e7f1      	b.n	8008824 <__exponent+0x60>

08008840 <_printf_float>:
 8008840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008844:	ed2d 8b02 	vpush	{d8}
 8008848:	b08d      	sub	sp, #52	; 0x34
 800884a:	460c      	mov	r4, r1
 800884c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008850:	4616      	mov	r6, r2
 8008852:	461f      	mov	r7, r3
 8008854:	4605      	mov	r5, r0
 8008856:	f001 fa39 	bl	8009ccc <_localeconv_r>
 800885a:	f8d0 a000 	ldr.w	sl, [r0]
 800885e:	4650      	mov	r0, sl
 8008860:	f7f7 fcb6 	bl	80001d0 <strlen>
 8008864:	2300      	movs	r3, #0
 8008866:	930a      	str	r3, [sp, #40]	; 0x28
 8008868:	6823      	ldr	r3, [r4, #0]
 800886a:	9305      	str	r3, [sp, #20]
 800886c:	f8d8 3000 	ldr.w	r3, [r8]
 8008870:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008874:	3307      	adds	r3, #7
 8008876:	f023 0307 	bic.w	r3, r3, #7
 800887a:	f103 0208 	add.w	r2, r3, #8
 800887e:	f8c8 2000 	str.w	r2, [r8]
 8008882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008886:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800888a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800888e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008892:	9307      	str	r3, [sp, #28]
 8008894:	f8cd 8018 	str.w	r8, [sp, #24]
 8008898:	ee08 0a10 	vmov	s16, r0
 800889c:	4b9f      	ldr	r3, [pc, #636]	; (8008b1c <_printf_float+0x2dc>)
 800889e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088a2:	f04f 32ff 	mov.w	r2, #4294967295
 80088a6:	f7f8 f941 	bl	8000b2c <__aeabi_dcmpun>
 80088aa:	bb88      	cbnz	r0, 8008910 <_printf_float+0xd0>
 80088ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088b0:	4b9a      	ldr	r3, [pc, #616]	; (8008b1c <_printf_float+0x2dc>)
 80088b2:	f04f 32ff 	mov.w	r2, #4294967295
 80088b6:	f7f8 f91b 	bl	8000af0 <__aeabi_dcmple>
 80088ba:	bb48      	cbnz	r0, 8008910 <_printf_float+0xd0>
 80088bc:	2200      	movs	r2, #0
 80088be:	2300      	movs	r3, #0
 80088c0:	4640      	mov	r0, r8
 80088c2:	4649      	mov	r1, r9
 80088c4:	f7f8 f90a 	bl	8000adc <__aeabi_dcmplt>
 80088c8:	b110      	cbz	r0, 80088d0 <_printf_float+0x90>
 80088ca:	232d      	movs	r3, #45	; 0x2d
 80088cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088d0:	4b93      	ldr	r3, [pc, #588]	; (8008b20 <_printf_float+0x2e0>)
 80088d2:	4894      	ldr	r0, [pc, #592]	; (8008b24 <_printf_float+0x2e4>)
 80088d4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80088d8:	bf94      	ite	ls
 80088da:	4698      	movls	r8, r3
 80088dc:	4680      	movhi	r8, r0
 80088de:	2303      	movs	r3, #3
 80088e0:	6123      	str	r3, [r4, #16]
 80088e2:	9b05      	ldr	r3, [sp, #20]
 80088e4:	f023 0204 	bic.w	r2, r3, #4
 80088e8:	6022      	str	r2, [r4, #0]
 80088ea:	f04f 0900 	mov.w	r9, #0
 80088ee:	9700      	str	r7, [sp, #0]
 80088f0:	4633      	mov	r3, r6
 80088f2:	aa0b      	add	r2, sp, #44	; 0x2c
 80088f4:	4621      	mov	r1, r4
 80088f6:	4628      	mov	r0, r5
 80088f8:	f000 f9d8 	bl	8008cac <_printf_common>
 80088fc:	3001      	adds	r0, #1
 80088fe:	f040 8090 	bne.w	8008a22 <_printf_float+0x1e2>
 8008902:	f04f 30ff 	mov.w	r0, #4294967295
 8008906:	b00d      	add	sp, #52	; 0x34
 8008908:	ecbd 8b02 	vpop	{d8}
 800890c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008910:	4642      	mov	r2, r8
 8008912:	464b      	mov	r3, r9
 8008914:	4640      	mov	r0, r8
 8008916:	4649      	mov	r1, r9
 8008918:	f7f8 f908 	bl	8000b2c <__aeabi_dcmpun>
 800891c:	b140      	cbz	r0, 8008930 <_printf_float+0xf0>
 800891e:	464b      	mov	r3, r9
 8008920:	2b00      	cmp	r3, #0
 8008922:	bfbc      	itt	lt
 8008924:	232d      	movlt	r3, #45	; 0x2d
 8008926:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800892a:	487f      	ldr	r0, [pc, #508]	; (8008b28 <_printf_float+0x2e8>)
 800892c:	4b7f      	ldr	r3, [pc, #508]	; (8008b2c <_printf_float+0x2ec>)
 800892e:	e7d1      	b.n	80088d4 <_printf_float+0x94>
 8008930:	6863      	ldr	r3, [r4, #4]
 8008932:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008936:	9206      	str	r2, [sp, #24]
 8008938:	1c5a      	adds	r2, r3, #1
 800893a:	d13f      	bne.n	80089bc <_printf_float+0x17c>
 800893c:	2306      	movs	r3, #6
 800893e:	6063      	str	r3, [r4, #4]
 8008940:	9b05      	ldr	r3, [sp, #20]
 8008942:	6861      	ldr	r1, [r4, #4]
 8008944:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008948:	2300      	movs	r3, #0
 800894a:	9303      	str	r3, [sp, #12]
 800894c:	ab0a      	add	r3, sp, #40	; 0x28
 800894e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008952:	ab09      	add	r3, sp, #36	; 0x24
 8008954:	ec49 8b10 	vmov	d0, r8, r9
 8008958:	9300      	str	r3, [sp, #0]
 800895a:	6022      	str	r2, [r4, #0]
 800895c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008960:	4628      	mov	r0, r5
 8008962:	f7ff fecd 	bl	8008700 <__cvt>
 8008966:	9b06      	ldr	r3, [sp, #24]
 8008968:	9909      	ldr	r1, [sp, #36]	; 0x24
 800896a:	2b47      	cmp	r3, #71	; 0x47
 800896c:	4680      	mov	r8, r0
 800896e:	d108      	bne.n	8008982 <_printf_float+0x142>
 8008970:	1cc8      	adds	r0, r1, #3
 8008972:	db02      	blt.n	800897a <_printf_float+0x13a>
 8008974:	6863      	ldr	r3, [r4, #4]
 8008976:	4299      	cmp	r1, r3
 8008978:	dd41      	ble.n	80089fe <_printf_float+0x1be>
 800897a:	f1ab 0b02 	sub.w	fp, fp, #2
 800897e:	fa5f fb8b 	uxtb.w	fp, fp
 8008982:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008986:	d820      	bhi.n	80089ca <_printf_float+0x18a>
 8008988:	3901      	subs	r1, #1
 800898a:	465a      	mov	r2, fp
 800898c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008990:	9109      	str	r1, [sp, #36]	; 0x24
 8008992:	f7ff ff17 	bl	80087c4 <__exponent>
 8008996:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008998:	1813      	adds	r3, r2, r0
 800899a:	2a01      	cmp	r2, #1
 800899c:	4681      	mov	r9, r0
 800899e:	6123      	str	r3, [r4, #16]
 80089a0:	dc02      	bgt.n	80089a8 <_printf_float+0x168>
 80089a2:	6822      	ldr	r2, [r4, #0]
 80089a4:	07d2      	lsls	r2, r2, #31
 80089a6:	d501      	bpl.n	80089ac <_printf_float+0x16c>
 80089a8:	3301      	adds	r3, #1
 80089aa:	6123      	str	r3, [r4, #16]
 80089ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d09c      	beq.n	80088ee <_printf_float+0xae>
 80089b4:	232d      	movs	r3, #45	; 0x2d
 80089b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089ba:	e798      	b.n	80088ee <_printf_float+0xae>
 80089bc:	9a06      	ldr	r2, [sp, #24]
 80089be:	2a47      	cmp	r2, #71	; 0x47
 80089c0:	d1be      	bne.n	8008940 <_printf_float+0x100>
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d1bc      	bne.n	8008940 <_printf_float+0x100>
 80089c6:	2301      	movs	r3, #1
 80089c8:	e7b9      	b.n	800893e <_printf_float+0xfe>
 80089ca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80089ce:	d118      	bne.n	8008a02 <_printf_float+0x1c2>
 80089d0:	2900      	cmp	r1, #0
 80089d2:	6863      	ldr	r3, [r4, #4]
 80089d4:	dd0b      	ble.n	80089ee <_printf_float+0x1ae>
 80089d6:	6121      	str	r1, [r4, #16]
 80089d8:	b913      	cbnz	r3, 80089e0 <_printf_float+0x1a0>
 80089da:	6822      	ldr	r2, [r4, #0]
 80089dc:	07d0      	lsls	r0, r2, #31
 80089de:	d502      	bpl.n	80089e6 <_printf_float+0x1a6>
 80089e0:	3301      	adds	r3, #1
 80089e2:	440b      	add	r3, r1
 80089e4:	6123      	str	r3, [r4, #16]
 80089e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80089e8:	f04f 0900 	mov.w	r9, #0
 80089ec:	e7de      	b.n	80089ac <_printf_float+0x16c>
 80089ee:	b913      	cbnz	r3, 80089f6 <_printf_float+0x1b6>
 80089f0:	6822      	ldr	r2, [r4, #0]
 80089f2:	07d2      	lsls	r2, r2, #31
 80089f4:	d501      	bpl.n	80089fa <_printf_float+0x1ba>
 80089f6:	3302      	adds	r3, #2
 80089f8:	e7f4      	b.n	80089e4 <_printf_float+0x1a4>
 80089fa:	2301      	movs	r3, #1
 80089fc:	e7f2      	b.n	80089e4 <_printf_float+0x1a4>
 80089fe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008a02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a04:	4299      	cmp	r1, r3
 8008a06:	db05      	blt.n	8008a14 <_printf_float+0x1d4>
 8008a08:	6823      	ldr	r3, [r4, #0]
 8008a0a:	6121      	str	r1, [r4, #16]
 8008a0c:	07d8      	lsls	r0, r3, #31
 8008a0e:	d5ea      	bpl.n	80089e6 <_printf_float+0x1a6>
 8008a10:	1c4b      	adds	r3, r1, #1
 8008a12:	e7e7      	b.n	80089e4 <_printf_float+0x1a4>
 8008a14:	2900      	cmp	r1, #0
 8008a16:	bfd4      	ite	le
 8008a18:	f1c1 0202 	rsble	r2, r1, #2
 8008a1c:	2201      	movgt	r2, #1
 8008a1e:	4413      	add	r3, r2
 8008a20:	e7e0      	b.n	80089e4 <_printf_float+0x1a4>
 8008a22:	6823      	ldr	r3, [r4, #0]
 8008a24:	055a      	lsls	r2, r3, #21
 8008a26:	d407      	bmi.n	8008a38 <_printf_float+0x1f8>
 8008a28:	6923      	ldr	r3, [r4, #16]
 8008a2a:	4642      	mov	r2, r8
 8008a2c:	4631      	mov	r1, r6
 8008a2e:	4628      	mov	r0, r5
 8008a30:	47b8      	blx	r7
 8008a32:	3001      	adds	r0, #1
 8008a34:	d12c      	bne.n	8008a90 <_printf_float+0x250>
 8008a36:	e764      	b.n	8008902 <_printf_float+0xc2>
 8008a38:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008a3c:	f240 80e0 	bls.w	8008c00 <_printf_float+0x3c0>
 8008a40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a44:	2200      	movs	r2, #0
 8008a46:	2300      	movs	r3, #0
 8008a48:	f7f8 f83e 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a4c:	2800      	cmp	r0, #0
 8008a4e:	d034      	beq.n	8008aba <_printf_float+0x27a>
 8008a50:	4a37      	ldr	r2, [pc, #220]	; (8008b30 <_printf_float+0x2f0>)
 8008a52:	2301      	movs	r3, #1
 8008a54:	4631      	mov	r1, r6
 8008a56:	4628      	mov	r0, r5
 8008a58:	47b8      	blx	r7
 8008a5a:	3001      	adds	r0, #1
 8008a5c:	f43f af51 	beq.w	8008902 <_printf_float+0xc2>
 8008a60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a64:	429a      	cmp	r2, r3
 8008a66:	db02      	blt.n	8008a6e <_printf_float+0x22e>
 8008a68:	6823      	ldr	r3, [r4, #0]
 8008a6a:	07d8      	lsls	r0, r3, #31
 8008a6c:	d510      	bpl.n	8008a90 <_printf_float+0x250>
 8008a6e:	ee18 3a10 	vmov	r3, s16
 8008a72:	4652      	mov	r2, sl
 8008a74:	4631      	mov	r1, r6
 8008a76:	4628      	mov	r0, r5
 8008a78:	47b8      	blx	r7
 8008a7a:	3001      	adds	r0, #1
 8008a7c:	f43f af41 	beq.w	8008902 <_printf_float+0xc2>
 8008a80:	f04f 0800 	mov.w	r8, #0
 8008a84:	f104 091a 	add.w	r9, r4, #26
 8008a88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	4543      	cmp	r3, r8
 8008a8e:	dc09      	bgt.n	8008aa4 <_printf_float+0x264>
 8008a90:	6823      	ldr	r3, [r4, #0]
 8008a92:	079b      	lsls	r3, r3, #30
 8008a94:	f100 8105 	bmi.w	8008ca2 <_printf_float+0x462>
 8008a98:	68e0      	ldr	r0, [r4, #12]
 8008a9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a9c:	4298      	cmp	r0, r3
 8008a9e:	bfb8      	it	lt
 8008aa0:	4618      	movlt	r0, r3
 8008aa2:	e730      	b.n	8008906 <_printf_float+0xc6>
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	464a      	mov	r2, r9
 8008aa8:	4631      	mov	r1, r6
 8008aaa:	4628      	mov	r0, r5
 8008aac:	47b8      	blx	r7
 8008aae:	3001      	adds	r0, #1
 8008ab0:	f43f af27 	beq.w	8008902 <_printf_float+0xc2>
 8008ab4:	f108 0801 	add.w	r8, r8, #1
 8008ab8:	e7e6      	b.n	8008a88 <_printf_float+0x248>
 8008aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	dc39      	bgt.n	8008b34 <_printf_float+0x2f4>
 8008ac0:	4a1b      	ldr	r2, [pc, #108]	; (8008b30 <_printf_float+0x2f0>)
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	4631      	mov	r1, r6
 8008ac6:	4628      	mov	r0, r5
 8008ac8:	47b8      	blx	r7
 8008aca:	3001      	adds	r0, #1
 8008acc:	f43f af19 	beq.w	8008902 <_printf_float+0xc2>
 8008ad0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	d102      	bne.n	8008ade <_printf_float+0x29e>
 8008ad8:	6823      	ldr	r3, [r4, #0]
 8008ada:	07d9      	lsls	r1, r3, #31
 8008adc:	d5d8      	bpl.n	8008a90 <_printf_float+0x250>
 8008ade:	ee18 3a10 	vmov	r3, s16
 8008ae2:	4652      	mov	r2, sl
 8008ae4:	4631      	mov	r1, r6
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	47b8      	blx	r7
 8008aea:	3001      	adds	r0, #1
 8008aec:	f43f af09 	beq.w	8008902 <_printf_float+0xc2>
 8008af0:	f04f 0900 	mov.w	r9, #0
 8008af4:	f104 0a1a 	add.w	sl, r4, #26
 8008af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008afa:	425b      	negs	r3, r3
 8008afc:	454b      	cmp	r3, r9
 8008afe:	dc01      	bgt.n	8008b04 <_printf_float+0x2c4>
 8008b00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b02:	e792      	b.n	8008a2a <_printf_float+0x1ea>
 8008b04:	2301      	movs	r3, #1
 8008b06:	4652      	mov	r2, sl
 8008b08:	4631      	mov	r1, r6
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	47b8      	blx	r7
 8008b0e:	3001      	adds	r0, #1
 8008b10:	f43f aef7 	beq.w	8008902 <_printf_float+0xc2>
 8008b14:	f109 0901 	add.w	r9, r9, #1
 8008b18:	e7ee      	b.n	8008af8 <_printf_float+0x2b8>
 8008b1a:	bf00      	nop
 8008b1c:	7fefffff 	.word	0x7fefffff
 8008b20:	0800b194 	.word	0x0800b194
 8008b24:	0800b198 	.word	0x0800b198
 8008b28:	0800b1a0 	.word	0x0800b1a0
 8008b2c:	0800b19c 	.word	0x0800b19c
 8008b30:	0800b1a4 	.word	0x0800b1a4
 8008b34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	bfa8      	it	ge
 8008b3c:	461a      	movge	r2, r3
 8008b3e:	2a00      	cmp	r2, #0
 8008b40:	4691      	mov	r9, r2
 8008b42:	dc37      	bgt.n	8008bb4 <_printf_float+0x374>
 8008b44:	f04f 0b00 	mov.w	fp, #0
 8008b48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b4c:	f104 021a 	add.w	r2, r4, #26
 8008b50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008b52:	9305      	str	r3, [sp, #20]
 8008b54:	eba3 0309 	sub.w	r3, r3, r9
 8008b58:	455b      	cmp	r3, fp
 8008b5a:	dc33      	bgt.n	8008bc4 <_printf_float+0x384>
 8008b5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b60:	429a      	cmp	r2, r3
 8008b62:	db3b      	blt.n	8008bdc <_printf_float+0x39c>
 8008b64:	6823      	ldr	r3, [r4, #0]
 8008b66:	07da      	lsls	r2, r3, #31
 8008b68:	d438      	bmi.n	8008bdc <_printf_float+0x39c>
 8008b6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b6c:	9a05      	ldr	r2, [sp, #20]
 8008b6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b70:	1a9a      	subs	r2, r3, r2
 8008b72:	eba3 0901 	sub.w	r9, r3, r1
 8008b76:	4591      	cmp	r9, r2
 8008b78:	bfa8      	it	ge
 8008b7a:	4691      	movge	r9, r2
 8008b7c:	f1b9 0f00 	cmp.w	r9, #0
 8008b80:	dc35      	bgt.n	8008bee <_printf_float+0x3ae>
 8008b82:	f04f 0800 	mov.w	r8, #0
 8008b86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b8a:	f104 0a1a 	add.w	sl, r4, #26
 8008b8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b92:	1a9b      	subs	r3, r3, r2
 8008b94:	eba3 0309 	sub.w	r3, r3, r9
 8008b98:	4543      	cmp	r3, r8
 8008b9a:	f77f af79 	ble.w	8008a90 <_printf_float+0x250>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	4652      	mov	r2, sl
 8008ba2:	4631      	mov	r1, r6
 8008ba4:	4628      	mov	r0, r5
 8008ba6:	47b8      	blx	r7
 8008ba8:	3001      	adds	r0, #1
 8008baa:	f43f aeaa 	beq.w	8008902 <_printf_float+0xc2>
 8008bae:	f108 0801 	add.w	r8, r8, #1
 8008bb2:	e7ec      	b.n	8008b8e <_printf_float+0x34e>
 8008bb4:	4613      	mov	r3, r2
 8008bb6:	4631      	mov	r1, r6
 8008bb8:	4642      	mov	r2, r8
 8008bba:	4628      	mov	r0, r5
 8008bbc:	47b8      	blx	r7
 8008bbe:	3001      	adds	r0, #1
 8008bc0:	d1c0      	bne.n	8008b44 <_printf_float+0x304>
 8008bc2:	e69e      	b.n	8008902 <_printf_float+0xc2>
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	4631      	mov	r1, r6
 8008bc8:	4628      	mov	r0, r5
 8008bca:	9205      	str	r2, [sp, #20]
 8008bcc:	47b8      	blx	r7
 8008bce:	3001      	adds	r0, #1
 8008bd0:	f43f ae97 	beq.w	8008902 <_printf_float+0xc2>
 8008bd4:	9a05      	ldr	r2, [sp, #20]
 8008bd6:	f10b 0b01 	add.w	fp, fp, #1
 8008bda:	e7b9      	b.n	8008b50 <_printf_float+0x310>
 8008bdc:	ee18 3a10 	vmov	r3, s16
 8008be0:	4652      	mov	r2, sl
 8008be2:	4631      	mov	r1, r6
 8008be4:	4628      	mov	r0, r5
 8008be6:	47b8      	blx	r7
 8008be8:	3001      	adds	r0, #1
 8008bea:	d1be      	bne.n	8008b6a <_printf_float+0x32a>
 8008bec:	e689      	b.n	8008902 <_printf_float+0xc2>
 8008bee:	9a05      	ldr	r2, [sp, #20]
 8008bf0:	464b      	mov	r3, r9
 8008bf2:	4442      	add	r2, r8
 8008bf4:	4631      	mov	r1, r6
 8008bf6:	4628      	mov	r0, r5
 8008bf8:	47b8      	blx	r7
 8008bfa:	3001      	adds	r0, #1
 8008bfc:	d1c1      	bne.n	8008b82 <_printf_float+0x342>
 8008bfe:	e680      	b.n	8008902 <_printf_float+0xc2>
 8008c00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c02:	2a01      	cmp	r2, #1
 8008c04:	dc01      	bgt.n	8008c0a <_printf_float+0x3ca>
 8008c06:	07db      	lsls	r3, r3, #31
 8008c08:	d538      	bpl.n	8008c7c <_printf_float+0x43c>
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	4642      	mov	r2, r8
 8008c0e:	4631      	mov	r1, r6
 8008c10:	4628      	mov	r0, r5
 8008c12:	47b8      	blx	r7
 8008c14:	3001      	adds	r0, #1
 8008c16:	f43f ae74 	beq.w	8008902 <_printf_float+0xc2>
 8008c1a:	ee18 3a10 	vmov	r3, s16
 8008c1e:	4652      	mov	r2, sl
 8008c20:	4631      	mov	r1, r6
 8008c22:	4628      	mov	r0, r5
 8008c24:	47b8      	blx	r7
 8008c26:	3001      	adds	r0, #1
 8008c28:	f43f ae6b 	beq.w	8008902 <_printf_float+0xc2>
 8008c2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008c30:	2200      	movs	r2, #0
 8008c32:	2300      	movs	r3, #0
 8008c34:	f7f7 ff48 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c38:	b9d8      	cbnz	r0, 8008c72 <_printf_float+0x432>
 8008c3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c3c:	f108 0201 	add.w	r2, r8, #1
 8008c40:	3b01      	subs	r3, #1
 8008c42:	4631      	mov	r1, r6
 8008c44:	4628      	mov	r0, r5
 8008c46:	47b8      	blx	r7
 8008c48:	3001      	adds	r0, #1
 8008c4a:	d10e      	bne.n	8008c6a <_printf_float+0x42a>
 8008c4c:	e659      	b.n	8008902 <_printf_float+0xc2>
 8008c4e:	2301      	movs	r3, #1
 8008c50:	4652      	mov	r2, sl
 8008c52:	4631      	mov	r1, r6
 8008c54:	4628      	mov	r0, r5
 8008c56:	47b8      	blx	r7
 8008c58:	3001      	adds	r0, #1
 8008c5a:	f43f ae52 	beq.w	8008902 <_printf_float+0xc2>
 8008c5e:	f108 0801 	add.w	r8, r8, #1
 8008c62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c64:	3b01      	subs	r3, #1
 8008c66:	4543      	cmp	r3, r8
 8008c68:	dcf1      	bgt.n	8008c4e <_printf_float+0x40e>
 8008c6a:	464b      	mov	r3, r9
 8008c6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008c70:	e6dc      	b.n	8008a2c <_printf_float+0x1ec>
 8008c72:	f04f 0800 	mov.w	r8, #0
 8008c76:	f104 0a1a 	add.w	sl, r4, #26
 8008c7a:	e7f2      	b.n	8008c62 <_printf_float+0x422>
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	4642      	mov	r2, r8
 8008c80:	e7df      	b.n	8008c42 <_printf_float+0x402>
 8008c82:	2301      	movs	r3, #1
 8008c84:	464a      	mov	r2, r9
 8008c86:	4631      	mov	r1, r6
 8008c88:	4628      	mov	r0, r5
 8008c8a:	47b8      	blx	r7
 8008c8c:	3001      	adds	r0, #1
 8008c8e:	f43f ae38 	beq.w	8008902 <_printf_float+0xc2>
 8008c92:	f108 0801 	add.w	r8, r8, #1
 8008c96:	68e3      	ldr	r3, [r4, #12]
 8008c98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c9a:	1a5b      	subs	r3, r3, r1
 8008c9c:	4543      	cmp	r3, r8
 8008c9e:	dcf0      	bgt.n	8008c82 <_printf_float+0x442>
 8008ca0:	e6fa      	b.n	8008a98 <_printf_float+0x258>
 8008ca2:	f04f 0800 	mov.w	r8, #0
 8008ca6:	f104 0919 	add.w	r9, r4, #25
 8008caa:	e7f4      	b.n	8008c96 <_printf_float+0x456>

08008cac <_printf_common>:
 8008cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cb0:	4616      	mov	r6, r2
 8008cb2:	4699      	mov	r9, r3
 8008cb4:	688a      	ldr	r2, [r1, #8]
 8008cb6:	690b      	ldr	r3, [r1, #16]
 8008cb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	bfb8      	it	lt
 8008cc0:	4613      	movlt	r3, r2
 8008cc2:	6033      	str	r3, [r6, #0]
 8008cc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008cc8:	4607      	mov	r7, r0
 8008cca:	460c      	mov	r4, r1
 8008ccc:	b10a      	cbz	r2, 8008cd2 <_printf_common+0x26>
 8008cce:	3301      	adds	r3, #1
 8008cd0:	6033      	str	r3, [r6, #0]
 8008cd2:	6823      	ldr	r3, [r4, #0]
 8008cd4:	0699      	lsls	r1, r3, #26
 8008cd6:	bf42      	ittt	mi
 8008cd8:	6833      	ldrmi	r3, [r6, #0]
 8008cda:	3302      	addmi	r3, #2
 8008cdc:	6033      	strmi	r3, [r6, #0]
 8008cde:	6825      	ldr	r5, [r4, #0]
 8008ce0:	f015 0506 	ands.w	r5, r5, #6
 8008ce4:	d106      	bne.n	8008cf4 <_printf_common+0x48>
 8008ce6:	f104 0a19 	add.w	sl, r4, #25
 8008cea:	68e3      	ldr	r3, [r4, #12]
 8008cec:	6832      	ldr	r2, [r6, #0]
 8008cee:	1a9b      	subs	r3, r3, r2
 8008cf0:	42ab      	cmp	r3, r5
 8008cf2:	dc26      	bgt.n	8008d42 <_printf_common+0x96>
 8008cf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008cf8:	1e13      	subs	r3, r2, #0
 8008cfa:	6822      	ldr	r2, [r4, #0]
 8008cfc:	bf18      	it	ne
 8008cfe:	2301      	movne	r3, #1
 8008d00:	0692      	lsls	r2, r2, #26
 8008d02:	d42b      	bmi.n	8008d5c <_printf_common+0xb0>
 8008d04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d08:	4649      	mov	r1, r9
 8008d0a:	4638      	mov	r0, r7
 8008d0c:	47c0      	blx	r8
 8008d0e:	3001      	adds	r0, #1
 8008d10:	d01e      	beq.n	8008d50 <_printf_common+0xa4>
 8008d12:	6823      	ldr	r3, [r4, #0]
 8008d14:	68e5      	ldr	r5, [r4, #12]
 8008d16:	6832      	ldr	r2, [r6, #0]
 8008d18:	f003 0306 	and.w	r3, r3, #6
 8008d1c:	2b04      	cmp	r3, #4
 8008d1e:	bf08      	it	eq
 8008d20:	1aad      	subeq	r5, r5, r2
 8008d22:	68a3      	ldr	r3, [r4, #8]
 8008d24:	6922      	ldr	r2, [r4, #16]
 8008d26:	bf0c      	ite	eq
 8008d28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d2c:	2500      	movne	r5, #0
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	bfc4      	itt	gt
 8008d32:	1a9b      	subgt	r3, r3, r2
 8008d34:	18ed      	addgt	r5, r5, r3
 8008d36:	2600      	movs	r6, #0
 8008d38:	341a      	adds	r4, #26
 8008d3a:	42b5      	cmp	r5, r6
 8008d3c:	d11a      	bne.n	8008d74 <_printf_common+0xc8>
 8008d3e:	2000      	movs	r0, #0
 8008d40:	e008      	b.n	8008d54 <_printf_common+0xa8>
 8008d42:	2301      	movs	r3, #1
 8008d44:	4652      	mov	r2, sl
 8008d46:	4649      	mov	r1, r9
 8008d48:	4638      	mov	r0, r7
 8008d4a:	47c0      	blx	r8
 8008d4c:	3001      	adds	r0, #1
 8008d4e:	d103      	bne.n	8008d58 <_printf_common+0xac>
 8008d50:	f04f 30ff 	mov.w	r0, #4294967295
 8008d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d58:	3501      	adds	r5, #1
 8008d5a:	e7c6      	b.n	8008cea <_printf_common+0x3e>
 8008d5c:	18e1      	adds	r1, r4, r3
 8008d5e:	1c5a      	adds	r2, r3, #1
 8008d60:	2030      	movs	r0, #48	; 0x30
 8008d62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d66:	4422      	add	r2, r4
 8008d68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d70:	3302      	adds	r3, #2
 8008d72:	e7c7      	b.n	8008d04 <_printf_common+0x58>
 8008d74:	2301      	movs	r3, #1
 8008d76:	4622      	mov	r2, r4
 8008d78:	4649      	mov	r1, r9
 8008d7a:	4638      	mov	r0, r7
 8008d7c:	47c0      	blx	r8
 8008d7e:	3001      	adds	r0, #1
 8008d80:	d0e6      	beq.n	8008d50 <_printf_common+0xa4>
 8008d82:	3601      	adds	r6, #1
 8008d84:	e7d9      	b.n	8008d3a <_printf_common+0x8e>
	...

08008d88 <_printf_i>:
 8008d88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d8c:	7e0f      	ldrb	r7, [r1, #24]
 8008d8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d90:	2f78      	cmp	r7, #120	; 0x78
 8008d92:	4691      	mov	r9, r2
 8008d94:	4680      	mov	r8, r0
 8008d96:	460c      	mov	r4, r1
 8008d98:	469a      	mov	sl, r3
 8008d9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008d9e:	d807      	bhi.n	8008db0 <_printf_i+0x28>
 8008da0:	2f62      	cmp	r7, #98	; 0x62
 8008da2:	d80a      	bhi.n	8008dba <_printf_i+0x32>
 8008da4:	2f00      	cmp	r7, #0
 8008da6:	f000 80d8 	beq.w	8008f5a <_printf_i+0x1d2>
 8008daa:	2f58      	cmp	r7, #88	; 0x58
 8008dac:	f000 80a3 	beq.w	8008ef6 <_printf_i+0x16e>
 8008db0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008db4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008db8:	e03a      	b.n	8008e30 <_printf_i+0xa8>
 8008dba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008dbe:	2b15      	cmp	r3, #21
 8008dc0:	d8f6      	bhi.n	8008db0 <_printf_i+0x28>
 8008dc2:	a101      	add	r1, pc, #4	; (adr r1, 8008dc8 <_printf_i+0x40>)
 8008dc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008dc8:	08008e21 	.word	0x08008e21
 8008dcc:	08008e35 	.word	0x08008e35
 8008dd0:	08008db1 	.word	0x08008db1
 8008dd4:	08008db1 	.word	0x08008db1
 8008dd8:	08008db1 	.word	0x08008db1
 8008ddc:	08008db1 	.word	0x08008db1
 8008de0:	08008e35 	.word	0x08008e35
 8008de4:	08008db1 	.word	0x08008db1
 8008de8:	08008db1 	.word	0x08008db1
 8008dec:	08008db1 	.word	0x08008db1
 8008df0:	08008db1 	.word	0x08008db1
 8008df4:	08008f41 	.word	0x08008f41
 8008df8:	08008e65 	.word	0x08008e65
 8008dfc:	08008f23 	.word	0x08008f23
 8008e00:	08008db1 	.word	0x08008db1
 8008e04:	08008db1 	.word	0x08008db1
 8008e08:	08008f63 	.word	0x08008f63
 8008e0c:	08008db1 	.word	0x08008db1
 8008e10:	08008e65 	.word	0x08008e65
 8008e14:	08008db1 	.word	0x08008db1
 8008e18:	08008db1 	.word	0x08008db1
 8008e1c:	08008f2b 	.word	0x08008f2b
 8008e20:	682b      	ldr	r3, [r5, #0]
 8008e22:	1d1a      	adds	r2, r3, #4
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	602a      	str	r2, [r5, #0]
 8008e28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e30:	2301      	movs	r3, #1
 8008e32:	e0a3      	b.n	8008f7c <_printf_i+0x1f4>
 8008e34:	6820      	ldr	r0, [r4, #0]
 8008e36:	6829      	ldr	r1, [r5, #0]
 8008e38:	0606      	lsls	r6, r0, #24
 8008e3a:	f101 0304 	add.w	r3, r1, #4
 8008e3e:	d50a      	bpl.n	8008e56 <_printf_i+0xce>
 8008e40:	680e      	ldr	r6, [r1, #0]
 8008e42:	602b      	str	r3, [r5, #0]
 8008e44:	2e00      	cmp	r6, #0
 8008e46:	da03      	bge.n	8008e50 <_printf_i+0xc8>
 8008e48:	232d      	movs	r3, #45	; 0x2d
 8008e4a:	4276      	negs	r6, r6
 8008e4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e50:	485e      	ldr	r0, [pc, #376]	; (8008fcc <_printf_i+0x244>)
 8008e52:	230a      	movs	r3, #10
 8008e54:	e019      	b.n	8008e8a <_printf_i+0x102>
 8008e56:	680e      	ldr	r6, [r1, #0]
 8008e58:	602b      	str	r3, [r5, #0]
 8008e5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008e5e:	bf18      	it	ne
 8008e60:	b236      	sxthne	r6, r6
 8008e62:	e7ef      	b.n	8008e44 <_printf_i+0xbc>
 8008e64:	682b      	ldr	r3, [r5, #0]
 8008e66:	6820      	ldr	r0, [r4, #0]
 8008e68:	1d19      	adds	r1, r3, #4
 8008e6a:	6029      	str	r1, [r5, #0]
 8008e6c:	0601      	lsls	r1, r0, #24
 8008e6e:	d501      	bpl.n	8008e74 <_printf_i+0xec>
 8008e70:	681e      	ldr	r6, [r3, #0]
 8008e72:	e002      	b.n	8008e7a <_printf_i+0xf2>
 8008e74:	0646      	lsls	r6, r0, #25
 8008e76:	d5fb      	bpl.n	8008e70 <_printf_i+0xe8>
 8008e78:	881e      	ldrh	r6, [r3, #0]
 8008e7a:	4854      	ldr	r0, [pc, #336]	; (8008fcc <_printf_i+0x244>)
 8008e7c:	2f6f      	cmp	r7, #111	; 0x6f
 8008e7e:	bf0c      	ite	eq
 8008e80:	2308      	moveq	r3, #8
 8008e82:	230a      	movne	r3, #10
 8008e84:	2100      	movs	r1, #0
 8008e86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e8a:	6865      	ldr	r5, [r4, #4]
 8008e8c:	60a5      	str	r5, [r4, #8]
 8008e8e:	2d00      	cmp	r5, #0
 8008e90:	bfa2      	ittt	ge
 8008e92:	6821      	ldrge	r1, [r4, #0]
 8008e94:	f021 0104 	bicge.w	r1, r1, #4
 8008e98:	6021      	strge	r1, [r4, #0]
 8008e9a:	b90e      	cbnz	r6, 8008ea0 <_printf_i+0x118>
 8008e9c:	2d00      	cmp	r5, #0
 8008e9e:	d04d      	beq.n	8008f3c <_printf_i+0x1b4>
 8008ea0:	4615      	mov	r5, r2
 8008ea2:	fbb6 f1f3 	udiv	r1, r6, r3
 8008ea6:	fb03 6711 	mls	r7, r3, r1, r6
 8008eaa:	5dc7      	ldrb	r7, [r0, r7]
 8008eac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008eb0:	4637      	mov	r7, r6
 8008eb2:	42bb      	cmp	r3, r7
 8008eb4:	460e      	mov	r6, r1
 8008eb6:	d9f4      	bls.n	8008ea2 <_printf_i+0x11a>
 8008eb8:	2b08      	cmp	r3, #8
 8008eba:	d10b      	bne.n	8008ed4 <_printf_i+0x14c>
 8008ebc:	6823      	ldr	r3, [r4, #0]
 8008ebe:	07de      	lsls	r6, r3, #31
 8008ec0:	d508      	bpl.n	8008ed4 <_printf_i+0x14c>
 8008ec2:	6923      	ldr	r3, [r4, #16]
 8008ec4:	6861      	ldr	r1, [r4, #4]
 8008ec6:	4299      	cmp	r1, r3
 8008ec8:	bfde      	ittt	le
 8008eca:	2330      	movle	r3, #48	; 0x30
 8008ecc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ed0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008ed4:	1b52      	subs	r2, r2, r5
 8008ed6:	6122      	str	r2, [r4, #16]
 8008ed8:	f8cd a000 	str.w	sl, [sp]
 8008edc:	464b      	mov	r3, r9
 8008ede:	aa03      	add	r2, sp, #12
 8008ee0:	4621      	mov	r1, r4
 8008ee2:	4640      	mov	r0, r8
 8008ee4:	f7ff fee2 	bl	8008cac <_printf_common>
 8008ee8:	3001      	adds	r0, #1
 8008eea:	d14c      	bne.n	8008f86 <_printf_i+0x1fe>
 8008eec:	f04f 30ff 	mov.w	r0, #4294967295
 8008ef0:	b004      	add	sp, #16
 8008ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ef6:	4835      	ldr	r0, [pc, #212]	; (8008fcc <_printf_i+0x244>)
 8008ef8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008efc:	6829      	ldr	r1, [r5, #0]
 8008efe:	6823      	ldr	r3, [r4, #0]
 8008f00:	f851 6b04 	ldr.w	r6, [r1], #4
 8008f04:	6029      	str	r1, [r5, #0]
 8008f06:	061d      	lsls	r5, r3, #24
 8008f08:	d514      	bpl.n	8008f34 <_printf_i+0x1ac>
 8008f0a:	07df      	lsls	r7, r3, #31
 8008f0c:	bf44      	itt	mi
 8008f0e:	f043 0320 	orrmi.w	r3, r3, #32
 8008f12:	6023      	strmi	r3, [r4, #0]
 8008f14:	b91e      	cbnz	r6, 8008f1e <_printf_i+0x196>
 8008f16:	6823      	ldr	r3, [r4, #0]
 8008f18:	f023 0320 	bic.w	r3, r3, #32
 8008f1c:	6023      	str	r3, [r4, #0]
 8008f1e:	2310      	movs	r3, #16
 8008f20:	e7b0      	b.n	8008e84 <_printf_i+0xfc>
 8008f22:	6823      	ldr	r3, [r4, #0]
 8008f24:	f043 0320 	orr.w	r3, r3, #32
 8008f28:	6023      	str	r3, [r4, #0]
 8008f2a:	2378      	movs	r3, #120	; 0x78
 8008f2c:	4828      	ldr	r0, [pc, #160]	; (8008fd0 <_printf_i+0x248>)
 8008f2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f32:	e7e3      	b.n	8008efc <_printf_i+0x174>
 8008f34:	0659      	lsls	r1, r3, #25
 8008f36:	bf48      	it	mi
 8008f38:	b2b6      	uxthmi	r6, r6
 8008f3a:	e7e6      	b.n	8008f0a <_printf_i+0x182>
 8008f3c:	4615      	mov	r5, r2
 8008f3e:	e7bb      	b.n	8008eb8 <_printf_i+0x130>
 8008f40:	682b      	ldr	r3, [r5, #0]
 8008f42:	6826      	ldr	r6, [r4, #0]
 8008f44:	6961      	ldr	r1, [r4, #20]
 8008f46:	1d18      	adds	r0, r3, #4
 8008f48:	6028      	str	r0, [r5, #0]
 8008f4a:	0635      	lsls	r5, r6, #24
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	d501      	bpl.n	8008f54 <_printf_i+0x1cc>
 8008f50:	6019      	str	r1, [r3, #0]
 8008f52:	e002      	b.n	8008f5a <_printf_i+0x1d2>
 8008f54:	0670      	lsls	r0, r6, #25
 8008f56:	d5fb      	bpl.n	8008f50 <_printf_i+0x1c8>
 8008f58:	8019      	strh	r1, [r3, #0]
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	6123      	str	r3, [r4, #16]
 8008f5e:	4615      	mov	r5, r2
 8008f60:	e7ba      	b.n	8008ed8 <_printf_i+0x150>
 8008f62:	682b      	ldr	r3, [r5, #0]
 8008f64:	1d1a      	adds	r2, r3, #4
 8008f66:	602a      	str	r2, [r5, #0]
 8008f68:	681d      	ldr	r5, [r3, #0]
 8008f6a:	6862      	ldr	r2, [r4, #4]
 8008f6c:	2100      	movs	r1, #0
 8008f6e:	4628      	mov	r0, r5
 8008f70:	f7f7 f936 	bl	80001e0 <memchr>
 8008f74:	b108      	cbz	r0, 8008f7a <_printf_i+0x1f2>
 8008f76:	1b40      	subs	r0, r0, r5
 8008f78:	6060      	str	r0, [r4, #4]
 8008f7a:	6863      	ldr	r3, [r4, #4]
 8008f7c:	6123      	str	r3, [r4, #16]
 8008f7e:	2300      	movs	r3, #0
 8008f80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f84:	e7a8      	b.n	8008ed8 <_printf_i+0x150>
 8008f86:	6923      	ldr	r3, [r4, #16]
 8008f88:	462a      	mov	r2, r5
 8008f8a:	4649      	mov	r1, r9
 8008f8c:	4640      	mov	r0, r8
 8008f8e:	47d0      	blx	sl
 8008f90:	3001      	adds	r0, #1
 8008f92:	d0ab      	beq.n	8008eec <_printf_i+0x164>
 8008f94:	6823      	ldr	r3, [r4, #0]
 8008f96:	079b      	lsls	r3, r3, #30
 8008f98:	d413      	bmi.n	8008fc2 <_printf_i+0x23a>
 8008f9a:	68e0      	ldr	r0, [r4, #12]
 8008f9c:	9b03      	ldr	r3, [sp, #12]
 8008f9e:	4298      	cmp	r0, r3
 8008fa0:	bfb8      	it	lt
 8008fa2:	4618      	movlt	r0, r3
 8008fa4:	e7a4      	b.n	8008ef0 <_printf_i+0x168>
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	4632      	mov	r2, r6
 8008faa:	4649      	mov	r1, r9
 8008fac:	4640      	mov	r0, r8
 8008fae:	47d0      	blx	sl
 8008fb0:	3001      	adds	r0, #1
 8008fb2:	d09b      	beq.n	8008eec <_printf_i+0x164>
 8008fb4:	3501      	adds	r5, #1
 8008fb6:	68e3      	ldr	r3, [r4, #12]
 8008fb8:	9903      	ldr	r1, [sp, #12]
 8008fba:	1a5b      	subs	r3, r3, r1
 8008fbc:	42ab      	cmp	r3, r5
 8008fbe:	dcf2      	bgt.n	8008fa6 <_printf_i+0x21e>
 8008fc0:	e7eb      	b.n	8008f9a <_printf_i+0x212>
 8008fc2:	2500      	movs	r5, #0
 8008fc4:	f104 0619 	add.w	r6, r4, #25
 8008fc8:	e7f5      	b.n	8008fb6 <_printf_i+0x22e>
 8008fca:	bf00      	nop
 8008fcc:	0800b1a6 	.word	0x0800b1a6
 8008fd0:	0800b1b7 	.word	0x0800b1b7

08008fd4 <quorem>:
 8008fd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd8:	6903      	ldr	r3, [r0, #16]
 8008fda:	690c      	ldr	r4, [r1, #16]
 8008fdc:	42a3      	cmp	r3, r4
 8008fde:	4607      	mov	r7, r0
 8008fe0:	f2c0 8081 	blt.w	80090e6 <quorem+0x112>
 8008fe4:	3c01      	subs	r4, #1
 8008fe6:	f101 0814 	add.w	r8, r1, #20
 8008fea:	f100 0514 	add.w	r5, r0, #20
 8008fee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ff2:	9301      	str	r3, [sp, #4]
 8008ff4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008ff8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	429a      	cmp	r2, r3
 8009000:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009004:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009008:	fbb2 f6f3 	udiv	r6, r2, r3
 800900c:	d331      	bcc.n	8009072 <quorem+0x9e>
 800900e:	f04f 0e00 	mov.w	lr, #0
 8009012:	4640      	mov	r0, r8
 8009014:	46ac      	mov	ip, r5
 8009016:	46f2      	mov	sl, lr
 8009018:	f850 2b04 	ldr.w	r2, [r0], #4
 800901c:	b293      	uxth	r3, r2
 800901e:	fb06 e303 	mla	r3, r6, r3, lr
 8009022:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009026:	b29b      	uxth	r3, r3
 8009028:	ebaa 0303 	sub.w	r3, sl, r3
 800902c:	f8dc a000 	ldr.w	sl, [ip]
 8009030:	0c12      	lsrs	r2, r2, #16
 8009032:	fa13 f38a 	uxtah	r3, r3, sl
 8009036:	fb06 e202 	mla	r2, r6, r2, lr
 800903a:	9300      	str	r3, [sp, #0]
 800903c:	9b00      	ldr	r3, [sp, #0]
 800903e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009042:	b292      	uxth	r2, r2
 8009044:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009048:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800904c:	f8bd 3000 	ldrh.w	r3, [sp]
 8009050:	4581      	cmp	r9, r0
 8009052:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009056:	f84c 3b04 	str.w	r3, [ip], #4
 800905a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800905e:	d2db      	bcs.n	8009018 <quorem+0x44>
 8009060:	f855 300b 	ldr.w	r3, [r5, fp]
 8009064:	b92b      	cbnz	r3, 8009072 <quorem+0x9e>
 8009066:	9b01      	ldr	r3, [sp, #4]
 8009068:	3b04      	subs	r3, #4
 800906a:	429d      	cmp	r5, r3
 800906c:	461a      	mov	r2, r3
 800906e:	d32e      	bcc.n	80090ce <quorem+0xfa>
 8009070:	613c      	str	r4, [r7, #16]
 8009072:	4638      	mov	r0, r7
 8009074:	f001 f8c6 	bl	800a204 <__mcmp>
 8009078:	2800      	cmp	r0, #0
 800907a:	db24      	blt.n	80090c6 <quorem+0xf2>
 800907c:	3601      	adds	r6, #1
 800907e:	4628      	mov	r0, r5
 8009080:	f04f 0c00 	mov.w	ip, #0
 8009084:	f858 2b04 	ldr.w	r2, [r8], #4
 8009088:	f8d0 e000 	ldr.w	lr, [r0]
 800908c:	b293      	uxth	r3, r2
 800908e:	ebac 0303 	sub.w	r3, ip, r3
 8009092:	0c12      	lsrs	r2, r2, #16
 8009094:	fa13 f38e 	uxtah	r3, r3, lr
 8009098:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800909c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090a6:	45c1      	cmp	r9, r8
 80090a8:	f840 3b04 	str.w	r3, [r0], #4
 80090ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80090b0:	d2e8      	bcs.n	8009084 <quorem+0xb0>
 80090b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80090b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80090ba:	b922      	cbnz	r2, 80090c6 <quorem+0xf2>
 80090bc:	3b04      	subs	r3, #4
 80090be:	429d      	cmp	r5, r3
 80090c0:	461a      	mov	r2, r3
 80090c2:	d30a      	bcc.n	80090da <quorem+0x106>
 80090c4:	613c      	str	r4, [r7, #16]
 80090c6:	4630      	mov	r0, r6
 80090c8:	b003      	add	sp, #12
 80090ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ce:	6812      	ldr	r2, [r2, #0]
 80090d0:	3b04      	subs	r3, #4
 80090d2:	2a00      	cmp	r2, #0
 80090d4:	d1cc      	bne.n	8009070 <quorem+0x9c>
 80090d6:	3c01      	subs	r4, #1
 80090d8:	e7c7      	b.n	800906a <quorem+0x96>
 80090da:	6812      	ldr	r2, [r2, #0]
 80090dc:	3b04      	subs	r3, #4
 80090de:	2a00      	cmp	r2, #0
 80090e0:	d1f0      	bne.n	80090c4 <quorem+0xf0>
 80090e2:	3c01      	subs	r4, #1
 80090e4:	e7eb      	b.n	80090be <quorem+0xea>
 80090e6:	2000      	movs	r0, #0
 80090e8:	e7ee      	b.n	80090c8 <quorem+0xf4>
 80090ea:	0000      	movs	r0, r0
 80090ec:	0000      	movs	r0, r0
	...

080090f0 <_dtoa_r>:
 80090f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090f4:	ed2d 8b04 	vpush	{d8-d9}
 80090f8:	ec57 6b10 	vmov	r6, r7, d0
 80090fc:	b093      	sub	sp, #76	; 0x4c
 80090fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009100:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009104:	9106      	str	r1, [sp, #24]
 8009106:	ee10 aa10 	vmov	sl, s0
 800910a:	4604      	mov	r4, r0
 800910c:	9209      	str	r2, [sp, #36]	; 0x24
 800910e:	930c      	str	r3, [sp, #48]	; 0x30
 8009110:	46bb      	mov	fp, r7
 8009112:	b975      	cbnz	r5, 8009132 <_dtoa_r+0x42>
 8009114:	2010      	movs	r0, #16
 8009116:	f000 fddd 	bl	8009cd4 <malloc>
 800911a:	4602      	mov	r2, r0
 800911c:	6260      	str	r0, [r4, #36]	; 0x24
 800911e:	b920      	cbnz	r0, 800912a <_dtoa_r+0x3a>
 8009120:	4ba7      	ldr	r3, [pc, #668]	; (80093c0 <_dtoa_r+0x2d0>)
 8009122:	21ea      	movs	r1, #234	; 0xea
 8009124:	48a7      	ldr	r0, [pc, #668]	; (80093c4 <_dtoa_r+0x2d4>)
 8009126:	f001 fa75 	bl	800a614 <__assert_func>
 800912a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800912e:	6005      	str	r5, [r0, #0]
 8009130:	60c5      	str	r5, [r0, #12]
 8009132:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009134:	6819      	ldr	r1, [r3, #0]
 8009136:	b151      	cbz	r1, 800914e <_dtoa_r+0x5e>
 8009138:	685a      	ldr	r2, [r3, #4]
 800913a:	604a      	str	r2, [r1, #4]
 800913c:	2301      	movs	r3, #1
 800913e:	4093      	lsls	r3, r2
 8009140:	608b      	str	r3, [r1, #8]
 8009142:	4620      	mov	r0, r4
 8009144:	f000 fe1c 	bl	8009d80 <_Bfree>
 8009148:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800914a:	2200      	movs	r2, #0
 800914c:	601a      	str	r2, [r3, #0]
 800914e:	1e3b      	subs	r3, r7, #0
 8009150:	bfaa      	itet	ge
 8009152:	2300      	movge	r3, #0
 8009154:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009158:	f8c8 3000 	strge.w	r3, [r8]
 800915c:	4b9a      	ldr	r3, [pc, #616]	; (80093c8 <_dtoa_r+0x2d8>)
 800915e:	bfbc      	itt	lt
 8009160:	2201      	movlt	r2, #1
 8009162:	f8c8 2000 	strlt.w	r2, [r8]
 8009166:	ea33 030b 	bics.w	r3, r3, fp
 800916a:	d11b      	bne.n	80091a4 <_dtoa_r+0xb4>
 800916c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800916e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009172:	6013      	str	r3, [r2, #0]
 8009174:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009178:	4333      	orrs	r3, r6
 800917a:	f000 8592 	beq.w	8009ca2 <_dtoa_r+0xbb2>
 800917e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009180:	b963      	cbnz	r3, 800919c <_dtoa_r+0xac>
 8009182:	4b92      	ldr	r3, [pc, #584]	; (80093cc <_dtoa_r+0x2dc>)
 8009184:	e022      	b.n	80091cc <_dtoa_r+0xdc>
 8009186:	4b92      	ldr	r3, [pc, #584]	; (80093d0 <_dtoa_r+0x2e0>)
 8009188:	9301      	str	r3, [sp, #4]
 800918a:	3308      	adds	r3, #8
 800918c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800918e:	6013      	str	r3, [r2, #0]
 8009190:	9801      	ldr	r0, [sp, #4]
 8009192:	b013      	add	sp, #76	; 0x4c
 8009194:	ecbd 8b04 	vpop	{d8-d9}
 8009198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800919c:	4b8b      	ldr	r3, [pc, #556]	; (80093cc <_dtoa_r+0x2dc>)
 800919e:	9301      	str	r3, [sp, #4]
 80091a0:	3303      	adds	r3, #3
 80091a2:	e7f3      	b.n	800918c <_dtoa_r+0x9c>
 80091a4:	2200      	movs	r2, #0
 80091a6:	2300      	movs	r3, #0
 80091a8:	4650      	mov	r0, sl
 80091aa:	4659      	mov	r1, fp
 80091ac:	f7f7 fc8c 	bl	8000ac8 <__aeabi_dcmpeq>
 80091b0:	ec4b ab19 	vmov	d9, sl, fp
 80091b4:	4680      	mov	r8, r0
 80091b6:	b158      	cbz	r0, 80091d0 <_dtoa_r+0xe0>
 80091b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091ba:	2301      	movs	r3, #1
 80091bc:	6013      	str	r3, [r2, #0]
 80091be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f000 856b 	beq.w	8009c9c <_dtoa_r+0xbac>
 80091c6:	4883      	ldr	r0, [pc, #524]	; (80093d4 <_dtoa_r+0x2e4>)
 80091c8:	6018      	str	r0, [r3, #0]
 80091ca:	1e43      	subs	r3, r0, #1
 80091cc:	9301      	str	r3, [sp, #4]
 80091ce:	e7df      	b.n	8009190 <_dtoa_r+0xa0>
 80091d0:	ec4b ab10 	vmov	d0, sl, fp
 80091d4:	aa10      	add	r2, sp, #64	; 0x40
 80091d6:	a911      	add	r1, sp, #68	; 0x44
 80091d8:	4620      	mov	r0, r4
 80091da:	f001 f8b9 	bl	800a350 <__d2b>
 80091de:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80091e2:	ee08 0a10 	vmov	s16, r0
 80091e6:	2d00      	cmp	r5, #0
 80091e8:	f000 8084 	beq.w	80092f4 <_dtoa_r+0x204>
 80091ec:	ee19 3a90 	vmov	r3, s19
 80091f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091f4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80091f8:	4656      	mov	r6, sl
 80091fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80091fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009202:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009206:	4b74      	ldr	r3, [pc, #464]	; (80093d8 <_dtoa_r+0x2e8>)
 8009208:	2200      	movs	r2, #0
 800920a:	4630      	mov	r0, r6
 800920c:	4639      	mov	r1, r7
 800920e:	f7f7 f83b 	bl	8000288 <__aeabi_dsub>
 8009212:	a365      	add	r3, pc, #404	; (adr r3, 80093a8 <_dtoa_r+0x2b8>)
 8009214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009218:	f7f7 f9ee 	bl	80005f8 <__aeabi_dmul>
 800921c:	a364      	add	r3, pc, #400	; (adr r3, 80093b0 <_dtoa_r+0x2c0>)
 800921e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009222:	f7f7 f833 	bl	800028c <__adddf3>
 8009226:	4606      	mov	r6, r0
 8009228:	4628      	mov	r0, r5
 800922a:	460f      	mov	r7, r1
 800922c:	f7f7 f97a 	bl	8000524 <__aeabi_i2d>
 8009230:	a361      	add	r3, pc, #388	; (adr r3, 80093b8 <_dtoa_r+0x2c8>)
 8009232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009236:	f7f7 f9df 	bl	80005f8 <__aeabi_dmul>
 800923a:	4602      	mov	r2, r0
 800923c:	460b      	mov	r3, r1
 800923e:	4630      	mov	r0, r6
 8009240:	4639      	mov	r1, r7
 8009242:	f7f7 f823 	bl	800028c <__adddf3>
 8009246:	4606      	mov	r6, r0
 8009248:	460f      	mov	r7, r1
 800924a:	f7f7 fc85 	bl	8000b58 <__aeabi_d2iz>
 800924e:	2200      	movs	r2, #0
 8009250:	9000      	str	r0, [sp, #0]
 8009252:	2300      	movs	r3, #0
 8009254:	4630      	mov	r0, r6
 8009256:	4639      	mov	r1, r7
 8009258:	f7f7 fc40 	bl	8000adc <__aeabi_dcmplt>
 800925c:	b150      	cbz	r0, 8009274 <_dtoa_r+0x184>
 800925e:	9800      	ldr	r0, [sp, #0]
 8009260:	f7f7 f960 	bl	8000524 <__aeabi_i2d>
 8009264:	4632      	mov	r2, r6
 8009266:	463b      	mov	r3, r7
 8009268:	f7f7 fc2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800926c:	b910      	cbnz	r0, 8009274 <_dtoa_r+0x184>
 800926e:	9b00      	ldr	r3, [sp, #0]
 8009270:	3b01      	subs	r3, #1
 8009272:	9300      	str	r3, [sp, #0]
 8009274:	9b00      	ldr	r3, [sp, #0]
 8009276:	2b16      	cmp	r3, #22
 8009278:	d85a      	bhi.n	8009330 <_dtoa_r+0x240>
 800927a:	9a00      	ldr	r2, [sp, #0]
 800927c:	4b57      	ldr	r3, [pc, #348]	; (80093dc <_dtoa_r+0x2ec>)
 800927e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009286:	ec51 0b19 	vmov	r0, r1, d9
 800928a:	f7f7 fc27 	bl	8000adc <__aeabi_dcmplt>
 800928e:	2800      	cmp	r0, #0
 8009290:	d050      	beq.n	8009334 <_dtoa_r+0x244>
 8009292:	9b00      	ldr	r3, [sp, #0]
 8009294:	3b01      	subs	r3, #1
 8009296:	9300      	str	r3, [sp, #0]
 8009298:	2300      	movs	r3, #0
 800929a:	930b      	str	r3, [sp, #44]	; 0x2c
 800929c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800929e:	1b5d      	subs	r5, r3, r5
 80092a0:	1e6b      	subs	r3, r5, #1
 80092a2:	9305      	str	r3, [sp, #20]
 80092a4:	bf45      	ittet	mi
 80092a6:	f1c5 0301 	rsbmi	r3, r5, #1
 80092aa:	9304      	strmi	r3, [sp, #16]
 80092ac:	2300      	movpl	r3, #0
 80092ae:	2300      	movmi	r3, #0
 80092b0:	bf4c      	ite	mi
 80092b2:	9305      	strmi	r3, [sp, #20]
 80092b4:	9304      	strpl	r3, [sp, #16]
 80092b6:	9b00      	ldr	r3, [sp, #0]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	db3d      	blt.n	8009338 <_dtoa_r+0x248>
 80092bc:	9b05      	ldr	r3, [sp, #20]
 80092be:	9a00      	ldr	r2, [sp, #0]
 80092c0:	920a      	str	r2, [sp, #40]	; 0x28
 80092c2:	4413      	add	r3, r2
 80092c4:	9305      	str	r3, [sp, #20]
 80092c6:	2300      	movs	r3, #0
 80092c8:	9307      	str	r3, [sp, #28]
 80092ca:	9b06      	ldr	r3, [sp, #24]
 80092cc:	2b09      	cmp	r3, #9
 80092ce:	f200 8089 	bhi.w	80093e4 <_dtoa_r+0x2f4>
 80092d2:	2b05      	cmp	r3, #5
 80092d4:	bfc4      	itt	gt
 80092d6:	3b04      	subgt	r3, #4
 80092d8:	9306      	strgt	r3, [sp, #24]
 80092da:	9b06      	ldr	r3, [sp, #24]
 80092dc:	f1a3 0302 	sub.w	r3, r3, #2
 80092e0:	bfcc      	ite	gt
 80092e2:	2500      	movgt	r5, #0
 80092e4:	2501      	movle	r5, #1
 80092e6:	2b03      	cmp	r3, #3
 80092e8:	f200 8087 	bhi.w	80093fa <_dtoa_r+0x30a>
 80092ec:	e8df f003 	tbb	[pc, r3]
 80092f0:	59383a2d 	.word	0x59383a2d
 80092f4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80092f8:	441d      	add	r5, r3
 80092fa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80092fe:	2b20      	cmp	r3, #32
 8009300:	bfc1      	itttt	gt
 8009302:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009306:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800930a:	fa0b f303 	lslgt.w	r3, fp, r3
 800930e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009312:	bfda      	itte	le
 8009314:	f1c3 0320 	rsble	r3, r3, #32
 8009318:	fa06 f003 	lslle.w	r0, r6, r3
 800931c:	4318      	orrgt	r0, r3
 800931e:	f7f7 f8f1 	bl	8000504 <__aeabi_ui2d>
 8009322:	2301      	movs	r3, #1
 8009324:	4606      	mov	r6, r0
 8009326:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800932a:	3d01      	subs	r5, #1
 800932c:	930e      	str	r3, [sp, #56]	; 0x38
 800932e:	e76a      	b.n	8009206 <_dtoa_r+0x116>
 8009330:	2301      	movs	r3, #1
 8009332:	e7b2      	b.n	800929a <_dtoa_r+0x1aa>
 8009334:	900b      	str	r0, [sp, #44]	; 0x2c
 8009336:	e7b1      	b.n	800929c <_dtoa_r+0x1ac>
 8009338:	9b04      	ldr	r3, [sp, #16]
 800933a:	9a00      	ldr	r2, [sp, #0]
 800933c:	1a9b      	subs	r3, r3, r2
 800933e:	9304      	str	r3, [sp, #16]
 8009340:	4253      	negs	r3, r2
 8009342:	9307      	str	r3, [sp, #28]
 8009344:	2300      	movs	r3, #0
 8009346:	930a      	str	r3, [sp, #40]	; 0x28
 8009348:	e7bf      	b.n	80092ca <_dtoa_r+0x1da>
 800934a:	2300      	movs	r3, #0
 800934c:	9308      	str	r3, [sp, #32]
 800934e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009350:	2b00      	cmp	r3, #0
 8009352:	dc55      	bgt.n	8009400 <_dtoa_r+0x310>
 8009354:	2301      	movs	r3, #1
 8009356:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800935a:	461a      	mov	r2, r3
 800935c:	9209      	str	r2, [sp, #36]	; 0x24
 800935e:	e00c      	b.n	800937a <_dtoa_r+0x28a>
 8009360:	2301      	movs	r3, #1
 8009362:	e7f3      	b.n	800934c <_dtoa_r+0x25c>
 8009364:	2300      	movs	r3, #0
 8009366:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009368:	9308      	str	r3, [sp, #32]
 800936a:	9b00      	ldr	r3, [sp, #0]
 800936c:	4413      	add	r3, r2
 800936e:	9302      	str	r3, [sp, #8]
 8009370:	3301      	adds	r3, #1
 8009372:	2b01      	cmp	r3, #1
 8009374:	9303      	str	r3, [sp, #12]
 8009376:	bfb8      	it	lt
 8009378:	2301      	movlt	r3, #1
 800937a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800937c:	2200      	movs	r2, #0
 800937e:	6042      	str	r2, [r0, #4]
 8009380:	2204      	movs	r2, #4
 8009382:	f102 0614 	add.w	r6, r2, #20
 8009386:	429e      	cmp	r6, r3
 8009388:	6841      	ldr	r1, [r0, #4]
 800938a:	d93d      	bls.n	8009408 <_dtoa_r+0x318>
 800938c:	4620      	mov	r0, r4
 800938e:	f000 fcb7 	bl	8009d00 <_Balloc>
 8009392:	9001      	str	r0, [sp, #4]
 8009394:	2800      	cmp	r0, #0
 8009396:	d13b      	bne.n	8009410 <_dtoa_r+0x320>
 8009398:	4b11      	ldr	r3, [pc, #68]	; (80093e0 <_dtoa_r+0x2f0>)
 800939a:	4602      	mov	r2, r0
 800939c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80093a0:	e6c0      	b.n	8009124 <_dtoa_r+0x34>
 80093a2:	2301      	movs	r3, #1
 80093a4:	e7df      	b.n	8009366 <_dtoa_r+0x276>
 80093a6:	bf00      	nop
 80093a8:	636f4361 	.word	0x636f4361
 80093ac:	3fd287a7 	.word	0x3fd287a7
 80093b0:	8b60c8b3 	.word	0x8b60c8b3
 80093b4:	3fc68a28 	.word	0x3fc68a28
 80093b8:	509f79fb 	.word	0x509f79fb
 80093bc:	3fd34413 	.word	0x3fd34413
 80093c0:	0800b1d5 	.word	0x0800b1d5
 80093c4:	0800b1ec 	.word	0x0800b1ec
 80093c8:	7ff00000 	.word	0x7ff00000
 80093cc:	0800b1d1 	.word	0x0800b1d1
 80093d0:	0800b1c8 	.word	0x0800b1c8
 80093d4:	0800b1a5 	.word	0x0800b1a5
 80093d8:	3ff80000 	.word	0x3ff80000
 80093dc:	0800b2e0 	.word	0x0800b2e0
 80093e0:	0800b247 	.word	0x0800b247
 80093e4:	2501      	movs	r5, #1
 80093e6:	2300      	movs	r3, #0
 80093e8:	9306      	str	r3, [sp, #24]
 80093ea:	9508      	str	r5, [sp, #32]
 80093ec:	f04f 33ff 	mov.w	r3, #4294967295
 80093f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80093f4:	2200      	movs	r2, #0
 80093f6:	2312      	movs	r3, #18
 80093f8:	e7b0      	b.n	800935c <_dtoa_r+0x26c>
 80093fa:	2301      	movs	r3, #1
 80093fc:	9308      	str	r3, [sp, #32]
 80093fe:	e7f5      	b.n	80093ec <_dtoa_r+0x2fc>
 8009400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009402:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009406:	e7b8      	b.n	800937a <_dtoa_r+0x28a>
 8009408:	3101      	adds	r1, #1
 800940a:	6041      	str	r1, [r0, #4]
 800940c:	0052      	lsls	r2, r2, #1
 800940e:	e7b8      	b.n	8009382 <_dtoa_r+0x292>
 8009410:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009412:	9a01      	ldr	r2, [sp, #4]
 8009414:	601a      	str	r2, [r3, #0]
 8009416:	9b03      	ldr	r3, [sp, #12]
 8009418:	2b0e      	cmp	r3, #14
 800941a:	f200 809d 	bhi.w	8009558 <_dtoa_r+0x468>
 800941e:	2d00      	cmp	r5, #0
 8009420:	f000 809a 	beq.w	8009558 <_dtoa_r+0x468>
 8009424:	9b00      	ldr	r3, [sp, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	dd32      	ble.n	8009490 <_dtoa_r+0x3a0>
 800942a:	4ab7      	ldr	r2, [pc, #732]	; (8009708 <_dtoa_r+0x618>)
 800942c:	f003 030f 	and.w	r3, r3, #15
 8009430:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009434:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009438:	9b00      	ldr	r3, [sp, #0]
 800943a:	05d8      	lsls	r0, r3, #23
 800943c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009440:	d516      	bpl.n	8009470 <_dtoa_r+0x380>
 8009442:	4bb2      	ldr	r3, [pc, #712]	; (800970c <_dtoa_r+0x61c>)
 8009444:	ec51 0b19 	vmov	r0, r1, d9
 8009448:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800944c:	f7f7 f9fe 	bl	800084c <__aeabi_ddiv>
 8009450:	f007 070f 	and.w	r7, r7, #15
 8009454:	4682      	mov	sl, r0
 8009456:	468b      	mov	fp, r1
 8009458:	2503      	movs	r5, #3
 800945a:	4eac      	ldr	r6, [pc, #688]	; (800970c <_dtoa_r+0x61c>)
 800945c:	b957      	cbnz	r7, 8009474 <_dtoa_r+0x384>
 800945e:	4642      	mov	r2, r8
 8009460:	464b      	mov	r3, r9
 8009462:	4650      	mov	r0, sl
 8009464:	4659      	mov	r1, fp
 8009466:	f7f7 f9f1 	bl	800084c <__aeabi_ddiv>
 800946a:	4682      	mov	sl, r0
 800946c:	468b      	mov	fp, r1
 800946e:	e028      	b.n	80094c2 <_dtoa_r+0x3d2>
 8009470:	2502      	movs	r5, #2
 8009472:	e7f2      	b.n	800945a <_dtoa_r+0x36a>
 8009474:	07f9      	lsls	r1, r7, #31
 8009476:	d508      	bpl.n	800948a <_dtoa_r+0x39a>
 8009478:	4640      	mov	r0, r8
 800947a:	4649      	mov	r1, r9
 800947c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009480:	f7f7 f8ba 	bl	80005f8 <__aeabi_dmul>
 8009484:	3501      	adds	r5, #1
 8009486:	4680      	mov	r8, r0
 8009488:	4689      	mov	r9, r1
 800948a:	107f      	asrs	r7, r7, #1
 800948c:	3608      	adds	r6, #8
 800948e:	e7e5      	b.n	800945c <_dtoa_r+0x36c>
 8009490:	f000 809b 	beq.w	80095ca <_dtoa_r+0x4da>
 8009494:	9b00      	ldr	r3, [sp, #0]
 8009496:	4f9d      	ldr	r7, [pc, #628]	; (800970c <_dtoa_r+0x61c>)
 8009498:	425e      	negs	r6, r3
 800949a:	4b9b      	ldr	r3, [pc, #620]	; (8009708 <_dtoa_r+0x618>)
 800949c:	f006 020f 	and.w	r2, r6, #15
 80094a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a8:	ec51 0b19 	vmov	r0, r1, d9
 80094ac:	f7f7 f8a4 	bl	80005f8 <__aeabi_dmul>
 80094b0:	1136      	asrs	r6, r6, #4
 80094b2:	4682      	mov	sl, r0
 80094b4:	468b      	mov	fp, r1
 80094b6:	2300      	movs	r3, #0
 80094b8:	2502      	movs	r5, #2
 80094ba:	2e00      	cmp	r6, #0
 80094bc:	d17a      	bne.n	80095b4 <_dtoa_r+0x4c4>
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d1d3      	bne.n	800946a <_dtoa_r+0x37a>
 80094c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	f000 8082 	beq.w	80095ce <_dtoa_r+0x4de>
 80094ca:	4b91      	ldr	r3, [pc, #580]	; (8009710 <_dtoa_r+0x620>)
 80094cc:	2200      	movs	r2, #0
 80094ce:	4650      	mov	r0, sl
 80094d0:	4659      	mov	r1, fp
 80094d2:	f7f7 fb03 	bl	8000adc <__aeabi_dcmplt>
 80094d6:	2800      	cmp	r0, #0
 80094d8:	d079      	beq.n	80095ce <_dtoa_r+0x4de>
 80094da:	9b03      	ldr	r3, [sp, #12]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d076      	beq.n	80095ce <_dtoa_r+0x4de>
 80094e0:	9b02      	ldr	r3, [sp, #8]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	dd36      	ble.n	8009554 <_dtoa_r+0x464>
 80094e6:	9b00      	ldr	r3, [sp, #0]
 80094e8:	4650      	mov	r0, sl
 80094ea:	4659      	mov	r1, fp
 80094ec:	1e5f      	subs	r7, r3, #1
 80094ee:	2200      	movs	r2, #0
 80094f0:	4b88      	ldr	r3, [pc, #544]	; (8009714 <_dtoa_r+0x624>)
 80094f2:	f7f7 f881 	bl	80005f8 <__aeabi_dmul>
 80094f6:	9e02      	ldr	r6, [sp, #8]
 80094f8:	4682      	mov	sl, r0
 80094fa:	468b      	mov	fp, r1
 80094fc:	3501      	adds	r5, #1
 80094fe:	4628      	mov	r0, r5
 8009500:	f7f7 f810 	bl	8000524 <__aeabi_i2d>
 8009504:	4652      	mov	r2, sl
 8009506:	465b      	mov	r3, fp
 8009508:	f7f7 f876 	bl	80005f8 <__aeabi_dmul>
 800950c:	4b82      	ldr	r3, [pc, #520]	; (8009718 <_dtoa_r+0x628>)
 800950e:	2200      	movs	r2, #0
 8009510:	f7f6 febc 	bl	800028c <__adddf3>
 8009514:	46d0      	mov	r8, sl
 8009516:	46d9      	mov	r9, fp
 8009518:	4682      	mov	sl, r0
 800951a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800951e:	2e00      	cmp	r6, #0
 8009520:	d158      	bne.n	80095d4 <_dtoa_r+0x4e4>
 8009522:	4b7e      	ldr	r3, [pc, #504]	; (800971c <_dtoa_r+0x62c>)
 8009524:	2200      	movs	r2, #0
 8009526:	4640      	mov	r0, r8
 8009528:	4649      	mov	r1, r9
 800952a:	f7f6 fead 	bl	8000288 <__aeabi_dsub>
 800952e:	4652      	mov	r2, sl
 8009530:	465b      	mov	r3, fp
 8009532:	4680      	mov	r8, r0
 8009534:	4689      	mov	r9, r1
 8009536:	f7f7 faef 	bl	8000b18 <__aeabi_dcmpgt>
 800953a:	2800      	cmp	r0, #0
 800953c:	f040 8295 	bne.w	8009a6a <_dtoa_r+0x97a>
 8009540:	4652      	mov	r2, sl
 8009542:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009546:	4640      	mov	r0, r8
 8009548:	4649      	mov	r1, r9
 800954a:	f7f7 fac7 	bl	8000adc <__aeabi_dcmplt>
 800954e:	2800      	cmp	r0, #0
 8009550:	f040 8289 	bne.w	8009a66 <_dtoa_r+0x976>
 8009554:	ec5b ab19 	vmov	sl, fp, d9
 8009558:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800955a:	2b00      	cmp	r3, #0
 800955c:	f2c0 8148 	blt.w	80097f0 <_dtoa_r+0x700>
 8009560:	9a00      	ldr	r2, [sp, #0]
 8009562:	2a0e      	cmp	r2, #14
 8009564:	f300 8144 	bgt.w	80097f0 <_dtoa_r+0x700>
 8009568:	4b67      	ldr	r3, [pc, #412]	; (8009708 <_dtoa_r+0x618>)
 800956a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800956e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009574:	2b00      	cmp	r3, #0
 8009576:	f280 80d5 	bge.w	8009724 <_dtoa_r+0x634>
 800957a:	9b03      	ldr	r3, [sp, #12]
 800957c:	2b00      	cmp	r3, #0
 800957e:	f300 80d1 	bgt.w	8009724 <_dtoa_r+0x634>
 8009582:	f040 826f 	bne.w	8009a64 <_dtoa_r+0x974>
 8009586:	4b65      	ldr	r3, [pc, #404]	; (800971c <_dtoa_r+0x62c>)
 8009588:	2200      	movs	r2, #0
 800958a:	4640      	mov	r0, r8
 800958c:	4649      	mov	r1, r9
 800958e:	f7f7 f833 	bl	80005f8 <__aeabi_dmul>
 8009592:	4652      	mov	r2, sl
 8009594:	465b      	mov	r3, fp
 8009596:	f7f7 fab5 	bl	8000b04 <__aeabi_dcmpge>
 800959a:	9e03      	ldr	r6, [sp, #12]
 800959c:	4637      	mov	r7, r6
 800959e:	2800      	cmp	r0, #0
 80095a0:	f040 8245 	bne.w	8009a2e <_dtoa_r+0x93e>
 80095a4:	9d01      	ldr	r5, [sp, #4]
 80095a6:	2331      	movs	r3, #49	; 0x31
 80095a8:	f805 3b01 	strb.w	r3, [r5], #1
 80095ac:	9b00      	ldr	r3, [sp, #0]
 80095ae:	3301      	adds	r3, #1
 80095b0:	9300      	str	r3, [sp, #0]
 80095b2:	e240      	b.n	8009a36 <_dtoa_r+0x946>
 80095b4:	07f2      	lsls	r2, r6, #31
 80095b6:	d505      	bpl.n	80095c4 <_dtoa_r+0x4d4>
 80095b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095bc:	f7f7 f81c 	bl	80005f8 <__aeabi_dmul>
 80095c0:	3501      	adds	r5, #1
 80095c2:	2301      	movs	r3, #1
 80095c4:	1076      	asrs	r6, r6, #1
 80095c6:	3708      	adds	r7, #8
 80095c8:	e777      	b.n	80094ba <_dtoa_r+0x3ca>
 80095ca:	2502      	movs	r5, #2
 80095cc:	e779      	b.n	80094c2 <_dtoa_r+0x3d2>
 80095ce:	9f00      	ldr	r7, [sp, #0]
 80095d0:	9e03      	ldr	r6, [sp, #12]
 80095d2:	e794      	b.n	80094fe <_dtoa_r+0x40e>
 80095d4:	9901      	ldr	r1, [sp, #4]
 80095d6:	4b4c      	ldr	r3, [pc, #304]	; (8009708 <_dtoa_r+0x618>)
 80095d8:	4431      	add	r1, r6
 80095da:	910d      	str	r1, [sp, #52]	; 0x34
 80095dc:	9908      	ldr	r1, [sp, #32]
 80095de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80095e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80095e6:	2900      	cmp	r1, #0
 80095e8:	d043      	beq.n	8009672 <_dtoa_r+0x582>
 80095ea:	494d      	ldr	r1, [pc, #308]	; (8009720 <_dtoa_r+0x630>)
 80095ec:	2000      	movs	r0, #0
 80095ee:	f7f7 f92d 	bl	800084c <__aeabi_ddiv>
 80095f2:	4652      	mov	r2, sl
 80095f4:	465b      	mov	r3, fp
 80095f6:	f7f6 fe47 	bl	8000288 <__aeabi_dsub>
 80095fa:	9d01      	ldr	r5, [sp, #4]
 80095fc:	4682      	mov	sl, r0
 80095fe:	468b      	mov	fp, r1
 8009600:	4649      	mov	r1, r9
 8009602:	4640      	mov	r0, r8
 8009604:	f7f7 faa8 	bl	8000b58 <__aeabi_d2iz>
 8009608:	4606      	mov	r6, r0
 800960a:	f7f6 ff8b 	bl	8000524 <__aeabi_i2d>
 800960e:	4602      	mov	r2, r0
 8009610:	460b      	mov	r3, r1
 8009612:	4640      	mov	r0, r8
 8009614:	4649      	mov	r1, r9
 8009616:	f7f6 fe37 	bl	8000288 <__aeabi_dsub>
 800961a:	3630      	adds	r6, #48	; 0x30
 800961c:	f805 6b01 	strb.w	r6, [r5], #1
 8009620:	4652      	mov	r2, sl
 8009622:	465b      	mov	r3, fp
 8009624:	4680      	mov	r8, r0
 8009626:	4689      	mov	r9, r1
 8009628:	f7f7 fa58 	bl	8000adc <__aeabi_dcmplt>
 800962c:	2800      	cmp	r0, #0
 800962e:	d163      	bne.n	80096f8 <_dtoa_r+0x608>
 8009630:	4642      	mov	r2, r8
 8009632:	464b      	mov	r3, r9
 8009634:	4936      	ldr	r1, [pc, #216]	; (8009710 <_dtoa_r+0x620>)
 8009636:	2000      	movs	r0, #0
 8009638:	f7f6 fe26 	bl	8000288 <__aeabi_dsub>
 800963c:	4652      	mov	r2, sl
 800963e:	465b      	mov	r3, fp
 8009640:	f7f7 fa4c 	bl	8000adc <__aeabi_dcmplt>
 8009644:	2800      	cmp	r0, #0
 8009646:	f040 80b5 	bne.w	80097b4 <_dtoa_r+0x6c4>
 800964a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800964c:	429d      	cmp	r5, r3
 800964e:	d081      	beq.n	8009554 <_dtoa_r+0x464>
 8009650:	4b30      	ldr	r3, [pc, #192]	; (8009714 <_dtoa_r+0x624>)
 8009652:	2200      	movs	r2, #0
 8009654:	4650      	mov	r0, sl
 8009656:	4659      	mov	r1, fp
 8009658:	f7f6 ffce 	bl	80005f8 <__aeabi_dmul>
 800965c:	4b2d      	ldr	r3, [pc, #180]	; (8009714 <_dtoa_r+0x624>)
 800965e:	4682      	mov	sl, r0
 8009660:	468b      	mov	fp, r1
 8009662:	4640      	mov	r0, r8
 8009664:	4649      	mov	r1, r9
 8009666:	2200      	movs	r2, #0
 8009668:	f7f6 ffc6 	bl	80005f8 <__aeabi_dmul>
 800966c:	4680      	mov	r8, r0
 800966e:	4689      	mov	r9, r1
 8009670:	e7c6      	b.n	8009600 <_dtoa_r+0x510>
 8009672:	4650      	mov	r0, sl
 8009674:	4659      	mov	r1, fp
 8009676:	f7f6 ffbf 	bl	80005f8 <__aeabi_dmul>
 800967a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800967c:	9d01      	ldr	r5, [sp, #4]
 800967e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009680:	4682      	mov	sl, r0
 8009682:	468b      	mov	fp, r1
 8009684:	4649      	mov	r1, r9
 8009686:	4640      	mov	r0, r8
 8009688:	f7f7 fa66 	bl	8000b58 <__aeabi_d2iz>
 800968c:	4606      	mov	r6, r0
 800968e:	f7f6 ff49 	bl	8000524 <__aeabi_i2d>
 8009692:	3630      	adds	r6, #48	; 0x30
 8009694:	4602      	mov	r2, r0
 8009696:	460b      	mov	r3, r1
 8009698:	4640      	mov	r0, r8
 800969a:	4649      	mov	r1, r9
 800969c:	f7f6 fdf4 	bl	8000288 <__aeabi_dsub>
 80096a0:	f805 6b01 	strb.w	r6, [r5], #1
 80096a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096a6:	429d      	cmp	r5, r3
 80096a8:	4680      	mov	r8, r0
 80096aa:	4689      	mov	r9, r1
 80096ac:	f04f 0200 	mov.w	r2, #0
 80096b0:	d124      	bne.n	80096fc <_dtoa_r+0x60c>
 80096b2:	4b1b      	ldr	r3, [pc, #108]	; (8009720 <_dtoa_r+0x630>)
 80096b4:	4650      	mov	r0, sl
 80096b6:	4659      	mov	r1, fp
 80096b8:	f7f6 fde8 	bl	800028c <__adddf3>
 80096bc:	4602      	mov	r2, r0
 80096be:	460b      	mov	r3, r1
 80096c0:	4640      	mov	r0, r8
 80096c2:	4649      	mov	r1, r9
 80096c4:	f7f7 fa28 	bl	8000b18 <__aeabi_dcmpgt>
 80096c8:	2800      	cmp	r0, #0
 80096ca:	d173      	bne.n	80097b4 <_dtoa_r+0x6c4>
 80096cc:	4652      	mov	r2, sl
 80096ce:	465b      	mov	r3, fp
 80096d0:	4913      	ldr	r1, [pc, #76]	; (8009720 <_dtoa_r+0x630>)
 80096d2:	2000      	movs	r0, #0
 80096d4:	f7f6 fdd8 	bl	8000288 <__aeabi_dsub>
 80096d8:	4602      	mov	r2, r0
 80096da:	460b      	mov	r3, r1
 80096dc:	4640      	mov	r0, r8
 80096de:	4649      	mov	r1, r9
 80096e0:	f7f7 f9fc 	bl	8000adc <__aeabi_dcmplt>
 80096e4:	2800      	cmp	r0, #0
 80096e6:	f43f af35 	beq.w	8009554 <_dtoa_r+0x464>
 80096ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80096ec:	1e6b      	subs	r3, r5, #1
 80096ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80096f0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80096f4:	2b30      	cmp	r3, #48	; 0x30
 80096f6:	d0f8      	beq.n	80096ea <_dtoa_r+0x5fa>
 80096f8:	9700      	str	r7, [sp, #0]
 80096fa:	e049      	b.n	8009790 <_dtoa_r+0x6a0>
 80096fc:	4b05      	ldr	r3, [pc, #20]	; (8009714 <_dtoa_r+0x624>)
 80096fe:	f7f6 ff7b 	bl	80005f8 <__aeabi_dmul>
 8009702:	4680      	mov	r8, r0
 8009704:	4689      	mov	r9, r1
 8009706:	e7bd      	b.n	8009684 <_dtoa_r+0x594>
 8009708:	0800b2e0 	.word	0x0800b2e0
 800970c:	0800b2b8 	.word	0x0800b2b8
 8009710:	3ff00000 	.word	0x3ff00000
 8009714:	40240000 	.word	0x40240000
 8009718:	401c0000 	.word	0x401c0000
 800971c:	40140000 	.word	0x40140000
 8009720:	3fe00000 	.word	0x3fe00000
 8009724:	9d01      	ldr	r5, [sp, #4]
 8009726:	4656      	mov	r6, sl
 8009728:	465f      	mov	r7, fp
 800972a:	4642      	mov	r2, r8
 800972c:	464b      	mov	r3, r9
 800972e:	4630      	mov	r0, r6
 8009730:	4639      	mov	r1, r7
 8009732:	f7f7 f88b 	bl	800084c <__aeabi_ddiv>
 8009736:	f7f7 fa0f 	bl	8000b58 <__aeabi_d2iz>
 800973a:	4682      	mov	sl, r0
 800973c:	f7f6 fef2 	bl	8000524 <__aeabi_i2d>
 8009740:	4642      	mov	r2, r8
 8009742:	464b      	mov	r3, r9
 8009744:	f7f6 ff58 	bl	80005f8 <__aeabi_dmul>
 8009748:	4602      	mov	r2, r0
 800974a:	460b      	mov	r3, r1
 800974c:	4630      	mov	r0, r6
 800974e:	4639      	mov	r1, r7
 8009750:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009754:	f7f6 fd98 	bl	8000288 <__aeabi_dsub>
 8009758:	f805 6b01 	strb.w	r6, [r5], #1
 800975c:	9e01      	ldr	r6, [sp, #4]
 800975e:	9f03      	ldr	r7, [sp, #12]
 8009760:	1bae      	subs	r6, r5, r6
 8009762:	42b7      	cmp	r7, r6
 8009764:	4602      	mov	r2, r0
 8009766:	460b      	mov	r3, r1
 8009768:	d135      	bne.n	80097d6 <_dtoa_r+0x6e6>
 800976a:	f7f6 fd8f 	bl	800028c <__adddf3>
 800976e:	4642      	mov	r2, r8
 8009770:	464b      	mov	r3, r9
 8009772:	4606      	mov	r6, r0
 8009774:	460f      	mov	r7, r1
 8009776:	f7f7 f9cf 	bl	8000b18 <__aeabi_dcmpgt>
 800977a:	b9d0      	cbnz	r0, 80097b2 <_dtoa_r+0x6c2>
 800977c:	4642      	mov	r2, r8
 800977e:	464b      	mov	r3, r9
 8009780:	4630      	mov	r0, r6
 8009782:	4639      	mov	r1, r7
 8009784:	f7f7 f9a0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009788:	b110      	cbz	r0, 8009790 <_dtoa_r+0x6a0>
 800978a:	f01a 0f01 	tst.w	sl, #1
 800978e:	d110      	bne.n	80097b2 <_dtoa_r+0x6c2>
 8009790:	4620      	mov	r0, r4
 8009792:	ee18 1a10 	vmov	r1, s16
 8009796:	f000 faf3 	bl	8009d80 <_Bfree>
 800979a:	2300      	movs	r3, #0
 800979c:	9800      	ldr	r0, [sp, #0]
 800979e:	702b      	strb	r3, [r5, #0]
 80097a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80097a2:	3001      	adds	r0, #1
 80097a4:	6018      	str	r0, [r3, #0]
 80097a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	f43f acf1 	beq.w	8009190 <_dtoa_r+0xa0>
 80097ae:	601d      	str	r5, [r3, #0]
 80097b0:	e4ee      	b.n	8009190 <_dtoa_r+0xa0>
 80097b2:	9f00      	ldr	r7, [sp, #0]
 80097b4:	462b      	mov	r3, r5
 80097b6:	461d      	mov	r5, r3
 80097b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097bc:	2a39      	cmp	r2, #57	; 0x39
 80097be:	d106      	bne.n	80097ce <_dtoa_r+0x6de>
 80097c0:	9a01      	ldr	r2, [sp, #4]
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d1f7      	bne.n	80097b6 <_dtoa_r+0x6c6>
 80097c6:	9901      	ldr	r1, [sp, #4]
 80097c8:	2230      	movs	r2, #48	; 0x30
 80097ca:	3701      	adds	r7, #1
 80097cc:	700a      	strb	r2, [r1, #0]
 80097ce:	781a      	ldrb	r2, [r3, #0]
 80097d0:	3201      	adds	r2, #1
 80097d2:	701a      	strb	r2, [r3, #0]
 80097d4:	e790      	b.n	80096f8 <_dtoa_r+0x608>
 80097d6:	4ba6      	ldr	r3, [pc, #664]	; (8009a70 <_dtoa_r+0x980>)
 80097d8:	2200      	movs	r2, #0
 80097da:	f7f6 ff0d 	bl	80005f8 <__aeabi_dmul>
 80097de:	2200      	movs	r2, #0
 80097e0:	2300      	movs	r3, #0
 80097e2:	4606      	mov	r6, r0
 80097e4:	460f      	mov	r7, r1
 80097e6:	f7f7 f96f 	bl	8000ac8 <__aeabi_dcmpeq>
 80097ea:	2800      	cmp	r0, #0
 80097ec:	d09d      	beq.n	800972a <_dtoa_r+0x63a>
 80097ee:	e7cf      	b.n	8009790 <_dtoa_r+0x6a0>
 80097f0:	9a08      	ldr	r2, [sp, #32]
 80097f2:	2a00      	cmp	r2, #0
 80097f4:	f000 80d7 	beq.w	80099a6 <_dtoa_r+0x8b6>
 80097f8:	9a06      	ldr	r2, [sp, #24]
 80097fa:	2a01      	cmp	r2, #1
 80097fc:	f300 80ba 	bgt.w	8009974 <_dtoa_r+0x884>
 8009800:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009802:	2a00      	cmp	r2, #0
 8009804:	f000 80b2 	beq.w	800996c <_dtoa_r+0x87c>
 8009808:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800980c:	9e07      	ldr	r6, [sp, #28]
 800980e:	9d04      	ldr	r5, [sp, #16]
 8009810:	9a04      	ldr	r2, [sp, #16]
 8009812:	441a      	add	r2, r3
 8009814:	9204      	str	r2, [sp, #16]
 8009816:	9a05      	ldr	r2, [sp, #20]
 8009818:	2101      	movs	r1, #1
 800981a:	441a      	add	r2, r3
 800981c:	4620      	mov	r0, r4
 800981e:	9205      	str	r2, [sp, #20]
 8009820:	f000 fb66 	bl	8009ef0 <__i2b>
 8009824:	4607      	mov	r7, r0
 8009826:	2d00      	cmp	r5, #0
 8009828:	dd0c      	ble.n	8009844 <_dtoa_r+0x754>
 800982a:	9b05      	ldr	r3, [sp, #20]
 800982c:	2b00      	cmp	r3, #0
 800982e:	dd09      	ble.n	8009844 <_dtoa_r+0x754>
 8009830:	42ab      	cmp	r3, r5
 8009832:	9a04      	ldr	r2, [sp, #16]
 8009834:	bfa8      	it	ge
 8009836:	462b      	movge	r3, r5
 8009838:	1ad2      	subs	r2, r2, r3
 800983a:	9204      	str	r2, [sp, #16]
 800983c:	9a05      	ldr	r2, [sp, #20]
 800983e:	1aed      	subs	r5, r5, r3
 8009840:	1ad3      	subs	r3, r2, r3
 8009842:	9305      	str	r3, [sp, #20]
 8009844:	9b07      	ldr	r3, [sp, #28]
 8009846:	b31b      	cbz	r3, 8009890 <_dtoa_r+0x7a0>
 8009848:	9b08      	ldr	r3, [sp, #32]
 800984a:	2b00      	cmp	r3, #0
 800984c:	f000 80af 	beq.w	80099ae <_dtoa_r+0x8be>
 8009850:	2e00      	cmp	r6, #0
 8009852:	dd13      	ble.n	800987c <_dtoa_r+0x78c>
 8009854:	4639      	mov	r1, r7
 8009856:	4632      	mov	r2, r6
 8009858:	4620      	mov	r0, r4
 800985a:	f000 fc09 	bl	800a070 <__pow5mult>
 800985e:	ee18 2a10 	vmov	r2, s16
 8009862:	4601      	mov	r1, r0
 8009864:	4607      	mov	r7, r0
 8009866:	4620      	mov	r0, r4
 8009868:	f000 fb58 	bl	8009f1c <__multiply>
 800986c:	ee18 1a10 	vmov	r1, s16
 8009870:	4680      	mov	r8, r0
 8009872:	4620      	mov	r0, r4
 8009874:	f000 fa84 	bl	8009d80 <_Bfree>
 8009878:	ee08 8a10 	vmov	s16, r8
 800987c:	9b07      	ldr	r3, [sp, #28]
 800987e:	1b9a      	subs	r2, r3, r6
 8009880:	d006      	beq.n	8009890 <_dtoa_r+0x7a0>
 8009882:	ee18 1a10 	vmov	r1, s16
 8009886:	4620      	mov	r0, r4
 8009888:	f000 fbf2 	bl	800a070 <__pow5mult>
 800988c:	ee08 0a10 	vmov	s16, r0
 8009890:	2101      	movs	r1, #1
 8009892:	4620      	mov	r0, r4
 8009894:	f000 fb2c 	bl	8009ef0 <__i2b>
 8009898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800989a:	2b00      	cmp	r3, #0
 800989c:	4606      	mov	r6, r0
 800989e:	f340 8088 	ble.w	80099b2 <_dtoa_r+0x8c2>
 80098a2:	461a      	mov	r2, r3
 80098a4:	4601      	mov	r1, r0
 80098a6:	4620      	mov	r0, r4
 80098a8:	f000 fbe2 	bl	800a070 <__pow5mult>
 80098ac:	9b06      	ldr	r3, [sp, #24]
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	4606      	mov	r6, r0
 80098b2:	f340 8081 	ble.w	80099b8 <_dtoa_r+0x8c8>
 80098b6:	f04f 0800 	mov.w	r8, #0
 80098ba:	6933      	ldr	r3, [r6, #16]
 80098bc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80098c0:	6918      	ldr	r0, [r3, #16]
 80098c2:	f000 fac5 	bl	8009e50 <__hi0bits>
 80098c6:	f1c0 0020 	rsb	r0, r0, #32
 80098ca:	9b05      	ldr	r3, [sp, #20]
 80098cc:	4418      	add	r0, r3
 80098ce:	f010 001f 	ands.w	r0, r0, #31
 80098d2:	f000 8092 	beq.w	80099fa <_dtoa_r+0x90a>
 80098d6:	f1c0 0320 	rsb	r3, r0, #32
 80098da:	2b04      	cmp	r3, #4
 80098dc:	f340 808a 	ble.w	80099f4 <_dtoa_r+0x904>
 80098e0:	f1c0 001c 	rsb	r0, r0, #28
 80098e4:	9b04      	ldr	r3, [sp, #16]
 80098e6:	4403      	add	r3, r0
 80098e8:	9304      	str	r3, [sp, #16]
 80098ea:	9b05      	ldr	r3, [sp, #20]
 80098ec:	4403      	add	r3, r0
 80098ee:	4405      	add	r5, r0
 80098f0:	9305      	str	r3, [sp, #20]
 80098f2:	9b04      	ldr	r3, [sp, #16]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	dd07      	ble.n	8009908 <_dtoa_r+0x818>
 80098f8:	ee18 1a10 	vmov	r1, s16
 80098fc:	461a      	mov	r2, r3
 80098fe:	4620      	mov	r0, r4
 8009900:	f000 fc10 	bl	800a124 <__lshift>
 8009904:	ee08 0a10 	vmov	s16, r0
 8009908:	9b05      	ldr	r3, [sp, #20]
 800990a:	2b00      	cmp	r3, #0
 800990c:	dd05      	ble.n	800991a <_dtoa_r+0x82a>
 800990e:	4631      	mov	r1, r6
 8009910:	461a      	mov	r2, r3
 8009912:	4620      	mov	r0, r4
 8009914:	f000 fc06 	bl	800a124 <__lshift>
 8009918:	4606      	mov	r6, r0
 800991a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800991c:	2b00      	cmp	r3, #0
 800991e:	d06e      	beq.n	80099fe <_dtoa_r+0x90e>
 8009920:	ee18 0a10 	vmov	r0, s16
 8009924:	4631      	mov	r1, r6
 8009926:	f000 fc6d 	bl	800a204 <__mcmp>
 800992a:	2800      	cmp	r0, #0
 800992c:	da67      	bge.n	80099fe <_dtoa_r+0x90e>
 800992e:	9b00      	ldr	r3, [sp, #0]
 8009930:	3b01      	subs	r3, #1
 8009932:	ee18 1a10 	vmov	r1, s16
 8009936:	9300      	str	r3, [sp, #0]
 8009938:	220a      	movs	r2, #10
 800993a:	2300      	movs	r3, #0
 800993c:	4620      	mov	r0, r4
 800993e:	f000 fa41 	bl	8009dc4 <__multadd>
 8009942:	9b08      	ldr	r3, [sp, #32]
 8009944:	ee08 0a10 	vmov	s16, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	f000 81b1 	beq.w	8009cb0 <_dtoa_r+0xbc0>
 800994e:	2300      	movs	r3, #0
 8009950:	4639      	mov	r1, r7
 8009952:	220a      	movs	r2, #10
 8009954:	4620      	mov	r0, r4
 8009956:	f000 fa35 	bl	8009dc4 <__multadd>
 800995a:	9b02      	ldr	r3, [sp, #8]
 800995c:	2b00      	cmp	r3, #0
 800995e:	4607      	mov	r7, r0
 8009960:	f300 808e 	bgt.w	8009a80 <_dtoa_r+0x990>
 8009964:	9b06      	ldr	r3, [sp, #24]
 8009966:	2b02      	cmp	r3, #2
 8009968:	dc51      	bgt.n	8009a0e <_dtoa_r+0x91e>
 800996a:	e089      	b.n	8009a80 <_dtoa_r+0x990>
 800996c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800996e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009972:	e74b      	b.n	800980c <_dtoa_r+0x71c>
 8009974:	9b03      	ldr	r3, [sp, #12]
 8009976:	1e5e      	subs	r6, r3, #1
 8009978:	9b07      	ldr	r3, [sp, #28]
 800997a:	42b3      	cmp	r3, r6
 800997c:	bfbf      	itttt	lt
 800997e:	9b07      	ldrlt	r3, [sp, #28]
 8009980:	9607      	strlt	r6, [sp, #28]
 8009982:	1af2      	sublt	r2, r6, r3
 8009984:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009986:	bfb6      	itet	lt
 8009988:	189b      	addlt	r3, r3, r2
 800998a:	1b9e      	subge	r6, r3, r6
 800998c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800998e:	9b03      	ldr	r3, [sp, #12]
 8009990:	bfb8      	it	lt
 8009992:	2600      	movlt	r6, #0
 8009994:	2b00      	cmp	r3, #0
 8009996:	bfb7      	itett	lt
 8009998:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800999c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80099a0:	1a9d      	sublt	r5, r3, r2
 80099a2:	2300      	movlt	r3, #0
 80099a4:	e734      	b.n	8009810 <_dtoa_r+0x720>
 80099a6:	9e07      	ldr	r6, [sp, #28]
 80099a8:	9d04      	ldr	r5, [sp, #16]
 80099aa:	9f08      	ldr	r7, [sp, #32]
 80099ac:	e73b      	b.n	8009826 <_dtoa_r+0x736>
 80099ae:	9a07      	ldr	r2, [sp, #28]
 80099b0:	e767      	b.n	8009882 <_dtoa_r+0x792>
 80099b2:	9b06      	ldr	r3, [sp, #24]
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	dc18      	bgt.n	80099ea <_dtoa_r+0x8fa>
 80099b8:	f1ba 0f00 	cmp.w	sl, #0
 80099bc:	d115      	bne.n	80099ea <_dtoa_r+0x8fa>
 80099be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80099c2:	b993      	cbnz	r3, 80099ea <_dtoa_r+0x8fa>
 80099c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80099c8:	0d1b      	lsrs	r3, r3, #20
 80099ca:	051b      	lsls	r3, r3, #20
 80099cc:	b183      	cbz	r3, 80099f0 <_dtoa_r+0x900>
 80099ce:	9b04      	ldr	r3, [sp, #16]
 80099d0:	3301      	adds	r3, #1
 80099d2:	9304      	str	r3, [sp, #16]
 80099d4:	9b05      	ldr	r3, [sp, #20]
 80099d6:	3301      	adds	r3, #1
 80099d8:	9305      	str	r3, [sp, #20]
 80099da:	f04f 0801 	mov.w	r8, #1
 80099de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	f47f af6a 	bne.w	80098ba <_dtoa_r+0x7ca>
 80099e6:	2001      	movs	r0, #1
 80099e8:	e76f      	b.n	80098ca <_dtoa_r+0x7da>
 80099ea:	f04f 0800 	mov.w	r8, #0
 80099ee:	e7f6      	b.n	80099de <_dtoa_r+0x8ee>
 80099f0:	4698      	mov	r8, r3
 80099f2:	e7f4      	b.n	80099de <_dtoa_r+0x8ee>
 80099f4:	f43f af7d 	beq.w	80098f2 <_dtoa_r+0x802>
 80099f8:	4618      	mov	r0, r3
 80099fa:	301c      	adds	r0, #28
 80099fc:	e772      	b.n	80098e4 <_dtoa_r+0x7f4>
 80099fe:	9b03      	ldr	r3, [sp, #12]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	dc37      	bgt.n	8009a74 <_dtoa_r+0x984>
 8009a04:	9b06      	ldr	r3, [sp, #24]
 8009a06:	2b02      	cmp	r3, #2
 8009a08:	dd34      	ble.n	8009a74 <_dtoa_r+0x984>
 8009a0a:	9b03      	ldr	r3, [sp, #12]
 8009a0c:	9302      	str	r3, [sp, #8]
 8009a0e:	9b02      	ldr	r3, [sp, #8]
 8009a10:	b96b      	cbnz	r3, 8009a2e <_dtoa_r+0x93e>
 8009a12:	4631      	mov	r1, r6
 8009a14:	2205      	movs	r2, #5
 8009a16:	4620      	mov	r0, r4
 8009a18:	f000 f9d4 	bl	8009dc4 <__multadd>
 8009a1c:	4601      	mov	r1, r0
 8009a1e:	4606      	mov	r6, r0
 8009a20:	ee18 0a10 	vmov	r0, s16
 8009a24:	f000 fbee 	bl	800a204 <__mcmp>
 8009a28:	2800      	cmp	r0, #0
 8009a2a:	f73f adbb 	bgt.w	80095a4 <_dtoa_r+0x4b4>
 8009a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a30:	9d01      	ldr	r5, [sp, #4]
 8009a32:	43db      	mvns	r3, r3
 8009a34:	9300      	str	r3, [sp, #0]
 8009a36:	f04f 0800 	mov.w	r8, #0
 8009a3a:	4631      	mov	r1, r6
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	f000 f99f 	bl	8009d80 <_Bfree>
 8009a42:	2f00      	cmp	r7, #0
 8009a44:	f43f aea4 	beq.w	8009790 <_dtoa_r+0x6a0>
 8009a48:	f1b8 0f00 	cmp.w	r8, #0
 8009a4c:	d005      	beq.n	8009a5a <_dtoa_r+0x96a>
 8009a4e:	45b8      	cmp	r8, r7
 8009a50:	d003      	beq.n	8009a5a <_dtoa_r+0x96a>
 8009a52:	4641      	mov	r1, r8
 8009a54:	4620      	mov	r0, r4
 8009a56:	f000 f993 	bl	8009d80 <_Bfree>
 8009a5a:	4639      	mov	r1, r7
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	f000 f98f 	bl	8009d80 <_Bfree>
 8009a62:	e695      	b.n	8009790 <_dtoa_r+0x6a0>
 8009a64:	2600      	movs	r6, #0
 8009a66:	4637      	mov	r7, r6
 8009a68:	e7e1      	b.n	8009a2e <_dtoa_r+0x93e>
 8009a6a:	9700      	str	r7, [sp, #0]
 8009a6c:	4637      	mov	r7, r6
 8009a6e:	e599      	b.n	80095a4 <_dtoa_r+0x4b4>
 8009a70:	40240000 	.word	0x40240000
 8009a74:	9b08      	ldr	r3, [sp, #32]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	f000 80ca 	beq.w	8009c10 <_dtoa_r+0xb20>
 8009a7c:	9b03      	ldr	r3, [sp, #12]
 8009a7e:	9302      	str	r3, [sp, #8]
 8009a80:	2d00      	cmp	r5, #0
 8009a82:	dd05      	ble.n	8009a90 <_dtoa_r+0x9a0>
 8009a84:	4639      	mov	r1, r7
 8009a86:	462a      	mov	r2, r5
 8009a88:	4620      	mov	r0, r4
 8009a8a:	f000 fb4b 	bl	800a124 <__lshift>
 8009a8e:	4607      	mov	r7, r0
 8009a90:	f1b8 0f00 	cmp.w	r8, #0
 8009a94:	d05b      	beq.n	8009b4e <_dtoa_r+0xa5e>
 8009a96:	6879      	ldr	r1, [r7, #4]
 8009a98:	4620      	mov	r0, r4
 8009a9a:	f000 f931 	bl	8009d00 <_Balloc>
 8009a9e:	4605      	mov	r5, r0
 8009aa0:	b928      	cbnz	r0, 8009aae <_dtoa_r+0x9be>
 8009aa2:	4b87      	ldr	r3, [pc, #540]	; (8009cc0 <_dtoa_r+0xbd0>)
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009aaa:	f7ff bb3b 	b.w	8009124 <_dtoa_r+0x34>
 8009aae:	693a      	ldr	r2, [r7, #16]
 8009ab0:	3202      	adds	r2, #2
 8009ab2:	0092      	lsls	r2, r2, #2
 8009ab4:	f107 010c 	add.w	r1, r7, #12
 8009ab8:	300c      	adds	r0, #12
 8009aba:	f000 f913 	bl	8009ce4 <memcpy>
 8009abe:	2201      	movs	r2, #1
 8009ac0:	4629      	mov	r1, r5
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	f000 fb2e 	bl	800a124 <__lshift>
 8009ac8:	9b01      	ldr	r3, [sp, #4]
 8009aca:	f103 0901 	add.w	r9, r3, #1
 8009ace:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009ad2:	4413      	add	r3, r2
 8009ad4:	9305      	str	r3, [sp, #20]
 8009ad6:	f00a 0301 	and.w	r3, sl, #1
 8009ada:	46b8      	mov	r8, r7
 8009adc:	9304      	str	r3, [sp, #16]
 8009ade:	4607      	mov	r7, r0
 8009ae0:	4631      	mov	r1, r6
 8009ae2:	ee18 0a10 	vmov	r0, s16
 8009ae6:	f7ff fa75 	bl	8008fd4 <quorem>
 8009aea:	4641      	mov	r1, r8
 8009aec:	9002      	str	r0, [sp, #8]
 8009aee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009af2:	ee18 0a10 	vmov	r0, s16
 8009af6:	f000 fb85 	bl	800a204 <__mcmp>
 8009afa:	463a      	mov	r2, r7
 8009afc:	9003      	str	r0, [sp, #12]
 8009afe:	4631      	mov	r1, r6
 8009b00:	4620      	mov	r0, r4
 8009b02:	f000 fb9b 	bl	800a23c <__mdiff>
 8009b06:	68c2      	ldr	r2, [r0, #12]
 8009b08:	f109 3bff 	add.w	fp, r9, #4294967295
 8009b0c:	4605      	mov	r5, r0
 8009b0e:	bb02      	cbnz	r2, 8009b52 <_dtoa_r+0xa62>
 8009b10:	4601      	mov	r1, r0
 8009b12:	ee18 0a10 	vmov	r0, s16
 8009b16:	f000 fb75 	bl	800a204 <__mcmp>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	4629      	mov	r1, r5
 8009b1e:	4620      	mov	r0, r4
 8009b20:	9207      	str	r2, [sp, #28]
 8009b22:	f000 f92d 	bl	8009d80 <_Bfree>
 8009b26:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009b2a:	ea43 0102 	orr.w	r1, r3, r2
 8009b2e:	9b04      	ldr	r3, [sp, #16]
 8009b30:	430b      	orrs	r3, r1
 8009b32:	464d      	mov	r5, r9
 8009b34:	d10f      	bne.n	8009b56 <_dtoa_r+0xa66>
 8009b36:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009b3a:	d02a      	beq.n	8009b92 <_dtoa_r+0xaa2>
 8009b3c:	9b03      	ldr	r3, [sp, #12]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	dd02      	ble.n	8009b48 <_dtoa_r+0xa58>
 8009b42:	9b02      	ldr	r3, [sp, #8]
 8009b44:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009b48:	f88b a000 	strb.w	sl, [fp]
 8009b4c:	e775      	b.n	8009a3a <_dtoa_r+0x94a>
 8009b4e:	4638      	mov	r0, r7
 8009b50:	e7ba      	b.n	8009ac8 <_dtoa_r+0x9d8>
 8009b52:	2201      	movs	r2, #1
 8009b54:	e7e2      	b.n	8009b1c <_dtoa_r+0xa2c>
 8009b56:	9b03      	ldr	r3, [sp, #12]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	db04      	blt.n	8009b66 <_dtoa_r+0xa76>
 8009b5c:	9906      	ldr	r1, [sp, #24]
 8009b5e:	430b      	orrs	r3, r1
 8009b60:	9904      	ldr	r1, [sp, #16]
 8009b62:	430b      	orrs	r3, r1
 8009b64:	d122      	bne.n	8009bac <_dtoa_r+0xabc>
 8009b66:	2a00      	cmp	r2, #0
 8009b68:	ddee      	ble.n	8009b48 <_dtoa_r+0xa58>
 8009b6a:	ee18 1a10 	vmov	r1, s16
 8009b6e:	2201      	movs	r2, #1
 8009b70:	4620      	mov	r0, r4
 8009b72:	f000 fad7 	bl	800a124 <__lshift>
 8009b76:	4631      	mov	r1, r6
 8009b78:	ee08 0a10 	vmov	s16, r0
 8009b7c:	f000 fb42 	bl	800a204 <__mcmp>
 8009b80:	2800      	cmp	r0, #0
 8009b82:	dc03      	bgt.n	8009b8c <_dtoa_r+0xa9c>
 8009b84:	d1e0      	bne.n	8009b48 <_dtoa_r+0xa58>
 8009b86:	f01a 0f01 	tst.w	sl, #1
 8009b8a:	d0dd      	beq.n	8009b48 <_dtoa_r+0xa58>
 8009b8c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009b90:	d1d7      	bne.n	8009b42 <_dtoa_r+0xa52>
 8009b92:	2339      	movs	r3, #57	; 0x39
 8009b94:	f88b 3000 	strb.w	r3, [fp]
 8009b98:	462b      	mov	r3, r5
 8009b9a:	461d      	mov	r5, r3
 8009b9c:	3b01      	subs	r3, #1
 8009b9e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009ba2:	2a39      	cmp	r2, #57	; 0x39
 8009ba4:	d071      	beq.n	8009c8a <_dtoa_r+0xb9a>
 8009ba6:	3201      	adds	r2, #1
 8009ba8:	701a      	strb	r2, [r3, #0]
 8009baa:	e746      	b.n	8009a3a <_dtoa_r+0x94a>
 8009bac:	2a00      	cmp	r2, #0
 8009bae:	dd07      	ble.n	8009bc0 <_dtoa_r+0xad0>
 8009bb0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009bb4:	d0ed      	beq.n	8009b92 <_dtoa_r+0xaa2>
 8009bb6:	f10a 0301 	add.w	r3, sl, #1
 8009bba:	f88b 3000 	strb.w	r3, [fp]
 8009bbe:	e73c      	b.n	8009a3a <_dtoa_r+0x94a>
 8009bc0:	9b05      	ldr	r3, [sp, #20]
 8009bc2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009bc6:	4599      	cmp	r9, r3
 8009bc8:	d047      	beq.n	8009c5a <_dtoa_r+0xb6a>
 8009bca:	ee18 1a10 	vmov	r1, s16
 8009bce:	2300      	movs	r3, #0
 8009bd0:	220a      	movs	r2, #10
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	f000 f8f6 	bl	8009dc4 <__multadd>
 8009bd8:	45b8      	cmp	r8, r7
 8009bda:	ee08 0a10 	vmov	s16, r0
 8009bde:	f04f 0300 	mov.w	r3, #0
 8009be2:	f04f 020a 	mov.w	r2, #10
 8009be6:	4641      	mov	r1, r8
 8009be8:	4620      	mov	r0, r4
 8009bea:	d106      	bne.n	8009bfa <_dtoa_r+0xb0a>
 8009bec:	f000 f8ea 	bl	8009dc4 <__multadd>
 8009bf0:	4680      	mov	r8, r0
 8009bf2:	4607      	mov	r7, r0
 8009bf4:	f109 0901 	add.w	r9, r9, #1
 8009bf8:	e772      	b.n	8009ae0 <_dtoa_r+0x9f0>
 8009bfa:	f000 f8e3 	bl	8009dc4 <__multadd>
 8009bfe:	4639      	mov	r1, r7
 8009c00:	4680      	mov	r8, r0
 8009c02:	2300      	movs	r3, #0
 8009c04:	220a      	movs	r2, #10
 8009c06:	4620      	mov	r0, r4
 8009c08:	f000 f8dc 	bl	8009dc4 <__multadd>
 8009c0c:	4607      	mov	r7, r0
 8009c0e:	e7f1      	b.n	8009bf4 <_dtoa_r+0xb04>
 8009c10:	9b03      	ldr	r3, [sp, #12]
 8009c12:	9302      	str	r3, [sp, #8]
 8009c14:	9d01      	ldr	r5, [sp, #4]
 8009c16:	ee18 0a10 	vmov	r0, s16
 8009c1a:	4631      	mov	r1, r6
 8009c1c:	f7ff f9da 	bl	8008fd4 <quorem>
 8009c20:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009c24:	9b01      	ldr	r3, [sp, #4]
 8009c26:	f805 ab01 	strb.w	sl, [r5], #1
 8009c2a:	1aea      	subs	r2, r5, r3
 8009c2c:	9b02      	ldr	r3, [sp, #8]
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	dd09      	ble.n	8009c46 <_dtoa_r+0xb56>
 8009c32:	ee18 1a10 	vmov	r1, s16
 8009c36:	2300      	movs	r3, #0
 8009c38:	220a      	movs	r2, #10
 8009c3a:	4620      	mov	r0, r4
 8009c3c:	f000 f8c2 	bl	8009dc4 <__multadd>
 8009c40:	ee08 0a10 	vmov	s16, r0
 8009c44:	e7e7      	b.n	8009c16 <_dtoa_r+0xb26>
 8009c46:	9b02      	ldr	r3, [sp, #8]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	bfc8      	it	gt
 8009c4c:	461d      	movgt	r5, r3
 8009c4e:	9b01      	ldr	r3, [sp, #4]
 8009c50:	bfd8      	it	le
 8009c52:	2501      	movle	r5, #1
 8009c54:	441d      	add	r5, r3
 8009c56:	f04f 0800 	mov.w	r8, #0
 8009c5a:	ee18 1a10 	vmov	r1, s16
 8009c5e:	2201      	movs	r2, #1
 8009c60:	4620      	mov	r0, r4
 8009c62:	f000 fa5f 	bl	800a124 <__lshift>
 8009c66:	4631      	mov	r1, r6
 8009c68:	ee08 0a10 	vmov	s16, r0
 8009c6c:	f000 faca 	bl	800a204 <__mcmp>
 8009c70:	2800      	cmp	r0, #0
 8009c72:	dc91      	bgt.n	8009b98 <_dtoa_r+0xaa8>
 8009c74:	d102      	bne.n	8009c7c <_dtoa_r+0xb8c>
 8009c76:	f01a 0f01 	tst.w	sl, #1
 8009c7a:	d18d      	bne.n	8009b98 <_dtoa_r+0xaa8>
 8009c7c:	462b      	mov	r3, r5
 8009c7e:	461d      	mov	r5, r3
 8009c80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c84:	2a30      	cmp	r2, #48	; 0x30
 8009c86:	d0fa      	beq.n	8009c7e <_dtoa_r+0xb8e>
 8009c88:	e6d7      	b.n	8009a3a <_dtoa_r+0x94a>
 8009c8a:	9a01      	ldr	r2, [sp, #4]
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d184      	bne.n	8009b9a <_dtoa_r+0xaaa>
 8009c90:	9b00      	ldr	r3, [sp, #0]
 8009c92:	3301      	adds	r3, #1
 8009c94:	9300      	str	r3, [sp, #0]
 8009c96:	2331      	movs	r3, #49	; 0x31
 8009c98:	7013      	strb	r3, [r2, #0]
 8009c9a:	e6ce      	b.n	8009a3a <_dtoa_r+0x94a>
 8009c9c:	4b09      	ldr	r3, [pc, #36]	; (8009cc4 <_dtoa_r+0xbd4>)
 8009c9e:	f7ff ba95 	b.w	80091cc <_dtoa_r+0xdc>
 8009ca2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	f47f aa6e 	bne.w	8009186 <_dtoa_r+0x96>
 8009caa:	4b07      	ldr	r3, [pc, #28]	; (8009cc8 <_dtoa_r+0xbd8>)
 8009cac:	f7ff ba8e 	b.w	80091cc <_dtoa_r+0xdc>
 8009cb0:	9b02      	ldr	r3, [sp, #8]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	dcae      	bgt.n	8009c14 <_dtoa_r+0xb24>
 8009cb6:	9b06      	ldr	r3, [sp, #24]
 8009cb8:	2b02      	cmp	r3, #2
 8009cba:	f73f aea8 	bgt.w	8009a0e <_dtoa_r+0x91e>
 8009cbe:	e7a9      	b.n	8009c14 <_dtoa_r+0xb24>
 8009cc0:	0800b247 	.word	0x0800b247
 8009cc4:	0800b1a4 	.word	0x0800b1a4
 8009cc8:	0800b1c8 	.word	0x0800b1c8

08009ccc <_localeconv_r>:
 8009ccc:	4800      	ldr	r0, [pc, #0]	; (8009cd0 <_localeconv_r+0x4>)
 8009cce:	4770      	bx	lr
 8009cd0:	20000160 	.word	0x20000160

08009cd4 <malloc>:
 8009cd4:	4b02      	ldr	r3, [pc, #8]	; (8009ce0 <malloc+0xc>)
 8009cd6:	4601      	mov	r1, r0
 8009cd8:	6818      	ldr	r0, [r3, #0]
 8009cda:	f000 bc17 	b.w	800a50c <_malloc_r>
 8009cde:	bf00      	nop
 8009ce0:	2000000c 	.word	0x2000000c

08009ce4 <memcpy>:
 8009ce4:	440a      	add	r2, r1
 8009ce6:	4291      	cmp	r1, r2
 8009ce8:	f100 33ff 	add.w	r3, r0, #4294967295
 8009cec:	d100      	bne.n	8009cf0 <memcpy+0xc>
 8009cee:	4770      	bx	lr
 8009cf0:	b510      	push	{r4, lr}
 8009cf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cfa:	4291      	cmp	r1, r2
 8009cfc:	d1f9      	bne.n	8009cf2 <memcpy+0xe>
 8009cfe:	bd10      	pop	{r4, pc}

08009d00 <_Balloc>:
 8009d00:	b570      	push	{r4, r5, r6, lr}
 8009d02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009d04:	4604      	mov	r4, r0
 8009d06:	460d      	mov	r5, r1
 8009d08:	b976      	cbnz	r6, 8009d28 <_Balloc+0x28>
 8009d0a:	2010      	movs	r0, #16
 8009d0c:	f7ff ffe2 	bl	8009cd4 <malloc>
 8009d10:	4602      	mov	r2, r0
 8009d12:	6260      	str	r0, [r4, #36]	; 0x24
 8009d14:	b920      	cbnz	r0, 8009d20 <_Balloc+0x20>
 8009d16:	4b18      	ldr	r3, [pc, #96]	; (8009d78 <_Balloc+0x78>)
 8009d18:	4818      	ldr	r0, [pc, #96]	; (8009d7c <_Balloc+0x7c>)
 8009d1a:	2166      	movs	r1, #102	; 0x66
 8009d1c:	f000 fc7a 	bl	800a614 <__assert_func>
 8009d20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d24:	6006      	str	r6, [r0, #0]
 8009d26:	60c6      	str	r6, [r0, #12]
 8009d28:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009d2a:	68f3      	ldr	r3, [r6, #12]
 8009d2c:	b183      	cbz	r3, 8009d50 <_Balloc+0x50>
 8009d2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d30:	68db      	ldr	r3, [r3, #12]
 8009d32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009d36:	b9b8      	cbnz	r0, 8009d68 <_Balloc+0x68>
 8009d38:	2101      	movs	r1, #1
 8009d3a:	fa01 f605 	lsl.w	r6, r1, r5
 8009d3e:	1d72      	adds	r2, r6, #5
 8009d40:	0092      	lsls	r2, r2, #2
 8009d42:	4620      	mov	r0, r4
 8009d44:	f000 fb60 	bl	800a408 <_calloc_r>
 8009d48:	b160      	cbz	r0, 8009d64 <_Balloc+0x64>
 8009d4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009d4e:	e00e      	b.n	8009d6e <_Balloc+0x6e>
 8009d50:	2221      	movs	r2, #33	; 0x21
 8009d52:	2104      	movs	r1, #4
 8009d54:	4620      	mov	r0, r4
 8009d56:	f000 fb57 	bl	800a408 <_calloc_r>
 8009d5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d5c:	60f0      	str	r0, [r6, #12]
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d1e4      	bne.n	8009d2e <_Balloc+0x2e>
 8009d64:	2000      	movs	r0, #0
 8009d66:	bd70      	pop	{r4, r5, r6, pc}
 8009d68:	6802      	ldr	r2, [r0, #0]
 8009d6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d6e:	2300      	movs	r3, #0
 8009d70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d74:	e7f7      	b.n	8009d66 <_Balloc+0x66>
 8009d76:	bf00      	nop
 8009d78:	0800b1d5 	.word	0x0800b1d5
 8009d7c:	0800b258 	.word	0x0800b258

08009d80 <_Bfree>:
 8009d80:	b570      	push	{r4, r5, r6, lr}
 8009d82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009d84:	4605      	mov	r5, r0
 8009d86:	460c      	mov	r4, r1
 8009d88:	b976      	cbnz	r6, 8009da8 <_Bfree+0x28>
 8009d8a:	2010      	movs	r0, #16
 8009d8c:	f7ff ffa2 	bl	8009cd4 <malloc>
 8009d90:	4602      	mov	r2, r0
 8009d92:	6268      	str	r0, [r5, #36]	; 0x24
 8009d94:	b920      	cbnz	r0, 8009da0 <_Bfree+0x20>
 8009d96:	4b09      	ldr	r3, [pc, #36]	; (8009dbc <_Bfree+0x3c>)
 8009d98:	4809      	ldr	r0, [pc, #36]	; (8009dc0 <_Bfree+0x40>)
 8009d9a:	218a      	movs	r1, #138	; 0x8a
 8009d9c:	f000 fc3a 	bl	800a614 <__assert_func>
 8009da0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009da4:	6006      	str	r6, [r0, #0]
 8009da6:	60c6      	str	r6, [r0, #12]
 8009da8:	b13c      	cbz	r4, 8009dba <_Bfree+0x3a>
 8009daa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009dac:	6862      	ldr	r2, [r4, #4]
 8009dae:	68db      	ldr	r3, [r3, #12]
 8009db0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009db4:	6021      	str	r1, [r4, #0]
 8009db6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009dba:	bd70      	pop	{r4, r5, r6, pc}
 8009dbc:	0800b1d5 	.word	0x0800b1d5
 8009dc0:	0800b258 	.word	0x0800b258

08009dc4 <__multadd>:
 8009dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dc8:	690d      	ldr	r5, [r1, #16]
 8009dca:	4607      	mov	r7, r0
 8009dcc:	460c      	mov	r4, r1
 8009dce:	461e      	mov	r6, r3
 8009dd0:	f101 0c14 	add.w	ip, r1, #20
 8009dd4:	2000      	movs	r0, #0
 8009dd6:	f8dc 3000 	ldr.w	r3, [ip]
 8009dda:	b299      	uxth	r1, r3
 8009ddc:	fb02 6101 	mla	r1, r2, r1, r6
 8009de0:	0c1e      	lsrs	r6, r3, #16
 8009de2:	0c0b      	lsrs	r3, r1, #16
 8009de4:	fb02 3306 	mla	r3, r2, r6, r3
 8009de8:	b289      	uxth	r1, r1
 8009dea:	3001      	adds	r0, #1
 8009dec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009df0:	4285      	cmp	r5, r0
 8009df2:	f84c 1b04 	str.w	r1, [ip], #4
 8009df6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009dfa:	dcec      	bgt.n	8009dd6 <__multadd+0x12>
 8009dfc:	b30e      	cbz	r6, 8009e42 <__multadd+0x7e>
 8009dfe:	68a3      	ldr	r3, [r4, #8]
 8009e00:	42ab      	cmp	r3, r5
 8009e02:	dc19      	bgt.n	8009e38 <__multadd+0x74>
 8009e04:	6861      	ldr	r1, [r4, #4]
 8009e06:	4638      	mov	r0, r7
 8009e08:	3101      	adds	r1, #1
 8009e0a:	f7ff ff79 	bl	8009d00 <_Balloc>
 8009e0e:	4680      	mov	r8, r0
 8009e10:	b928      	cbnz	r0, 8009e1e <__multadd+0x5a>
 8009e12:	4602      	mov	r2, r0
 8009e14:	4b0c      	ldr	r3, [pc, #48]	; (8009e48 <__multadd+0x84>)
 8009e16:	480d      	ldr	r0, [pc, #52]	; (8009e4c <__multadd+0x88>)
 8009e18:	21b5      	movs	r1, #181	; 0xb5
 8009e1a:	f000 fbfb 	bl	800a614 <__assert_func>
 8009e1e:	6922      	ldr	r2, [r4, #16]
 8009e20:	3202      	adds	r2, #2
 8009e22:	f104 010c 	add.w	r1, r4, #12
 8009e26:	0092      	lsls	r2, r2, #2
 8009e28:	300c      	adds	r0, #12
 8009e2a:	f7ff ff5b 	bl	8009ce4 <memcpy>
 8009e2e:	4621      	mov	r1, r4
 8009e30:	4638      	mov	r0, r7
 8009e32:	f7ff ffa5 	bl	8009d80 <_Bfree>
 8009e36:	4644      	mov	r4, r8
 8009e38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009e3c:	3501      	adds	r5, #1
 8009e3e:	615e      	str	r6, [r3, #20]
 8009e40:	6125      	str	r5, [r4, #16]
 8009e42:	4620      	mov	r0, r4
 8009e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e48:	0800b247 	.word	0x0800b247
 8009e4c:	0800b258 	.word	0x0800b258

08009e50 <__hi0bits>:
 8009e50:	0c03      	lsrs	r3, r0, #16
 8009e52:	041b      	lsls	r3, r3, #16
 8009e54:	b9d3      	cbnz	r3, 8009e8c <__hi0bits+0x3c>
 8009e56:	0400      	lsls	r0, r0, #16
 8009e58:	2310      	movs	r3, #16
 8009e5a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009e5e:	bf04      	itt	eq
 8009e60:	0200      	lsleq	r0, r0, #8
 8009e62:	3308      	addeq	r3, #8
 8009e64:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009e68:	bf04      	itt	eq
 8009e6a:	0100      	lsleq	r0, r0, #4
 8009e6c:	3304      	addeq	r3, #4
 8009e6e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009e72:	bf04      	itt	eq
 8009e74:	0080      	lsleq	r0, r0, #2
 8009e76:	3302      	addeq	r3, #2
 8009e78:	2800      	cmp	r0, #0
 8009e7a:	db05      	blt.n	8009e88 <__hi0bits+0x38>
 8009e7c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009e80:	f103 0301 	add.w	r3, r3, #1
 8009e84:	bf08      	it	eq
 8009e86:	2320      	moveq	r3, #32
 8009e88:	4618      	mov	r0, r3
 8009e8a:	4770      	bx	lr
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	e7e4      	b.n	8009e5a <__hi0bits+0xa>

08009e90 <__lo0bits>:
 8009e90:	6803      	ldr	r3, [r0, #0]
 8009e92:	f013 0207 	ands.w	r2, r3, #7
 8009e96:	4601      	mov	r1, r0
 8009e98:	d00b      	beq.n	8009eb2 <__lo0bits+0x22>
 8009e9a:	07da      	lsls	r2, r3, #31
 8009e9c:	d423      	bmi.n	8009ee6 <__lo0bits+0x56>
 8009e9e:	0798      	lsls	r0, r3, #30
 8009ea0:	bf49      	itett	mi
 8009ea2:	085b      	lsrmi	r3, r3, #1
 8009ea4:	089b      	lsrpl	r3, r3, #2
 8009ea6:	2001      	movmi	r0, #1
 8009ea8:	600b      	strmi	r3, [r1, #0]
 8009eaa:	bf5c      	itt	pl
 8009eac:	600b      	strpl	r3, [r1, #0]
 8009eae:	2002      	movpl	r0, #2
 8009eb0:	4770      	bx	lr
 8009eb2:	b298      	uxth	r0, r3
 8009eb4:	b9a8      	cbnz	r0, 8009ee2 <__lo0bits+0x52>
 8009eb6:	0c1b      	lsrs	r3, r3, #16
 8009eb8:	2010      	movs	r0, #16
 8009eba:	b2da      	uxtb	r2, r3
 8009ebc:	b90a      	cbnz	r2, 8009ec2 <__lo0bits+0x32>
 8009ebe:	3008      	adds	r0, #8
 8009ec0:	0a1b      	lsrs	r3, r3, #8
 8009ec2:	071a      	lsls	r2, r3, #28
 8009ec4:	bf04      	itt	eq
 8009ec6:	091b      	lsreq	r3, r3, #4
 8009ec8:	3004      	addeq	r0, #4
 8009eca:	079a      	lsls	r2, r3, #30
 8009ecc:	bf04      	itt	eq
 8009ece:	089b      	lsreq	r3, r3, #2
 8009ed0:	3002      	addeq	r0, #2
 8009ed2:	07da      	lsls	r2, r3, #31
 8009ed4:	d403      	bmi.n	8009ede <__lo0bits+0x4e>
 8009ed6:	085b      	lsrs	r3, r3, #1
 8009ed8:	f100 0001 	add.w	r0, r0, #1
 8009edc:	d005      	beq.n	8009eea <__lo0bits+0x5a>
 8009ede:	600b      	str	r3, [r1, #0]
 8009ee0:	4770      	bx	lr
 8009ee2:	4610      	mov	r0, r2
 8009ee4:	e7e9      	b.n	8009eba <__lo0bits+0x2a>
 8009ee6:	2000      	movs	r0, #0
 8009ee8:	4770      	bx	lr
 8009eea:	2020      	movs	r0, #32
 8009eec:	4770      	bx	lr
	...

08009ef0 <__i2b>:
 8009ef0:	b510      	push	{r4, lr}
 8009ef2:	460c      	mov	r4, r1
 8009ef4:	2101      	movs	r1, #1
 8009ef6:	f7ff ff03 	bl	8009d00 <_Balloc>
 8009efa:	4602      	mov	r2, r0
 8009efc:	b928      	cbnz	r0, 8009f0a <__i2b+0x1a>
 8009efe:	4b05      	ldr	r3, [pc, #20]	; (8009f14 <__i2b+0x24>)
 8009f00:	4805      	ldr	r0, [pc, #20]	; (8009f18 <__i2b+0x28>)
 8009f02:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009f06:	f000 fb85 	bl	800a614 <__assert_func>
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	6144      	str	r4, [r0, #20]
 8009f0e:	6103      	str	r3, [r0, #16]
 8009f10:	bd10      	pop	{r4, pc}
 8009f12:	bf00      	nop
 8009f14:	0800b247 	.word	0x0800b247
 8009f18:	0800b258 	.word	0x0800b258

08009f1c <__multiply>:
 8009f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f20:	4691      	mov	r9, r2
 8009f22:	690a      	ldr	r2, [r1, #16]
 8009f24:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	bfb8      	it	lt
 8009f2c:	460b      	movlt	r3, r1
 8009f2e:	460c      	mov	r4, r1
 8009f30:	bfbc      	itt	lt
 8009f32:	464c      	movlt	r4, r9
 8009f34:	4699      	movlt	r9, r3
 8009f36:	6927      	ldr	r7, [r4, #16]
 8009f38:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009f3c:	68a3      	ldr	r3, [r4, #8]
 8009f3e:	6861      	ldr	r1, [r4, #4]
 8009f40:	eb07 060a 	add.w	r6, r7, sl
 8009f44:	42b3      	cmp	r3, r6
 8009f46:	b085      	sub	sp, #20
 8009f48:	bfb8      	it	lt
 8009f4a:	3101      	addlt	r1, #1
 8009f4c:	f7ff fed8 	bl	8009d00 <_Balloc>
 8009f50:	b930      	cbnz	r0, 8009f60 <__multiply+0x44>
 8009f52:	4602      	mov	r2, r0
 8009f54:	4b44      	ldr	r3, [pc, #272]	; (800a068 <__multiply+0x14c>)
 8009f56:	4845      	ldr	r0, [pc, #276]	; (800a06c <__multiply+0x150>)
 8009f58:	f240 115d 	movw	r1, #349	; 0x15d
 8009f5c:	f000 fb5a 	bl	800a614 <__assert_func>
 8009f60:	f100 0514 	add.w	r5, r0, #20
 8009f64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009f68:	462b      	mov	r3, r5
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	4543      	cmp	r3, r8
 8009f6e:	d321      	bcc.n	8009fb4 <__multiply+0x98>
 8009f70:	f104 0314 	add.w	r3, r4, #20
 8009f74:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009f78:	f109 0314 	add.w	r3, r9, #20
 8009f7c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009f80:	9202      	str	r2, [sp, #8]
 8009f82:	1b3a      	subs	r2, r7, r4
 8009f84:	3a15      	subs	r2, #21
 8009f86:	f022 0203 	bic.w	r2, r2, #3
 8009f8a:	3204      	adds	r2, #4
 8009f8c:	f104 0115 	add.w	r1, r4, #21
 8009f90:	428f      	cmp	r7, r1
 8009f92:	bf38      	it	cc
 8009f94:	2204      	movcc	r2, #4
 8009f96:	9201      	str	r2, [sp, #4]
 8009f98:	9a02      	ldr	r2, [sp, #8]
 8009f9a:	9303      	str	r3, [sp, #12]
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d80c      	bhi.n	8009fba <__multiply+0x9e>
 8009fa0:	2e00      	cmp	r6, #0
 8009fa2:	dd03      	ble.n	8009fac <__multiply+0x90>
 8009fa4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d05a      	beq.n	800a062 <__multiply+0x146>
 8009fac:	6106      	str	r6, [r0, #16]
 8009fae:	b005      	add	sp, #20
 8009fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fb4:	f843 2b04 	str.w	r2, [r3], #4
 8009fb8:	e7d8      	b.n	8009f6c <__multiply+0x50>
 8009fba:	f8b3 a000 	ldrh.w	sl, [r3]
 8009fbe:	f1ba 0f00 	cmp.w	sl, #0
 8009fc2:	d024      	beq.n	800a00e <__multiply+0xf2>
 8009fc4:	f104 0e14 	add.w	lr, r4, #20
 8009fc8:	46a9      	mov	r9, r5
 8009fca:	f04f 0c00 	mov.w	ip, #0
 8009fce:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009fd2:	f8d9 1000 	ldr.w	r1, [r9]
 8009fd6:	fa1f fb82 	uxth.w	fp, r2
 8009fda:	b289      	uxth	r1, r1
 8009fdc:	fb0a 110b 	mla	r1, sl, fp, r1
 8009fe0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009fe4:	f8d9 2000 	ldr.w	r2, [r9]
 8009fe8:	4461      	add	r1, ip
 8009fea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009fee:	fb0a c20b 	mla	r2, sl, fp, ip
 8009ff2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009ff6:	b289      	uxth	r1, r1
 8009ff8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009ffc:	4577      	cmp	r7, lr
 8009ffe:	f849 1b04 	str.w	r1, [r9], #4
 800a002:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a006:	d8e2      	bhi.n	8009fce <__multiply+0xb2>
 800a008:	9a01      	ldr	r2, [sp, #4]
 800a00a:	f845 c002 	str.w	ip, [r5, r2]
 800a00e:	9a03      	ldr	r2, [sp, #12]
 800a010:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a014:	3304      	adds	r3, #4
 800a016:	f1b9 0f00 	cmp.w	r9, #0
 800a01a:	d020      	beq.n	800a05e <__multiply+0x142>
 800a01c:	6829      	ldr	r1, [r5, #0]
 800a01e:	f104 0c14 	add.w	ip, r4, #20
 800a022:	46ae      	mov	lr, r5
 800a024:	f04f 0a00 	mov.w	sl, #0
 800a028:	f8bc b000 	ldrh.w	fp, [ip]
 800a02c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a030:	fb09 220b 	mla	r2, r9, fp, r2
 800a034:	4492      	add	sl, r2
 800a036:	b289      	uxth	r1, r1
 800a038:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a03c:	f84e 1b04 	str.w	r1, [lr], #4
 800a040:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a044:	f8be 1000 	ldrh.w	r1, [lr]
 800a048:	0c12      	lsrs	r2, r2, #16
 800a04a:	fb09 1102 	mla	r1, r9, r2, r1
 800a04e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a052:	4567      	cmp	r7, ip
 800a054:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a058:	d8e6      	bhi.n	800a028 <__multiply+0x10c>
 800a05a:	9a01      	ldr	r2, [sp, #4]
 800a05c:	50a9      	str	r1, [r5, r2]
 800a05e:	3504      	adds	r5, #4
 800a060:	e79a      	b.n	8009f98 <__multiply+0x7c>
 800a062:	3e01      	subs	r6, #1
 800a064:	e79c      	b.n	8009fa0 <__multiply+0x84>
 800a066:	bf00      	nop
 800a068:	0800b247 	.word	0x0800b247
 800a06c:	0800b258 	.word	0x0800b258

0800a070 <__pow5mult>:
 800a070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a074:	4615      	mov	r5, r2
 800a076:	f012 0203 	ands.w	r2, r2, #3
 800a07a:	4606      	mov	r6, r0
 800a07c:	460f      	mov	r7, r1
 800a07e:	d007      	beq.n	800a090 <__pow5mult+0x20>
 800a080:	4c25      	ldr	r4, [pc, #148]	; (800a118 <__pow5mult+0xa8>)
 800a082:	3a01      	subs	r2, #1
 800a084:	2300      	movs	r3, #0
 800a086:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a08a:	f7ff fe9b 	bl	8009dc4 <__multadd>
 800a08e:	4607      	mov	r7, r0
 800a090:	10ad      	asrs	r5, r5, #2
 800a092:	d03d      	beq.n	800a110 <__pow5mult+0xa0>
 800a094:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a096:	b97c      	cbnz	r4, 800a0b8 <__pow5mult+0x48>
 800a098:	2010      	movs	r0, #16
 800a09a:	f7ff fe1b 	bl	8009cd4 <malloc>
 800a09e:	4602      	mov	r2, r0
 800a0a0:	6270      	str	r0, [r6, #36]	; 0x24
 800a0a2:	b928      	cbnz	r0, 800a0b0 <__pow5mult+0x40>
 800a0a4:	4b1d      	ldr	r3, [pc, #116]	; (800a11c <__pow5mult+0xac>)
 800a0a6:	481e      	ldr	r0, [pc, #120]	; (800a120 <__pow5mult+0xb0>)
 800a0a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a0ac:	f000 fab2 	bl	800a614 <__assert_func>
 800a0b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a0b4:	6004      	str	r4, [r0, #0]
 800a0b6:	60c4      	str	r4, [r0, #12]
 800a0b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a0bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a0c0:	b94c      	cbnz	r4, 800a0d6 <__pow5mult+0x66>
 800a0c2:	f240 2171 	movw	r1, #625	; 0x271
 800a0c6:	4630      	mov	r0, r6
 800a0c8:	f7ff ff12 	bl	8009ef0 <__i2b>
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800a0d2:	4604      	mov	r4, r0
 800a0d4:	6003      	str	r3, [r0, #0]
 800a0d6:	f04f 0900 	mov.w	r9, #0
 800a0da:	07eb      	lsls	r3, r5, #31
 800a0dc:	d50a      	bpl.n	800a0f4 <__pow5mult+0x84>
 800a0de:	4639      	mov	r1, r7
 800a0e0:	4622      	mov	r2, r4
 800a0e2:	4630      	mov	r0, r6
 800a0e4:	f7ff ff1a 	bl	8009f1c <__multiply>
 800a0e8:	4639      	mov	r1, r7
 800a0ea:	4680      	mov	r8, r0
 800a0ec:	4630      	mov	r0, r6
 800a0ee:	f7ff fe47 	bl	8009d80 <_Bfree>
 800a0f2:	4647      	mov	r7, r8
 800a0f4:	106d      	asrs	r5, r5, #1
 800a0f6:	d00b      	beq.n	800a110 <__pow5mult+0xa0>
 800a0f8:	6820      	ldr	r0, [r4, #0]
 800a0fa:	b938      	cbnz	r0, 800a10c <__pow5mult+0x9c>
 800a0fc:	4622      	mov	r2, r4
 800a0fe:	4621      	mov	r1, r4
 800a100:	4630      	mov	r0, r6
 800a102:	f7ff ff0b 	bl	8009f1c <__multiply>
 800a106:	6020      	str	r0, [r4, #0]
 800a108:	f8c0 9000 	str.w	r9, [r0]
 800a10c:	4604      	mov	r4, r0
 800a10e:	e7e4      	b.n	800a0da <__pow5mult+0x6a>
 800a110:	4638      	mov	r0, r7
 800a112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a116:	bf00      	nop
 800a118:	0800b3a8 	.word	0x0800b3a8
 800a11c:	0800b1d5 	.word	0x0800b1d5
 800a120:	0800b258 	.word	0x0800b258

0800a124 <__lshift>:
 800a124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a128:	460c      	mov	r4, r1
 800a12a:	6849      	ldr	r1, [r1, #4]
 800a12c:	6923      	ldr	r3, [r4, #16]
 800a12e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a132:	68a3      	ldr	r3, [r4, #8]
 800a134:	4607      	mov	r7, r0
 800a136:	4691      	mov	r9, r2
 800a138:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a13c:	f108 0601 	add.w	r6, r8, #1
 800a140:	42b3      	cmp	r3, r6
 800a142:	db0b      	blt.n	800a15c <__lshift+0x38>
 800a144:	4638      	mov	r0, r7
 800a146:	f7ff fddb 	bl	8009d00 <_Balloc>
 800a14a:	4605      	mov	r5, r0
 800a14c:	b948      	cbnz	r0, 800a162 <__lshift+0x3e>
 800a14e:	4602      	mov	r2, r0
 800a150:	4b2a      	ldr	r3, [pc, #168]	; (800a1fc <__lshift+0xd8>)
 800a152:	482b      	ldr	r0, [pc, #172]	; (800a200 <__lshift+0xdc>)
 800a154:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a158:	f000 fa5c 	bl	800a614 <__assert_func>
 800a15c:	3101      	adds	r1, #1
 800a15e:	005b      	lsls	r3, r3, #1
 800a160:	e7ee      	b.n	800a140 <__lshift+0x1c>
 800a162:	2300      	movs	r3, #0
 800a164:	f100 0114 	add.w	r1, r0, #20
 800a168:	f100 0210 	add.w	r2, r0, #16
 800a16c:	4618      	mov	r0, r3
 800a16e:	4553      	cmp	r3, sl
 800a170:	db37      	blt.n	800a1e2 <__lshift+0xbe>
 800a172:	6920      	ldr	r0, [r4, #16]
 800a174:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a178:	f104 0314 	add.w	r3, r4, #20
 800a17c:	f019 091f 	ands.w	r9, r9, #31
 800a180:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a184:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a188:	d02f      	beq.n	800a1ea <__lshift+0xc6>
 800a18a:	f1c9 0e20 	rsb	lr, r9, #32
 800a18e:	468a      	mov	sl, r1
 800a190:	f04f 0c00 	mov.w	ip, #0
 800a194:	681a      	ldr	r2, [r3, #0]
 800a196:	fa02 f209 	lsl.w	r2, r2, r9
 800a19a:	ea42 020c 	orr.w	r2, r2, ip
 800a19e:	f84a 2b04 	str.w	r2, [sl], #4
 800a1a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1a6:	4298      	cmp	r0, r3
 800a1a8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a1ac:	d8f2      	bhi.n	800a194 <__lshift+0x70>
 800a1ae:	1b03      	subs	r3, r0, r4
 800a1b0:	3b15      	subs	r3, #21
 800a1b2:	f023 0303 	bic.w	r3, r3, #3
 800a1b6:	3304      	adds	r3, #4
 800a1b8:	f104 0215 	add.w	r2, r4, #21
 800a1bc:	4290      	cmp	r0, r2
 800a1be:	bf38      	it	cc
 800a1c0:	2304      	movcc	r3, #4
 800a1c2:	f841 c003 	str.w	ip, [r1, r3]
 800a1c6:	f1bc 0f00 	cmp.w	ip, #0
 800a1ca:	d001      	beq.n	800a1d0 <__lshift+0xac>
 800a1cc:	f108 0602 	add.w	r6, r8, #2
 800a1d0:	3e01      	subs	r6, #1
 800a1d2:	4638      	mov	r0, r7
 800a1d4:	612e      	str	r6, [r5, #16]
 800a1d6:	4621      	mov	r1, r4
 800a1d8:	f7ff fdd2 	bl	8009d80 <_Bfree>
 800a1dc:	4628      	mov	r0, r5
 800a1de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	e7c1      	b.n	800a16e <__lshift+0x4a>
 800a1ea:	3904      	subs	r1, #4
 800a1ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1f0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a1f4:	4298      	cmp	r0, r3
 800a1f6:	d8f9      	bhi.n	800a1ec <__lshift+0xc8>
 800a1f8:	e7ea      	b.n	800a1d0 <__lshift+0xac>
 800a1fa:	bf00      	nop
 800a1fc:	0800b247 	.word	0x0800b247
 800a200:	0800b258 	.word	0x0800b258

0800a204 <__mcmp>:
 800a204:	b530      	push	{r4, r5, lr}
 800a206:	6902      	ldr	r2, [r0, #16]
 800a208:	690c      	ldr	r4, [r1, #16]
 800a20a:	1b12      	subs	r2, r2, r4
 800a20c:	d10e      	bne.n	800a22c <__mcmp+0x28>
 800a20e:	f100 0314 	add.w	r3, r0, #20
 800a212:	3114      	adds	r1, #20
 800a214:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a218:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a21c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a220:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a224:	42a5      	cmp	r5, r4
 800a226:	d003      	beq.n	800a230 <__mcmp+0x2c>
 800a228:	d305      	bcc.n	800a236 <__mcmp+0x32>
 800a22a:	2201      	movs	r2, #1
 800a22c:	4610      	mov	r0, r2
 800a22e:	bd30      	pop	{r4, r5, pc}
 800a230:	4283      	cmp	r3, r0
 800a232:	d3f3      	bcc.n	800a21c <__mcmp+0x18>
 800a234:	e7fa      	b.n	800a22c <__mcmp+0x28>
 800a236:	f04f 32ff 	mov.w	r2, #4294967295
 800a23a:	e7f7      	b.n	800a22c <__mcmp+0x28>

0800a23c <__mdiff>:
 800a23c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a240:	460c      	mov	r4, r1
 800a242:	4606      	mov	r6, r0
 800a244:	4611      	mov	r1, r2
 800a246:	4620      	mov	r0, r4
 800a248:	4690      	mov	r8, r2
 800a24a:	f7ff ffdb 	bl	800a204 <__mcmp>
 800a24e:	1e05      	subs	r5, r0, #0
 800a250:	d110      	bne.n	800a274 <__mdiff+0x38>
 800a252:	4629      	mov	r1, r5
 800a254:	4630      	mov	r0, r6
 800a256:	f7ff fd53 	bl	8009d00 <_Balloc>
 800a25a:	b930      	cbnz	r0, 800a26a <__mdiff+0x2e>
 800a25c:	4b3a      	ldr	r3, [pc, #232]	; (800a348 <__mdiff+0x10c>)
 800a25e:	4602      	mov	r2, r0
 800a260:	f240 2132 	movw	r1, #562	; 0x232
 800a264:	4839      	ldr	r0, [pc, #228]	; (800a34c <__mdiff+0x110>)
 800a266:	f000 f9d5 	bl	800a614 <__assert_func>
 800a26a:	2301      	movs	r3, #1
 800a26c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a270:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a274:	bfa4      	itt	ge
 800a276:	4643      	movge	r3, r8
 800a278:	46a0      	movge	r8, r4
 800a27a:	4630      	mov	r0, r6
 800a27c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a280:	bfa6      	itte	ge
 800a282:	461c      	movge	r4, r3
 800a284:	2500      	movge	r5, #0
 800a286:	2501      	movlt	r5, #1
 800a288:	f7ff fd3a 	bl	8009d00 <_Balloc>
 800a28c:	b920      	cbnz	r0, 800a298 <__mdiff+0x5c>
 800a28e:	4b2e      	ldr	r3, [pc, #184]	; (800a348 <__mdiff+0x10c>)
 800a290:	4602      	mov	r2, r0
 800a292:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a296:	e7e5      	b.n	800a264 <__mdiff+0x28>
 800a298:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a29c:	6926      	ldr	r6, [r4, #16]
 800a29e:	60c5      	str	r5, [r0, #12]
 800a2a0:	f104 0914 	add.w	r9, r4, #20
 800a2a4:	f108 0514 	add.w	r5, r8, #20
 800a2a8:	f100 0e14 	add.w	lr, r0, #20
 800a2ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a2b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a2b4:	f108 0210 	add.w	r2, r8, #16
 800a2b8:	46f2      	mov	sl, lr
 800a2ba:	2100      	movs	r1, #0
 800a2bc:	f859 3b04 	ldr.w	r3, [r9], #4
 800a2c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a2c4:	fa1f f883 	uxth.w	r8, r3
 800a2c8:	fa11 f18b 	uxtah	r1, r1, fp
 800a2cc:	0c1b      	lsrs	r3, r3, #16
 800a2ce:	eba1 0808 	sub.w	r8, r1, r8
 800a2d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a2d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a2da:	fa1f f888 	uxth.w	r8, r8
 800a2de:	1419      	asrs	r1, r3, #16
 800a2e0:	454e      	cmp	r6, r9
 800a2e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a2e6:	f84a 3b04 	str.w	r3, [sl], #4
 800a2ea:	d8e7      	bhi.n	800a2bc <__mdiff+0x80>
 800a2ec:	1b33      	subs	r3, r6, r4
 800a2ee:	3b15      	subs	r3, #21
 800a2f0:	f023 0303 	bic.w	r3, r3, #3
 800a2f4:	3304      	adds	r3, #4
 800a2f6:	3415      	adds	r4, #21
 800a2f8:	42a6      	cmp	r6, r4
 800a2fa:	bf38      	it	cc
 800a2fc:	2304      	movcc	r3, #4
 800a2fe:	441d      	add	r5, r3
 800a300:	4473      	add	r3, lr
 800a302:	469e      	mov	lr, r3
 800a304:	462e      	mov	r6, r5
 800a306:	4566      	cmp	r6, ip
 800a308:	d30e      	bcc.n	800a328 <__mdiff+0xec>
 800a30a:	f10c 0203 	add.w	r2, ip, #3
 800a30e:	1b52      	subs	r2, r2, r5
 800a310:	f022 0203 	bic.w	r2, r2, #3
 800a314:	3d03      	subs	r5, #3
 800a316:	45ac      	cmp	ip, r5
 800a318:	bf38      	it	cc
 800a31a:	2200      	movcc	r2, #0
 800a31c:	441a      	add	r2, r3
 800a31e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a322:	b17b      	cbz	r3, 800a344 <__mdiff+0x108>
 800a324:	6107      	str	r7, [r0, #16]
 800a326:	e7a3      	b.n	800a270 <__mdiff+0x34>
 800a328:	f856 8b04 	ldr.w	r8, [r6], #4
 800a32c:	fa11 f288 	uxtah	r2, r1, r8
 800a330:	1414      	asrs	r4, r2, #16
 800a332:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a336:	b292      	uxth	r2, r2
 800a338:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a33c:	f84e 2b04 	str.w	r2, [lr], #4
 800a340:	1421      	asrs	r1, r4, #16
 800a342:	e7e0      	b.n	800a306 <__mdiff+0xca>
 800a344:	3f01      	subs	r7, #1
 800a346:	e7ea      	b.n	800a31e <__mdiff+0xe2>
 800a348:	0800b247 	.word	0x0800b247
 800a34c:	0800b258 	.word	0x0800b258

0800a350 <__d2b>:
 800a350:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a354:	4689      	mov	r9, r1
 800a356:	2101      	movs	r1, #1
 800a358:	ec57 6b10 	vmov	r6, r7, d0
 800a35c:	4690      	mov	r8, r2
 800a35e:	f7ff fccf 	bl	8009d00 <_Balloc>
 800a362:	4604      	mov	r4, r0
 800a364:	b930      	cbnz	r0, 800a374 <__d2b+0x24>
 800a366:	4602      	mov	r2, r0
 800a368:	4b25      	ldr	r3, [pc, #148]	; (800a400 <__d2b+0xb0>)
 800a36a:	4826      	ldr	r0, [pc, #152]	; (800a404 <__d2b+0xb4>)
 800a36c:	f240 310a 	movw	r1, #778	; 0x30a
 800a370:	f000 f950 	bl	800a614 <__assert_func>
 800a374:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a378:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a37c:	bb35      	cbnz	r5, 800a3cc <__d2b+0x7c>
 800a37e:	2e00      	cmp	r6, #0
 800a380:	9301      	str	r3, [sp, #4]
 800a382:	d028      	beq.n	800a3d6 <__d2b+0x86>
 800a384:	4668      	mov	r0, sp
 800a386:	9600      	str	r6, [sp, #0]
 800a388:	f7ff fd82 	bl	8009e90 <__lo0bits>
 800a38c:	9900      	ldr	r1, [sp, #0]
 800a38e:	b300      	cbz	r0, 800a3d2 <__d2b+0x82>
 800a390:	9a01      	ldr	r2, [sp, #4]
 800a392:	f1c0 0320 	rsb	r3, r0, #32
 800a396:	fa02 f303 	lsl.w	r3, r2, r3
 800a39a:	430b      	orrs	r3, r1
 800a39c:	40c2      	lsrs	r2, r0
 800a39e:	6163      	str	r3, [r4, #20]
 800a3a0:	9201      	str	r2, [sp, #4]
 800a3a2:	9b01      	ldr	r3, [sp, #4]
 800a3a4:	61a3      	str	r3, [r4, #24]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	bf14      	ite	ne
 800a3aa:	2202      	movne	r2, #2
 800a3ac:	2201      	moveq	r2, #1
 800a3ae:	6122      	str	r2, [r4, #16]
 800a3b0:	b1d5      	cbz	r5, 800a3e8 <__d2b+0x98>
 800a3b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a3b6:	4405      	add	r5, r0
 800a3b8:	f8c9 5000 	str.w	r5, [r9]
 800a3bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a3c0:	f8c8 0000 	str.w	r0, [r8]
 800a3c4:	4620      	mov	r0, r4
 800a3c6:	b003      	add	sp, #12
 800a3c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a3d0:	e7d5      	b.n	800a37e <__d2b+0x2e>
 800a3d2:	6161      	str	r1, [r4, #20]
 800a3d4:	e7e5      	b.n	800a3a2 <__d2b+0x52>
 800a3d6:	a801      	add	r0, sp, #4
 800a3d8:	f7ff fd5a 	bl	8009e90 <__lo0bits>
 800a3dc:	9b01      	ldr	r3, [sp, #4]
 800a3de:	6163      	str	r3, [r4, #20]
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	6122      	str	r2, [r4, #16]
 800a3e4:	3020      	adds	r0, #32
 800a3e6:	e7e3      	b.n	800a3b0 <__d2b+0x60>
 800a3e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a3ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a3f0:	f8c9 0000 	str.w	r0, [r9]
 800a3f4:	6918      	ldr	r0, [r3, #16]
 800a3f6:	f7ff fd2b 	bl	8009e50 <__hi0bits>
 800a3fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a3fe:	e7df      	b.n	800a3c0 <__d2b+0x70>
 800a400:	0800b247 	.word	0x0800b247
 800a404:	0800b258 	.word	0x0800b258

0800a408 <_calloc_r>:
 800a408:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a40a:	fba1 2402 	umull	r2, r4, r1, r2
 800a40e:	b94c      	cbnz	r4, 800a424 <_calloc_r+0x1c>
 800a410:	4611      	mov	r1, r2
 800a412:	9201      	str	r2, [sp, #4]
 800a414:	f000 f87a 	bl	800a50c <_malloc_r>
 800a418:	9a01      	ldr	r2, [sp, #4]
 800a41a:	4605      	mov	r5, r0
 800a41c:	b930      	cbnz	r0, 800a42c <_calloc_r+0x24>
 800a41e:	4628      	mov	r0, r5
 800a420:	b003      	add	sp, #12
 800a422:	bd30      	pop	{r4, r5, pc}
 800a424:	220c      	movs	r2, #12
 800a426:	6002      	str	r2, [r0, #0]
 800a428:	2500      	movs	r5, #0
 800a42a:	e7f8      	b.n	800a41e <_calloc_r+0x16>
 800a42c:	4621      	mov	r1, r4
 800a42e:	f7fe f95f 	bl	80086f0 <memset>
 800a432:	e7f4      	b.n	800a41e <_calloc_r+0x16>

0800a434 <_free_r>:
 800a434:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a436:	2900      	cmp	r1, #0
 800a438:	d044      	beq.n	800a4c4 <_free_r+0x90>
 800a43a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a43e:	9001      	str	r0, [sp, #4]
 800a440:	2b00      	cmp	r3, #0
 800a442:	f1a1 0404 	sub.w	r4, r1, #4
 800a446:	bfb8      	it	lt
 800a448:	18e4      	addlt	r4, r4, r3
 800a44a:	f000 f925 	bl	800a698 <__malloc_lock>
 800a44e:	4a1e      	ldr	r2, [pc, #120]	; (800a4c8 <_free_r+0x94>)
 800a450:	9801      	ldr	r0, [sp, #4]
 800a452:	6813      	ldr	r3, [r2, #0]
 800a454:	b933      	cbnz	r3, 800a464 <_free_r+0x30>
 800a456:	6063      	str	r3, [r4, #4]
 800a458:	6014      	str	r4, [r2, #0]
 800a45a:	b003      	add	sp, #12
 800a45c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a460:	f000 b920 	b.w	800a6a4 <__malloc_unlock>
 800a464:	42a3      	cmp	r3, r4
 800a466:	d908      	bls.n	800a47a <_free_r+0x46>
 800a468:	6825      	ldr	r5, [r4, #0]
 800a46a:	1961      	adds	r1, r4, r5
 800a46c:	428b      	cmp	r3, r1
 800a46e:	bf01      	itttt	eq
 800a470:	6819      	ldreq	r1, [r3, #0]
 800a472:	685b      	ldreq	r3, [r3, #4]
 800a474:	1949      	addeq	r1, r1, r5
 800a476:	6021      	streq	r1, [r4, #0]
 800a478:	e7ed      	b.n	800a456 <_free_r+0x22>
 800a47a:	461a      	mov	r2, r3
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	b10b      	cbz	r3, 800a484 <_free_r+0x50>
 800a480:	42a3      	cmp	r3, r4
 800a482:	d9fa      	bls.n	800a47a <_free_r+0x46>
 800a484:	6811      	ldr	r1, [r2, #0]
 800a486:	1855      	adds	r5, r2, r1
 800a488:	42a5      	cmp	r5, r4
 800a48a:	d10b      	bne.n	800a4a4 <_free_r+0x70>
 800a48c:	6824      	ldr	r4, [r4, #0]
 800a48e:	4421      	add	r1, r4
 800a490:	1854      	adds	r4, r2, r1
 800a492:	42a3      	cmp	r3, r4
 800a494:	6011      	str	r1, [r2, #0]
 800a496:	d1e0      	bne.n	800a45a <_free_r+0x26>
 800a498:	681c      	ldr	r4, [r3, #0]
 800a49a:	685b      	ldr	r3, [r3, #4]
 800a49c:	6053      	str	r3, [r2, #4]
 800a49e:	4421      	add	r1, r4
 800a4a0:	6011      	str	r1, [r2, #0]
 800a4a2:	e7da      	b.n	800a45a <_free_r+0x26>
 800a4a4:	d902      	bls.n	800a4ac <_free_r+0x78>
 800a4a6:	230c      	movs	r3, #12
 800a4a8:	6003      	str	r3, [r0, #0]
 800a4aa:	e7d6      	b.n	800a45a <_free_r+0x26>
 800a4ac:	6825      	ldr	r5, [r4, #0]
 800a4ae:	1961      	adds	r1, r4, r5
 800a4b0:	428b      	cmp	r3, r1
 800a4b2:	bf04      	itt	eq
 800a4b4:	6819      	ldreq	r1, [r3, #0]
 800a4b6:	685b      	ldreq	r3, [r3, #4]
 800a4b8:	6063      	str	r3, [r4, #4]
 800a4ba:	bf04      	itt	eq
 800a4bc:	1949      	addeq	r1, r1, r5
 800a4be:	6021      	streq	r1, [r4, #0]
 800a4c0:	6054      	str	r4, [r2, #4]
 800a4c2:	e7ca      	b.n	800a45a <_free_r+0x26>
 800a4c4:	b003      	add	sp, #12
 800a4c6:	bd30      	pop	{r4, r5, pc}
 800a4c8:	200005b8 	.word	0x200005b8

0800a4cc <sbrk_aligned>:
 800a4cc:	b570      	push	{r4, r5, r6, lr}
 800a4ce:	4e0e      	ldr	r6, [pc, #56]	; (800a508 <sbrk_aligned+0x3c>)
 800a4d0:	460c      	mov	r4, r1
 800a4d2:	6831      	ldr	r1, [r6, #0]
 800a4d4:	4605      	mov	r5, r0
 800a4d6:	b911      	cbnz	r1, 800a4de <sbrk_aligned+0x12>
 800a4d8:	f000 f88c 	bl	800a5f4 <_sbrk_r>
 800a4dc:	6030      	str	r0, [r6, #0]
 800a4de:	4621      	mov	r1, r4
 800a4e0:	4628      	mov	r0, r5
 800a4e2:	f000 f887 	bl	800a5f4 <_sbrk_r>
 800a4e6:	1c43      	adds	r3, r0, #1
 800a4e8:	d00a      	beq.n	800a500 <sbrk_aligned+0x34>
 800a4ea:	1cc4      	adds	r4, r0, #3
 800a4ec:	f024 0403 	bic.w	r4, r4, #3
 800a4f0:	42a0      	cmp	r0, r4
 800a4f2:	d007      	beq.n	800a504 <sbrk_aligned+0x38>
 800a4f4:	1a21      	subs	r1, r4, r0
 800a4f6:	4628      	mov	r0, r5
 800a4f8:	f000 f87c 	bl	800a5f4 <_sbrk_r>
 800a4fc:	3001      	adds	r0, #1
 800a4fe:	d101      	bne.n	800a504 <sbrk_aligned+0x38>
 800a500:	f04f 34ff 	mov.w	r4, #4294967295
 800a504:	4620      	mov	r0, r4
 800a506:	bd70      	pop	{r4, r5, r6, pc}
 800a508:	200005bc 	.word	0x200005bc

0800a50c <_malloc_r>:
 800a50c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a510:	1ccd      	adds	r5, r1, #3
 800a512:	f025 0503 	bic.w	r5, r5, #3
 800a516:	3508      	adds	r5, #8
 800a518:	2d0c      	cmp	r5, #12
 800a51a:	bf38      	it	cc
 800a51c:	250c      	movcc	r5, #12
 800a51e:	2d00      	cmp	r5, #0
 800a520:	4607      	mov	r7, r0
 800a522:	db01      	blt.n	800a528 <_malloc_r+0x1c>
 800a524:	42a9      	cmp	r1, r5
 800a526:	d905      	bls.n	800a534 <_malloc_r+0x28>
 800a528:	230c      	movs	r3, #12
 800a52a:	603b      	str	r3, [r7, #0]
 800a52c:	2600      	movs	r6, #0
 800a52e:	4630      	mov	r0, r6
 800a530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a534:	4e2e      	ldr	r6, [pc, #184]	; (800a5f0 <_malloc_r+0xe4>)
 800a536:	f000 f8af 	bl	800a698 <__malloc_lock>
 800a53a:	6833      	ldr	r3, [r6, #0]
 800a53c:	461c      	mov	r4, r3
 800a53e:	bb34      	cbnz	r4, 800a58e <_malloc_r+0x82>
 800a540:	4629      	mov	r1, r5
 800a542:	4638      	mov	r0, r7
 800a544:	f7ff ffc2 	bl	800a4cc <sbrk_aligned>
 800a548:	1c43      	adds	r3, r0, #1
 800a54a:	4604      	mov	r4, r0
 800a54c:	d14d      	bne.n	800a5ea <_malloc_r+0xde>
 800a54e:	6834      	ldr	r4, [r6, #0]
 800a550:	4626      	mov	r6, r4
 800a552:	2e00      	cmp	r6, #0
 800a554:	d140      	bne.n	800a5d8 <_malloc_r+0xcc>
 800a556:	6823      	ldr	r3, [r4, #0]
 800a558:	4631      	mov	r1, r6
 800a55a:	4638      	mov	r0, r7
 800a55c:	eb04 0803 	add.w	r8, r4, r3
 800a560:	f000 f848 	bl	800a5f4 <_sbrk_r>
 800a564:	4580      	cmp	r8, r0
 800a566:	d13a      	bne.n	800a5de <_malloc_r+0xd2>
 800a568:	6821      	ldr	r1, [r4, #0]
 800a56a:	3503      	adds	r5, #3
 800a56c:	1a6d      	subs	r5, r5, r1
 800a56e:	f025 0503 	bic.w	r5, r5, #3
 800a572:	3508      	adds	r5, #8
 800a574:	2d0c      	cmp	r5, #12
 800a576:	bf38      	it	cc
 800a578:	250c      	movcc	r5, #12
 800a57a:	4629      	mov	r1, r5
 800a57c:	4638      	mov	r0, r7
 800a57e:	f7ff ffa5 	bl	800a4cc <sbrk_aligned>
 800a582:	3001      	adds	r0, #1
 800a584:	d02b      	beq.n	800a5de <_malloc_r+0xd2>
 800a586:	6823      	ldr	r3, [r4, #0]
 800a588:	442b      	add	r3, r5
 800a58a:	6023      	str	r3, [r4, #0]
 800a58c:	e00e      	b.n	800a5ac <_malloc_r+0xa0>
 800a58e:	6822      	ldr	r2, [r4, #0]
 800a590:	1b52      	subs	r2, r2, r5
 800a592:	d41e      	bmi.n	800a5d2 <_malloc_r+0xc6>
 800a594:	2a0b      	cmp	r2, #11
 800a596:	d916      	bls.n	800a5c6 <_malloc_r+0xba>
 800a598:	1961      	adds	r1, r4, r5
 800a59a:	42a3      	cmp	r3, r4
 800a59c:	6025      	str	r5, [r4, #0]
 800a59e:	bf18      	it	ne
 800a5a0:	6059      	strne	r1, [r3, #4]
 800a5a2:	6863      	ldr	r3, [r4, #4]
 800a5a4:	bf08      	it	eq
 800a5a6:	6031      	streq	r1, [r6, #0]
 800a5a8:	5162      	str	r2, [r4, r5]
 800a5aa:	604b      	str	r3, [r1, #4]
 800a5ac:	4638      	mov	r0, r7
 800a5ae:	f104 060b 	add.w	r6, r4, #11
 800a5b2:	f000 f877 	bl	800a6a4 <__malloc_unlock>
 800a5b6:	f026 0607 	bic.w	r6, r6, #7
 800a5ba:	1d23      	adds	r3, r4, #4
 800a5bc:	1af2      	subs	r2, r6, r3
 800a5be:	d0b6      	beq.n	800a52e <_malloc_r+0x22>
 800a5c0:	1b9b      	subs	r3, r3, r6
 800a5c2:	50a3      	str	r3, [r4, r2]
 800a5c4:	e7b3      	b.n	800a52e <_malloc_r+0x22>
 800a5c6:	6862      	ldr	r2, [r4, #4]
 800a5c8:	42a3      	cmp	r3, r4
 800a5ca:	bf0c      	ite	eq
 800a5cc:	6032      	streq	r2, [r6, #0]
 800a5ce:	605a      	strne	r2, [r3, #4]
 800a5d0:	e7ec      	b.n	800a5ac <_malloc_r+0xa0>
 800a5d2:	4623      	mov	r3, r4
 800a5d4:	6864      	ldr	r4, [r4, #4]
 800a5d6:	e7b2      	b.n	800a53e <_malloc_r+0x32>
 800a5d8:	4634      	mov	r4, r6
 800a5da:	6876      	ldr	r6, [r6, #4]
 800a5dc:	e7b9      	b.n	800a552 <_malloc_r+0x46>
 800a5de:	230c      	movs	r3, #12
 800a5e0:	603b      	str	r3, [r7, #0]
 800a5e2:	4638      	mov	r0, r7
 800a5e4:	f000 f85e 	bl	800a6a4 <__malloc_unlock>
 800a5e8:	e7a1      	b.n	800a52e <_malloc_r+0x22>
 800a5ea:	6025      	str	r5, [r4, #0]
 800a5ec:	e7de      	b.n	800a5ac <_malloc_r+0xa0>
 800a5ee:	bf00      	nop
 800a5f0:	200005b8 	.word	0x200005b8

0800a5f4 <_sbrk_r>:
 800a5f4:	b538      	push	{r3, r4, r5, lr}
 800a5f6:	4d06      	ldr	r5, [pc, #24]	; (800a610 <_sbrk_r+0x1c>)
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	4604      	mov	r4, r0
 800a5fc:	4608      	mov	r0, r1
 800a5fe:	602b      	str	r3, [r5, #0]
 800a600:	f7f8 fa3a 	bl	8002a78 <_sbrk>
 800a604:	1c43      	adds	r3, r0, #1
 800a606:	d102      	bne.n	800a60e <_sbrk_r+0x1a>
 800a608:	682b      	ldr	r3, [r5, #0]
 800a60a:	b103      	cbz	r3, 800a60e <_sbrk_r+0x1a>
 800a60c:	6023      	str	r3, [r4, #0]
 800a60e:	bd38      	pop	{r3, r4, r5, pc}
 800a610:	200005c0 	.word	0x200005c0

0800a614 <__assert_func>:
 800a614:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a616:	4614      	mov	r4, r2
 800a618:	461a      	mov	r2, r3
 800a61a:	4b09      	ldr	r3, [pc, #36]	; (800a640 <__assert_func+0x2c>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	4605      	mov	r5, r0
 800a620:	68d8      	ldr	r0, [r3, #12]
 800a622:	b14c      	cbz	r4, 800a638 <__assert_func+0x24>
 800a624:	4b07      	ldr	r3, [pc, #28]	; (800a644 <__assert_func+0x30>)
 800a626:	9100      	str	r1, [sp, #0]
 800a628:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a62c:	4906      	ldr	r1, [pc, #24]	; (800a648 <__assert_func+0x34>)
 800a62e:	462b      	mov	r3, r5
 800a630:	f000 f80e 	bl	800a650 <fiprintf>
 800a634:	f000 fa64 	bl	800ab00 <abort>
 800a638:	4b04      	ldr	r3, [pc, #16]	; (800a64c <__assert_func+0x38>)
 800a63a:	461c      	mov	r4, r3
 800a63c:	e7f3      	b.n	800a626 <__assert_func+0x12>
 800a63e:	bf00      	nop
 800a640:	2000000c 	.word	0x2000000c
 800a644:	0800b3b4 	.word	0x0800b3b4
 800a648:	0800b3c1 	.word	0x0800b3c1
 800a64c:	0800b3ef 	.word	0x0800b3ef

0800a650 <fiprintf>:
 800a650:	b40e      	push	{r1, r2, r3}
 800a652:	b503      	push	{r0, r1, lr}
 800a654:	4601      	mov	r1, r0
 800a656:	ab03      	add	r3, sp, #12
 800a658:	4805      	ldr	r0, [pc, #20]	; (800a670 <fiprintf+0x20>)
 800a65a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a65e:	6800      	ldr	r0, [r0, #0]
 800a660:	9301      	str	r3, [sp, #4]
 800a662:	f000 f84f 	bl	800a704 <_vfiprintf_r>
 800a666:	b002      	add	sp, #8
 800a668:	f85d eb04 	ldr.w	lr, [sp], #4
 800a66c:	b003      	add	sp, #12
 800a66e:	4770      	bx	lr
 800a670:	2000000c 	.word	0x2000000c

0800a674 <__ascii_mbtowc>:
 800a674:	b082      	sub	sp, #8
 800a676:	b901      	cbnz	r1, 800a67a <__ascii_mbtowc+0x6>
 800a678:	a901      	add	r1, sp, #4
 800a67a:	b142      	cbz	r2, 800a68e <__ascii_mbtowc+0x1a>
 800a67c:	b14b      	cbz	r3, 800a692 <__ascii_mbtowc+0x1e>
 800a67e:	7813      	ldrb	r3, [r2, #0]
 800a680:	600b      	str	r3, [r1, #0]
 800a682:	7812      	ldrb	r2, [r2, #0]
 800a684:	1e10      	subs	r0, r2, #0
 800a686:	bf18      	it	ne
 800a688:	2001      	movne	r0, #1
 800a68a:	b002      	add	sp, #8
 800a68c:	4770      	bx	lr
 800a68e:	4610      	mov	r0, r2
 800a690:	e7fb      	b.n	800a68a <__ascii_mbtowc+0x16>
 800a692:	f06f 0001 	mvn.w	r0, #1
 800a696:	e7f8      	b.n	800a68a <__ascii_mbtowc+0x16>

0800a698 <__malloc_lock>:
 800a698:	4801      	ldr	r0, [pc, #4]	; (800a6a0 <__malloc_lock+0x8>)
 800a69a:	f000 bbf1 	b.w	800ae80 <__retarget_lock_acquire_recursive>
 800a69e:	bf00      	nop
 800a6a0:	200005c4 	.word	0x200005c4

0800a6a4 <__malloc_unlock>:
 800a6a4:	4801      	ldr	r0, [pc, #4]	; (800a6ac <__malloc_unlock+0x8>)
 800a6a6:	f000 bbec 	b.w	800ae82 <__retarget_lock_release_recursive>
 800a6aa:	bf00      	nop
 800a6ac:	200005c4 	.word	0x200005c4

0800a6b0 <__sfputc_r>:
 800a6b0:	6893      	ldr	r3, [r2, #8]
 800a6b2:	3b01      	subs	r3, #1
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	b410      	push	{r4}
 800a6b8:	6093      	str	r3, [r2, #8]
 800a6ba:	da08      	bge.n	800a6ce <__sfputc_r+0x1e>
 800a6bc:	6994      	ldr	r4, [r2, #24]
 800a6be:	42a3      	cmp	r3, r4
 800a6c0:	db01      	blt.n	800a6c6 <__sfputc_r+0x16>
 800a6c2:	290a      	cmp	r1, #10
 800a6c4:	d103      	bne.n	800a6ce <__sfputc_r+0x1e>
 800a6c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6ca:	f000 b94b 	b.w	800a964 <__swbuf_r>
 800a6ce:	6813      	ldr	r3, [r2, #0]
 800a6d0:	1c58      	adds	r0, r3, #1
 800a6d2:	6010      	str	r0, [r2, #0]
 800a6d4:	7019      	strb	r1, [r3, #0]
 800a6d6:	4608      	mov	r0, r1
 800a6d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6dc:	4770      	bx	lr

0800a6de <__sfputs_r>:
 800a6de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6e0:	4606      	mov	r6, r0
 800a6e2:	460f      	mov	r7, r1
 800a6e4:	4614      	mov	r4, r2
 800a6e6:	18d5      	adds	r5, r2, r3
 800a6e8:	42ac      	cmp	r4, r5
 800a6ea:	d101      	bne.n	800a6f0 <__sfputs_r+0x12>
 800a6ec:	2000      	movs	r0, #0
 800a6ee:	e007      	b.n	800a700 <__sfputs_r+0x22>
 800a6f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6f4:	463a      	mov	r2, r7
 800a6f6:	4630      	mov	r0, r6
 800a6f8:	f7ff ffda 	bl	800a6b0 <__sfputc_r>
 800a6fc:	1c43      	adds	r3, r0, #1
 800a6fe:	d1f3      	bne.n	800a6e8 <__sfputs_r+0xa>
 800a700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a704 <_vfiprintf_r>:
 800a704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a708:	460d      	mov	r5, r1
 800a70a:	b09d      	sub	sp, #116	; 0x74
 800a70c:	4614      	mov	r4, r2
 800a70e:	4698      	mov	r8, r3
 800a710:	4606      	mov	r6, r0
 800a712:	b118      	cbz	r0, 800a71c <_vfiprintf_r+0x18>
 800a714:	6983      	ldr	r3, [r0, #24]
 800a716:	b90b      	cbnz	r3, 800a71c <_vfiprintf_r+0x18>
 800a718:	f000 fb14 	bl	800ad44 <__sinit>
 800a71c:	4b89      	ldr	r3, [pc, #548]	; (800a944 <_vfiprintf_r+0x240>)
 800a71e:	429d      	cmp	r5, r3
 800a720:	d11b      	bne.n	800a75a <_vfiprintf_r+0x56>
 800a722:	6875      	ldr	r5, [r6, #4]
 800a724:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a726:	07d9      	lsls	r1, r3, #31
 800a728:	d405      	bmi.n	800a736 <_vfiprintf_r+0x32>
 800a72a:	89ab      	ldrh	r3, [r5, #12]
 800a72c:	059a      	lsls	r2, r3, #22
 800a72e:	d402      	bmi.n	800a736 <_vfiprintf_r+0x32>
 800a730:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a732:	f000 fba5 	bl	800ae80 <__retarget_lock_acquire_recursive>
 800a736:	89ab      	ldrh	r3, [r5, #12]
 800a738:	071b      	lsls	r3, r3, #28
 800a73a:	d501      	bpl.n	800a740 <_vfiprintf_r+0x3c>
 800a73c:	692b      	ldr	r3, [r5, #16]
 800a73e:	b9eb      	cbnz	r3, 800a77c <_vfiprintf_r+0x78>
 800a740:	4629      	mov	r1, r5
 800a742:	4630      	mov	r0, r6
 800a744:	f000 f96e 	bl	800aa24 <__swsetup_r>
 800a748:	b1c0      	cbz	r0, 800a77c <_vfiprintf_r+0x78>
 800a74a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a74c:	07dc      	lsls	r4, r3, #31
 800a74e:	d50e      	bpl.n	800a76e <_vfiprintf_r+0x6a>
 800a750:	f04f 30ff 	mov.w	r0, #4294967295
 800a754:	b01d      	add	sp, #116	; 0x74
 800a756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a75a:	4b7b      	ldr	r3, [pc, #492]	; (800a948 <_vfiprintf_r+0x244>)
 800a75c:	429d      	cmp	r5, r3
 800a75e:	d101      	bne.n	800a764 <_vfiprintf_r+0x60>
 800a760:	68b5      	ldr	r5, [r6, #8]
 800a762:	e7df      	b.n	800a724 <_vfiprintf_r+0x20>
 800a764:	4b79      	ldr	r3, [pc, #484]	; (800a94c <_vfiprintf_r+0x248>)
 800a766:	429d      	cmp	r5, r3
 800a768:	bf08      	it	eq
 800a76a:	68f5      	ldreq	r5, [r6, #12]
 800a76c:	e7da      	b.n	800a724 <_vfiprintf_r+0x20>
 800a76e:	89ab      	ldrh	r3, [r5, #12]
 800a770:	0598      	lsls	r0, r3, #22
 800a772:	d4ed      	bmi.n	800a750 <_vfiprintf_r+0x4c>
 800a774:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a776:	f000 fb84 	bl	800ae82 <__retarget_lock_release_recursive>
 800a77a:	e7e9      	b.n	800a750 <_vfiprintf_r+0x4c>
 800a77c:	2300      	movs	r3, #0
 800a77e:	9309      	str	r3, [sp, #36]	; 0x24
 800a780:	2320      	movs	r3, #32
 800a782:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a786:	f8cd 800c 	str.w	r8, [sp, #12]
 800a78a:	2330      	movs	r3, #48	; 0x30
 800a78c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a950 <_vfiprintf_r+0x24c>
 800a790:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a794:	f04f 0901 	mov.w	r9, #1
 800a798:	4623      	mov	r3, r4
 800a79a:	469a      	mov	sl, r3
 800a79c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7a0:	b10a      	cbz	r2, 800a7a6 <_vfiprintf_r+0xa2>
 800a7a2:	2a25      	cmp	r2, #37	; 0x25
 800a7a4:	d1f9      	bne.n	800a79a <_vfiprintf_r+0x96>
 800a7a6:	ebba 0b04 	subs.w	fp, sl, r4
 800a7aa:	d00b      	beq.n	800a7c4 <_vfiprintf_r+0xc0>
 800a7ac:	465b      	mov	r3, fp
 800a7ae:	4622      	mov	r2, r4
 800a7b0:	4629      	mov	r1, r5
 800a7b2:	4630      	mov	r0, r6
 800a7b4:	f7ff ff93 	bl	800a6de <__sfputs_r>
 800a7b8:	3001      	adds	r0, #1
 800a7ba:	f000 80aa 	beq.w	800a912 <_vfiprintf_r+0x20e>
 800a7be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7c0:	445a      	add	r2, fp
 800a7c2:	9209      	str	r2, [sp, #36]	; 0x24
 800a7c4:	f89a 3000 	ldrb.w	r3, [sl]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	f000 80a2 	beq.w	800a912 <_vfiprintf_r+0x20e>
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	f04f 32ff 	mov.w	r2, #4294967295
 800a7d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7d8:	f10a 0a01 	add.w	sl, sl, #1
 800a7dc:	9304      	str	r3, [sp, #16]
 800a7de:	9307      	str	r3, [sp, #28]
 800a7e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7e4:	931a      	str	r3, [sp, #104]	; 0x68
 800a7e6:	4654      	mov	r4, sl
 800a7e8:	2205      	movs	r2, #5
 800a7ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7ee:	4858      	ldr	r0, [pc, #352]	; (800a950 <_vfiprintf_r+0x24c>)
 800a7f0:	f7f5 fcf6 	bl	80001e0 <memchr>
 800a7f4:	9a04      	ldr	r2, [sp, #16]
 800a7f6:	b9d8      	cbnz	r0, 800a830 <_vfiprintf_r+0x12c>
 800a7f8:	06d1      	lsls	r1, r2, #27
 800a7fa:	bf44      	itt	mi
 800a7fc:	2320      	movmi	r3, #32
 800a7fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a802:	0713      	lsls	r3, r2, #28
 800a804:	bf44      	itt	mi
 800a806:	232b      	movmi	r3, #43	; 0x2b
 800a808:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a80c:	f89a 3000 	ldrb.w	r3, [sl]
 800a810:	2b2a      	cmp	r3, #42	; 0x2a
 800a812:	d015      	beq.n	800a840 <_vfiprintf_r+0x13c>
 800a814:	9a07      	ldr	r2, [sp, #28]
 800a816:	4654      	mov	r4, sl
 800a818:	2000      	movs	r0, #0
 800a81a:	f04f 0c0a 	mov.w	ip, #10
 800a81e:	4621      	mov	r1, r4
 800a820:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a824:	3b30      	subs	r3, #48	; 0x30
 800a826:	2b09      	cmp	r3, #9
 800a828:	d94e      	bls.n	800a8c8 <_vfiprintf_r+0x1c4>
 800a82a:	b1b0      	cbz	r0, 800a85a <_vfiprintf_r+0x156>
 800a82c:	9207      	str	r2, [sp, #28]
 800a82e:	e014      	b.n	800a85a <_vfiprintf_r+0x156>
 800a830:	eba0 0308 	sub.w	r3, r0, r8
 800a834:	fa09 f303 	lsl.w	r3, r9, r3
 800a838:	4313      	orrs	r3, r2
 800a83a:	9304      	str	r3, [sp, #16]
 800a83c:	46a2      	mov	sl, r4
 800a83e:	e7d2      	b.n	800a7e6 <_vfiprintf_r+0xe2>
 800a840:	9b03      	ldr	r3, [sp, #12]
 800a842:	1d19      	adds	r1, r3, #4
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	9103      	str	r1, [sp, #12]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	bfbb      	ittet	lt
 800a84c:	425b      	neglt	r3, r3
 800a84e:	f042 0202 	orrlt.w	r2, r2, #2
 800a852:	9307      	strge	r3, [sp, #28]
 800a854:	9307      	strlt	r3, [sp, #28]
 800a856:	bfb8      	it	lt
 800a858:	9204      	strlt	r2, [sp, #16]
 800a85a:	7823      	ldrb	r3, [r4, #0]
 800a85c:	2b2e      	cmp	r3, #46	; 0x2e
 800a85e:	d10c      	bne.n	800a87a <_vfiprintf_r+0x176>
 800a860:	7863      	ldrb	r3, [r4, #1]
 800a862:	2b2a      	cmp	r3, #42	; 0x2a
 800a864:	d135      	bne.n	800a8d2 <_vfiprintf_r+0x1ce>
 800a866:	9b03      	ldr	r3, [sp, #12]
 800a868:	1d1a      	adds	r2, r3, #4
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	9203      	str	r2, [sp, #12]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	bfb8      	it	lt
 800a872:	f04f 33ff 	movlt.w	r3, #4294967295
 800a876:	3402      	adds	r4, #2
 800a878:	9305      	str	r3, [sp, #20]
 800a87a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a960 <_vfiprintf_r+0x25c>
 800a87e:	7821      	ldrb	r1, [r4, #0]
 800a880:	2203      	movs	r2, #3
 800a882:	4650      	mov	r0, sl
 800a884:	f7f5 fcac 	bl	80001e0 <memchr>
 800a888:	b140      	cbz	r0, 800a89c <_vfiprintf_r+0x198>
 800a88a:	2340      	movs	r3, #64	; 0x40
 800a88c:	eba0 000a 	sub.w	r0, r0, sl
 800a890:	fa03 f000 	lsl.w	r0, r3, r0
 800a894:	9b04      	ldr	r3, [sp, #16]
 800a896:	4303      	orrs	r3, r0
 800a898:	3401      	adds	r4, #1
 800a89a:	9304      	str	r3, [sp, #16]
 800a89c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8a0:	482c      	ldr	r0, [pc, #176]	; (800a954 <_vfiprintf_r+0x250>)
 800a8a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8a6:	2206      	movs	r2, #6
 800a8a8:	f7f5 fc9a 	bl	80001e0 <memchr>
 800a8ac:	2800      	cmp	r0, #0
 800a8ae:	d03f      	beq.n	800a930 <_vfiprintf_r+0x22c>
 800a8b0:	4b29      	ldr	r3, [pc, #164]	; (800a958 <_vfiprintf_r+0x254>)
 800a8b2:	bb1b      	cbnz	r3, 800a8fc <_vfiprintf_r+0x1f8>
 800a8b4:	9b03      	ldr	r3, [sp, #12]
 800a8b6:	3307      	adds	r3, #7
 800a8b8:	f023 0307 	bic.w	r3, r3, #7
 800a8bc:	3308      	adds	r3, #8
 800a8be:	9303      	str	r3, [sp, #12]
 800a8c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8c2:	443b      	add	r3, r7
 800a8c4:	9309      	str	r3, [sp, #36]	; 0x24
 800a8c6:	e767      	b.n	800a798 <_vfiprintf_r+0x94>
 800a8c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8cc:	460c      	mov	r4, r1
 800a8ce:	2001      	movs	r0, #1
 800a8d0:	e7a5      	b.n	800a81e <_vfiprintf_r+0x11a>
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	3401      	adds	r4, #1
 800a8d6:	9305      	str	r3, [sp, #20]
 800a8d8:	4619      	mov	r1, r3
 800a8da:	f04f 0c0a 	mov.w	ip, #10
 800a8de:	4620      	mov	r0, r4
 800a8e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8e4:	3a30      	subs	r2, #48	; 0x30
 800a8e6:	2a09      	cmp	r2, #9
 800a8e8:	d903      	bls.n	800a8f2 <_vfiprintf_r+0x1ee>
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d0c5      	beq.n	800a87a <_vfiprintf_r+0x176>
 800a8ee:	9105      	str	r1, [sp, #20]
 800a8f0:	e7c3      	b.n	800a87a <_vfiprintf_r+0x176>
 800a8f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8f6:	4604      	mov	r4, r0
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	e7f0      	b.n	800a8de <_vfiprintf_r+0x1da>
 800a8fc:	ab03      	add	r3, sp, #12
 800a8fe:	9300      	str	r3, [sp, #0]
 800a900:	462a      	mov	r2, r5
 800a902:	4b16      	ldr	r3, [pc, #88]	; (800a95c <_vfiprintf_r+0x258>)
 800a904:	a904      	add	r1, sp, #16
 800a906:	4630      	mov	r0, r6
 800a908:	f7fd ff9a 	bl	8008840 <_printf_float>
 800a90c:	4607      	mov	r7, r0
 800a90e:	1c78      	adds	r0, r7, #1
 800a910:	d1d6      	bne.n	800a8c0 <_vfiprintf_r+0x1bc>
 800a912:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a914:	07d9      	lsls	r1, r3, #31
 800a916:	d405      	bmi.n	800a924 <_vfiprintf_r+0x220>
 800a918:	89ab      	ldrh	r3, [r5, #12]
 800a91a:	059a      	lsls	r2, r3, #22
 800a91c:	d402      	bmi.n	800a924 <_vfiprintf_r+0x220>
 800a91e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a920:	f000 faaf 	bl	800ae82 <__retarget_lock_release_recursive>
 800a924:	89ab      	ldrh	r3, [r5, #12]
 800a926:	065b      	lsls	r3, r3, #25
 800a928:	f53f af12 	bmi.w	800a750 <_vfiprintf_r+0x4c>
 800a92c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a92e:	e711      	b.n	800a754 <_vfiprintf_r+0x50>
 800a930:	ab03      	add	r3, sp, #12
 800a932:	9300      	str	r3, [sp, #0]
 800a934:	462a      	mov	r2, r5
 800a936:	4b09      	ldr	r3, [pc, #36]	; (800a95c <_vfiprintf_r+0x258>)
 800a938:	a904      	add	r1, sp, #16
 800a93a:	4630      	mov	r0, r6
 800a93c:	f7fe fa24 	bl	8008d88 <_printf_i>
 800a940:	e7e4      	b.n	800a90c <_vfiprintf_r+0x208>
 800a942:	bf00      	nop
 800a944:	0800b52c 	.word	0x0800b52c
 800a948:	0800b54c 	.word	0x0800b54c
 800a94c:	0800b50c 	.word	0x0800b50c
 800a950:	0800b3fa 	.word	0x0800b3fa
 800a954:	0800b404 	.word	0x0800b404
 800a958:	08008841 	.word	0x08008841
 800a95c:	0800a6df 	.word	0x0800a6df
 800a960:	0800b400 	.word	0x0800b400

0800a964 <__swbuf_r>:
 800a964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a966:	460e      	mov	r6, r1
 800a968:	4614      	mov	r4, r2
 800a96a:	4605      	mov	r5, r0
 800a96c:	b118      	cbz	r0, 800a976 <__swbuf_r+0x12>
 800a96e:	6983      	ldr	r3, [r0, #24]
 800a970:	b90b      	cbnz	r3, 800a976 <__swbuf_r+0x12>
 800a972:	f000 f9e7 	bl	800ad44 <__sinit>
 800a976:	4b21      	ldr	r3, [pc, #132]	; (800a9fc <__swbuf_r+0x98>)
 800a978:	429c      	cmp	r4, r3
 800a97a:	d12b      	bne.n	800a9d4 <__swbuf_r+0x70>
 800a97c:	686c      	ldr	r4, [r5, #4]
 800a97e:	69a3      	ldr	r3, [r4, #24]
 800a980:	60a3      	str	r3, [r4, #8]
 800a982:	89a3      	ldrh	r3, [r4, #12]
 800a984:	071a      	lsls	r2, r3, #28
 800a986:	d52f      	bpl.n	800a9e8 <__swbuf_r+0x84>
 800a988:	6923      	ldr	r3, [r4, #16]
 800a98a:	b36b      	cbz	r3, 800a9e8 <__swbuf_r+0x84>
 800a98c:	6923      	ldr	r3, [r4, #16]
 800a98e:	6820      	ldr	r0, [r4, #0]
 800a990:	1ac0      	subs	r0, r0, r3
 800a992:	6963      	ldr	r3, [r4, #20]
 800a994:	b2f6      	uxtb	r6, r6
 800a996:	4283      	cmp	r3, r0
 800a998:	4637      	mov	r7, r6
 800a99a:	dc04      	bgt.n	800a9a6 <__swbuf_r+0x42>
 800a99c:	4621      	mov	r1, r4
 800a99e:	4628      	mov	r0, r5
 800a9a0:	f000 f93c 	bl	800ac1c <_fflush_r>
 800a9a4:	bb30      	cbnz	r0, 800a9f4 <__swbuf_r+0x90>
 800a9a6:	68a3      	ldr	r3, [r4, #8]
 800a9a8:	3b01      	subs	r3, #1
 800a9aa:	60a3      	str	r3, [r4, #8]
 800a9ac:	6823      	ldr	r3, [r4, #0]
 800a9ae:	1c5a      	adds	r2, r3, #1
 800a9b0:	6022      	str	r2, [r4, #0]
 800a9b2:	701e      	strb	r6, [r3, #0]
 800a9b4:	6963      	ldr	r3, [r4, #20]
 800a9b6:	3001      	adds	r0, #1
 800a9b8:	4283      	cmp	r3, r0
 800a9ba:	d004      	beq.n	800a9c6 <__swbuf_r+0x62>
 800a9bc:	89a3      	ldrh	r3, [r4, #12]
 800a9be:	07db      	lsls	r3, r3, #31
 800a9c0:	d506      	bpl.n	800a9d0 <__swbuf_r+0x6c>
 800a9c2:	2e0a      	cmp	r6, #10
 800a9c4:	d104      	bne.n	800a9d0 <__swbuf_r+0x6c>
 800a9c6:	4621      	mov	r1, r4
 800a9c8:	4628      	mov	r0, r5
 800a9ca:	f000 f927 	bl	800ac1c <_fflush_r>
 800a9ce:	b988      	cbnz	r0, 800a9f4 <__swbuf_r+0x90>
 800a9d0:	4638      	mov	r0, r7
 800a9d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9d4:	4b0a      	ldr	r3, [pc, #40]	; (800aa00 <__swbuf_r+0x9c>)
 800a9d6:	429c      	cmp	r4, r3
 800a9d8:	d101      	bne.n	800a9de <__swbuf_r+0x7a>
 800a9da:	68ac      	ldr	r4, [r5, #8]
 800a9dc:	e7cf      	b.n	800a97e <__swbuf_r+0x1a>
 800a9de:	4b09      	ldr	r3, [pc, #36]	; (800aa04 <__swbuf_r+0xa0>)
 800a9e0:	429c      	cmp	r4, r3
 800a9e2:	bf08      	it	eq
 800a9e4:	68ec      	ldreq	r4, [r5, #12]
 800a9e6:	e7ca      	b.n	800a97e <__swbuf_r+0x1a>
 800a9e8:	4621      	mov	r1, r4
 800a9ea:	4628      	mov	r0, r5
 800a9ec:	f000 f81a 	bl	800aa24 <__swsetup_r>
 800a9f0:	2800      	cmp	r0, #0
 800a9f2:	d0cb      	beq.n	800a98c <__swbuf_r+0x28>
 800a9f4:	f04f 37ff 	mov.w	r7, #4294967295
 800a9f8:	e7ea      	b.n	800a9d0 <__swbuf_r+0x6c>
 800a9fa:	bf00      	nop
 800a9fc:	0800b52c 	.word	0x0800b52c
 800aa00:	0800b54c 	.word	0x0800b54c
 800aa04:	0800b50c 	.word	0x0800b50c

0800aa08 <__ascii_wctomb>:
 800aa08:	b149      	cbz	r1, 800aa1e <__ascii_wctomb+0x16>
 800aa0a:	2aff      	cmp	r2, #255	; 0xff
 800aa0c:	bf85      	ittet	hi
 800aa0e:	238a      	movhi	r3, #138	; 0x8a
 800aa10:	6003      	strhi	r3, [r0, #0]
 800aa12:	700a      	strbls	r2, [r1, #0]
 800aa14:	f04f 30ff 	movhi.w	r0, #4294967295
 800aa18:	bf98      	it	ls
 800aa1a:	2001      	movls	r0, #1
 800aa1c:	4770      	bx	lr
 800aa1e:	4608      	mov	r0, r1
 800aa20:	4770      	bx	lr
	...

0800aa24 <__swsetup_r>:
 800aa24:	4b32      	ldr	r3, [pc, #200]	; (800aaf0 <__swsetup_r+0xcc>)
 800aa26:	b570      	push	{r4, r5, r6, lr}
 800aa28:	681d      	ldr	r5, [r3, #0]
 800aa2a:	4606      	mov	r6, r0
 800aa2c:	460c      	mov	r4, r1
 800aa2e:	b125      	cbz	r5, 800aa3a <__swsetup_r+0x16>
 800aa30:	69ab      	ldr	r3, [r5, #24]
 800aa32:	b913      	cbnz	r3, 800aa3a <__swsetup_r+0x16>
 800aa34:	4628      	mov	r0, r5
 800aa36:	f000 f985 	bl	800ad44 <__sinit>
 800aa3a:	4b2e      	ldr	r3, [pc, #184]	; (800aaf4 <__swsetup_r+0xd0>)
 800aa3c:	429c      	cmp	r4, r3
 800aa3e:	d10f      	bne.n	800aa60 <__swsetup_r+0x3c>
 800aa40:	686c      	ldr	r4, [r5, #4]
 800aa42:	89a3      	ldrh	r3, [r4, #12]
 800aa44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa48:	0719      	lsls	r1, r3, #28
 800aa4a:	d42c      	bmi.n	800aaa6 <__swsetup_r+0x82>
 800aa4c:	06dd      	lsls	r5, r3, #27
 800aa4e:	d411      	bmi.n	800aa74 <__swsetup_r+0x50>
 800aa50:	2309      	movs	r3, #9
 800aa52:	6033      	str	r3, [r6, #0]
 800aa54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aa58:	81a3      	strh	r3, [r4, #12]
 800aa5a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa5e:	e03e      	b.n	800aade <__swsetup_r+0xba>
 800aa60:	4b25      	ldr	r3, [pc, #148]	; (800aaf8 <__swsetup_r+0xd4>)
 800aa62:	429c      	cmp	r4, r3
 800aa64:	d101      	bne.n	800aa6a <__swsetup_r+0x46>
 800aa66:	68ac      	ldr	r4, [r5, #8]
 800aa68:	e7eb      	b.n	800aa42 <__swsetup_r+0x1e>
 800aa6a:	4b24      	ldr	r3, [pc, #144]	; (800aafc <__swsetup_r+0xd8>)
 800aa6c:	429c      	cmp	r4, r3
 800aa6e:	bf08      	it	eq
 800aa70:	68ec      	ldreq	r4, [r5, #12]
 800aa72:	e7e6      	b.n	800aa42 <__swsetup_r+0x1e>
 800aa74:	0758      	lsls	r0, r3, #29
 800aa76:	d512      	bpl.n	800aa9e <__swsetup_r+0x7a>
 800aa78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa7a:	b141      	cbz	r1, 800aa8e <__swsetup_r+0x6a>
 800aa7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa80:	4299      	cmp	r1, r3
 800aa82:	d002      	beq.n	800aa8a <__swsetup_r+0x66>
 800aa84:	4630      	mov	r0, r6
 800aa86:	f7ff fcd5 	bl	800a434 <_free_r>
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	6363      	str	r3, [r4, #52]	; 0x34
 800aa8e:	89a3      	ldrh	r3, [r4, #12]
 800aa90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aa94:	81a3      	strh	r3, [r4, #12]
 800aa96:	2300      	movs	r3, #0
 800aa98:	6063      	str	r3, [r4, #4]
 800aa9a:	6923      	ldr	r3, [r4, #16]
 800aa9c:	6023      	str	r3, [r4, #0]
 800aa9e:	89a3      	ldrh	r3, [r4, #12]
 800aaa0:	f043 0308 	orr.w	r3, r3, #8
 800aaa4:	81a3      	strh	r3, [r4, #12]
 800aaa6:	6923      	ldr	r3, [r4, #16]
 800aaa8:	b94b      	cbnz	r3, 800aabe <__swsetup_r+0x9a>
 800aaaa:	89a3      	ldrh	r3, [r4, #12]
 800aaac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aab4:	d003      	beq.n	800aabe <__swsetup_r+0x9a>
 800aab6:	4621      	mov	r1, r4
 800aab8:	4630      	mov	r0, r6
 800aaba:	f000 fa09 	bl	800aed0 <__smakebuf_r>
 800aabe:	89a0      	ldrh	r0, [r4, #12]
 800aac0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aac4:	f010 0301 	ands.w	r3, r0, #1
 800aac8:	d00a      	beq.n	800aae0 <__swsetup_r+0xbc>
 800aaca:	2300      	movs	r3, #0
 800aacc:	60a3      	str	r3, [r4, #8]
 800aace:	6963      	ldr	r3, [r4, #20]
 800aad0:	425b      	negs	r3, r3
 800aad2:	61a3      	str	r3, [r4, #24]
 800aad4:	6923      	ldr	r3, [r4, #16]
 800aad6:	b943      	cbnz	r3, 800aaea <__swsetup_r+0xc6>
 800aad8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aadc:	d1ba      	bne.n	800aa54 <__swsetup_r+0x30>
 800aade:	bd70      	pop	{r4, r5, r6, pc}
 800aae0:	0781      	lsls	r1, r0, #30
 800aae2:	bf58      	it	pl
 800aae4:	6963      	ldrpl	r3, [r4, #20]
 800aae6:	60a3      	str	r3, [r4, #8]
 800aae8:	e7f4      	b.n	800aad4 <__swsetup_r+0xb0>
 800aaea:	2000      	movs	r0, #0
 800aaec:	e7f7      	b.n	800aade <__swsetup_r+0xba>
 800aaee:	bf00      	nop
 800aaf0:	2000000c 	.word	0x2000000c
 800aaf4:	0800b52c 	.word	0x0800b52c
 800aaf8:	0800b54c 	.word	0x0800b54c
 800aafc:	0800b50c 	.word	0x0800b50c

0800ab00 <abort>:
 800ab00:	b508      	push	{r3, lr}
 800ab02:	2006      	movs	r0, #6
 800ab04:	f000 fa4c 	bl	800afa0 <raise>
 800ab08:	2001      	movs	r0, #1
 800ab0a:	f7f7 ff3d 	bl	8002988 <_exit>
	...

0800ab10 <__sflush_r>:
 800ab10:	898a      	ldrh	r2, [r1, #12]
 800ab12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab16:	4605      	mov	r5, r0
 800ab18:	0710      	lsls	r0, r2, #28
 800ab1a:	460c      	mov	r4, r1
 800ab1c:	d458      	bmi.n	800abd0 <__sflush_r+0xc0>
 800ab1e:	684b      	ldr	r3, [r1, #4]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	dc05      	bgt.n	800ab30 <__sflush_r+0x20>
 800ab24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	dc02      	bgt.n	800ab30 <__sflush_r+0x20>
 800ab2a:	2000      	movs	r0, #0
 800ab2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab32:	2e00      	cmp	r6, #0
 800ab34:	d0f9      	beq.n	800ab2a <__sflush_r+0x1a>
 800ab36:	2300      	movs	r3, #0
 800ab38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ab3c:	682f      	ldr	r7, [r5, #0]
 800ab3e:	602b      	str	r3, [r5, #0]
 800ab40:	d032      	beq.n	800aba8 <__sflush_r+0x98>
 800ab42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ab44:	89a3      	ldrh	r3, [r4, #12]
 800ab46:	075a      	lsls	r2, r3, #29
 800ab48:	d505      	bpl.n	800ab56 <__sflush_r+0x46>
 800ab4a:	6863      	ldr	r3, [r4, #4]
 800ab4c:	1ac0      	subs	r0, r0, r3
 800ab4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab50:	b10b      	cbz	r3, 800ab56 <__sflush_r+0x46>
 800ab52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab54:	1ac0      	subs	r0, r0, r3
 800ab56:	2300      	movs	r3, #0
 800ab58:	4602      	mov	r2, r0
 800ab5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab5c:	6a21      	ldr	r1, [r4, #32]
 800ab5e:	4628      	mov	r0, r5
 800ab60:	47b0      	blx	r6
 800ab62:	1c43      	adds	r3, r0, #1
 800ab64:	89a3      	ldrh	r3, [r4, #12]
 800ab66:	d106      	bne.n	800ab76 <__sflush_r+0x66>
 800ab68:	6829      	ldr	r1, [r5, #0]
 800ab6a:	291d      	cmp	r1, #29
 800ab6c:	d82c      	bhi.n	800abc8 <__sflush_r+0xb8>
 800ab6e:	4a2a      	ldr	r2, [pc, #168]	; (800ac18 <__sflush_r+0x108>)
 800ab70:	40ca      	lsrs	r2, r1
 800ab72:	07d6      	lsls	r6, r2, #31
 800ab74:	d528      	bpl.n	800abc8 <__sflush_r+0xb8>
 800ab76:	2200      	movs	r2, #0
 800ab78:	6062      	str	r2, [r4, #4]
 800ab7a:	04d9      	lsls	r1, r3, #19
 800ab7c:	6922      	ldr	r2, [r4, #16]
 800ab7e:	6022      	str	r2, [r4, #0]
 800ab80:	d504      	bpl.n	800ab8c <__sflush_r+0x7c>
 800ab82:	1c42      	adds	r2, r0, #1
 800ab84:	d101      	bne.n	800ab8a <__sflush_r+0x7a>
 800ab86:	682b      	ldr	r3, [r5, #0]
 800ab88:	b903      	cbnz	r3, 800ab8c <__sflush_r+0x7c>
 800ab8a:	6560      	str	r0, [r4, #84]	; 0x54
 800ab8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab8e:	602f      	str	r7, [r5, #0]
 800ab90:	2900      	cmp	r1, #0
 800ab92:	d0ca      	beq.n	800ab2a <__sflush_r+0x1a>
 800ab94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab98:	4299      	cmp	r1, r3
 800ab9a:	d002      	beq.n	800aba2 <__sflush_r+0x92>
 800ab9c:	4628      	mov	r0, r5
 800ab9e:	f7ff fc49 	bl	800a434 <_free_r>
 800aba2:	2000      	movs	r0, #0
 800aba4:	6360      	str	r0, [r4, #52]	; 0x34
 800aba6:	e7c1      	b.n	800ab2c <__sflush_r+0x1c>
 800aba8:	6a21      	ldr	r1, [r4, #32]
 800abaa:	2301      	movs	r3, #1
 800abac:	4628      	mov	r0, r5
 800abae:	47b0      	blx	r6
 800abb0:	1c41      	adds	r1, r0, #1
 800abb2:	d1c7      	bne.n	800ab44 <__sflush_r+0x34>
 800abb4:	682b      	ldr	r3, [r5, #0]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d0c4      	beq.n	800ab44 <__sflush_r+0x34>
 800abba:	2b1d      	cmp	r3, #29
 800abbc:	d001      	beq.n	800abc2 <__sflush_r+0xb2>
 800abbe:	2b16      	cmp	r3, #22
 800abc0:	d101      	bne.n	800abc6 <__sflush_r+0xb6>
 800abc2:	602f      	str	r7, [r5, #0]
 800abc4:	e7b1      	b.n	800ab2a <__sflush_r+0x1a>
 800abc6:	89a3      	ldrh	r3, [r4, #12]
 800abc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abcc:	81a3      	strh	r3, [r4, #12]
 800abce:	e7ad      	b.n	800ab2c <__sflush_r+0x1c>
 800abd0:	690f      	ldr	r7, [r1, #16]
 800abd2:	2f00      	cmp	r7, #0
 800abd4:	d0a9      	beq.n	800ab2a <__sflush_r+0x1a>
 800abd6:	0793      	lsls	r3, r2, #30
 800abd8:	680e      	ldr	r6, [r1, #0]
 800abda:	bf08      	it	eq
 800abdc:	694b      	ldreq	r3, [r1, #20]
 800abde:	600f      	str	r7, [r1, #0]
 800abe0:	bf18      	it	ne
 800abe2:	2300      	movne	r3, #0
 800abe4:	eba6 0807 	sub.w	r8, r6, r7
 800abe8:	608b      	str	r3, [r1, #8]
 800abea:	f1b8 0f00 	cmp.w	r8, #0
 800abee:	dd9c      	ble.n	800ab2a <__sflush_r+0x1a>
 800abf0:	6a21      	ldr	r1, [r4, #32]
 800abf2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800abf4:	4643      	mov	r3, r8
 800abf6:	463a      	mov	r2, r7
 800abf8:	4628      	mov	r0, r5
 800abfa:	47b0      	blx	r6
 800abfc:	2800      	cmp	r0, #0
 800abfe:	dc06      	bgt.n	800ac0e <__sflush_r+0xfe>
 800ac00:	89a3      	ldrh	r3, [r4, #12]
 800ac02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac06:	81a3      	strh	r3, [r4, #12]
 800ac08:	f04f 30ff 	mov.w	r0, #4294967295
 800ac0c:	e78e      	b.n	800ab2c <__sflush_r+0x1c>
 800ac0e:	4407      	add	r7, r0
 800ac10:	eba8 0800 	sub.w	r8, r8, r0
 800ac14:	e7e9      	b.n	800abea <__sflush_r+0xda>
 800ac16:	bf00      	nop
 800ac18:	20400001 	.word	0x20400001

0800ac1c <_fflush_r>:
 800ac1c:	b538      	push	{r3, r4, r5, lr}
 800ac1e:	690b      	ldr	r3, [r1, #16]
 800ac20:	4605      	mov	r5, r0
 800ac22:	460c      	mov	r4, r1
 800ac24:	b913      	cbnz	r3, 800ac2c <_fflush_r+0x10>
 800ac26:	2500      	movs	r5, #0
 800ac28:	4628      	mov	r0, r5
 800ac2a:	bd38      	pop	{r3, r4, r5, pc}
 800ac2c:	b118      	cbz	r0, 800ac36 <_fflush_r+0x1a>
 800ac2e:	6983      	ldr	r3, [r0, #24]
 800ac30:	b90b      	cbnz	r3, 800ac36 <_fflush_r+0x1a>
 800ac32:	f000 f887 	bl	800ad44 <__sinit>
 800ac36:	4b14      	ldr	r3, [pc, #80]	; (800ac88 <_fflush_r+0x6c>)
 800ac38:	429c      	cmp	r4, r3
 800ac3a:	d11b      	bne.n	800ac74 <_fflush_r+0x58>
 800ac3c:	686c      	ldr	r4, [r5, #4]
 800ac3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d0ef      	beq.n	800ac26 <_fflush_r+0xa>
 800ac46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac48:	07d0      	lsls	r0, r2, #31
 800ac4a:	d404      	bmi.n	800ac56 <_fflush_r+0x3a>
 800ac4c:	0599      	lsls	r1, r3, #22
 800ac4e:	d402      	bmi.n	800ac56 <_fflush_r+0x3a>
 800ac50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac52:	f000 f915 	bl	800ae80 <__retarget_lock_acquire_recursive>
 800ac56:	4628      	mov	r0, r5
 800ac58:	4621      	mov	r1, r4
 800ac5a:	f7ff ff59 	bl	800ab10 <__sflush_r>
 800ac5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac60:	07da      	lsls	r2, r3, #31
 800ac62:	4605      	mov	r5, r0
 800ac64:	d4e0      	bmi.n	800ac28 <_fflush_r+0xc>
 800ac66:	89a3      	ldrh	r3, [r4, #12]
 800ac68:	059b      	lsls	r3, r3, #22
 800ac6a:	d4dd      	bmi.n	800ac28 <_fflush_r+0xc>
 800ac6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac6e:	f000 f908 	bl	800ae82 <__retarget_lock_release_recursive>
 800ac72:	e7d9      	b.n	800ac28 <_fflush_r+0xc>
 800ac74:	4b05      	ldr	r3, [pc, #20]	; (800ac8c <_fflush_r+0x70>)
 800ac76:	429c      	cmp	r4, r3
 800ac78:	d101      	bne.n	800ac7e <_fflush_r+0x62>
 800ac7a:	68ac      	ldr	r4, [r5, #8]
 800ac7c:	e7df      	b.n	800ac3e <_fflush_r+0x22>
 800ac7e:	4b04      	ldr	r3, [pc, #16]	; (800ac90 <_fflush_r+0x74>)
 800ac80:	429c      	cmp	r4, r3
 800ac82:	bf08      	it	eq
 800ac84:	68ec      	ldreq	r4, [r5, #12]
 800ac86:	e7da      	b.n	800ac3e <_fflush_r+0x22>
 800ac88:	0800b52c 	.word	0x0800b52c
 800ac8c:	0800b54c 	.word	0x0800b54c
 800ac90:	0800b50c 	.word	0x0800b50c

0800ac94 <std>:
 800ac94:	2300      	movs	r3, #0
 800ac96:	b510      	push	{r4, lr}
 800ac98:	4604      	mov	r4, r0
 800ac9a:	e9c0 3300 	strd	r3, r3, [r0]
 800ac9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aca2:	6083      	str	r3, [r0, #8]
 800aca4:	8181      	strh	r1, [r0, #12]
 800aca6:	6643      	str	r3, [r0, #100]	; 0x64
 800aca8:	81c2      	strh	r2, [r0, #14]
 800acaa:	6183      	str	r3, [r0, #24]
 800acac:	4619      	mov	r1, r3
 800acae:	2208      	movs	r2, #8
 800acb0:	305c      	adds	r0, #92	; 0x5c
 800acb2:	f7fd fd1d 	bl	80086f0 <memset>
 800acb6:	4b05      	ldr	r3, [pc, #20]	; (800accc <std+0x38>)
 800acb8:	6263      	str	r3, [r4, #36]	; 0x24
 800acba:	4b05      	ldr	r3, [pc, #20]	; (800acd0 <std+0x3c>)
 800acbc:	62a3      	str	r3, [r4, #40]	; 0x28
 800acbe:	4b05      	ldr	r3, [pc, #20]	; (800acd4 <std+0x40>)
 800acc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800acc2:	4b05      	ldr	r3, [pc, #20]	; (800acd8 <std+0x44>)
 800acc4:	6224      	str	r4, [r4, #32]
 800acc6:	6323      	str	r3, [r4, #48]	; 0x30
 800acc8:	bd10      	pop	{r4, pc}
 800acca:	bf00      	nop
 800accc:	0800afd9 	.word	0x0800afd9
 800acd0:	0800affb 	.word	0x0800affb
 800acd4:	0800b033 	.word	0x0800b033
 800acd8:	0800b057 	.word	0x0800b057

0800acdc <_cleanup_r>:
 800acdc:	4901      	ldr	r1, [pc, #4]	; (800ace4 <_cleanup_r+0x8>)
 800acde:	f000 b8af 	b.w	800ae40 <_fwalk_reent>
 800ace2:	bf00      	nop
 800ace4:	0800ac1d 	.word	0x0800ac1d

0800ace8 <__sfmoreglue>:
 800ace8:	b570      	push	{r4, r5, r6, lr}
 800acea:	2268      	movs	r2, #104	; 0x68
 800acec:	1e4d      	subs	r5, r1, #1
 800acee:	4355      	muls	r5, r2
 800acf0:	460e      	mov	r6, r1
 800acf2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800acf6:	f7ff fc09 	bl	800a50c <_malloc_r>
 800acfa:	4604      	mov	r4, r0
 800acfc:	b140      	cbz	r0, 800ad10 <__sfmoreglue+0x28>
 800acfe:	2100      	movs	r1, #0
 800ad00:	e9c0 1600 	strd	r1, r6, [r0]
 800ad04:	300c      	adds	r0, #12
 800ad06:	60a0      	str	r0, [r4, #8]
 800ad08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ad0c:	f7fd fcf0 	bl	80086f0 <memset>
 800ad10:	4620      	mov	r0, r4
 800ad12:	bd70      	pop	{r4, r5, r6, pc}

0800ad14 <__sfp_lock_acquire>:
 800ad14:	4801      	ldr	r0, [pc, #4]	; (800ad1c <__sfp_lock_acquire+0x8>)
 800ad16:	f000 b8b3 	b.w	800ae80 <__retarget_lock_acquire_recursive>
 800ad1a:	bf00      	nop
 800ad1c:	200005c5 	.word	0x200005c5

0800ad20 <__sfp_lock_release>:
 800ad20:	4801      	ldr	r0, [pc, #4]	; (800ad28 <__sfp_lock_release+0x8>)
 800ad22:	f000 b8ae 	b.w	800ae82 <__retarget_lock_release_recursive>
 800ad26:	bf00      	nop
 800ad28:	200005c5 	.word	0x200005c5

0800ad2c <__sinit_lock_acquire>:
 800ad2c:	4801      	ldr	r0, [pc, #4]	; (800ad34 <__sinit_lock_acquire+0x8>)
 800ad2e:	f000 b8a7 	b.w	800ae80 <__retarget_lock_acquire_recursive>
 800ad32:	bf00      	nop
 800ad34:	200005c6 	.word	0x200005c6

0800ad38 <__sinit_lock_release>:
 800ad38:	4801      	ldr	r0, [pc, #4]	; (800ad40 <__sinit_lock_release+0x8>)
 800ad3a:	f000 b8a2 	b.w	800ae82 <__retarget_lock_release_recursive>
 800ad3e:	bf00      	nop
 800ad40:	200005c6 	.word	0x200005c6

0800ad44 <__sinit>:
 800ad44:	b510      	push	{r4, lr}
 800ad46:	4604      	mov	r4, r0
 800ad48:	f7ff fff0 	bl	800ad2c <__sinit_lock_acquire>
 800ad4c:	69a3      	ldr	r3, [r4, #24]
 800ad4e:	b11b      	cbz	r3, 800ad58 <__sinit+0x14>
 800ad50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad54:	f7ff bff0 	b.w	800ad38 <__sinit_lock_release>
 800ad58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ad5c:	6523      	str	r3, [r4, #80]	; 0x50
 800ad5e:	4b13      	ldr	r3, [pc, #76]	; (800adac <__sinit+0x68>)
 800ad60:	4a13      	ldr	r2, [pc, #76]	; (800adb0 <__sinit+0x6c>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	62a2      	str	r2, [r4, #40]	; 0x28
 800ad66:	42a3      	cmp	r3, r4
 800ad68:	bf04      	itt	eq
 800ad6a:	2301      	moveq	r3, #1
 800ad6c:	61a3      	streq	r3, [r4, #24]
 800ad6e:	4620      	mov	r0, r4
 800ad70:	f000 f820 	bl	800adb4 <__sfp>
 800ad74:	6060      	str	r0, [r4, #4]
 800ad76:	4620      	mov	r0, r4
 800ad78:	f000 f81c 	bl	800adb4 <__sfp>
 800ad7c:	60a0      	str	r0, [r4, #8]
 800ad7e:	4620      	mov	r0, r4
 800ad80:	f000 f818 	bl	800adb4 <__sfp>
 800ad84:	2200      	movs	r2, #0
 800ad86:	60e0      	str	r0, [r4, #12]
 800ad88:	2104      	movs	r1, #4
 800ad8a:	6860      	ldr	r0, [r4, #4]
 800ad8c:	f7ff ff82 	bl	800ac94 <std>
 800ad90:	68a0      	ldr	r0, [r4, #8]
 800ad92:	2201      	movs	r2, #1
 800ad94:	2109      	movs	r1, #9
 800ad96:	f7ff ff7d 	bl	800ac94 <std>
 800ad9a:	68e0      	ldr	r0, [r4, #12]
 800ad9c:	2202      	movs	r2, #2
 800ad9e:	2112      	movs	r1, #18
 800ada0:	f7ff ff78 	bl	800ac94 <std>
 800ada4:	2301      	movs	r3, #1
 800ada6:	61a3      	str	r3, [r4, #24]
 800ada8:	e7d2      	b.n	800ad50 <__sinit+0xc>
 800adaa:	bf00      	nop
 800adac:	0800b190 	.word	0x0800b190
 800adb0:	0800acdd 	.word	0x0800acdd

0800adb4 <__sfp>:
 800adb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adb6:	4607      	mov	r7, r0
 800adb8:	f7ff ffac 	bl	800ad14 <__sfp_lock_acquire>
 800adbc:	4b1e      	ldr	r3, [pc, #120]	; (800ae38 <__sfp+0x84>)
 800adbe:	681e      	ldr	r6, [r3, #0]
 800adc0:	69b3      	ldr	r3, [r6, #24]
 800adc2:	b913      	cbnz	r3, 800adca <__sfp+0x16>
 800adc4:	4630      	mov	r0, r6
 800adc6:	f7ff ffbd 	bl	800ad44 <__sinit>
 800adca:	3648      	adds	r6, #72	; 0x48
 800adcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800add0:	3b01      	subs	r3, #1
 800add2:	d503      	bpl.n	800addc <__sfp+0x28>
 800add4:	6833      	ldr	r3, [r6, #0]
 800add6:	b30b      	cbz	r3, 800ae1c <__sfp+0x68>
 800add8:	6836      	ldr	r6, [r6, #0]
 800adda:	e7f7      	b.n	800adcc <__sfp+0x18>
 800addc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ade0:	b9d5      	cbnz	r5, 800ae18 <__sfp+0x64>
 800ade2:	4b16      	ldr	r3, [pc, #88]	; (800ae3c <__sfp+0x88>)
 800ade4:	60e3      	str	r3, [r4, #12]
 800ade6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800adea:	6665      	str	r5, [r4, #100]	; 0x64
 800adec:	f000 f847 	bl	800ae7e <__retarget_lock_init_recursive>
 800adf0:	f7ff ff96 	bl	800ad20 <__sfp_lock_release>
 800adf4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800adf8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800adfc:	6025      	str	r5, [r4, #0]
 800adfe:	61a5      	str	r5, [r4, #24]
 800ae00:	2208      	movs	r2, #8
 800ae02:	4629      	mov	r1, r5
 800ae04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ae08:	f7fd fc72 	bl	80086f0 <memset>
 800ae0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ae10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ae14:	4620      	mov	r0, r4
 800ae16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae18:	3468      	adds	r4, #104	; 0x68
 800ae1a:	e7d9      	b.n	800add0 <__sfp+0x1c>
 800ae1c:	2104      	movs	r1, #4
 800ae1e:	4638      	mov	r0, r7
 800ae20:	f7ff ff62 	bl	800ace8 <__sfmoreglue>
 800ae24:	4604      	mov	r4, r0
 800ae26:	6030      	str	r0, [r6, #0]
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	d1d5      	bne.n	800add8 <__sfp+0x24>
 800ae2c:	f7ff ff78 	bl	800ad20 <__sfp_lock_release>
 800ae30:	230c      	movs	r3, #12
 800ae32:	603b      	str	r3, [r7, #0]
 800ae34:	e7ee      	b.n	800ae14 <__sfp+0x60>
 800ae36:	bf00      	nop
 800ae38:	0800b190 	.word	0x0800b190
 800ae3c:	ffff0001 	.word	0xffff0001

0800ae40 <_fwalk_reent>:
 800ae40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae44:	4606      	mov	r6, r0
 800ae46:	4688      	mov	r8, r1
 800ae48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ae4c:	2700      	movs	r7, #0
 800ae4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae52:	f1b9 0901 	subs.w	r9, r9, #1
 800ae56:	d505      	bpl.n	800ae64 <_fwalk_reent+0x24>
 800ae58:	6824      	ldr	r4, [r4, #0]
 800ae5a:	2c00      	cmp	r4, #0
 800ae5c:	d1f7      	bne.n	800ae4e <_fwalk_reent+0xe>
 800ae5e:	4638      	mov	r0, r7
 800ae60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae64:	89ab      	ldrh	r3, [r5, #12]
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	d907      	bls.n	800ae7a <_fwalk_reent+0x3a>
 800ae6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae6e:	3301      	adds	r3, #1
 800ae70:	d003      	beq.n	800ae7a <_fwalk_reent+0x3a>
 800ae72:	4629      	mov	r1, r5
 800ae74:	4630      	mov	r0, r6
 800ae76:	47c0      	blx	r8
 800ae78:	4307      	orrs	r7, r0
 800ae7a:	3568      	adds	r5, #104	; 0x68
 800ae7c:	e7e9      	b.n	800ae52 <_fwalk_reent+0x12>

0800ae7e <__retarget_lock_init_recursive>:
 800ae7e:	4770      	bx	lr

0800ae80 <__retarget_lock_acquire_recursive>:
 800ae80:	4770      	bx	lr

0800ae82 <__retarget_lock_release_recursive>:
 800ae82:	4770      	bx	lr

0800ae84 <__swhatbuf_r>:
 800ae84:	b570      	push	{r4, r5, r6, lr}
 800ae86:	460e      	mov	r6, r1
 800ae88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae8c:	2900      	cmp	r1, #0
 800ae8e:	b096      	sub	sp, #88	; 0x58
 800ae90:	4614      	mov	r4, r2
 800ae92:	461d      	mov	r5, r3
 800ae94:	da08      	bge.n	800aea8 <__swhatbuf_r+0x24>
 800ae96:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	602a      	str	r2, [r5, #0]
 800ae9e:	061a      	lsls	r2, r3, #24
 800aea0:	d410      	bmi.n	800aec4 <__swhatbuf_r+0x40>
 800aea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aea6:	e00e      	b.n	800aec6 <__swhatbuf_r+0x42>
 800aea8:	466a      	mov	r2, sp
 800aeaa:	f000 f8fb 	bl	800b0a4 <_fstat_r>
 800aeae:	2800      	cmp	r0, #0
 800aeb0:	dbf1      	blt.n	800ae96 <__swhatbuf_r+0x12>
 800aeb2:	9a01      	ldr	r2, [sp, #4]
 800aeb4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aeb8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aebc:	425a      	negs	r2, r3
 800aebe:	415a      	adcs	r2, r3
 800aec0:	602a      	str	r2, [r5, #0]
 800aec2:	e7ee      	b.n	800aea2 <__swhatbuf_r+0x1e>
 800aec4:	2340      	movs	r3, #64	; 0x40
 800aec6:	2000      	movs	r0, #0
 800aec8:	6023      	str	r3, [r4, #0]
 800aeca:	b016      	add	sp, #88	; 0x58
 800aecc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aed0 <__smakebuf_r>:
 800aed0:	898b      	ldrh	r3, [r1, #12]
 800aed2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aed4:	079d      	lsls	r5, r3, #30
 800aed6:	4606      	mov	r6, r0
 800aed8:	460c      	mov	r4, r1
 800aeda:	d507      	bpl.n	800aeec <__smakebuf_r+0x1c>
 800aedc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aee0:	6023      	str	r3, [r4, #0]
 800aee2:	6123      	str	r3, [r4, #16]
 800aee4:	2301      	movs	r3, #1
 800aee6:	6163      	str	r3, [r4, #20]
 800aee8:	b002      	add	sp, #8
 800aeea:	bd70      	pop	{r4, r5, r6, pc}
 800aeec:	ab01      	add	r3, sp, #4
 800aeee:	466a      	mov	r2, sp
 800aef0:	f7ff ffc8 	bl	800ae84 <__swhatbuf_r>
 800aef4:	9900      	ldr	r1, [sp, #0]
 800aef6:	4605      	mov	r5, r0
 800aef8:	4630      	mov	r0, r6
 800aefa:	f7ff fb07 	bl	800a50c <_malloc_r>
 800aefe:	b948      	cbnz	r0, 800af14 <__smakebuf_r+0x44>
 800af00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af04:	059a      	lsls	r2, r3, #22
 800af06:	d4ef      	bmi.n	800aee8 <__smakebuf_r+0x18>
 800af08:	f023 0303 	bic.w	r3, r3, #3
 800af0c:	f043 0302 	orr.w	r3, r3, #2
 800af10:	81a3      	strh	r3, [r4, #12]
 800af12:	e7e3      	b.n	800aedc <__smakebuf_r+0xc>
 800af14:	4b0d      	ldr	r3, [pc, #52]	; (800af4c <__smakebuf_r+0x7c>)
 800af16:	62b3      	str	r3, [r6, #40]	; 0x28
 800af18:	89a3      	ldrh	r3, [r4, #12]
 800af1a:	6020      	str	r0, [r4, #0]
 800af1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af20:	81a3      	strh	r3, [r4, #12]
 800af22:	9b00      	ldr	r3, [sp, #0]
 800af24:	6163      	str	r3, [r4, #20]
 800af26:	9b01      	ldr	r3, [sp, #4]
 800af28:	6120      	str	r0, [r4, #16]
 800af2a:	b15b      	cbz	r3, 800af44 <__smakebuf_r+0x74>
 800af2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af30:	4630      	mov	r0, r6
 800af32:	f000 f8c9 	bl	800b0c8 <_isatty_r>
 800af36:	b128      	cbz	r0, 800af44 <__smakebuf_r+0x74>
 800af38:	89a3      	ldrh	r3, [r4, #12]
 800af3a:	f023 0303 	bic.w	r3, r3, #3
 800af3e:	f043 0301 	orr.w	r3, r3, #1
 800af42:	81a3      	strh	r3, [r4, #12]
 800af44:	89a0      	ldrh	r0, [r4, #12]
 800af46:	4305      	orrs	r5, r0
 800af48:	81a5      	strh	r5, [r4, #12]
 800af4a:	e7cd      	b.n	800aee8 <__smakebuf_r+0x18>
 800af4c:	0800acdd 	.word	0x0800acdd

0800af50 <_raise_r>:
 800af50:	291f      	cmp	r1, #31
 800af52:	b538      	push	{r3, r4, r5, lr}
 800af54:	4604      	mov	r4, r0
 800af56:	460d      	mov	r5, r1
 800af58:	d904      	bls.n	800af64 <_raise_r+0x14>
 800af5a:	2316      	movs	r3, #22
 800af5c:	6003      	str	r3, [r0, #0]
 800af5e:	f04f 30ff 	mov.w	r0, #4294967295
 800af62:	bd38      	pop	{r3, r4, r5, pc}
 800af64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800af66:	b112      	cbz	r2, 800af6e <_raise_r+0x1e>
 800af68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af6c:	b94b      	cbnz	r3, 800af82 <_raise_r+0x32>
 800af6e:	4620      	mov	r0, r4
 800af70:	f000 f830 	bl	800afd4 <_getpid_r>
 800af74:	462a      	mov	r2, r5
 800af76:	4601      	mov	r1, r0
 800af78:	4620      	mov	r0, r4
 800af7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af7e:	f000 b817 	b.w	800afb0 <_kill_r>
 800af82:	2b01      	cmp	r3, #1
 800af84:	d00a      	beq.n	800af9c <_raise_r+0x4c>
 800af86:	1c59      	adds	r1, r3, #1
 800af88:	d103      	bne.n	800af92 <_raise_r+0x42>
 800af8a:	2316      	movs	r3, #22
 800af8c:	6003      	str	r3, [r0, #0]
 800af8e:	2001      	movs	r0, #1
 800af90:	e7e7      	b.n	800af62 <_raise_r+0x12>
 800af92:	2400      	movs	r4, #0
 800af94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800af98:	4628      	mov	r0, r5
 800af9a:	4798      	blx	r3
 800af9c:	2000      	movs	r0, #0
 800af9e:	e7e0      	b.n	800af62 <_raise_r+0x12>

0800afa0 <raise>:
 800afa0:	4b02      	ldr	r3, [pc, #8]	; (800afac <raise+0xc>)
 800afa2:	4601      	mov	r1, r0
 800afa4:	6818      	ldr	r0, [r3, #0]
 800afa6:	f7ff bfd3 	b.w	800af50 <_raise_r>
 800afaa:	bf00      	nop
 800afac:	2000000c 	.word	0x2000000c

0800afb0 <_kill_r>:
 800afb0:	b538      	push	{r3, r4, r5, lr}
 800afb2:	4d07      	ldr	r5, [pc, #28]	; (800afd0 <_kill_r+0x20>)
 800afb4:	2300      	movs	r3, #0
 800afb6:	4604      	mov	r4, r0
 800afb8:	4608      	mov	r0, r1
 800afba:	4611      	mov	r1, r2
 800afbc:	602b      	str	r3, [r5, #0]
 800afbe:	f7f7 fcd3 	bl	8002968 <_kill>
 800afc2:	1c43      	adds	r3, r0, #1
 800afc4:	d102      	bne.n	800afcc <_kill_r+0x1c>
 800afc6:	682b      	ldr	r3, [r5, #0]
 800afc8:	b103      	cbz	r3, 800afcc <_kill_r+0x1c>
 800afca:	6023      	str	r3, [r4, #0]
 800afcc:	bd38      	pop	{r3, r4, r5, pc}
 800afce:	bf00      	nop
 800afd0:	200005c0 	.word	0x200005c0

0800afd4 <_getpid_r>:
 800afd4:	f7f7 bcc0 	b.w	8002958 <_getpid>

0800afd8 <__sread>:
 800afd8:	b510      	push	{r4, lr}
 800afda:	460c      	mov	r4, r1
 800afdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afe0:	f000 f894 	bl	800b10c <_read_r>
 800afe4:	2800      	cmp	r0, #0
 800afe6:	bfab      	itete	ge
 800afe8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800afea:	89a3      	ldrhlt	r3, [r4, #12]
 800afec:	181b      	addge	r3, r3, r0
 800afee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aff2:	bfac      	ite	ge
 800aff4:	6563      	strge	r3, [r4, #84]	; 0x54
 800aff6:	81a3      	strhlt	r3, [r4, #12]
 800aff8:	bd10      	pop	{r4, pc}

0800affa <__swrite>:
 800affa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800affe:	461f      	mov	r7, r3
 800b000:	898b      	ldrh	r3, [r1, #12]
 800b002:	05db      	lsls	r3, r3, #23
 800b004:	4605      	mov	r5, r0
 800b006:	460c      	mov	r4, r1
 800b008:	4616      	mov	r6, r2
 800b00a:	d505      	bpl.n	800b018 <__swrite+0x1e>
 800b00c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b010:	2302      	movs	r3, #2
 800b012:	2200      	movs	r2, #0
 800b014:	f000 f868 	bl	800b0e8 <_lseek_r>
 800b018:	89a3      	ldrh	r3, [r4, #12]
 800b01a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b01e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b022:	81a3      	strh	r3, [r4, #12]
 800b024:	4632      	mov	r2, r6
 800b026:	463b      	mov	r3, r7
 800b028:	4628      	mov	r0, r5
 800b02a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b02e:	f000 b817 	b.w	800b060 <_write_r>

0800b032 <__sseek>:
 800b032:	b510      	push	{r4, lr}
 800b034:	460c      	mov	r4, r1
 800b036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b03a:	f000 f855 	bl	800b0e8 <_lseek_r>
 800b03e:	1c43      	adds	r3, r0, #1
 800b040:	89a3      	ldrh	r3, [r4, #12]
 800b042:	bf15      	itete	ne
 800b044:	6560      	strne	r0, [r4, #84]	; 0x54
 800b046:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b04a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b04e:	81a3      	strheq	r3, [r4, #12]
 800b050:	bf18      	it	ne
 800b052:	81a3      	strhne	r3, [r4, #12]
 800b054:	bd10      	pop	{r4, pc}

0800b056 <__sclose>:
 800b056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b05a:	f000 b813 	b.w	800b084 <_close_r>
	...

0800b060 <_write_r>:
 800b060:	b538      	push	{r3, r4, r5, lr}
 800b062:	4d07      	ldr	r5, [pc, #28]	; (800b080 <_write_r+0x20>)
 800b064:	4604      	mov	r4, r0
 800b066:	4608      	mov	r0, r1
 800b068:	4611      	mov	r1, r2
 800b06a:	2200      	movs	r2, #0
 800b06c:	602a      	str	r2, [r5, #0]
 800b06e:	461a      	mov	r2, r3
 800b070:	f7f7 fcb1 	bl	80029d6 <_write>
 800b074:	1c43      	adds	r3, r0, #1
 800b076:	d102      	bne.n	800b07e <_write_r+0x1e>
 800b078:	682b      	ldr	r3, [r5, #0]
 800b07a:	b103      	cbz	r3, 800b07e <_write_r+0x1e>
 800b07c:	6023      	str	r3, [r4, #0]
 800b07e:	bd38      	pop	{r3, r4, r5, pc}
 800b080:	200005c0 	.word	0x200005c0

0800b084 <_close_r>:
 800b084:	b538      	push	{r3, r4, r5, lr}
 800b086:	4d06      	ldr	r5, [pc, #24]	; (800b0a0 <_close_r+0x1c>)
 800b088:	2300      	movs	r3, #0
 800b08a:	4604      	mov	r4, r0
 800b08c:	4608      	mov	r0, r1
 800b08e:	602b      	str	r3, [r5, #0]
 800b090:	f7f7 fcbd 	bl	8002a0e <_close>
 800b094:	1c43      	adds	r3, r0, #1
 800b096:	d102      	bne.n	800b09e <_close_r+0x1a>
 800b098:	682b      	ldr	r3, [r5, #0]
 800b09a:	b103      	cbz	r3, 800b09e <_close_r+0x1a>
 800b09c:	6023      	str	r3, [r4, #0]
 800b09e:	bd38      	pop	{r3, r4, r5, pc}
 800b0a0:	200005c0 	.word	0x200005c0

0800b0a4 <_fstat_r>:
 800b0a4:	b538      	push	{r3, r4, r5, lr}
 800b0a6:	4d07      	ldr	r5, [pc, #28]	; (800b0c4 <_fstat_r+0x20>)
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	4604      	mov	r4, r0
 800b0ac:	4608      	mov	r0, r1
 800b0ae:	4611      	mov	r1, r2
 800b0b0:	602b      	str	r3, [r5, #0]
 800b0b2:	f7f7 fcb8 	bl	8002a26 <_fstat>
 800b0b6:	1c43      	adds	r3, r0, #1
 800b0b8:	d102      	bne.n	800b0c0 <_fstat_r+0x1c>
 800b0ba:	682b      	ldr	r3, [r5, #0]
 800b0bc:	b103      	cbz	r3, 800b0c0 <_fstat_r+0x1c>
 800b0be:	6023      	str	r3, [r4, #0]
 800b0c0:	bd38      	pop	{r3, r4, r5, pc}
 800b0c2:	bf00      	nop
 800b0c4:	200005c0 	.word	0x200005c0

0800b0c8 <_isatty_r>:
 800b0c8:	b538      	push	{r3, r4, r5, lr}
 800b0ca:	4d06      	ldr	r5, [pc, #24]	; (800b0e4 <_isatty_r+0x1c>)
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	4604      	mov	r4, r0
 800b0d0:	4608      	mov	r0, r1
 800b0d2:	602b      	str	r3, [r5, #0]
 800b0d4:	f7f7 fcb7 	bl	8002a46 <_isatty>
 800b0d8:	1c43      	adds	r3, r0, #1
 800b0da:	d102      	bne.n	800b0e2 <_isatty_r+0x1a>
 800b0dc:	682b      	ldr	r3, [r5, #0]
 800b0de:	b103      	cbz	r3, 800b0e2 <_isatty_r+0x1a>
 800b0e0:	6023      	str	r3, [r4, #0]
 800b0e2:	bd38      	pop	{r3, r4, r5, pc}
 800b0e4:	200005c0 	.word	0x200005c0

0800b0e8 <_lseek_r>:
 800b0e8:	b538      	push	{r3, r4, r5, lr}
 800b0ea:	4d07      	ldr	r5, [pc, #28]	; (800b108 <_lseek_r+0x20>)
 800b0ec:	4604      	mov	r4, r0
 800b0ee:	4608      	mov	r0, r1
 800b0f0:	4611      	mov	r1, r2
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	602a      	str	r2, [r5, #0]
 800b0f6:	461a      	mov	r2, r3
 800b0f8:	f7f7 fcb0 	bl	8002a5c <_lseek>
 800b0fc:	1c43      	adds	r3, r0, #1
 800b0fe:	d102      	bne.n	800b106 <_lseek_r+0x1e>
 800b100:	682b      	ldr	r3, [r5, #0]
 800b102:	b103      	cbz	r3, 800b106 <_lseek_r+0x1e>
 800b104:	6023      	str	r3, [r4, #0]
 800b106:	bd38      	pop	{r3, r4, r5, pc}
 800b108:	200005c0 	.word	0x200005c0

0800b10c <_read_r>:
 800b10c:	b538      	push	{r3, r4, r5, lr}
 800b10e:	4d07      	ldr	r5, [pc, #28]	; (800b12c <_read_r+0x20>)
 800b110:	4604      	mov	r4, r0
 800b112:	4608      	mov	r0, r1
 800b114:	4611      	mov	r1, r2
 800b116:	2200      	movs	r2, #0
 800b118:	602a      	str	r2, [r5, #0]
 800b11a:	461a      	mov	r2, r3
 800b11c:	f7f7 fc3e 	bl	800299c <_read>
 800b120:	1c43      	adds	r3, r0, #1
 800b122:	d102      	bne.n	800b12a <_read_r+0x1e>
 800b124:	682b      	ldr	r3, [r5, #0]
 800b126:	b103      	cbz	r3, 800b12a <_read_r+0x1e>
 800b128:	6023      	str	r3, [r4, #0]
 800b12a:	bd38      	pop	{r3, r4, r5, pc}
 800b12c:	200005c0 	.word	0x200005c0

0800b130 <_init>:
 800b130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b132:	bf00      	nop
 800b134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b136:	bc08      	pop	{r3}
 800b138:	469e      	mov	lr, r3
 800b13a:	4770      	bx	lr

0800b13c <_fini>:
 800b13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b13e:	bf00      	nop
 800b140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b142:	bc08      	pop	{r3}
 800b144:	469e      	mov	lr, r3
 800b146:	4770      	bx	lr
