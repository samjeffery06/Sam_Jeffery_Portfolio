
F412_OBCV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db94  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ab0  0800dd68  0800dd68  0001dd68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e818  0800e818  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e818  0800e818  0001e818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e820  0800e820  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e820  0800e820  0001e820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e824  0800e824  0001e824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800e828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003670  200001f4  0800ea1c  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003864  0800ea1c  00023864  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019b4b  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039b7  00000000  00000000  00039d6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  0003d728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001250  00000000  00000000  0003eaf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002284a  00000000  00000000  0003fd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c5e2  00000000  00000000  00062592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bba15  00000000  00000000  0007eb74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013a589  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006428  00000000  00000000  0013a5dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800dd4c 	.word	0x0800dd4c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f8 	.word	0x200001f8
 800020c:	0800dd4c 	.word	0x0800dd4c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <ISM330_Initialise>:
/*
 * INITIALISATION
 */

uint8_t ISM330_Initialise( ISM330 *dev, I2C_HandleTypeDef *i2cHandle )
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
	/* Set STRUCT parameters */

    dev->i2cHandle 	= i2cHandle;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	683a      	ldr	r2, [r7, #0]
 8000f9a:	601a      	str	r2, [r3, #0]
//	dev->gyro[1]		= 0.0f;
//	dev->gyro[2]		= 0.0f;

//	dev->temp_C			= 0.0f;

	uint8_t errorNum = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	73fb      	strb	r3, [r7, #15]
	/*
	 * Check WHO_AM_I
	 */
	uint8_t regData;

	status = ISM330_ReadRegister( dev, ISM330_WHO_AM_I_ADDR, &regData);
 8000fa0:	f107 030d 	add.w	r3, r7, #13
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	210f      	movs	r1, #15
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f000 f96b 	bl	8001284 <ISM330_ReadRegister>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	73bb      	strb	r3, [r7, #14]

	errorNum += ( status != HAL_OK );
 8000fb2:	7bbb      	ldrb	r3, [r7, #14]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	bf14      	ite	ne
 8000fb8:	2301      	movne	r3, #1
 8000fba:	2300      	moveq	r3, #0
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	73fb      	strb	r3, [r7, #15]

	if ( regData != ISM330_WHO_AM_I)
 8000fc6:	7b7b      	ldrb	r3, [r7, #13]
 8000fc8:	2b6b      	cmp	r3, #107	; 0x6b
 8000fca:	d001      	beq.n	8000fd0 <ISM330_Initialise+0x44>
	{
		return 255;
 8000fcc:	23ff      	movs	r3, #255	; 0xff
 8000fce:	e088      	b.n	80010e2 <ISM330_Initialise+0x156>
	*
	*/

//	regData = 0x10; //12.5 Hz, +-2g, default filtering -- FOR LOW POWER SET (CTRL6_C)

	regData = 0x60; //416 Hz , +-2g, HIGH PERFORMANCE
 8000fd0:	2360      	movs	r3, #96	; 0x60
 8000fd2:	737b      	strb	r3, [r7, #13]

	status = ISM330_WriteRegister( dev, ISM330_CTRL1_XL, &regData ); // Write data to address
 8000fd4:	f107 030d 	add.w	r3, r7, #13
 8000fd8:	461a      	mov	r2, r3
 8000fda:	2110      	movs	r1, #16
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 f936 	bl	800124e <ISM330_WriteRegister>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	73bb      	strb	r3, [r7, #14]

	errorNum += ( status != HAL_OK );
 8000fe6:	7bbb      	ldrb	r3, [r7, #14]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	bf14      	ite	ne
 8000fec:	2301      	movne	r3, #1
 8000fee:	2300      	moveq	r3, #0
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	73fb      	strb	r3, [r7, #15]

//	regData = 0x10; //12.5 Hz , +-250dps -- FOR LOW POWER SET (CTRL7_G)

	regData = 0x60; //416 Hz , +-250dps HIGH PERFORMANCE
 8000ffa:	2360      	movs	r3, #96	; 0x60
 8000ffc:	737b      	strb	r3, [r7, #13]

	status = ISM330_WriteRegister( dev, ISM330_CTRL2_G, &regData ); // Write data to address
 8000ffe:	f107 030d 	add.w	r3, r7, #13
 8001002:	461a      	mov	r2, r3
 8001004:	2111      	movs	r1, #17
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f000 f921 	bl	800124e <ISM330_WriteRegister>
 800100c:	4603      	mov	r3, r0
 800100e:	73bb      	strb	r3, [r7, #14]

	errorNum += ( status != HAL_OK );
 8001010:	7bbb      	ldrb	r3, [r7, #14]
 8001012:	2b00      	cmp	r3, #0
 8001014:	bf14      	ite	ne
 8001016:	2301      	movne	r3, #1
 8001018:	2300      	moveq	r3, #0
 800101a:	b2db      	uxtb	r3, r3
 800101c:	461a      	mov	r2, r3
 800101e:	7bfb      	ldrb	r3, [r7, #15]
 8001020:	4413      	add	r3, r2
 8001022:	73fb      	strb	r3, [r7, #15]

	regData = 0xE2; //Leaves DEN values as default, Sets Device_CONF
 8001024:	23e2      	movs	r3, #226	; 0xe2
 8001026:	737b      	strb	r3, [r7, #13]

	status = ISM330_WriteRegister( dev, ISM330_CTRL9_XL, &regData ); // Write data to address
 8001028:	f107 030d 	add.w	r3, r7, #13
 800102c:	461a      	mov	r2, r3
 800102e:	2118      	movs	r1, #24
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f000 f90c 	bl	800124e <ISM330_WriteRegister>
 8001036:	4603      	mov	r3, r0
 8001038:	73bb      	strb	r3, [r7, #14]

	errorNum += ( status != HAL_OK );
 800103a:	7bbb      	ldrb	r3, [r7, #14]
 800103c:	2b00      	cmp	r3, #0
 800103e:	bf14      	ite	ne
 8001040:	2301      	movne	r3, #1
 8001042:	2300      	moveq	r3, #0
 8001044:	b2db      	uxtb	r3, r3
 8001046:	461a      	mov	r2, r3
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	4413      	add	r3, r2
 800104c:	73fb      	strb	r3, [r7, #15]
//
//	status = ISM330_WriteRegister( dev, ISM330_CTRL9_XL, &regData ); // Write data to address
//
//	errorNum += ( status != HAL_OK );

	regData = 0x00; // CONTROL WEIGHTING OF OFFSETS
 800104e:	2300      	movs	r3, #0
 8001050:	737b      	strb	r3, [r7, #13]

	status = ISM330_WriteRegister( dev, ISM330_CTRL6_C, &regData ); // Write data to address
 8001052:	f107 030d 	add.w	r3, r7, #13
 8001056:	461a      	mov	r2, r3
 8001058:	2115      	movs	r1, #21
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f000 f8f7 	bl	800124e <ISM330_WriteRegister>
 8001060:	4603      	mov	r3, r0
 8001062:	73bb      	strb	r3, [r7, #14]

	errorNum += ( status != HAL_OK );
 8001064:	7bbb      	ldrb	r3, [r7, #14]
 8001066:	2b00      	cmp	r3, #0
 8001068:	bf14      	ite	ne
 800106a:	2301      	movne	r3, #1
 800106c:	2300      	moveq	r3, #0
 800106e:	b2db      	uxtb	r3, r3
 8001070:	461a      	mov	r2, r3
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	4413      	add	r3, r2
 8001076:	73fb      	strb	r3, [r7, #15]

	regData = 0x02; //ENABLE OFFSETS
 8001078:	2302      	movs	r3, #2
 800107a:	737b      	strb	r3, [r7, #13]

	status = ISM330_WriteRegister( dev, ISM330_CTRL7_G, &regData ); // Write data to address
 800107c:	f107 030d 	add.w	r3, r7, #13
 8001080:	461a      	mov	r2, r3
 8001082:	2116      	movs	r1, #22
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 f8e2 	bl	800124e <ISM330_WriteRegister>
 800108a:	4603      	mov	r3, r0
 800108c:	73bb      	strb	r3, [r7, #14]

	errorNum += ( status != HAL_OK );
 800108e:	7bbb      	ldrb	r3, [r7, #14]
 8001090:	2b00      	cmp	r3, #0
 8001092:	bf14      	ite	ne
 8001094:	2301      	movne	r3, #1
 8001096:	2300      	moveq	r3, #0
 8001098:	b2db      	uxtb	r3, r3
 800109a:	461a      	mov	r2, r3
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	4413      	add	r3, r2
 80010a0:	73fb      	strb	r3, [r7, #15]
//
//	regData = -22; //SET Y OFFSET
//
//	status = ISM330_WriteRegister( dev, ISM330_Y_OFS_USR, &regData ); // Write data to address

	errorNum += ( status != HAL_OK );
 80010a2:	7bbb      	ldrb	r3, [r7, #14]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	bf14      	ite	ne
 80010a8:	2301      	movne	r3, #1
 80010aa:	2300      	moveq	r3, #0
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	461a      	mov	r2, r3
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	4413      	add	r3, r2
 80010b4:	73fb      	strb	r3, [r7, #15]

	regData = 31; //SET Z OFFSET
 80010b6:	231f      	movs	r3, #31
 80010b8:	737b      	strb	r3, [r7, #13]

	status = ISM330_WriteRegister( dev, ISM330_Z_OFS_USR, &regData ); // Write data to address
 80010ba:	f107 030d 	add.w	r3, r7, #13
 80010be:	461a      	mov	r2, r3
 80010c0:	2175      	movs	r1, #117	; 0x75
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 f8c3 	bl	800124e <ISM330_WriteRegister>
 80010c8:	4603      	mov	r3, r0
 80010ca:	73bb      	strb	r3, [r7, #14]

	errorNum += ( status != HAL_OK );
 80010cc:	7bbb      	ldrb	r3, [r7, #14]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	bf14      	ite	ne
 80010d2:	2301      	movne	r3, #1
 80010d4:	2300      	moveq	r3, #0
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	461a      	mov	r2, r3
 80010da:	7bfb      	ldrb	r3, [r7, #15]
 80010dc:	4413      	add	r3, r2
 80010de:	73fb      	strb	r3, [r7, #15]

	return errorNum;
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <ISM330_ReadTemperature>:
/*
 * DATA AQUISITION
 */

HAL_StatusTypeDef ISM330_ReadTemperature( ISM330 *dev )
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b084      	sub	sp, #16
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	uint8_t regData[2];
	HAL_StatusTypeDef status;

	do
	{
		status = ISM330_ReadRegister(dev, ISM330_STATUS_REG, regData);
 80010f2:	f107 030c 	add.w	r3, r7, #12
 80010f6:	461a      	mov	r2, r3
 80010f8:	211e      	movs	r1, #30
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f000 f8c2 	bl	8001284 <ISM330_ReadRegister>
 8001100:	4603      	mov	r3, r0
 8001102:	73fb      	strb	r3, [r7, #15]
		if (status != HAL_OK)
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <ISM330_ReadTemperature+0x24>
		{
			return status;
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	e019      	b.n	8001142 <ISM330_ReadTemperature+0x58>
		}
	}
	while (!(regData[0]>>2 & 1));
 800110e:	7b3b      	ldrb	r3, [r7, #12]
 8001110:	089b      	lsrs	r3, r3, #2
 8001112:	b2db      	uxtb	r3, r3
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	2b00      	cmp	r3, #0
 800111a:	d0ea      	beq.n	80010f2 <ISM330_ReadTemperature+0x8>

	status = ISM330_ReadRegisters(dev, ISM330_OUT_TEMP_L, regData, 2);
 800111c:	f107 020c 	add.w	r2, r7, #12
 8001120:	2302      	movs	r3, #2
 8001122:	2120      	movs	r1, #32
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f000 f8c8 	bl	80012ba <ISM330_ReadRegisters>
 800112a:	4603      	mov	r3, r0
 800112c:	73fb      	strb	r3, [r7, #15]

	dev->temp_C_raw = (regData[1] << 8) | regData[0];
 800112e:	7b7b      	ldrb	r3, [r7, #13]
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	b21a      	sxth	r2, r3
 8001134:	7b3b      	ldrb	r3, [r7, #12]
 8001136:	b21b      	sxth	r3, r3
 8001138:	4313      	orrs	r3, r2
 800113a:	b21a      	sxth	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	821a      	strh	r2, [r3, #16]

//	dev->temp_C = (MATH);

	return status;
 8001140:	7bfb      	ldrb	r3, [r7, #15]
}
 8001142:	4618      	mov	r0, r3
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <ISM330_ReadGyro>:

HAL_StatusTypeDef ISM330_ReadGyro( ISM330 *dev )
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b084      	sub	sp, #16
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]

	uint8_t regData[6];

	do
	{
		status = ISM330_ReadRegister(dev, ISM330_STATUS_REG, regData);
 8001152:	f107 0308 	add.w	r3, r7, #8
 8001156:	461a      	mov	r2, r3
 8001158:	211e      	movs	r1, #30
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f000 f892 	bl	8001284 <ISM330_ReadRegister>
 8001160:	4603      	mov	r3, r0
 8001162:	73fb      	strb	r3, [r7, #15]
		if (status != HAL_OK)
 8001164:	7bfb      	ldrb	r3, [r7, #15]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <ISM330_ReadGyro+0x24>
		{
			return status;
 800116a:	7bfb      	ldrb	r3, [r7, #15]
 800116c:	e02b      	b.n	80011c6 <ISM330_ReadGyro+0x7c>
		}
	}
	while (!(regData[0]>>1 & 1));
 800116e:	7a3b      	ldrb	r3, [r7, #8]
 8001170:	085b      	lsrs	r3, r3, #1
 8001172:	b2db      	uxtb	r3, r3
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	2b00      	cmp	r3, #0
 800117a:	d0ea      	beq.n	8001152 <ISM330_ReadGyro+0x8>

	status = ISM330_ReadRegisters(dev, ISM330_OUTX_L_G, regData, 6);
 800117c:	f107 0208 	add.w	r2, r7, #8
 8001180:	2306      	movs	r3, #6
 8001182:	2122      	movs	r1, #34	; 0x22
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f000 f898 	bl	80012ba <ISM330_ReadRegisters>
 800118a:	4603      	mov	r3, r0
 800118c:	73fb      	strb	r3, [r7, #15]

	dev->gyro_raw[0] = ((regData[1] << 8) | regData[0]);
 800118e:	7a7b      	ldrb	r3, [r7, #9]
 8001190:	021b      	lsls	r3, r3, #8
 8001192:	b21a      	sxth	r2, r3
 8001194:	7a3b      	ldrb	r3, [r7, #8]
 8001196:	b21b      	sxth	r3, r3
 8001198:	4313      	orrs	r3, r2
 800119a:	b21a      	sxth	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	815a      	strh	r2, [r3, #10]

	dev->gyro_raw[1] = ((regData[3] << 8) | regData[2]);
 80011a0:	7afb      	ldrb	r3, [r7, #11]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	7abb      	ldrb	r3, [r7, #10]
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b21a      	sxth	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	819a      	strh	r2, [r3, #12]

	dev->gyro_raw[2] = ((regData[5] << 8) | regData[4]);
 80011b2:	7b7b      	ldrb	r3, [r7, #13]
 80011b4:	021b      	lsls	r3, r3, #8
 80011b6:	b21a      	sxth	r2, r3
 80011b8:	7b3b      	ldrb	r3, [r7, #12]
 80011ba:	b21b      	sxth	r3, r3
 80011bc:	4313      	orrs	r3, r2
 80011be:	b21a      	sxth	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	81da      	strh	r2, [r3, #14]
//
//	dev->gyro[1] = (MATH);
//
//	dev->gyro[2] = (MATH);

	return status;
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <ISM330_ReadAcc>:

HAL_StatusTypeDef ISM330_ReadAcc( ISM330 *dev )
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef status;

	do
	{
		status = ISM330_ReadRegister(dev, ISM330_STATUS_REG, regData);
 80011d6:	f107 0308 	add.w	r3, r7, #8
 80011da:	461a      	mov	r2, r3
 80011dc:	211e      	movs	r1, #30
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f000 f850 	bl	8001284 <ISM330_ReadRegister>
 80011e4:	4603      	mov	r3, r0
 80011e6:	73fb      	strb	r3, [r7, #15]
		if (status != HAL_OK)
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <ISM330_ReadAcc+0x24>
		{
			return status;
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	e029      	b.n	8001246 <ISM330_ReadAcc+0x78>
		}
	}
	while (!(regData[0] & 1));
 80011f2:	7a3b      	ldrb	r3, [r7, #8]
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d0ec      	beq.n	80011d6 <ISM330_ReadAcc+0x8>

	status = ISM330_ReadRegisters(dev, ISM330_OUTX_L_A, regData, 6);
 80011fc:	f107 0208 	add.w	r2, r7, #8
 8001200:	2306      	movs	r3, #6
 8001202:	2128      	movs	r1, #40	; 0x28
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f000 f858 	bl	80012ba <ISM330_ReadRegisters>
 800120a:	4603      	mov	r3, r0
 800120c:	73fb      	strb	r3, [r7, #15]

	dev->acc_raw[0] = ((regData[1] << 8) | regData[0]);
 800120e:	7a7b      	ldrb	r3, [r7, #9]
 8001210:	021b      	lsls	r3, r3, #8
 8001212:	b21a      	sxth	r2, r3
 8001214:	7a3b      	ldrb	r3, [r7, #8]
 8001216:	b21b      	sxth	r3, r3
 8001218:	4313      	orrs	r3, r2
 800121a:	b21a      	sxth	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	809a      	strh	r2, [r3, #4]

	dev->acc_raw[1] = ((regData[3] << 8) | regData[2]);
 8001220:	7afb      	ldrb	r3, [r7, #11]
 8001222:	021b      	lsls	r3, r3, #8
 8001224:	b21a      	sxth	r2, r3
 8001226:	7abb      	ldrb	r3, [r7, #10]
 8001228:	b21b      	sxth	r3, r3
 800122a:	4313      	orrs	r3, r2
 800122c:	b21a      	sxth	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	80da      	strh	r2, [r3, #6]

	dev->acc_raw[2] = ((regData[5] << 8) | regData[4]);
 8001232:	7b7b      	ldrb	r3, [r7, #13]
 8001234:	021b      	lsls	r3, r3, #8
 8001236:	b21a      	sxth	r2, r3
 8001238:	7b3b      	ldrb	r3, [r7, #12]
 800123a:	b21b      	sxth	r3, r3
 800123c:	4313      	orrs	r3, r2
 800123e:	b21a      	sxth	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	811a      	strh	r2, [r3, #8]
//
//	dev->acc[1] = dev->acc_raw[1]*0.0005987488;
//
//	dev->acc[2] = dev->acc_raw[2]*0.0005987488;

	return status;
 8001244:	7bfb      	ldrb	r3, [r7, #15]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <ISM330_WriteRegister>:
/*
 * LOW-LEVEL FUNCTIONS
 */

HAL_StatusTypeDef ISM330_WriteRegister( ISM330 *dev, uint8_t reg, uint8_t *data )
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b088      	sub	sp, #32
 8001252:	af04      	add	r7, sp, #16
 8001254:	60f8      	str	r0, [r7, #12]
 8001256:	460b      	mov	r3, r1
 8001258:	607a      	str	r2, [r7, #4]
 800125a:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Write( dev->i2cHandle, ISM330_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	6818      	ldr	r0, [r3, #0]
 8001260:	7afb      	ldrb	r3, [r7, #11]
 8001262:	b29a      	uxth	r2, r3
 8001264:	f04f 33ff 	mov.w	r3, #4294967295
 8001268:	9302      	str	r3, [sp, #8]
 800126a:	2301      	movs	r3, #1
 800126c:	9301      	str	r3, [sp, #4]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	2301      	movs	r3, #1
 8001274:	21d4      	movs	r1, #212	; 0xd4
 8001276:	f004 f973 	bl	8005560 <HAL_I2C_Mem_Write>
 800127a:	4603      	mov	r3, r0
}
 800127c:	4618      	mov	r0, r3
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <ISM330_ReadRegister>:
{
	return HAL_I2C_Mem_Write( dev->i2cHandle, ISM330_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY );
}

HAL_StatusTypeDef ISM330_ReadRegister( ISM330 *dev, uint8_t reg, uint8_t *data  )
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af04      	add	r7, sp, #16
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	460b      	mov	r3, r1
 800128e:	607a      	str	r2, [r7, #4]
 8001290:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read( dev->i2cHandle, ISM330_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	6818      	ldr	r0, [r3, #0]
 8001296:	7afb      	ldrb	r3, [r7, #11]
 8001298:	b29a      	uxth	r2, r3
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
 800129e:	9302      	str	r3, [sp, #8]
 80012a0:	2301      	movs	r3, #1
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	2301      	movs	r3, #1
 80012aa:	21d4      	movs	r1, #212	; 0xd4
 80012ac:	f004 fa52 	bl	8005754 <HAL_I2C_Mem_Read>
 80012b0:	4603      	mov	r3, r0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <ISM330_ReadRegisters>:

HAL_StatusTypeDef ISM330_ReadRegisters( ISM330 *dev, uint8_t reg, uint8_t *data, uint8_t length )
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b088      	sub	sp, #32
 80012be:	af04      	add	r7, sp, #16
 80012c0:	60f8      	str	r0, [r7, #12]
 80012c2:	607a      	str	r2, [r7, #4]
 80012c4:	461a      	mov	r2, r3
 80012c6:	460b      	mov	r3, r1
 80012c8:	72fb      	strb	r3, [r7, #11]
 80012ca:	4613      	mov	r3, r2
 80012cc:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read( dev->i2cHandle, ISM330_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY );
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6818      	ldr	r0, [r3, #0]
 80012d2:	7afb      	ldrb	r3, [r7, #11]
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	7abb      	ldrb	r3, [r7, #10]
 80012d8:	b29b      	uxth	r3, r3
 80012da:	f04f 31ff 	mov.w	r1, #4294967295
 80012de:	9102      	str	r1, [sp, #8]
 80012e0:	9301      	str	r3, [sp, #4]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	2301      	movs	r3, #1
 80012e8:	21d4      	movs	r1, #212	; 0xd4
 80012ea:	f004 fa33 	bl	8005754 <HAL_I2C_Mem_Read>
 80012ee:	4603      	mov	r3, r0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <LIS2MDL_Initialise>:
/*
 * INITIALISATION
 */

uint8_t LIS2MDL_Initialise( LIS2MDL *dev, I2C_HandleTypeDef *i2cHandle, uint8_t calibrate, uint8_t* button_flag )
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	603b      	str	r3, [r7, #0]
 8001304:	4613      	mov	r3, r2
 8001306:	71fb      	strb	r3, [r7, #7]
	/* Set STRUCT parameters */
	dev->i2cHandle 		= i2cHandle;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	601a      	str	r2, [r3, #0]

	dev->compass[0]		= 0;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2200      	movs	r2, #0
 8001312:	809a      	strh	r2, [r3, #4]
	dev->compass[1]		= 0;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2200      	movs	r2, #0
 8001318:	80da      	strh	r2, [r3, #6]
	dev->compass[2]		= 0;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2200      	movs	r2, #0
 800131e:	811a      	strh	r2, [r3, #8]

//	dev->offsets[0] 	= -1019;
//	dev->offsets[1] 	= 288;
//	dev->offsets[2] 	= 0;
//
	dev->offsets[0] 	= 0;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2200      	movs	r2, #0
 8001324:	831a      	strh	r2, [r3, #24]
	dev->offsets[1] 	= 0;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2200      	movs	r2, #0
 800132a:	835a      	strh	r2, [r3, #26]
	dev->offsets[2] 	= 0;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2200      	movs	r2, #0
 8001330:	839a      	strh	r2, [r3, #28]

	dev->heading		= 0;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2200      	movs	r2, #0
 8001336:	815a      	strh	r2, [r3, #10]

	uint8_t errorNum = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	75fb      	strb	r3, [r7, #23]
	/*
	 * Check WHO_AM_I
	 */
	uint8_t regData;

	status = LIS2MDL_ReadRegister( dev, LIS2MDL_WHO_AM_I_ADDR, &regData);
 800133c:	f107 0315 	add.w	r3, r7, #21
 8001340:	461a      	mov	r2, r3
 8001342:	214f      	movs	r1, #79	; 0x4f
 8001344:	68f8      	ldr	r0, [r7, #12]
 8001346:	f000 fa79 	bl	800183c <LIS2MDL_ReadRegister>
 800134a:	4603      	mov	r3, r0
 800134c:	75bb      	strb	r3, [r7, #22]

	errorNum += ( status != HAL_OK );
 800134e:	7dbb      	ldrb	r3, [r7, #22]
 8001350:	2b00      	cmp	r3, #0
 8001352:	bf14      	ite	ne
 8001354:	2301      	movne	r3, #1
 8001356:	2300      	moveq	r3, #0
 8001358:	b2db      	uxtb	r3, r3
 800135a:	461a      	mov	r2, r3
 800135c:	7dfb      	ldrb	r3, [r7, #23]
 800135e:	4413      	add	r3, r2
 8001360:	75fb      	strb	r3, [r7, #23]

	if ( regData != LIS2MDL_WHO_AM_I)
 8001362:	7d7b      	ldrb	r3, [r7, #21]
 8001364:	2b40      	cmp	r3, #64	; 0x40
 8001366:	d001      	beq.n	800136c <LIS2MDL_Initialise+0x74>
	{
		return 255;
 8001368:	23ff      	movs	r3, #255	; 0xff
 800136a:	e052      	b.n	8001412 <LIS2MDL_Initialise+0x11a>

	/*
	 * Initialization of LIS2MDL
	 */

	regData = 0x82; // MD to continous mode
 800136c:	2382      	movs	r3, #130	; 0x82
 800136e:	757b      	strb	r3, [r7, #21]

	status = LIS2MDL_WriteRegister(dev, LIS2MDL_CFG_REG_A, &regData); // Write data to address
 8001370:	f107 0315 	add.w	r3, r7, #21
 8001374:	461a      	mov	r2, r3
 8001376:	2160      	movs	r1, #96	; 0x60
 8001378:	68f8      	ldr	r0, [r7, #12]
 800137a:	f000 fa25 	bl	80017c8 <LIS2MDL_WriteRegister>
 800137e:	4603      	mov	r3, r0
 8001380:	75bb      	strb	r3, [r7, #22]

	errorNum += ( status != HAL_OK );
 8001382:	7dbb      	ldrb	r3, [r7, #22]
 8001384:	2b00      	cmp	r3, #0
 8001386:	bf14      	ite	ne
 8001388:	2301      	movne	r3, #1
 800138a:	2300      	moveq	r3, #0
 800138c:	b2db      	uxtb	r3, r3
 800138e:	461a      	mov	r2, r3
 8001390:	7dfb      	ldrb	r3, [r7, #23]
 8001392:	4413      	add	r3, r2
 8001394:	75fb      	strb	r3, [r7, #23]
//
//	status = LIS2MDL_WriteRegister(dev, LIS2MDL_CFG_REG_B, &regData); // Write data to address
//
//	errorNum += ( status != HAL_OK );

	regData = 0x01; // Set DRDY_on_PIN
 8001396:	2301      	movs	r3, #1
 8001398:	757b      	strb	r3, [r7, #21]

	status = LIS2MDL_WriteRegister(dev, LIS2MDL_CFG_REG_C, &regData); // Write data to address
 800139a:	f107 0315 	add.w	r3, r7, #21
 800139e:	461a      	mov	r2, r3
 80013a0:	2162      	movs	r1, #98	; 0x62
 80013a2:	68f8      	ldr	r0, [r7, #12]
 80013a4:	f000 fa10 	bl	80017c8 <LIS2MDL_WriteRegister>
 80013a8:	4603      	mov	r3, r0
 80013aa:	75bb      	strb	r3, [r7, #22]

	errorNum += ( status != HAL_OK );
 80013ac:	7dbb      	ldrb	r3, [r7, #22]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	bf14      	ite	ne
 80013b2:	2301      	movne	r3, #1
 80013b4:	2300      	moveq	r3, #0
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	461a      	mov	r2, r3
 80013ba:	7dfb      	ldrb	r3, [r7, #23]
 80013bc:	4413      	add	r3, r2
 80013be:	75fb      	strb	r3, [r7, #23]

	if (calibrate == 1)
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d104      	bne.n	80013d0 <LIS2MDL_Initialise+0xd8>
		LIS2MDL_SETUP( dev, button_flag );
 80013c6:	6839      	ldr	r1, [r7, #0]
 80013c8:	68f8      	ldr	r0, [r7, #12]
 80013ca:	f000 f9cb 	bl	8001764 <LIS2MDL_SETUP>
 80013ce:	e01f      	b.n	8001410 <LIS2MDL_Initialise+0x118>
	else if (calibrate == 2)
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d116      	bne.n	8001404 <LIS2MDL_Initialise+0x10c>
	{
		LIS2MDL_SetOffsets( dev );
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	f000 f8c2 	bl	8001560 <LIS2MDL_SetOffsets>

		while (!*button_flag)
 80013dc:	e007      	b.n	80013ee <LIS2MDL_Initialise+0xf6>
		{
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80013de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013e2:	480e      	ldr	r0, [pc, #56]	; (800141c <LIS2MDL_Initialise+0x124>)
 80013e4:	f003 ff39 	bl	800525a <HAL_GPIO_TogglePin>
			HAL_Delay(50);
 80013e8:	2032      	movs	r0, #50	; 0x32
 80013ea:	f002 fddb 	bl	8003fa4 <HAL_Delay>
		while (!*button_flag)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0f3      	beq.n	80013de <LIS2MDL_Initialise+0xe6>
		}
		*button_flag = 0;
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	2200      	movs	r2, #0
 80013fa:	701a      	strb	r2, [r3, #0]

		LIS2MDL_SetRefHeading( dev );
 80013fc:	68f8      	ldr	r0, [r7, #12]
 80013fe:	f000 f9a2 	bl	8001746 <LIS2MDL_SetRefHeading>
 8001402:	e005      	b.n	8001410 <LIS2MDL_Initialise+0x118>
	}
	else
	{
		LIS2MDL_SetOffsets( dev );
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	f000 f8ab 	bl	8001560 <LIS2MDL_SetOffsets>
		LIS2MDL_SetRefHeading( dev );
 800140a:	68f8      	ldr	r0, [r7, #12]
 800140c:	f000 f99b 	bl	8001746 <LIS2MDL_SetRefHeading>
	}

	return errorNum;
 8001410:	7dfb      	ldrb	r3, [r7, #23]

}
 8001412:	4618      	mov	r0, r3
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40020000 	.word	0x40020000

08001420 <LIS2MDL_ReadCompass>:

	return status;
}

HAL_StatusTypeDef LIS2MDL_ReadCompass( LIS2MDL *dev )
{
 8001420:	b5b0      	push	{r4, r5, r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;

	status = LIS2MDL_GetData( dev );
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f000 f853 	bl	80014d4 <LIS2MDL_GetData>
 800142e:	4603      	mov	r3, r0
 8001430:	73fb      	strb	r3, [r7, #15]

	float fheading = atan2(dev->compass[1],dev->compass[0])*(180/M_PI);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff f893 	bl	8000564 <__aeabi_i2d>
 800143e:	4604      	mov	r4, r0
 8001440:	460d      	mov	r5, r1
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f88b 	bl	8000564 <__aeabi_i2d>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	ec43 2b11 	vmov	d1, r2, r3
 8001456:	ec45 4b10 	vmov	d0, r4, r5
 800145a:	f00c f9ff 	bl	800d85c <atan2>
 800145e:	ec51 0b10 	vmov	r0, r1, d0
 8001462:	a31a      	add	r3, pc, #104	; (adr r3, 80014cc <LIS2MDL_ReadCompass+0xac>)
 8001464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001468:	f7ff f8e6 	bl	8000638 <__aeabi_dmul>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4610      	mov	r0, r2
 8001472:	4619      	mov	r1, r3
 8001474:	f7ff fbb8 	bl	8000be8 <__aeabi_d2f>
 8001478:	4603      	mov	r3, r0
 800147a:	60bb      	str	r3, [r7, #8]

	if (fheading < 0)
 800147c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001480:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001488:	d50d      	bpl.n	80014a6 <LIS2MDL_ReadCompass+0x86>
		dev->heading = (uint16_t) (fheading + 360);
 800148a:	edd7 7a02 	vldr	s15, [r7, #8]
 800148e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80014c8 <LIS2MDL_ReadCompass+0xa8>
 8001492:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800149a:	ee17 3a90 	vmov	r3, s15
 800149e:	b29a      	uxth	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	815a      	strh	r2, [r3, #10]
 80014a4:	e008      	b.n	80014b8 <LIS2MDL_ReadCompass+0x98>
	else
		dev->heading = (uint16_t) fheading;
 80014a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80014aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014ae:	ee17 3a90 	vmov	r3, s15
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	815a      	strh	r2, [r3, #10]

	return status;
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bdb0      	pop	{r4, r5, r7, pc}
 80014c2:	bf00      	nop
 80014c4:	f3af 8000 	nop.w
 80014c8:	43b40000 	.word	0x43b40000
 80014cc:	1a63c1f8 	.word	0x1a63c1f8
 80014d0:	404ca5dc 	.word	0x404ca5dc

080014d4 <LIS2MDL_GetData>:
/*
 * HIGH-LEVEL-FUNCTIONS
 */

HAL_StatusTypeDef LIS2MDL_GetData( LIS2MDL *dev )
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	uint8_t regData[6];

	HAL_StatusTypeDef status;

	regData[0] = 0x81;
 80014dc:	2381      	movs	r3, #129	; 0x81
 80014de:	723b      	strb	r3, [r7, #8]

	LIS2MDL_WriteRegister(dev, LIS2MDL_CFG_REG_A, regData);
 80014e0:	f107 0308 	add.w	r3, r7, #8
 80014e4:	461a      	mov	r2, r3
 80014e6:	2160      	movs	r1, #96	; 0x60
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 f96d 	bl	80017c8 <LIS2MDL_WriteRegister>

//	uint8_t data_ready_flag = 0;

	do
	{
		status = LIS2MDL_ReadRegister(dev, LIS2MDL_STATUS_REG, regData);
 80014ee:	f107 0308 	add.w	r3, r7, #8
 80014f2:	461a      	mov	r2, r3
 80014f4:	2167      	movs	r1, #103	; 0x67
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 f9a0 	bl	800183c <LIS2MDL_ReadRegister>
 80014fc:	4603      	mov	r3, r0
 80014fe:	73fb      	strb	r3, [r7, #15]
	}
	while (!((regData[0]>>3) & 1));
 8001500:	7a3b      	ldrb	r3, [r7, #8]
 8001502:	08db      	lsrs	r3, r3, #3
 8001504:	b2db      	uxtb	r3, r3
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0ef      	beq.n	80014ee <LIS2MDL_GetData+0x1a>

	status = LIS2MDL_ReadRegisters(dev, LIS2MDL_OUTX_L_REG, regData, 6);
 800150e:	f107 0208 	add.w	r2, r7, #8
 8001512:	2306      	movs	r3, #6
 8001514:	2168      	movs	r1, #104	; 0x68
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f000 f9ab 	bl	8001872 <LIS2MDL_ReadRegisters>
 800151c:	4603      	mov	r3, r0
 800151e:	73fb      	strb	r3, [r7, #15]

	dev->compass[0] = ((regData[1] << 8) | regData[0]);
 8001520:	7a7b      	ldrb	r3, [r7, #9]
 8001522:	021b      	lsls	r3, r3, #8
 8001524:	b21a      	sxth	r2, r3
 8001526:	7a3b      	ldrb	r3, [r7, #8]
 8001528:	b21b      	sxth	r3, r3
 800152a:	4313      	orrs	r3, r2
 800152c:	b21a      	sxth	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	809a      	strh	r2, [r3, #4]

	dev->compass[1] = ((regData[3] << 8) | regData[2]);
 8001532:	7afb      	ldrb	r3, [r7, #11]
 8001534:	021b      	lsls	r3, r3, #8
 8001536:	b21a      	sxth	r2, r3
 8001538:	7abb      	ldrb	r3, [r7, #10]
 800153a:	b21b      	sxth	r3, r3
 800153c:	4313      	orrs	r3, r2
 800153e:	b21a      	sxth	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	80da      	strh	r2, [r3, #6]

	dev->compass[2] = ((regData[5] << 8) | regData[4]);
 8001544:	7b7b      	ldrb	r3, [r7, #13]
 8001546:	021b      	lsls	r3, r3, #8
 8001548:	b21a      	sxth	r2, r3
 800154a:	7b3b      	ldrb	r3, [r7, #12]
 800154c:	b21b      	sxth	r3, r3
 800154e:	4313      	orrs	r3, r2
 8001550:	b21a      	sxth	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	811a      	strh	r2, [r3, #8]

	return status;
 8001556:	7bfb      	ldrb	r3, [r7, #15]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <LIS2MDL_SetOffsets>:

HAL_StatusTypeDef LIS2MDL_SetOffsets( LIS2MDL *dev )
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	uint8_t offsets[6];

	for (uint8_t i = 0; i < 2; i++)
 8001568:	2300      	movs	r3, #0
 800156a:	73fb      	strb	r3, [r7, #15]
 800156c:	e01d      	b.n	80015aa <LIS2MDL_SetOffsets+0x4a>
	{
		offsets[i*2] = dev->offsets[i] & 0x00FF;
 800156e:	7bfa      	ldrb	r2, [r7, #15]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	320c      	adds	r2, #12
 8001574:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 8001578:	7bfb      	ldrb	r3, [r7, #15]
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	b2d2      	uxtb	r2, r2
 800157e:	3310      	adds	r3, #16
 8001580:	443b      	add	r3, r7
 8001582:	f803 2c08 	strb.w	r2, [r3, #-8]
		offsets[(i*2)+1] = (dev->offsets[i]>>8) & 0x00FF;
 8001586:	7bfa      	ldrb	r2, [r7, #15]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	320c      	adds	r2, #12
 800158c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001590:	121b      	asrs	r3, r3, #8
 8001592:	b21a      	sxth	r2, r3
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	3301      	adds	r3, #1
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	3310      	adds	r3, #16
 800159e:	443b      	add	r3, r7
 80015a0:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (uint8_t i = 0; i < 2; i++)
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	3301      	adds	r3, #1
 80015a8:	73fb      	strb	r3, [r7, #15]
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d9de      	bls.n	800156e <LIS2MDL_SetOffsets+0xe>
	}
	return LIS2MDL_WriteRegisters(dev, LIS2MDL_OFFSET_X_REG_L, offsets, 6); // Write data to address
 80015b0:	f107 0208 	add.w	r2, r7, #8
 80015b4:	2306      	movs	r3, #6
 80015b6:	2145      	movs	r1, #69	; 0x45
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f000 f920 	bl	80017fe <LIS2MDL_WriteRegisters>
 80015be:	4603      	mov	r3, r0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <LIS2MDL_CalibrateCompass>:

HAL_StatusTypeDef LIS2MDL_CalibrateCompass( LIS2MDL *dev )
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < 3; i++)
 80015d0:	2300      	movs	r3, #0
 80015d2:	73fb      	strb	r3, [r7, #15]
 80015d4:	e008      	b.n	80015e8 <LIS2MDL_CalibrateCompass+0x20>
	{
		dev->offsets[i] = 0;
 80015d6:	7bfa      	ldrb	r2, [r7, #15]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	320c      	adds	r2, #12
 80015dc:	2100      	movs	r1, #0
 80015de:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (uint8_t i = 0; i < 3; i++)
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	3301      	adds	r3, #1
 80015e6:	73fb      	strb	r3, [r7, #15]
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d9f3      	bls.n	80015d6 <LIS2MDL_CalibrateCompass+0xe>
	}

	LIS2MDL_SetOffsets( dev );
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff ffb6 	bl	8001560 <LIS2MDL_SetOffsets>

	LIS2MDL_GetData( dev );
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff ff6d 	bl	80014d4 <LIS2MDL_GetData>

	LIS2MDL_GetData( dev );
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff ff6a 	bl	80014d4 <LIS2MDL_GetData>

	for( uint8_t i = 0; i < 3; i++ )
 8001600:	2300      	movs	r3, #0
 8001602:	73bb      	strb	r3, [r7, #14]
 8001604:	e01d      	b.n	8001642 <LIS2MDL_CalibrateCompass+0x7a>
	{
		dev->compass_max[i] = dev->compass[i];
 8001606:	7bbb      	ldrb	r3, [r7, #14]
 8001608:	7bb9      	ldrb	r1, [r7, #14]
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	4413      	add	r3, r2
 8001610:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	1d0b      	adds	r3, r1, #4
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	4413      	add	r3, r2
 800161c:	4602      	mov	r2, r0
 800161e:	809a      	strh	r2, [r3, #4]
		dev->compass_min[i] = dev->compass[i];
 8001620:	7bbb      	ldrb	r3, [r7, #14]
 8001622:	7bb9      	ldrb	r1, [r7, #14]
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	4413      	add	r3, r2
 800162a:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	f101 0308 	add.w	r3, r1, #8
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	4413      	add	r3, r2
 8001638:	4602      	mov	r2, r0
 800163a:	805a      	strh	r2, [r3, #2]
	for( uint8_t i = 0; i < 3; i++ )
 800163c:	7bbb      	ldrb	r3, [r7, #14]
 800163e:	3301      	adds	r3, #1
 8001640:	73bb      	strb	r3, [r7, #14]
 8001642:	7bbb      	ldrb	r3, [r7, #14]
 8001644:	2b02      	cmp	r3, #2
 8001646:	d9de      	bls.n	8001606 <LIS2MDL_CalibrateCompass+0x3e>
	}

	uint32_t startTime = HAL_GetTick();
 8001648:	f002 fca0 	bl	8003f8c <HAL_GetTick>
 800164c:	60b8      	str	r0, [r7, #8]

	while (HAL_GetTick() - startTime < 20000){
 800164e:	e047      	b.n	80016e0 <LIS2MDL_CalibrateCompass+0x118>

		LIS2MDL_GetData( dev );
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff ff3f 	bl	80014d4 <LIS2MDL_GetData>

		for( uint8_t i = 0; i < 3; i++ )
 8001656:	2300      	movs	r3, #0
 8001658:	737b      	strb	r3, [r7, #13]
 800165a:	e03b      	b.n	80016d4 <LIS2MDL_CalibrateCompass+0x10c>
		{
			// UPDATE MAX VALUES
			if ( dev->compass[i] > dev->compass_max[i] )
 800165c:	7b7b      	ldrb	r3, [r7, #13]
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	4413      	add	r3, r2
 8001664:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001668:	7b7b      	ldrb	r3, [r7, #13]
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	3304      	adds	r3, #4
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	440b      	add	r3, r1
 8001672:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001676:	429a      	cmp	r2, r3
 8001678:	dd0c      	ble.n	8001694 <LIS2MDL_CalibrateCompass+0xcc>
			{
				dev->compass_max[i] = dev->compass[i];
 800167a:	7b7b      	ldrb	r3, [r7, #13]
 800167c:	7b79      	ldrb	r1, [r7, #13]
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	4413      	add	r3, r2
 8001684:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	1d0b      	adds	r3, r1, #4
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	4413      	add	r3, r2
 8001690:	4602      	mov	r2, r0
 8001692:	809a      	strh	r2, [r3, #4]
			}
			// UPDATE MIN VALUES
			if ( dev->compass[i] < dev->compass_min[i] )
 8001694:	7b7b      	ldrb	r3, [r7, #13]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	4413      	add	r3, r2
 800169c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80016a0:	7b7b      	ldrb	r3, [r7, #13]
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	3308      	adds	r3, #8
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	440b      	add	r3, r1
 80016aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	da0d      	bge.n	80016ce <LIS2MDL_CalibrateCompass+0x106>
			{
				dev->compass_min[i] = dev->compass[i];
 80016b2:	7b7b      	ldrb	r3, [r7, #13]
 80016b4:	7b79      	ldrb	r1, [r7, #13]
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	4413      	add	r3, r2
 80016bc:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	f101 0308 	add.w	r3, r1, #8
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	4413      	add	r3, r2
 80016ca:	4602      	mov	r2, r0
 80016cc:	805a      	strh	r2, [r3, #2]
		for( uint8_t i = 0; i < 3; i++ )
 80016ce:	7b7b      	ldrb	r3, [r7, #13]
 80016d0:	3301      	adds	r3, #1
 80016d2:	737b      	strb	r3, [r7, #13]
 80016d4:	7b7b      	ldrb	r3, [r7, #13]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d9c0      	bls.n	800165c <LIS2MDL_CalibrateCompass+0x94>
			}
		}
		HAL_Delay(10);
 80016da:	200a      	movs	r0, #10
 80016dc:	f002 fc62 	bl	8003fa4 <HAL_Delay>
	while (HAL_GetTick() - startTime < 20000){
 80016e0:	f002 fc54 	bl	8003f8c <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d9ae      	bls.n	8001650 <LIS2MDL_CalibrateCompass+0x88>
	}

	for (uint8_t i = 0; i < 3; i++)
 80016f2:	2300      	movs	r3, #0
 80016f4:	733b      	strb	r3, [r7, #12]
 80016f6:	e01b      	b.n	8001730 <LIS2MDL_CalibrateCompass+0x168>
	{
		dev->offsets[i] = ( dev->compass_max[i] + dev->compass_min[i] ) / 2;
 80016f8:	7b3b      	ldrb	r3, [r7, #12]
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	3304      	adds	r3, #4
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	4413      	add	r3, r2
 8001702:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001706:	4619      	mov	r1, r3
 8001708:	7b3b      	ldrb	r3, [r7, #12]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	3308      	adds	r3, #8
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	4413      	add	r3, r2
 8001712:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001716:	440b      	add	r3, r1
 8001718:	0fda      	lsrs	r2, r3, #31
 800171a:	4413      	add	r3, r2
 800171c:	105b      	asrs	r3, r3, #1
 800171e:	7b3a      	ldrb	r2, [r7, #12]
 8001720:	b219      	sxth	r1, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	320c      	adds	r2, #12
 8001726:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (uint8_t i = 0; i < 3; i++)
 800172a:	7b3b      	ldrb	r3, [r7, #12]
 800172c:	3301      	adds	r3, #1
 800172e:	733b      	strb	r3, [r7, #12]
 8001730:	7b3b      	ldrb	r3, [r7, #12]
 8001732:	2b02      	cmp	r3, #2
 8001734:	d9e0      	bls.n	80016f8 <LIS2MDL_CalibrateCompass+0x130>
	}

	LIS2MDL_SetOffsets( dev );
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff ff12 	bl	8001560 <LIS2MDL_SetOffsets>

	return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <LIS2MDL_SetRefHeading>:

void LIS2MDL_SetRefHeading( LIS2MDL *dev )
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
	LIS2MDL_ReadCompass( dev );
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff fe66 	bl	8001420 <LIS2MDL_ReadCompass>
	dev->ref_heading = dev->heading;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	895a      	ldrh	r2, [r3, #10]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	83da      	strh	r2, [r3, #30]
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <LIS2MDL_SETUP>:

void LIS2MDL_SETUP( LIS2MDL *dev, uint8_t *button_flag )
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
	while (!*button_flag)
 800176e:	e007      	b.n	8001780 <LIS2MDL_SETUP+0x1c>
	{
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001770:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001774:	4813      	ldr	r0, [pc, #76]	; (80017c4 <LIS2MDL_SETUP+0x60>)
 8001776:	f003 fd70 	bl	800525a <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 800177a:	2032      	movs	r0, #50	; 0x32
 800177c:	f002 fc12 	bl	8003fa4 <HAL_Delay>
	while (!*button_flag)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0f3      	beq.n	8001770 <LIS2MDL_SETUP+0xc>
	}
	*button_flag = 0;
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]
	LIS2MDL_CalibrateCompass( dev );
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff ff1a 	bl	80015c8 <LIS2MDL_CalibrateCompass>

	while (!*button_flag)
 8001794:	e007      	b.n	80017a6 <LIS2MDL_SETUP+0x42>
	{
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001796:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800179a:	480a      	ldr	r0, [pc, #40]	; (80017c4 <LIS2MDL_SETUP+0x60>)
 800179c:	f003 fd5d 	bl	800525a <HAL_GPIO_TogglePin>
		HAL_Delay(25);
 80017a0:	2019      	movs	r0, #25
 80017a2:	f002 fbff 	bl	8003fa4 <HAL_Delay>
	while (!*button_flag)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0f3      	beq.n	8001796 <LIS2MDL_SETUP+0x32>
	}
	*button_flag = 0;
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	2200      	movs	r2, #0
 80017b2:	701a      	strb	r2, [r3, #0]
	LIS2MDL_SetRefHeading( dev );
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff ffc6 	bl	8001746 <LIS2MDL_SetRefHeading>
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40020000 	.word	0x40020000

080017c8 <LIS2MDL_WriteRegister>:
/*
 * LOW-LEVEL FUNCTIONS
 */

HAL_StatusTypeDef LIS2MDL_WriteRegister( LIS2MDL *dev, uint8_t reg, uint8_t *data )
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af04      	add	r7, sp, #16
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	460b      	mov	r3, r1
 80017d2:	607a      	str	r2, [r7, #4]
 80017d4:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Write( dev->i2cHandle, LIS2MDL_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6818      	ldr	r0, [r3, #0]
 80017da:	7afb      	ldrb	r3, [r7, #11]
 80017dc:	b29a      	uxth	r2, r3
 80017de:	f04f 33ff 	mov.w	r3, #4294967295
 80017e2:	9302      	str	r3, [sp, #8]
 80017e4:	2301      	movs	r3, #1
 80017e6:	9301      	str	r3, [sp, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	2301      	movs	r3, #1
 80017ee:	213c      	movs	r1, #60	; 0x3c
 80017f0:	f003 feb6 	bl	8005560 <HAL_I2C_Mem_Write>
 80017f4:	4603      	mov	r3, r0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <LIS2MDL_WriteRegisters>:

HAL_StatusTypeDef LIS2MDL_WriteRegisters( LIS2MDL *dev, uint8_t reg, uint8_t *data, uint8_t length )
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b088      	sub	sp, #32
 8001802:	af04      	add	r7, sp, #16
 8001804:	60f8      	str	r0, [r7, #12]
 8001806:	607a      	str	r2, [r7, #4]
 8001808:	461a      	mov	r2, r3
 800180a:	460b      	mov	r3, r1
 800180c:	72fb      	strb	r3, [r7, #11]
 800180e:	4613      	mov	r3, r2
 8001810:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Write( dev->i2cHandle, LIS2MDL_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY );
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6818      	ldr	r0, [r3, #0]
 8001816:	7afb      	ldrb	r3, [r7, #11]
 8001818:	b29a      	uxth	r2, r3
 800181a:	7abb      	ldrb	r3, [r7, #10]
 800181c:	b29b      	uxth	r3, r3
 800181e:	f04f 31ff 	mov.w	r1, #4294967295
 8001822:	9102      	str	r1, [sp, #8]
 8001824:	9301      	str	r3, [sp, #4]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	2301      	movs	r3, #1
 800182c:	213c      	movs	r1, #60	; 0x3c
 800182e:	f003 fe97 	bl	8005560 <HAL_I2C_Mem_Write>
 8001832:	4603      	mov	r3, r0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <LIS2MDL_ReadRegister>:

HAL_StatusTypeDef LIS2MDL_ReadRegister( LIS2MDL *dev, uint8_t reg, uint8_t *data  )
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b088      	sub	sp, #32
 8001840:	af04      	add	r7, sp, #16
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	460b      	mov	r3, r1
 8001846:	607a      	str	r2, [r7, #4]
 8001848:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read( dev->i2cHandle, LIS2MDL_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6818      	ldr	r0, [r3, #0]
 800184e:	7afb      	ldrb	r3, [r7, #11]
 8001850:	b29a      	uxth	r2, r3
 8001852:	f04f 33ff 	mov.w	r3, #4294967295
 8001856:	9302      	str	r3, [sp, #8]
 8001858:	2301      	movs	r3, #1
 800185a:	9301      	str	r3, [sp, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	2301      	movs	r3, #1
 8001862:	213c      	movs	r1, #60	; 0x3c
 8001864:	f003 ff76 	bl	8005754 <HAL_I2C_Mem_Read>
 8001868:	4603      	mov	r3, r0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <LIS2MDL_ReadRegisters>:

HAL_StatusTypeDef LIS2MDL_ReadRegisters( LIS2MDL *dev, uint8_t reg, uint8_t *data, uint8_t length )
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b088      	sub	sp, #32
 8001876:	af04      	add	r7, sp, #16
 8001878:	60f8      	str	r0, [r7, #12]
 800187a:	607a      	str	r2, [r7, #4]
 800187c:	461a      	mov	r2, r3
 800187e:	460b      	mov	r3, r1
 8001880:	72fb      	strb	r3, [r7, #11]
 8001882:	4613      	mov	r3, r2
 8001884:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read( dev->i2cHandle, LIS2MDL_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY );
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6818      	ldr	r0, [r3, #0]
 800188a:	7afb      	ldrb	r3, [r7, #11]
 800188c:	b29a      	uxth	r2, r3
 800188e:	7abb      	ldrb	r3, [r7, #10]
 8001890:	b29b      	uxth	r3, r3
 8001892:	f04f 31ff 	mov.w	r1, #4294967295
 8001896:	9102      	str	r1, [sp, #8]
 8001898:	9301      	str	r3, [sp, #4]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	2301      	movs	r3, #1
 80018a0:	213c      	movs	r1, #60	; 0x3c
 80018a2:	f003 ff57 	bl	8005754 <HAL_I2C_Mem_Read>
 80018a6:	4603      	mov	r3, r0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <SD_Init>:
/*
 * INITIALISATION
 */

uint8_t SD_Init( SD *dev, char* filename, uint8_t mount )
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	4613      	mov	r3, r2
 80018bc:	71fb      	strb	r3, [r7, #7]
	// NB only mount SD card once
	// No check for whether SD card is present
	uint8_t let = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	75fb      	strb	r3, [r7, #23]
	while ( filename[let] != 0 && let < MAX_FILENAME_LEN )
 80018c2:	e00e      	b.n	80018e2 <SD_Init+0x32>
	{
		dev->filename[let] = filename[let];
 80018c4:	7dfb      	ldrb	r3, [r7, #23]
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	441a      	add	r2, r3
 80018ca:	7dfb      	ldrb	r3, [r7, #23]
 80018cc:	7811      	ldrb	r1, [r2, #0]
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	4413      	add	r3, r2
 80018d2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80018d6:	3310      	adds	r3, #16
 80018d8:	460a      	mov	r2, r1
 80018da:	701a      	strb	r2, [r3, #0]
		let++;
 80018dc:	7dfb      	ldrb	r3, [r7, #23]
 80018de:	3301      	adds	r3, #1
 80018e0:	75fb      	strb	r3, [r7, #23]
	while ( filename[let] != 0 && let < MAX_FILENAME_LEN )
 80018e2:	7dfb      	ldrb	r3, [r7, #23]
 80018e4:	68ba      	ldr	r2, [r7, #8]
 80018e6:	4413      	add	r3, r2
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d002      	beq.n	80018f4 <SD_Init+0x44>
 80018ee:	7dfb      	ldrb	r3, [r7, #23]
 80018f0:	2b1d      	cmp	r3, #29
 80018f2:	d9e7      	bls.n	80018c4 <SD_Init+0x14>
	}
	if (mount != 0)
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <SD_Init+0x52>
	{
		return SD_Mount();
 80018fa:	f000 f807 	bl	800190c <SD_Mount>
 80018fe:	4603      	mov	r3, r0
 8001900:	e000      	b.n	8001904 <SD_Init+0x54>
	}

	return 0;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <SD_Mount>:

uint8_t SD_Mount()
{
 800190c:	b580      	push	{r7, lr}
 800190e:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8001912:	af00      	add	r7, sp, #0
	FRESULT fresult;
	FATFS fs;
	fresult = f_mount(&fs, "", 0);
 8001914:	f107 0320 	add.w	r3, r7, #32
 8001918:	3b1c      	subs	r3, #28
 800191a:	2200      	movs	r2, #0
 800191c:	490c      	ldr	r1, [pc, #48]	; (8001950 <SD_Mount+0x44>)
 800191e:	4618      	mov	r0, r3
 8001920:	f008 fa7c 	bl	8009e1c <f_mount>
 8001924:	4603      	mov	r3, r0
 8001926:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800192a:	f102 021f 	add.w	r2, r2, #31
 800192e:	7013      	strb	r3, [r2, #0]

	return fresult != FR_OK;
 8001930:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001934:	f103 031f 	add.w	r3, r3, #31
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	bf14      	ite	ne
 800193e:	2301      	movne	r3, #1
 8001940:	2300      	moveq	r3, #0
 8001942:	b2db      	uxtb	r3, r3
}
 8001944:	4618      	mov	r0, r3
 8001946:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	0800dd68 	.word	0x0800dd68

08001954 <SD_append>:

	return err;
}

uint8_t SD_append( SD *dev, char* buffer )
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
	uint8_t err = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	73fb      	strb	r3, [r7, #15]

	err += (f_open(&dev->fil, dev->filename, FA_OPEN_APPEND | FA_WRITE) != FR_OK);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800196a:	3310      	adds	r3, #16
 800196c:	2232      	movs	r2, #50	; 0x32
 800196e:	4619      	mov	r1, r3
 8001970:	f008 fa9a 	bl	8009ea8 <f_open>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	bf14      	ite	ne
 800197a:	2301      	movne	r3, #1
 800197c:	2300      	moveq	r3, #0
 800197e:	b2db      	uxtb	r3, r3
 8001980:	b2da      	uxtb	r2, r3
 8001982:	7bfb      	ldrb	r3, [r7, #15]
 8001984:	4413      	add	r3, r2
 8001986:	73fb      	strb	r3, [r7, #15]

	/* Writing text */
	err += (f_puts(buffer, &dev->fil) != FR_OK);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4619      	mov	r1, r3
 800198c:	6838      	ldr	r0, [r7, #0]
 800198e:	f008 ff0a 	bl	800a7a6 <f_puts>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	bf14      	ite	ne
 8001998:	2301      	movne	r3, #1
 800199a:	2300      	moveq	r3, #0
 800199c:	b2db      	uxtb	r3, r3
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
 80019a2:	4413      	add	r3, r2
 80019a4:	73fb      	strb	r3, [r7, #15]

	/* Close file */
	err += (f_close(&dev->fil) != FR_OK);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f008 fe5b 	bl	800a664 <f_close>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	bf14      	ite	ne
 80019b4:	2301      	movne	r3, #1
 80019b6:	2300      	moveq	r3, #0
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
 80019be:	4413      	add	r3, r2
 80019c0:	73fb      	strb	r3, [r7, #15]

	return err;
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <SELECT>:
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	2200      	movs	r2, #0
 80019d2:	2110      	movs	r1, #16
 80019d4:	4803      	ldr	r0, [pc, #12]	; (80019e4 <SELECT+0x18>)
 80019d6:	f003 fc27 	bl	8005228 <HAL_GPIO_WritePin>
 80019da:	2001      	movs	r0, #1
 80019dc:	f002 fae2 	bl	8003fa4 <HAL_Delay>
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40020000 	.word	0x40020000

080019e8 <DESELECT>:
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	2201      	movs	r2, #1
 80019ee:	2110      	movs	r1, #16
 80019f0:	4803      	ldr	r0, [pc, #12]	; (8001a00 <DESELECT+0x18>)
 80019f2:	f003 fc19 	bl	8005228 <HAL_GPIO_WritePin>
 80019f6:	2001      	movs	r0, #1
 80019f8:	f002 fad4 	bl	8003fa4 <HAL_Delay>
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40020000 	.word	0x40020000

08001a04 <SPI_TxByte>:
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
 8001a0e:	bf00      	nop
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <SPI_TxByte+0x30>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d1f8      	bne.n	8001a10 <SPI_TxByte+0xc>
 8001a1e:	1df9      	adds	r1, r7, #7
 8001a20:	2364      	movs	r3, #100	; 0x64
 8001a22:	2201      	movs	r2, #1
 8001a24:	4803      	ldr	r0, [pc, #12]	; (8001a34 <SPI_TxByte+0x30>)
 8001a26:	f005 f944 	bl	8006cb2 <HAL_SPI_Transmit>
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000290 	.word	0x20000290

08001a38 <SPI_TxBuffer>:
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	807b      	strh	r3, [r7, #2]
 8001a44:	bf00      	nop
 8001a46:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <SPI_TxBuffer+0x30>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d1f8      	bne.n	8001a46 <SPI_TxBuffer+0xe>
 8001a54:	887a      	ldrh	r2, [r7, #2]
 8001a56:	2364      	movs	r3, #100	; 0x64
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	4803      	ldr	r0, [pc, #12]	; (8001a68 <SPI_TxBuffer+0x30>)
 8001a5c:	f005 f929 	bl	8006cb2 <HAL_SPI_Transmit>
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000290 	.word	0x20000290

08001a6c <SPI_RxByte>:
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af02      	add	r7, sp, #8
 8001a72:	23ff      	movs	r3, #255	; 0xff
 8001a74:	71fb      	strb	r3, [r7, #7]
 8001a76:	bf00      	nop
 8001a78:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <SPI_RxByte+0x34>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d1f8      	bne.n	8001a78 <SPI_RxByte+0xc>
 8001a86:	1dba      	adds	r2, r7, #6
 8001a88:	1df9      	adds	r1, r7, #7
 8001a8a:	2364      	movs	r3, #100	; 0x64
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	2301      	movs	r3, #1
 8001a90:	4803      	ldr	r0, [pc, #12]	; (8001aa0 <SPI_RxByte+0x34>)
 8001a92:	f005 fa4a 	bl	8006f2a <HAL_SPI_TransmitReceive>
 8001a96:	79bb      	ldrb	r3, [r7, #6]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20000290 	.word	0x20000290

08001aa4 <SPI_RxBytePtr>:
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	f7ff ffde 	bl	8001a6c <SPI_RxByte>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	701a      	strb	r2, [r3, #0]
 8001ab8:	bf00      	nop
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <SD_ReadyWait>:
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <SD_ReadyWait+0x30>)
 8001ac8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001acc:	801a      	strh	r2, [r3, #0]
 8001ace:	f7ff ffcd 	bl	8001a6c <SPI_RxByte>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	2bff      	cmp	r3, #255	; 0xff
 8001ada:	d004      	beq.n	8001ae6 <SD_ReadyWait+0x26>
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <SD_ReadyWait+0x30>)
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f3      	bne.n	8001ace <SD_ReadyWait+0xe>
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	2000360e 	.word	0x2000360e

08001af4 <SD_PowerOn>:
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	f7ff ff72 	bl	80019e8 <DESELECT>
 8001b04:	2300      	movs	r3, #0
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	e005      	b.n	8001b16 <SD_PowerOn+0x22>
 8001b0a:	20ff      	movs	r0, #255	; 0xff
 8001b0c:	f7ff ff7a 	bl	8001a04 <SPI_TxByte>
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	3301      	adds	r3, #1
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	2b09      	cmp	r3, #9
 8001b1a:	ddf6      	ble.n	8001b0a <SD_PowerOn+0x16>
 8001b1c:	f7ff ff56 	bl	80019cc <SELECT>
 8001b20:	2340      	movs	r3, #64	; 0x40
 8001b22:	703b      	strb	r3, [r7, #0]
 8001b24:	2300      	movs	r3, #0
 8001b26:	707b      	strb	r3, [r7, #1]
 8001b28:	2300      	movs	r3, #0
 8001b2a:	70bb      	strb	r3, [r7, #2]
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	70fb      	strb	r3, [r7, #3]
 8001b30:	2300      	movs	r3, #0
 8001b32:	713b      	strb	r3, [r7, #4]
 8001b34:	2395      	movs	r3, #149	; 0x95
 8001b36:	717b      	strb	r3, [r7, #5]
 8001b38:	463b      	mov	r3, r7
 8001b3a:	2106      	movs	r1, #6
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff ff7b 	bl	8001a38 <SPI_TxBuffer>
 8001b42:	e002      	b.n	8001b4a <SD_PowerOn+0x56>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	f7ff ff8f 	bl	8001a6c <SPI_RxByte>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d002      	beq.n	8001b5a <SD_PowerOn+0x66>
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f4      	bne.n	8001b44 <SD_PowerOn+0x50>
 8001b5a:	f7ff ff45 	bl	80019e8 <DESELECT>
 8001b5e:	20ff      	movs	r0, #255	; 0xff
 8001b60:	f7ff ff50 	bl	8001a04 <SPI_TxByte>
 8001b64:	4b03      	ldr	r3, [pc, #12]	; (8001b74 <SD_PowerOn+0x80>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	701a      	strb	r2, [r3, #0]
 8001b6a:	bf00      	nop
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000211 	.word	0x20000211

08001b78 <SD_PowerOff>:
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	4b03      	ldr	r3, [pc, #12]	; (8001b8c <SD_PowerOff+0x14>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]
 8001b82:	bf00      	nop
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	20000211 	.word	0x20000211

08001b90 <SD_CheckPower>:
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <SD_CheckPower+0x14>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20000211 	.word	0x20000211

08001ba8 <SD_RxDataBlock>:
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
 8001bb2:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <SD_RxDataBlock+0x5c>)
 8001bb4:	22c8      	movs	r2, #200	; 0xc8
 8001bb6:	801a      	strh	r2, [r3, #0]
 8001bb8:	f7ff ff58 	bl	8001a6c <SPI_RxByte>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	73fb      	strb	r3, [r7, #15]
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	2bff      	cmp	r3, #255	; 0xff
 8001bc4:	d104      	bne.n	8001bd0 <SD_RxDataBlock+0x28>
 8001bc6:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <SD_RxDataBlock+0x5c>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1f3      	bne.n	8001bb8 <SD_RxDataBlock+0x10>
 8001bd0:	7bfb      	ldrb	r3, [r7, #15]
 8001bd2:	2bfe      	cmp	r3, #254	; 0xfe
 8001bd4:	d001      	beq.n	8001bda <SD_RxDataBlock+0x32>
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	e00f      	b.n	8001bfa <SD_RxDataBlock+0x52>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	1c5a      	adds	r2, r3, #1
 8001bde:	607a      	str	r2, [r7, #4]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ff5f 	bl	8001aa4 <SPI_RxBytePtr>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	1e5a      	subs	r2, r3, #1
 8001bea:	603a      	str	r2, [r7, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1f4      	bne.n	8001bda <SD_RxDataBlock+0x32>
 8001bf0:	f7ff ff3c 	bl	8001a6c <SPI_RxByte>
 8001bf4:	f7ff ff3a 	bl	8001a6c <SPI_RxByte>
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	2000360d 	.word	0x2000360d

08001c08 <SD_TxDataBlock>:
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	70fb      	strb	r3, [r7, #3]
 8001c14:	2300      	movs	r3, #0
 8001c16:	73bb      	strb	r3, [r7, #14]
 8001c18:	f7ff ff52 	bl	8001ac0 <SD_ReadyWait>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2bff      	cmp	r3, #255	; 0xff
 8001c20:	d001      	beq.n	8001c26 <SD_TxDataBlock+0x1e>
 8001c22:	2300      	movs	r3, #0
 8001c24:	e02f      	b.n	8001c86 <SD_TxDataBlock+0x7e>
 8001c26:	78fb      	ldrb	r3, [r7, #3]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff feeb 	bl	8001a04 <SPI_TxByte>
 8001c2e:	78fb      	ldrb	r3, [r7, #3]
 8001c30:	2bfd      	cmp	r3, #253	; 0xfd
 8001c32:	d020      	beq.n	8001c76 <SD_TxDataBlock+0x6e>
 8001c34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7ff fefd 	bl	8001a38 <SPI_TxBuffer>
 8001c3e:	f7ff ff15 	bl	8001a6c <SPI_RxByte>
 8001c42:	f7ff ff13 	bl	8001a6c <SPI_RxByte>
 8001c46:	e00b      	b.n	8001c60 <SD_TxDataBlock+0x58>
 8001c48:	f7ff ff10 	bl	8001a6c <SPI_RxByte>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	73fb      	strb	r3, [r7, #15]
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
 8001c52:	f003 031f 	and.w	r3, r3, #31
 8001c56:	2b05      	cmp	r3, #5
 8001c58:	d006      	beq.n	8001c68 <SD_TxDataBlock+0x60>
 8001c5a:	7bbb      	ldrb	r3, [r7, #14]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	73bb      	strb	r3, [r7, #14]
 8001c60:	7bbb      	ldrb	r3, [r7, #14]
 8001c62:	2b40      	cmp	r3, #64	; 0x40
 8001c64:	d9f0      	bls.n	8001c48 <SD_TxDataBlock+0x40>
 8001c66:	e000      	b.n	8001c6a <SD_TxDataBlock+0x62>
 8001c68:	bf00      	nop
 8001c6a:	bf00      	nop
 8001c6c:	f7ff fefe 	bl	8001a6c <SPI_RxByte>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0fa      	beq.n	8001c6c <SD_TxDataBlock+0x64>
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
 8001c78:	f003 031f 	and.w	r3, r3, #31
 8001c7c:	2b05      	cmp	r3, #5
 8001c7e:	d101      	bne.n	8001c84 <SD_TxDataBlock+0x7c>
 8001c80:	2301      	movs	r3, #1
 8001c82:	e000      	b.n	8001c86 <SD_TxDataBlock+0x7e>
 8001c84:	2300      	movs	r3, #0
 8001c86:	4618      	mov	r0, r3
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <SD_SendCmd>:
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b084      	sub	sp, #16
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	4603      	mov	r3, r0
 8001c96:	6039      	str	r1, [r7, #0]
 8001c98:	71fb      	strb	r3, [r7, #7]
 8001c9a:	f7ff ff11 	bl	8001ac0 <SD_ReadyWait>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2bff      	cmp	r3, #255	; 0xff
 8001ca2:	d001      	beq.n	8001ca8 <SD_SendCmd+0x1a>
 8001ca4:	23ff      	movs	r3, #255	; 0xff
 8001ca6:	e042      	b.n	8001d2e <SD_SendCmd+0xa0>
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff feaa 	bl	8001a04 <SPI_TxByte>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	0e1b      	lsrs	r3, r3, #24
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff fea4 	bl	8001a04 <SPI_TxByte>
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	0c1b      	lsrs	r3, r3, #16
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff fe9e 	bl	8001a04 <SPI_TxByte>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	0a1b      	lsrs	r3, r3, #8
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff fe98 	bl	8001a04 <SPI_TxByte>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff fe93 	bl	8001a04 <SPI_TxByte>
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	2b40      	cmp	r3, #64	; 0x40
 8001ce2:	d102      	bne.n	8001cea <SD_SendCmd+0x5c>
 8001ce4:	2395      	movs	r3, #149	; 0x95
 8001ce6:	73fb      	strb	r3, [r7, #15]
 8001ce8:	e007      	b.n	8001cfa <SD_SendCmd+0x6c>
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	2b48      	cmp	r3, #72	; 0x48
 8001cee:	d102      	bne.n	8001cf6 <SD_SendCmd+0x68>
 8001cf0:	2387      	movs	r3, #135	; 0x87
 8001cf2:	73fb      	strb	r3, [r7, #15]
 8001cf4:	e001      	b.n	8001cfa <SD_SendCmd+0x6c>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	73fb      	strb	r3, [r7, #15]
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff fe81 	bl	8001a04 <SPI_TxByte>
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	2b4c      	cmp	r3, #76	; 0x4c
 8001d06:	d101      	bne.n	8001d0c <SD_SendCmd+0x7e>
 8001d08:	f7ff feb0 	bl	8001a6c <SPI_RxByte>
 8001d0c:	230a      	movs	r3, #10
 8001d0e:	73bb      	strb	r3, [r7, #14]
 8001d10:	f7ff feac 	bl	8001a6c <SPI_RxByte>
 8001d14:	4603      	mov	r3, r0
 8001d16:	737b      	strb	r3, [r7, #13]
 8001d18:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	da05      	bge.n	8001d2c <SD_SendCmd+0x9e>
 8001d20:	7bbb      	ldrb	r3, [r7, #14]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	73bb      	strb	r3, [r7, #14]
 8001d26:	7bbb      	ldrb	r3, [r7, #14]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1f1      	bne.n	8001d10 <SD_SendCmd+0x82>
 8001d2c:	7b7b      	ldrb	r3, [r7, #13]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <SD_disk_initialize>:
 8001d38:	b590      	push	{r4, r7, lr}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	71fb      	strb	r3, [r7, #7]
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <SD_disk_initialize+0x14>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e0d6      	b.n	8001efa <SD_disk_initialize+0x1c2>
 8001d4c:	4b6d      	ldr	r3, [pc, #436]	; (8001f04 <SD_disk_initialize+0x1cc>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <SD_disk_initialize+0x2a>
 8001d5a:	4b6a      	ldr	r3, [pc, #424]	; (8001f04 <SD_disk_initialize+0x1cc>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	e0cb      	b.n	8001efa <SD_disk_initialize+0x1c2>
 8001d62:	f7ff fec7 	bl	8001af4 <SD_PowerOn>
 8001d66:	f7ff fe31 	bl	80019cc <SELECT>
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	73bb      	strb	r3, [r7, #14]
 8001d6e:	2100      	movs	r1, #0
 8001d70:	2040      	movs	r0, #64	; 0x40
 8001d72:	f7ff ff8c 	bl	8001c8e <SD_SendCmd>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	f040 80a6 	bne.w	8001eca <SD_disk_initialize+0x192>
 8001d7e:	4b62      	ldr	r3, [pc, #392]	; (8001f08 <SD_disk_initialize+0x1d0>)
 8001d80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d84:	801a      	strh	r2, [r3, #0]
 8001d86:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001d8a:	2048      	movs	r0, #72	; 0x48
 8001d8c:	f7ff ff7f 	bl	8001c8e <SD_SendCmd>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d158      	bne.n	8001e48 <SD_disk_initialize+0x110>
 8001d96:	2300      	movs	r3, #0
 8001d98:	73fb      	strb	r3, [r7, #15]
 8001d9a:	e00c      	b.n	8001db6 <SD_disk_initialize+0x7e>
 8001d9c:	7bfc      	ldrb	r4, [r7, #15]
 8001d9e:	f7ff fe65 	bl	8001a6c <SPI_RxByte>
 8001da2:	4603      	mov	r3, r0
 8001da4:	461a      	mov	r2, r3
 8001da6:	f104 0310 	add.w	r3, r4, #16
 8001daa:	443b      	add	r3, r7
 8001dac:	f803 2c08 	strb.w	r2, [r3, #-8]
 8001db0:	7bfb      	ldrb	r3, [r7, #15]
 8001db2:	3301      	adds	r3, #1
 8001db4:	73fb      	strb	r3, [r7, #15]
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	d9ef      	bls.n	8001d9c <SD_disk_initialize+0x64>
 8001dbc:	7abb      	ldrb	r3, [r7, #10]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	f040 8083 	bne.w	8001eca <SD_disk_initialize+0x192>
 8001dc4:	7afb      	ldrb	r3, [r7, #11]
 8001dc6:	2baa      	cmp	r3, #170	; 0xaa
 8001dc8:	d17f      	bne.n	8001eca <SD_disk_initialize+0x192>
 8001dca:	2100      	movs	r1, #0
 8001dcc:	2077      	movs	r0, #119	; 0x77
 8001dce:	f7ff ff5e 	bl	8001c8e <SD_SendCmd>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d807      	bhi.n	8001de8 <SD_disk_initialize+0xb0>
 8001dd8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001ddc:	2069      	movs	r0, #105	; 0x69
 8001dde:	f7ff ff56 	bl	8001c8e <SD_SendCmd>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d005      	beq.n	8001df4 <SD_disk_initialize+0xbc>
 8001de8:	4b47      	ldr	r3, [pc, #284]	; (8001f08 <SD_disk_initialize+0x1d0>)
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1eb      	bne.n	8001dca <SD_disk_initialize+0x92>
 8001df2:	e000      	b.n	8001df6 <SD_disk_initialize+0xbe>
 8001df4:	bf00      	nop
 8001df6:	4b44      	ldr	r3, [pc, #272]	; (8001f08 <SD_disk_initialize+0x1d0>)
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d064      	beq.n	8001eca <SD_disk_initialize+0x192>
 8001e00:	2100      	movs	r1, #0
 8001e02:	207a      	movs	r0, #122	; 0x7a
 8001e04:	f7ff ff43 	bl	8001c8e <SD_SendCmd>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d15d      	bne.n	8001eca <SD_disk_initialize+0x192>
 8001e0e:	2300      	movs	r3, #0
 8001e10:	73fb      	strb	r3, [r7, #15]
 8001e12:	e00c      	b.n	8001e2e <SD_disk_initialize+0xf6>
 8001e14:	7bfc      	ldrb	r4, [r7, #15]
 8001e16:	f7ff fe29 	bl	8001a6c <SPI_RxByte>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	f104 0310 	add.w	r3, r4, #16
 8001e22:	443b      	add	r3, r7
 8001e24:	f803 2c08 	strb.w	r2, [r3, #-8]
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	73fb      	strb	r3, [r7, #15]
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	2b03      	cmp	r3, #3
 8001e32:	d9ef      	bls.n	8001e14 <SD_disk_initialize+0xdc>
 8001e34:	7a3b      	ldrb	r3, [r7, #8]
 8001e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <SD_disk_initialize+0x10a>
 8001e3e:	230c      	movs	r3, #12
 8001e40:	e000      	b.n	8001e44 <SD_disk_initialize+0x10c>
 8001e42:	2304      	movs	r3, #4
 8001e44:	73bb      	strb	r3, [r7, #14]
 8001e46:	e040      	b.n	8001eca <SD_disk_initialize+0x192>
 8001e48:	2100      	movs	r1, #0
 8001e4a:	2077      	movs	r0, #119	; 0x77
 8001e4c:	f7ff ff1f 	bl	8001c8e <SD_SendCmd>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d808      	bhi.n	8001e68 <SD_disk_initialize+0x130>
 8001e56:	2100      	movs	r1, #0
 8001e58:	2069      	movs	r0, #105	; 0x69
 8001e5a:	f7ff ff18 	bl	8001c8e <SD_SendCmd>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d801      	bhi.n	8001e68 <SD_disk_initialize+0x130>
 8001e64:	2302      	movs	r3, #2
 8001e66:	e000      	b.n	8001e6a <SD_disk_initialize+0x132>
 8001e68:	2301      	movs	r3, #1
 8001e6a:	73bb      	strb	r3, [r7, #14]
 8001e6c:	7bbb      	ldrb	r3, [r7, #14]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d10e      	bne.n	8001e90 <SD_disk_initialize+0x158>
 8001e72:	2100      	movs	r1, #0
 8001e74:	2077      	movs	r0, #119	; 0x77
 8001e76:	f7ff ff0a 	bl	8001c8e <SD_SendCmd>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d80e      	bhi.n	8001e9e <SD_disk_initialize+0x166>
 8001e80:	2100      	movs	r1, #0
 8001e82:	2069      	movs	r0, #105	; 0x69
 8001e84:	f7ff ff03 	bl	8001c8e <SD_SendCmd>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d107      	bne.n	8001e9e <SD_disk_initialize+0x166>
 8001e8e:	e00d      	b.n	8001eac <SD_disk_initialize+0x174>
 8001e90:	2100      	movs	r1, #0
 8001e92:	2041      	movs	r0, #65	; 0x41
 8001e94:	f7ff fefb 	bl	8001c8e <SD_SendCmd>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d005      	beq.n	8001eaa <SD_disk_initialize+0x172>
 8001e9e:	4b1a      	ldr	r3, [pc, #104]	; (8001f08 <SD_disk_initialize+0x1d0>)
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1e1      	bne.n	8001e6c <SD_disk_initialize+0x134>
 8001ea8:	e000      	b.n	8001eac <SD_disk_initialize+0x174>
 8001eaa:	bf00      	nop
 8001eac:	4b16      	ldr	r3, [pc, #88]	; (8001f08 <SD_disk_initialize+0x1d0>)
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d007      	beq.n	8001ec6 <SD_disk_initialize+0x18e>
 8001eb6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001eba:	2050      	movs	r0, #80	; 0x50
 8001ebc:	f7ff fee7 	bl	8001c8e <SD_SendCmd>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <SD_disk_initialize+0x192>
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	73bb      	strb	r3, [r7, #14]
 8001eca:	4a10      	ldr	r2, [pc, #64]	; (8001f0c <SD_disk_initialize+0x1d4>)
 8001ecc:	7bbb      	ldrb	r3, [r7, #14]
 8001ece:	7013      	strb	r3, [r2, #0]
 8001ed0:	f7ff fd8a 	bl	80019e8 <DESELECT>
 8001ed4:	f7ff fdca 	bl	8001a6c <SPI_RxByte>
 8001ed8:	7bbb      	ldrb	r3, [r7, #14]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d008      	beq.n	8001ef0 <SD_disk_initialize+0x1b8>
 8001ede:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <SD_disk_initialize+0x1cc>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	f023 0301 	bic.w	r3, r3, #1
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <SD_disk_initialize+0x1cc>)
 8001eec:	701a      	strb	r2, [r3, #0]
 8001eee:	e001      	b.n	8001ef4 <SD_disk_initialize+0x1bc>
 8001ef0:	f7ff fe42 	bl	8001b78 <SD_PowerOff>
 8001ef4:	4b03      	ldr	r3, [pc, #12]	; (8001f04 <SD_disk_initialize+0x1cc>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	4618      	mov	r0, r3
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd90      	pop	{r4, r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000000 	.word	0x20000000
 8001f08:	2000360d 	.word	0x2000360d
 8001f0c:	20000210 	.word	0x20000210

08001f10 <SD_disk_status>:
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	71fb      	strb	r3, [r7, #7]
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <SD_disk_status+0x14>
 8001f20:	2301      	movs	r3, #1
 8001f22:	e002      	b.n	8001f2a <SD_disk_status+0x1a>
 8001f24:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <SD_disk_status+0x28>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	20000000 	.word	0x20000000

08001f3c <SD_disk_read>:
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	607a      	str	r2, [r7, #4]
 8001f46:	603b      	str	r3, [r7, #0]
 8001f48:	4603      	mov	r3, r0
 8001f4a:	73fb      	strb	r3, [r7, #15]
 8001f4c:	7bfb      	ldrb	r3, [r7, #15]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d102      	bne.n	8001f58 <SD_disk_read+0x1c>
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <SD_disk_read+0x20>
 8001f58:	2304      	movs	r3, #4
 8001f5a:	e051      	b.n	8002000 <SD_disk_read+0xc4>
 8001f5c:	4b2a      	ldr	r3, [pc, #168]	; (8002008 <SD_disk_read+0xcc>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <SD_disk_read+0x32>
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e048      	b.n	8002000 <SD_disk_read+0xc4>
 8001f6e:	4b27      	ldr	r3, [pc, #156]	; (800200c <SD_disk_read+0xd0>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d102      	bne.n	8001f80 <SD_disk_read+0x44>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	025b      	lsls	r3, r3, #9
 8001f7e:	607b      	str	r3, [r7, #4]
 8001f80:	f7ff fd24 	bl	80019cc <SELECT>
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d111      	bne.n	8001fae <SD_disk_read+0x72>
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	2051      	movs	r0, #81	; 0x51
 8001f8e:	f7ff fe7e 	bl	8001c8e <SD_SendCmd>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d129      	bne.n	8001fec <SD_disk_read+0xb0>
 8001f98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f9c:	68b8      	ldr	r0, [r7, #8]
 8001f9e:	f7ff fe03 	bl	8001ba8 <SD_RxDataBlock>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d021      	beq.n	8001fec <SD_disk_read+0xb0>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	e01e      	b.n	8001fec <SD_disk_read+0xb0>
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	2052      	movs	r0, #82	; 0x52
 8001fb2:	f7ff fe6c 	bl	8001c8e <SD_SendCmd>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d117      	bne.n	8001fec <SD_disk_read+0xb0>
 8001fbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fc0:	68b8      	ldr	r0, [r7, #8]
 8001fc2:	f7ff fdf1 	bl	8001ba8 <SD_RxDataBlock>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00a      	beq.n	8001fe2 <SD_disk_read+0xa6>
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	603b      	str	r3, [r7, #0]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1ed      	bne.n	8001fbc <SD_disk_read+0x80>
 8001fe0:	e000      	b.n	8001fe4 <SD_disk_read+0xa8>
 8001fe2:	bf00      	nop
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	204c      	movs	r0, #76	; 0x4c
 8001fe8:	f7ff fe51 	bl	8001c8e <SD_SendCmd>
 8001fec:	f7ff fcfc 	bl	80019e8 <DESELECT>
 8001ff0:	f7ff fd3c 	bl	8001a6c <SPI_RxByte>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	bf14      	ite	ne
 8001ffa:	2301      	movne	r3, #1
 8001ffc:	2300      	moveq	r3, #0
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	4618      	mov	r0, r3
 8002002:	3710      	adds	r7, #16
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	20000000 	.word	0x20000000
 800200c:	20000210 	.word	0x20000210

08002010 <SD_disk_write>:
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	60b9      	str	r1, [r7, #8]
 8002018:	607a      	str	r2, [r7, #4]
 800201a:	603b      	str	r3, [r7, #0]
 800201c:	4603      	mov	r3, r0
 800201e:	73fb      	strb	r3, [r7, #15]
 8002020:	7bfb      	ldrb	r3, [r7, #15]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d102      	bne.n	800202c <SD_disk_write+0x1c>
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <SD_disk_write+0x20>
 800202c:	2304      	movs	r3, #4
 800202e:	e06b      	b.n	8002108 <SD_disk_write+0xf8>
 8002030:	4b37      	ldr	r3, [pc, #220]	; (8002110 <SD_disk_write+0x100>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	b2db      	uxtb	r3, r3
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <SD_disk_write+0x32>
 800203e:	2303      	movs	r3, #3
 8002040:	e062      	b.n	8002108 <SD_disk_write+0xf8>
 8002042:	4b33      	ldr	r3, [pc, #204]	; (8002110 <SD_disk_write+0x100>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	b2db      	uxtb	r3, r3
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <SD_disk_write+0x44>
 8002050:	2302      	movs	r3, #2
 8002052:	e059      	b.n	8002108 <SD_disk_write+0xf8>
 8002054:	4b2f      	ldr	r3, [pc, #188]	; (8002114 <SD_disk_write+0x104>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d102      	bne.n	8002066 <SD_disk_write+0x56>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	025b      	lsls	r3, r3, #9
 8002064:	607b      	str	r3, [r7, #4]
 8002066:	f7ff fcb1 	bl	80019cc <SELECT>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d110      	bne.n	8002092 <SD_disk_write+0x82>
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	2058      	movs	r0, #88	; 0x58
 8002074:	f7ff fe0b 	bl	8001c8e <SD_SendCmd>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d13a      	bne.n	80020f4 <SD_disk_write+0xe4>
 800207e:	21fe      	movs	r1, #254	; 0xfe
 8002080:	68b8      	ldr	r0, [r7, #8]
 8002082:	f7ff fdc1 	bl	8001c08 <SD_TxDataBlock>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d033      	beq.n	80020f4 <SD_disk_write+0xe4>
 800208c:	2300      	movs	r3, #0
 800208e:	603b      	str	r3, [r7, #0]
 8002090:	e030      	b.n	80020f4 <SD_disk_write+0xe4>
 8002092:	4b20      	ldr	r3, [pc, #128]	; (8002114 <SD_disk_write+0x104>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d007      	beq.n	80020ae <SD_disk_write+0x9e>
 800209e:	2100      	movs	r1, #0
 80020a0:	2077      	movs	r0, #119	; 0x77
 80020a2:	f7ff fdf4 	bl	8001c8e <SD_SendCmd>
 80020a6:	6839      	ldr	r1, [r7, #0]
 80020a8:	2057      	movs	r0, #87	; 0x57
 80020aa:	f7ff fdf0 	bl	8001c8e <SD_SendCmd>
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	2059      	movs	r0, #89	; 0x59
 80020b2:	f7ff fdec 	bl	8001c8e <SD_SendCmd>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d11b      	bne.n	80020f4 <SD_disk_write+0xe4>
 80020bc:	21fc      	movs	r1, #252	; 0xfc
 80020be:	68b8      	ldr	r0, [r7, #8]
 80020c0:	f7ff fda2 	bl	8001c08 <SD_TxDataBlock>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00a      	beq.n	80020e0 <SD_disk_write+0xd0>
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	3b01      	subs	r3, #1
 80020d6:	603b      	str	r3, [r7, #0]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1ee      	bne.n	80020bc <SD_disk_write+0xac>
 80020de:	e000      	b.n	80020e2 <SD_disk_write+0xd2>
 80020e0:	bf00      	nop
 80020e2:	21fd      	movs	r1, #253	; 0xfd
 80020e4:	2000      	movs	r0, #0
 80020e6:	f7ff fd8f 	bl	8001c08 <SD_TxDataBlock>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <SD_disk_write+0xe4>
 80020f0:	2301      	movs	r3, #1
 80020f2:	603b      	str	r3, [r7, #0]
 80020f4:	f7ff fc78 	bl	80019e8 <DESELECT>
 80020f8:	f7ff fcb8 	bl	8001a6c <SPI_RxByte>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	bf14      	ite	ne
 8002102:	2301      	movne	r3, #1
 8002104:	2300      	moveq	r3, #0
 8002106:	b2db      	uxtb	r3, r3
 8002108:	4618      	mov	r0, r3
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20000000 	.word	0x20000000
 8002114:	20000210 	.word	0x20000210

08002118 <SD_disk_ioctl>:
 8002118:	b590      	push	{r4, r7, lr}
 800211a:	b08b      	sub	sp, #44	; 0x2c
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	603a      	str	r2, [r7, #0]
 8002122:	71fb      	strb	r3, [r7, #7]
 8002124:	460b      	mov	r3, r1
 8002126:	71bb      	strb	r3, [r7, #6]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	623b      	str	r3, [r7, #32]
 800212c:	79fb      	ldrb	r3, [r7, #7]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <SD_disk_ioctl+0x1e>
 8002132:	2304      	movs	r3, #4
 8002134:	e115      	b.n	8002362 <SD_disk_ioctl+0x24a>
 8002136:	2301      	movs	r3, #1
 8002138:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800213c:	79bb      	ldrb	r3, [r7, #6]
 800213e:	2b05      	cmp	r3, #5
 8002140:	d124      	bne.n	800218c <SD_disk_ioctl+0x74>
 8002142:	6a3b      	ldr	r3, [r7, #32]
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b02      	cmp	r3, #2
 8002148:	d012      	beq.n	8002170 <SD_disk_ioctl+0x58>
 800214a:	2b02      	cmp	r3, #2
 800214c:	dc1a      	bgt.n	8002184 <SD_disk_ioctl+0x6c>
 800214e:	2b00      	cmp	r3, #0
 8002150:	d002      	beq.n	8002158 <SD_disk_ioctl+0x40>
 8002152:	2b01      	cmp	r3, #1
 8002154:	d006      	beq.n	8002164 <SD_disk_ioctl+0x4c>
 8002156:	e015      	b.n	8002184 <SD_disk_ioctl+0x6c>
 8002158:	f7ff fd0e 	bl	8001b78 <SD_PowerOff>
 800215c:	2300      	movs	r3, #0
 800215e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002162:	e0fc      	b.n	800235e <SD_disk_ioctl+0x246>
 8002164:	f7ff fcc6 	bl	8001af4 <SD_PowerOn>
 8002168:	2300      	movs	r3, #0
 800216a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800216e:	e0f6      	b.n	800235e <SD_disk_ioctl+0x246>
 8002170:	6a3b      	ldr	r3, [r7, #32]
 8002172:	1c5c      	adds	r4, r3, #1
 8002174:	f7ff fd0c 	bl	8001b90 <SD_CheckPower>
 8002178:	4603      	mov	r3, r0
 800217a:	7023      	strb	r3, [r4, #0]
 800217c:	2300      	movs	r3, #0
 800217e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002182:	e0ec      	b.n	800235e <SD_disk_ioctl+0x246>
 8002184:	2304      	movs	r3, #4
 8002186:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800218a:	e0e8      	b.n	800235e <SD_disk_ioctl+0x246>
 800218c:	4b77      	ldr	r3, [pc, #476]	; (800236c <SD_disk_ioctl+0x254>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	b2db      	uxtb	r3, r3
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <SD_disk_ioctl+0x86>
 800219a:	2303      	movs	r3, #3
 800219c:	e0e1      	b.n	8002362 <SD_disk_ioctl+0x24a>
 800219e:	f7ff fc15 	bl	80019cc <SELECT>
 80021a2:	79bb      	ldrb	r3, [r7, #6]
 80021a4:	2b0d      	cmp	r3, #13
 80021a6:	f200 80cb 	bhi.w	8002340 <SD_disk_ioctl+0x228>
 80021aa:	a201      	add	r2, pc, #4	; (adr r2, 80021b0 <SD_disk_ioctl+0x98>)
 80021ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b0:	080022ab 	.word	0x080022ab
 80021b4:	080021e9 	.word	0x080021e9
 80021b8:	0800229b 	.word	0x0800229b
 80021bc:	08002341 	.word	0x08002341
 80021c0:	08002341 	.word	0x08002341
 80021c4:	08002341 	.word	0x08002341
 80021c8:	08002341 	.word	0x08002341
 80021cc:	08002341 	.word	0x08002341
 80021d0:	08002341 	.word	0x08002341
 80021d4:	08002341 	.word	0x08002341
 80021d8:	08002341 	.word	0x08002341
 80021dc:	080022bd 	.word	0x080022bd
 80021e0:	080022e1 	.word	0x080022e1
 80021e4:	08002305 	.word	0x08002305
 80021e8:	2100      	movs	r1, #0
 80021ea:	2049      	movs	r0, #73	; 0x49
 80021ec:	f7ff fd4f 	bl	8001c8e <SD_SendCmd>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f040 80a8 	bne.w	8002348 <SD_disk_ioctl+0x230>
 80021f8:	f107 030c 	add.w	r3, r7, #12
 80021fc:	2110      	movs	r1, #16
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff fcd2 	bl	8001ba8 <SD_RxDataBlock>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 809e 	beq.w	8002348 <SD_disk_ioctl+0x230>
 800220c:	7b3b      	ldrb	r3, [r7, #12]
 800220e:	099b      	lsrs	r3, r3, #6
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b01      	cmp	r3, #1
 8002214:	d10e      	bne.n	8002234 <SD_disk_ioctl+0x11c>
 8002216:	7d7b      	ldrb	r3, [r7, #21]
 8002218:	b29a      	uxth	r2, r3
 800221a:	7d3b      	ldrb	r3, [r7, #20]
 800221c:	b29b      	uxth	r3, r3
 800221e:	021b      	lsls	r3, r3, #8
 8002220:	b29b      	uxth	r3, r3
 8002222:	4413      	add	r3, r2
 8002224:	b29b      	uxth	r3, r3
 8002226:	3301      	adds	r3, #1
 8002228:	83fb      	strh	r3, [r7, #30]
 800222a:	8bfb      	ldrh	r3, [r7, #30]
 800222c:	029a      	lsls	r2, r3, #10
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	e02e      	b.n	8002292 <SD_disk_ioctl+0x17a>
 8002234:	7c7b      	ldrb	r3, [r7, #17]
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	b2da      	uxtb	r2, r3
 800223c:	7dbb      	ldrb	r3, [r7, #22]
 800223e:	09db      	lsrs	r3, r3, #7
 8002240:	b2db      	uxtb	r3, r3
 8002242:	4413      	add	r3, r2
 8002244:	b2da      	uxtb	r2, r3
 8002246:	7d7b      	ldrb	r3, [r7, #21]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	b2db      	uxtb	r3, r3
 800224c:	f003 0306 	and.w	r3, r3, #6
 8002250:	b2db      	uxtb	r3, r3
 8002252:	4413      	add	r3, r2
 8002254:	b2db      	uxtb	r3, r3
 8002256:	3302      	adds	r3, #2
 8002258:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800225c:	7d3b      	ldrb	r3, [r7, #20]
 800225e:	099b      	lsrs	r3, r3, #6
 8002260:	b2db      	uxtb	r3, r3
 8002262:	b29a      	uxth	r2, r3
 8002264:	7cfb      	ldrb	r3, [r7, #19]
 8002266:	b29b      	uxth	r3, r3
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	b29b      	uxth	r3, r3
 800226c:	4413      	add	r3, r2
 800226e:	b29a      	uxth	r2, r3
 8002270:	7cbb      	ldrb	r3, [r7, #18]
 8002272:	029b      	lsls	r3, r3, #10
 8002274:	b29b      	uxth	r3, r3
 8002276:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800227a:	b29b      	uxth	r3, r3
 800227c:	4413      	add	r3, r2
 800227e:	b29b      	uxth	r3, r3
 8002280:	3301      	adds	r3, #1
 8002282:	83fb      	strh	r3, [r7, #30]
 8002284:	8bfa      	ldrh	r2, [r7, #30]
 8002286:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800228a:	3b09      	subs	r3, #9
 800228c:	409a      	lsls	r2, r3
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	2300      	movs	r3, #0
 8002294:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002298:	e056      	b.n	8002348 <SD_disk_ioctl+0x230>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022a0:	801a      	strh	r2, [r3, #0]
 80022a2:	2300      	movs	r3, #0
 80022a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80022a8:	e055      	b.n	8002356 <SD_disk_ioctl+0x23e>
 80022aa:	f7ff fc09 	bl	8001ac0 <SD_ReadyWait>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2bff      	cmp	r3, #255	; 0xff
 80022b2:	d14b      	bne.n	800234c <SD_disk_ioctl+0x234>
 80022b4:	2300      	movs	r3, #0
 80022b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80022ba:	e047      	b.n	800234c <SD_disk_ioctl+0x234>
 80022bc:	2100      	movs	r1, #0
 80022be:	2049      	movs	r0, #73	; 0x49
 80022c0:	f7ff fce5 	bl	8001c8e <SD_SendCmd>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d142      	bne.n	8002350 <SD_disk_ioctl+0x238>
 80022ca:	2110      	movs	r1, #16
 80022cc:	6a38      	ldr	r0, [r7, #32]
 80022ce:	f7ff fc6b 	bl	8001ba8 <SD_RxDataBlock>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d03b      	beq.n	8002350 <SD_disk_ioctl+0x238>
 80022d8:	2300      	movs	r3, #0
 80022da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80022de:	e037      	b.n	8002350 <SD_disk_ioctl+0x238>
 80022e0:	2100      	movs	r1, #0
 80022e2:	204a      	movs	r0, #74	; 0x4a
 80022e4:	f7ff fcd3 	bl	8001c8e <SD_SendCmd>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d132      	bne.n	8002354 <SD_disk_ioctl+0x23c>
 80022ee:	2110      	movs	r1, #16
 80022f0:	6a38      	ldr	r0, [r7, #32]
 80022f2:	f7ff fc59 	bl	8001ba8 <SD_RxDataBlock>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d02b      	beq.n	8002354 <SD_disk_ioctl+0x23c>
 80022fc:	2300      	movs	r3, #0
 80022fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002302:	e027      	b.n	8002354 <SD_disk_ioctl+0x23c>
 8002304:	2100      	movs	r1, #0
 8002306:	207a      	movs	r0, #122	; 0x7a
 8002308:	f7ff fcc1 	bl	8001c8e <SD_SendCmd>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d116      	bne.n	8002340 <SD_disk_ioctl+0x228>
 8002312:	2300      	movs	r3, #0
 8002314:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002318:	e00b      	b.n	8002332 <SD_disk_ioctl+0x21a>
 800231a:	6a3c      	ldr	r4, [r7, #32]
 800231c:	1c63      	adds	r3, r4, #1
 800231e:	623b      	str	r3, [r7, #32]
 8002320:	f7ff fba4 	bl	8001a6c <SPI_RxByte>
 8002324:	4603      	mov	r3, r0
 8002326:	7023      	strb	r3, [r4, #0]
 8002328:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800232c:	3301      	adds	r3, #1
 800232e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002332:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002336:	2b03      	cmp	r3, #3
 8002338:	d9ef      	bls.n	800231a <SD_disk_ioctl+0x202>
 800233a:	2300      	movs	r3, #0
 800233c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002340:	2304      	movs	r3, #4
 8002342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002346:	e006      	b.n	8002356 <SD_disk_ioctl+0x23e>
 8002348:	bf00      	nop
 800234a:	e004      	b.n	8002356 <SD_disk_ioctl+0x23e>
 800234c:	bf00      	nop
 800234e:	e002      	b.n	8002356 <SD_disk_ioctl+0x23e>
 8002350:	bf00      	nop
 8002352:	e000      	b.n	8002356 <SD_disk_ioctl+0x23e>
 8002354:	bf00      	nop
 8002356:	f7ff fb47 	bl	80019e8 <DESELECT>
 800235a:	f7ff fb87 	bl	8001a6c <SPI_RxByte>
 800235e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002362:	4618      	mov	r0, r3
 8002364:	372c      	adds	r7, #44	; 0x2c
 8002366:	46bd      	mov	sp, r7
 8002368:	bd90      	pop	{r4, r7, pc}
 800236a:	bf00      	nop
 800236c:	20000000 	.word	0x20000000

08002370 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_CAN_RxFifo0MsgPendingCallback( CAN_HandleTypeDef *hcan )
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &comm.RXHeader, comm.RXdata);
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 800237a:	4a07      	ldr	r2, [pc, #28]	; (8002398 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 800237c:	2100      	movs	r1, #0
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f002 f964 	bl	800464c <HAL_CAN_GetRxMessage>
	CAN_Receive( &comm );
 8002384:	4805      	ldr	r0, [pc, #20]	; (800239c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8002386:	f001 fc3d 	bl	8003c04 <CAN_Receive>
}
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	200003f1 	.word	0x200003f1
 8002398:	200003cc 	.word	0x200003cc
 800239c:	200003b0 	.word	0x200003b0

080023a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023a2:	b0a9      	sub	sp, #164	; 0xa4
 80023a4:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023a6:	f001 fd8b 	bl	8003ec0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023aa:	f000 fa5b 	bl	8002864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023ae:	f000 fbb1 	bl	8002b14 <MX_GPIO_Init>
  MX_CAN1_Init();
 80023b2:	f000 fac1 	bl	8002938 <MX_CAN1_Init>
  MX_I2C1_Init();
 80023b6:	f000 faf5 	bl	80029a4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80023ba:	f000 fb21 	bl	8002a00 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80023be:	f000 fb7f 	bl	8002ac0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80023c2:	f000 fb53 	bl	8002a6c <MX_USART1_UART_Init>
  MX_FATFS_Init();
 80023c6:	f005 fadf 	bl	8007988 <MX_FATFS_Init>
  /*
   * INIT ALL DEVICES AND PERIPHERALS
   */

  // GIVE PERIPHERALS TIME TO BOOT
  HAL_Delay(500);
 80023ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023ce:	f001 fde9 	bl	8003fa4 <HAL_Delay>

  LIS2MDL_Initialise( &comp, &hi2c1, 0, &button_flag );
 80023d2:	4bad      	ldr	r3, [pc, #692]	; (8002688 <main+0x2e8>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	49ad      	ldr	r1, [pc, #692]	; (800268c <main+0x2ec>)
 80023d8:	48ad      	ldr	r0, [pc, #692]	; (8002690 <main+0x2f0>)
 80023da:	f7fe ff8d 	bl	80012f8 <LIS2MDL_Initialise>

  ISM330_Initialise(&acc_gyro, &hi2c1);
 80023de:	49ab      	ldr	r1, [pc, #684]	; (800268c <main+0x2ec>)
 80023e0:	48ac      	ldr	r0, [pc, #688]	; (8002694 <main+0x2f4>)
 80023e2:	f7fe fdd3 	bl	8000f8c <ISM330_Initialise>

  CAN_Initialise( &comm, &hcan1, SAT_OBC, 0x0F0, 0, 10 );
 80023e6:	230a      	movs	r3, #10
 80023e8:	9301      	str	r3, [sp, #4]
 80023ea:	2300      	movs	r3, #0
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	23f0      	movs	r3, #240	; 0xf0
 80023f0:	2200      	movs	r2, #0
 80023f2:	49a9      	ldr	r1, [pc, #676]	; (8002698 <main+0x2f8>)
 80023f4:	48a9      	ldr	r0, [pc, #676]	; (800269c <main+0x2fc>)
 80023f6:	f001 fae2 	bl	80039be <CAN_Initialise>

  SD_Mount();
 80023fa:	f7ff fa87 	bl	800190c <SD_Mount>

//  Process_LIS2MDL_TEST( &comp, &LIS_card );

//  Process_ISM330_ACC_TEST(&acc_gyro, &LIS_card);

  Process_ISM330_GYRO_TEST(&acc_gyro, &SD_RECORD);
 80023fe:	49a8      	ldr	r1, [pc, #672]	; (80026a0 <main+0x300>)
 8002400:	48a4      	ldr	r0, [pc, #656]	; (8002694 <main+0x2f4>)
 8002402:	f000 fed5 	bl	80031b0 <Process_ISM330_GYRO_TEST>


  uint32_t beacon_time = HAL_GetTick();
 8002406:	f001 fdc1 	bl	8003f8c <HAL_GetTick>
 800240a:	65f8      	str	r0, [r7, #92]	; 0x5c

  uint32_t flash_time = HAL_GetTick();
 800240c:	f001 fdbe 	bl	8003f8c <HAL_GetTick>
 8002410:	65b8      	str	r0, [r7, #88]	; 0x58

  uint32_t test_time;

  uint16_t flash = 2000;
 8002412:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002416:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
  while (1)
  {
	  /*
	   * Button related tasks
	   */
	  if( button_flag == 1 )
 800241a:	4b9b      	ldr	r3, [pc, #620]	; (8002688 <main+0x2e8>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d13d      	bne.n	800249e <main+0xfe>
	  {
		  for (uint8_t j = 0; j < 25; j++)
 8002422:	2300      	movs	r3, #0
 8002424:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8002428:	e00c      	b.n	8002444 <main+0xa4>
		  {
			  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800242a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800242e:	489d      	ldr	r0, [pc, #628]	; (80026a4 <main+0x304>)
 8002430:	f002 ff13 	bl	800525a <HAL_GPIO_TogglePin>
			  HAL_Delay(200);
 8002434:	20c8      	movs	r0, #200	; 0xc8
 8002436:	f001 fdb5 	bl	8003fa4 <HAL_Delay>
		  for (uint8_t j = 0; j < 25; j++)
 800243a:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800243e:	3301      	adds	r3, #1
 8002440:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8002444:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8002448:	2b18      	cmp	r3, #24
 800244a:	d9ee      	bls.n	800242a <main+0x8a>
		  }
		  for (uint8_t i = 0; i < 50; i++)
 800244c:	2300      	movs	r3, #0
 800244e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8002452:	e008      	b.n	8002466 <main+0xc6>
		  {
			  Process_ISM330_GYRO_SD(&acc_gyro, &SD_RECORD);
 8002454:	4992      	ldr	r1, [pc, #584]	; (80026a0 <main+0x300>)
 8002456:	488f      	ldr	r0, [pc, #572]	; (8002694 <main+0x2f4>)
 8002458:	f000 fec0 	bl	80031dc <Process_ISM330_GYRO_SD>
		  for (uint8_t i = 0; i < 50; i++)
 800245c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002460:	3301      	adds	r3, #1
 8002462:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8002466:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800246a:	2b31      	cmp	r3, #49	; 0x31
 800246c:	d9f2      	bls.n	8002454 <main+0xb4>
		  }
		  for (uint8_t j = 0; j < 10; j++)
 800246e:	2300      	movs	r3, #0
 8002470:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002474:	e00c      	b.n	8002490 <main+0xf0>
		  {
			  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8002476:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800247a:	488a      	ldr	r0, [pc, #552]	; (80026a4 <main+0x304>)
 800247c:	f002 feed 	bl	800525a <HAL_GPIO_TogglePin>
			  HAL_Delay(100);
 8002480:	2064      	movs	r0, #100	; 0x64
 8002482:	f001 fd8f 	bl	8003fa4 <HAL_Delay>
		  for (uint8_t j = 0; j < 10; j++)
 8002486:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800248a:	3301      	adds	r3, #1
 800248c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002490:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002494:	2b09      	cmp	r3, #9
 8002496:	d9ee      	bls.n	8002476 <main+0xd6>
		  }
		  button_flag = 0;
 8002498:	4b7b      	ldr	r3, [pc, #492]	; (8002688 <main+0x2e8>)
 800249a:	2200      	movs	r2, #0
 800249c:	701a      	strb	r2, [r3, #0]
	  }
	  /*
	   * CAN RELATED TASKS
	   */
	  can = Process_CAN_INBOX( &comm );
 800249e:	4c82      	ldr	r4, [pc, #520]	; (80026a8 <main+0x308>)
 80024a0:	463b      	mov	r3, r7
 80024a2:	497e      	ldr	r1, [pc, #504]	; (800269c <main+0x2fc>)
 80024a4:	4618      	mov	r0, r3
 80024a6:	f000 fbe4 	bl	8002c72 <Process_CAN_INBOX>
 80024aa:	4620      	mov	r0, r4
 80024ac:	463b      	mov	r3, r7
 80024ae:	2243      	movs	r2, #67	; 0x43
 80024b0:	4619      	mov	r1, r3
 80024b2:	f008 fae9 	bl	800aa88 <memcpy>

	  switch (can.msg_typ)
 80024b6:	4b7c      	ldr	r3, [pc, #496]	; (80026a8 <main+0x308>)
 80024b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024bc:	2b04      	cmp	r3, #4
 80024be:	f200 811e 	bhi.w	80026fe <main+0x35e>
 80024c2:	a201      	add	r2, pc, #4	; (adr r2, 80024c8 <main+0x128>)
 80024c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c8:	080024dd 	.word	0x080024dd
 80024cc:	08002547 	.word	0x08002547
 80024d0:	080026c5 	.word	0x080026c5
 80024d4:	080026ff 	.word	0x080026ff
 80024d8:	080026ff 	.word	0x080026ff
	  {
	  case 4: //NO MESSAGE msg_typ is 2 bit so 4 is out of range
		  break;
	  case 0:
		  Process_TELEMETRY_REQ(&comm, can, &acc_gyro, &comp);
 80024dc:	4e72      	ldr	r6, [pc, #456]	; (80026a8 <main+0x308>)
 80024de:	4b6c      	ldr	r3, [pc, #432]	; (8002690 <main+0x2f0>)
 80024e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80024e2:	4b6c      	ldr	r3, [pc, #432]	; (8002694 <main+0x2f4>)
 80024e4:	930e      	str	r3, [sp, #56]	; 0x38
 80024e6:	466c      	mov	r4, sp
 80024e8:	f106 050c 	add.w	r5, r6, #12
 80024ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024f8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80024fc:	6020      	str	r0, [r4, #0]
 80024fe:	3404      	adds	r4, #4
 8002500:	8021      	strh	r1, [r4, #0]
 8002502:	3402      	adds	r4, #2
 8002504:	0c0b      	lsrs	r3, r1, #16
 8002506:	7023      	strb	r3, [r4, #0]
 8002508:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800250c:	4863      	ldr	r0, [pc, #396]	; (800269c <main+0x2fc>)
 800250e:	f000 fc37 	bl	8002d80 <Process_TELEMETRY_REQ>
		  Process_TELEMETRY_RX(&comm, can, &tel_rx);
 8002512:	4e65      	ldr	r6, [pc, #404]	; (80026a8 <main+0x308>)
 8002514:	4b65      	ldr	r3, [pc, #404]	; (80026ac <main+0x30c>)
 8002516:	930e      	str	r3, [sp, #56]	; 0x38
 8002518:	466c      	mov	r4, sp
 800251a:	f106 050c 	add.w	r5, r6, #12
 800251e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002520:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002522:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002524:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002526:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002528:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800252a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800252e:	6020      	str	r0, [r4, #0]
 8002530:	3404      	adds	r4, #4
 8002532:	8021      	strh	r1, [r4, #0]
 8002534:	3402      	adds	r4, #2
 8002536:	0c0b      	lsrs	r3, r1, #16
 8002538:	7023      	strb	r3, [r4, #0]
 800253a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800253e:	4857      	ldr	r0, [pc, #348]	; (800269c <main+0x2fc>)
 8002540:	f000 fcee 	bl	8002f20 <Process_TELEMETRY_RX>
		  break;
 8002544:	e0db      	b.n	80026fe <main+0x35e>
	  case 1:
		  // Process COMMANDS
		  if (can.buffer[0] == TASK_AB_TEST)
 8002546:	4b58      	ldr	r3, [pc, #352]	; (80026a8 <main+0x308>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	2b14      	cmp	r3, #20
 800254c:	d12a      	bne.n	80025a4 <main+0x204>
		  {
			  if (OBC_STATE == 0)
 800254e:	4b58      	ldr	r3, [pc, #352]	; (80026b0 <main+0x310>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d11d      	bne.n	8002592 <main+0x1f2>
			  {
				  Process_OBC_Movement_Test( &comp, &SD_RCS_move, 1 );
 8002556:	2201      	movs	r2, #1
 8002558:	4956      	ldr	r1, [pc, #344]	; (80026b4 <main+0x314>)
 800255a:	484d      	ldr	r0, [pc, #308]	; (8002690 <main+0x2f0>)
 800255c:	f000 fd44 	bl	8002fe8 <Process_OBC_Movement_Test>
				  SD_Active = &SD_RCS_move;
 8002560:	4b55      	ldr	r3, [pc, #340]	; (80026b8 <main+0x318>)
 8002562:	4a54      	ldr	r2, [pc, #336]	; (80026b4 <main+0x314>)
 8002564:	601a      	str	r2, [r3, #0]
				  OBC_STATE = 1;
 8002566:	4b52      	ldr	r3, [pc, #328]	; (80026b0 <main+0x310>)
 8002568:	2201      	movs	r2, #1
 800256a:	701a      	strb	r2, [r3, #0]
				  test_time = HAL_GetTick();
 800256c:	f001 fd0e 	bl	8003f8c <HAL_GetTick>
 8002570:	6578      	str	r0, [r7, #84]	; 0x54
				  flash = 500;
 8002572:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002576:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				  CURR_TASK = TASK_AB_TEST;
 800257a:	4b50      	ldr	r3, [pc, #320]	; (80026bc <main+0x31c>)
 800257c:	2214      	movs	r2, #20
 800257e:	701a      	strb	r2, [r3, #0]
				  SEND_ACKNACK( &comm, TASK_AB_TEST, 0, can.source);
 8002580:	4b49      	ldr	r3, [pc, #292]	; (80026a8 <main+0x308>)
 8002582:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002586:	2200      	movs	r2, #0
 8002588:	2114      	movs	r1, #20
 800258a:	4844      	ldr	r0, [pc, #272]	; (800269c <main+0x2fc>)
 800258c:	f001 fbf6 	bl	8003d7c <SEND_ACKNACK>
			  else
			  {
				  SEND_ACKNACK( &comm, TASK_RECORD, 1, can.source);
			  }
		  }
		  break;
 8002590:	e0b2      	b.n	80026f8 <main+0x358>
				  SEND_ACKNACK( &comm, TASK_AB_TEST, 1, can.source);
 8002592:	4b45      	ldr	r3, [pc, #276]	; (80026a8 <main+0x308>)
 8002594:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002598:	2201      	movs	r2, #1
 800259a:	2114      	movs	r1, #20
 800259c:	483f      	ldr	r0, [pc, #252]	; (800269c <main+0x2fc>)
 800259e:	f001 fbed 	bl	8003d7c <SEND_ACKNACK>
		  break;
 80025a2:	e0a9      	b.n	80026f8 <main+0x358>
		  else if (can.buffer[0] == TASK_SPIN_TEST)
 80025a4:	4b40      	ldr	r3, [pc, #256]	; (80026a8 <main+0x308>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b15      	cmp	r3, #21
 80025aa:	d12a      	bne.n	8002602 <main+0x262>
			  if (OBC_STATE == 0)
 80025ac:	4b40      	ldr	r3, [pc, #256]	; (80026b0 <main+0x310>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d11d      	bne.n	80025f0 <main+0x250>
				  Process_OBC_Movement_Test( &comp, &SD_RCS_spin, 2 );
 80025b4:	2202      	movs	r2, #2
 80025b6:	4942      	ldr	r1, [pc, #264]	; (80026c0 <main+0x320>)
 80025b8:	4835      	ldr	r0, [pc, #212]	; (8002690 <main+0x2f0>)
 80025ba:	f000 fd15 	bl	8002fe8 <Process_OBC_Movement_Test>
				  SD_Active = &SD_RCS_spin;
 80025be:	4b3e      	ldr	r3, [pc, #248]	; (80026b8 <main+0x318>)
 80025c0:	4a3f      	ldr	r2, [pc, #252]	; (80026c0 <main+0x320>)
 80025c2:	601a      	str	r2, [r3, #0]
				  OBC_STATE = 1;
 80025c4:	4b3a      	ldr	r3, [pc, #232]	; (80026b0 <main+0x310>)
 80025c6:	2201      	movs	r2, #1
 80025c8:	701a      	strb	r2, [r3, #0]
				  test_time = HAL_GetTick();
 80025ca:	f001 fcdf 	bl	8003f8c <HAL_GetTick>
 80025ce:	6578      	str	r0, [r7, #84]	; 0x54
				  flash = 500;
 80025d0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80025d4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				  CURR_TASK = TASK_SPIN_TEST;
 80025d8:	4b38      	ldr	r3, [pc, #224]	; (80026bc <main+0x31c>)
 80025da:	2215      	movs	r2, #21
 80025dc:	701a      	strb	r2, [r3, #0]
				  SEND_ACKNACK( &comm, TASK_SPIN_TEST, 0, can.source);
 80025de:	4b32      	ldr	r3, [pc, #200]	; (80026a8 <main+0x308>)
 80025e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025e4:	2200      	movs	r2, #0
 80025e6:	2115      	movs	r1, #21
 80025e8:	482c      	ldr	r0, [pc, #176]	; (800269c <main+0x2fc>)
 80025ea:	f001 fbc7 	bl	8003d7c <SEND_ACKNACK>
		  break;
 80025ee:	e083      	b.n	80026f8 <main+0x358>
				  SEND_ACKNACK( &comm, TASK_SPIN_TEST, 1, can.source);
 80025f0:	4b2d      	ldr	r3, [pc, #180]	; (80026a8 <main+0x308>)
 80025f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025f6:	2201      	movs	r2, #1
 80025f8:	2115      	movs	r1, #21
 80025fa:	4828      	ldr	r0, [pc, #160]	; (800269c <main+0x2fc>)
 80025fc:	f001 fbbe 	bl	8003d7c <SEND_ACKNACK>
		  break;
 8002600:	e07a      	b.n	80026f8 <main+0x358>
		  else if (can.buffer[0] == TASK_RECORD)
 8002602:	4b29      	ldr	r3, [pc, #164]	; (80026a8 <main+0x308>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	2b16      	cmp	r3, #22
 8002608:	d176      	bne.n	80026f8 <main+0x358>
			  if (OBC_STATE == 0)
 800260a:	4b29      	ldr	r3, [pc, #164]	; (80026b0 <main+0x310>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d11a      	bne.n	8002648 <main+0x2a8>
				  OBC_STATE = 4;
 8002612:	4b27      	ldr	r3, [pc, #156]	; (80026b0 <main+0x310>)
 8002614:	2204      	movs	r2, #4
 8002616:	701a      	strb	r2, [r3, #0]
				  Process_OBC_Movement_Test( &comp, &SD_RECORD, 3 );
 8002618:	2203      	movs	r2, #3
 800261a:	4921      	ldr	r1, [pc, #132]	; (80026a0 <main+0x300>)
 800261c:	481c      	ldr	r0, [pc, #112]	; (8002690 <main+0x2f0>)
 800261e:	f000 fce3 	bl	8002fe8 <Process_OBC_Movement_Test>
				  SD_Active = &SD_RECORD;
 8002622:	4b25      	ldr	r3, [pc, #148]	; (80026b8 <main+0x318>)
 8002624:	4a1e      	ldr	r2, [pc, #120]	; (80026a0 <main+0x300>)
 8002626:	601a      	str	r2, [r3, #0]
				  flash = 500;
 8002628:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800262c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				  CURR_TASK = TASK_RECORD;
 8002630:	4b22      	ldr	r3, [pc, #136]	; (80026bc <main+0x31c>)
 8002632:	2216      	movs	r2, #22
 8002634:	701a      	strb	r2, [r3, #0]
				  SEND_ACKNACK( &comm, TASK_RECORD, 0, can.source);
 8002636:	4b1c      	ldr	r3, [pc, #112]	; (80026a8 <main+0x308>)
 8002638:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800263c:	2200      	movs	r2, #0
 800263e:	2116      	movs	r1, #22
 8002640:	4816      	ldr	r0, [pc, #88]	; (800269c <main+0x2fc>)
 8002642:	f001 fb9b 	bl	8003d7c <SEND_ACKNACK>
		  break;
 8002646:	e057      	b.n	80026f8 <main+0x358>
			  else if (OBC_STATE == 4)
 8002648:	4b19      	ldr	r3, [pc, #100]	; (80026b0 <main+0x310>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	2b04      	cmp	r3, #4
 800264e:	d112      	bne.n	8002676 <main+0x2d6>
				  OBC_STATE = 0;
 8002650:	4b17      	ldr	r3, [pc, #92]	; (80026b0 <main+0x310>)
 8002652:	2200      	movs	r2, #0
 8002654:	701a      	strb	r2, [r3, #0]
				  flash = 2000;
 8002656:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800265a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				  CURR_TASK = 0xFF;
 800265e:	4b17      	ldr	r3, [pc, #92]	; (80026bc <main+0x31c>)
 8002660:	22ff      	movs	r2, #255	; 0xff
 8002662:	701a      	strb	r2, [r3, #0]
				  SEND_ACKNACK( &comm, TASK_RECORD, 0, can.source);
 8002664:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <main+0x308>)
 8002666:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800266a:	2200      	movs	r2, #0
 800266c:	2116      	movs	r1, #22
 800266e:	480b      	ldr	r0, [pc, #44]	; (800269c <main+0x2fc>)
 8002670:	f001 fb84 	bl	8003d7c <SEND_ACKNACK>
		  break;
 8002674:	e040      	b.n	80026f8 <main+0x358>
				  SEND_ACKNACK( &comm, TASK_RECORD, 1, can.source);
 8002676:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <main+0x308>)
 8002678:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800267c:	2201      	movs	r2, #1
 800267e:	2116      	movs	r1, #22
 8002680:	4806      	ldr	r0, [pc, #24]	; (800269c <main+0x2fc>)
 8002682:	f001 fb7b 	bl	8003d7c <SEND_ACKNACK>
		  break;
 8002686:	e037      	b.n	80026f8 <main+0x358>
 8002688:	20003608 	.word	0x20003608
 800268c:	2000023c 	.word	0x2000023c
 8002690:	20000370 	.word	0x20000370
 8002694:	20000394 	.word	0x20000394
 8002698:	20000214 	.word	0x20000214
 800269c:	200003b0 	.word	0x200003b0
 80026a0:	200025b4 	.word	0x200025b4
 80026a4:	40020000 	.word	0x40020000
 80026a8:	200004c4 	.word	0x200004c4
 80026ac:	20000508 	.word	0x20000508
 80026b0:	2000360a 	.word	0x2000360a
 80026b4:	20000514 	.word	0x20000514
 80026b8:	20003604 	.word	0x20003604
 80026bc:	2000360b 	.word	0x2000360b
 80026c0:	20001564 	.word	0x20001564
	  case 2:
		  // Process DIRECT
		  if (can.buffer[0] == 0)
 80026c4:	4b5c      	ldr	r3, [pc, #368]	; (8002838 <main+0x498>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d117      	bne.n	80026fc <main+0x35c>
		  {
			  acknack = Solenoid_Move_Start( &sol, can.buffer[1], can.buffer[2] );
 80026cc:	4b5a      	ldr	r3, [pc, #360]	; (8002838 <main+0x498>)
 80026ce:	785b      	ldrb	r3, [r3, #1]
 80026d0:	4a59      	ldr	r2, [pc, #356]	; (8002838 <main+0x498>)
 80026d2:	7892      	ldrb	r2, [r2, #2]
 80026d4:	4619      	mov	r1, r3
 80026d6:	4859      	ldr	r0, [pc, #356]	; (800283c <main+0x49c>)
 80026d8:	f000 fdaa 	bl	8003230 <Solenoid_Move_Start>
 80026dc:	4603      	mov	r3, r0
 80026de:	461a      	mov	r2, r3
 80026e0:	4b57      	ldr	r3, [pc, #348]	; (8002840 <main+0x4a0>)
 80026e2:	701a      	strb	r2, [r3, #0]
			  SEND_ACKNACK( &comm, TASK_SOL, acknack, can.source);
 80026e4:	4b56      	ldr	r3, [pc, #344]	; (8002840 <main+0x4a0>)
 80026e6:	781a      	ldrb	r2, [r3, #0]
 80026e8:	4b53      	ldr	r3, [pc, #332]	; (8002838 <main+0x498>)
 80026ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026ee:	2100      	movs	r1, #0
 80026f0:	4854      	ldr	r0, [pc, #336]	; (8002844 <main+0x4a4>)
 80026f2:	f001 fb43 	bl	8003d7c <SEND_ACKNACK>
			  // IF returns 1 send NACK
		  }
		  break;
 80026f6:	e001      	b.n	80026fc <main+0x35c>
		  break;
 80026f8:	bf00      	nop
 80026fa:	e000      	b.n	80026fe <main+0x35e>
		  break;
 80026fc:	bf00      	nop

	  /*
	   * EVERY LOOP TASKS
	   */

	  Process_Solenoid( &sol );
 80026fe:	484f      	ldr	r0, [pc, #316]	; (800283c <main+0x49c>)
 8002700:	f000 fdca 	bl	8003298 <Process_Solenoid>

//	  Process_TEST(uint8_t* OBC_STATE, uint8_t CURR_TASK)

	  if (OBC_STATE)
 8002704:	4b50      	ldr	r3, [pc, #320]	; (8002848 <main+0x4a8>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d06f      	beq.n	80027ec <main+0x44c>
	  {
		  if (OBC_STATE == 1)
 800270c:	4b4e      	ldr	r3, [pc, #312]	; (8002848 <main+0x4a8>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d123      	bne.n	800275c <main+0x3bc>
		  {
			  if (HAL_GetTick() - test_time > 5000)
 8002714:	f001 fc3a 	bl	8003f8c <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002722:	4293      	cmp	r3, r2
 8002724:	d955      	bls.n	80027d2 <main+0x432>
			  {
				  if (CURR_TASK == TASK_AB_TEST)
 8002726:	4b49      	ldr	r3, [pc, #292]	; (800284c <main+0x4ac>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b14      	cmp	r3, #20
 800272c:	d105      	bne.n	800273a <main+0x39a>
					  Solenoid_Move_Start(&sol, 2, 12);
 800272e:	220c      	movs	r2, #12
 8002730:	2102      	movs	r1, #2
 8002732:	4842      	ldr	r0, [pc, #264]	; (800283c <main+0x49c>)
 8002734:	f000 fd7c 	bl	8003230 <Solenoid_Move_Start>
 8002738:	e008      	b.n	800274c <main+0x3ac>
				  else if (CURR_TASK == TASK_SPIN_TEST)
 800273a:	4b44      	ldr	r3, [pc, #272]	; (800284c <main+0x4ac>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b15      	cmp	r3, #21
 8002740:	d104      	bne.n	800274c <main+0x3ac>
					  Solenoid_Move_Start(&sol, 3, 10);
 8002742:	220a      	movs	r2, #10
 8002744:	2103      	movs	r1, #3
 8002746:	483d      	ldr	r0, [pc, #244]	; (800283c <main+0x49c>)
 8002748:	f000 fd72 	bl	8003230 <Solenoid_Move_Start>
				  OBC_STATE = 2;
 800274c:	4b3e      	ldr	r3, [pc, #248]	; (8002848 <main+0x4a8>)
 800274e:	2202      	movs	r2, #2
 8002750:	701a      	strb	r2, [r3, #0]
				  flash = 1000;
 8002752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002756:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800275a:	e03a      	b.n	80027d2 <main+0x432>
			  }
		  }
		  else if (OBC_STATE == 2)
 800275c:	4b3a      	ldr	r3, [pc, #232]	; (8002848 <main+0x4a8>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b02      	cmp	r3, #2
 8002762:	d122      	bne.n	80027aa <main+0x40a>
		  {
			  if (HAL_GetTick() - test_time > 15000)
 8002764:	f001 fc12 	bl	8003f8c <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	f643 2298 	movw	r2, #15000	; 0x3a98
 8002772:	4293      	cmp	r3, r2
 8002774:	d92d      	bls.n	80027d2 <main+0x432>
			  {
				  if (CURR_TASK == TASK_AB_TEST)
 8002776:	4b35      	ldr	r3, [pc, #212]	; (800284c <main+0x4ac>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b14      	cmp	r3, #20
 800277c:	d105      	bne.n	800278a <main+0x3ea>
					  Solenoid_Move_Start(&sol, 1, 5);
 800277e:	2205      	movs	r2, #5
 8002780:	2101      	movs	r1, #1
 8002782:	482e      	ldr	r0, [pc, #184]	; (800283c <main+0x49c>)
 8002784:	f000 fd54 	bl	8003230 <Solenoid_Move_Start>
 8002788:	e008      	b.n	800279c <main+0x3fc>
				  else if (CURR_TASK == TASK_SPIN_TEST)
 800278a:	4b30      	ldr	r3, [pc, #192]	; (800284c <main+0x4ac>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2b15      	cmp	r3, #21
 8002790:	d104      	bne.n	800279c <main+0x3fc>
					  Solenoid_Move_Start(&sol, 4, 10);
 8002792:	220a      	movs	r2, #10
 8002794:	2104      	movs	r1, #4
 8002796:	4829      	ldr	r0, [pc, #164]	; (800283c <main+0x49c>)
 8002798:	f000 fd4a 	bl	8003230 <Solenoid_Move_Start>
				  OBC_STATE = 3;
 800279c:	4b2a      	ldr	r3, [pc, #168]	; (8002848 <main+0x4a8>)
 800279e:	2203      	movs	r2, #3
 80027a0:	701a      	strb	r2, [r3, #0]
				  flash = 100;
 80027a2:	2364      	movs	r3, #100	; 0x64
 80027a4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80027a8:	e013      	b.n	80027d2 <main+0x432>
			  }
		  }
		  else if (OBC_STATE == 3)
 80027aa:	4b27      	ldr	r3, [pc, #156]	; (8002848 <main+0x4a8>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b03      	cmp	r3, #3
 80027b0:	d10f      	bne.n	80027d2 <main+0x432>
		  {
			  if (HAL_GetTick() - test_time > 30000)
 80027b2:	f001 fbeb 	bl	8003f8c <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	f247 5230 	movw	r2, #30000	; 0x7530
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d906      	bls.n	80027d2 <main+0x432>
			  {
				  OBC_STATE = 0;
 80027c4:	4b20      	ldr	r3, [pc, #128]	; (8002848 <main+0x4a8>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	701a      	strb	r2, [r3, #0]
				  flash = 2000;
 80027ca:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80027ce:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
			  }
		  }
		  // STORE DATA
		  Process_OBC_Movement_Test_WRITE_DATA(OBC_STATE, sol.move_selected, &acc_gyro, &comp, SD_Active, &tel_rx);
 80027d2:	4b1d      	ldr	r3, [pc, #116]	; (8002848 <main+0x4a8>)
 80027d4:	7818      	ldrb	r0, [r3, #0]
 80027d6:	4b19      	ldr	r3, [pc, #100]	; (800283c <main+0x49c>)
 80027d8:	7919      	ldrb	r1, [r3, #4]
 80027da:	4b1d      	ldr	r3, [pc, #116]	; (8002850 <main+0x4b0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a1d      	ldr	r2, [pc, #116]	; (8002854 <main+0x4b4>)
 80027e0:	9201      	str	r2, [sp, #4]
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	4b1c      	ldr	r3, [pc, #112]	; (8002858 <main+0x4b8>)
 80027e6:	4a1d      	ldr	r2, [pc, #116]	; (800285c <main+0x4bc>)
 80027e8:	f000 fc64 	bl	80030b4 <Process_OBC_Movement_Test_WRITE_DATA>

	  /*
	   * TIMED TASKS
	   */

	  if (HAL_GetTick() - beacon_time > 5000)
 80027ec:	f001 fbce 	bl	8003f8c <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d908      	bls.n	8002810 <main+0x470>
	  {
		  // SEND BEACON
		  beacon_time = HAL_GetTick();
 80027fe:	f001 fbc5 	bl	8003f8c <HAL_GetTick>
 8002802:	65f8      	str	r0, [r7, #92]	; 0x5c
		  Process_BEACON( &comm, OBC_STATE );
 8002804:	4b10      	ldr	r3, [pc, #64]	; (8002848 <main+0x4a8>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	4619      	mov	r1, r3
 800280a:	480e      	ldr	r0, [pc, #56]	; (8002844 <main+0x4a4>)
 800280c:	f000 fbb7 	bl	8002f7e <Process_BEACON>
	  }

	  if (HAL_GetTick() - flash_time > flash)
 8002810:	f001 fbbc 	bl	8003f8c <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002818:	1ad2      	subs	r2, r2, r3
 800281a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800281e:	429a      	cmp	r2, r3
 8002820:	f67f adfb 	bls.w	800241a <main+0x7a>
	  {
		  flash_time = HAL_GetTick();
 8002824:	f001 fbb2 	bl	8003f8c <HAL_GetTick>
 8002828:	65b8      	str	r0, [r7, #88]	; 0x58
		  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800282a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800282e:	480c      	ldr	r0, [pc, #48]	; (8002860 <main+0x4c0>)
 8002830:	f002 fd13 	bl	800525a <HAL_GPIO_TogglePin>
	  if( button_flag == 1 )
 8002834:	e5f1      	b.n	800241a <main+0x7a>
 8002836:	bf00      	nop
 8002838:	200004c4 	.word	0x200004c4
 800283c:	200003a8 	.word	0x200003a8
 8002840:	20003609 	.word	0x20003609
 8002844:	200003b0 	.word	0x200003b0
 8002848:	2000360a 	.word	0x2000360a
 800284c:	2000360b 	.word	0x2000360b
 8002850:	20003604 	.word	0x20003604
 8002854:	20000508 	.word	0x20000508
 8002858:	20000370 	.word	0x20000370
 800285c:	20000394 	.word	0x20000394
 8002860:	40020000 	.word	0x40020000

08002864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b094      	sub	sp, #80	; 0x50
 8002868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800286a:	f107 031c 	add.w	r3, r7, #28
 800286e:	2234      	movs	r2, #52	; 0x34
 8002870:	2100      	movs	r1, #0
 8002872:	4618      	mov	r0, r3
 8002874:	f008 f916 	bl	800aaa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002878:	f107 0308 	add.w	r3, r7, #8
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	60da      	str	r2, [r3, #12]
 8002886:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002888:	2300      	movs	r3, #0
 800288a:	607b      	str	r3, [r7, #4]
 800288c:	4b28      	ldr	r3, [pc, #160]	; (8002930 <SystemClock_Config+0xcc>)
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	4a27      	ldr	r2, [pc, #156]	; (8002930 <SystemClock_Config+0xcc>)
 8002892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002896:	6413      	str	r3, [r2, #64]	; 0x40
 8002898:	4b25      	ldr	r3, [pc, #148]	; (8002930 <SystemClock_Config+0xcc>)
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a0:	607b      	str	r3, [r7, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028a4:	2300      	movs	r3, #0
 80028a6:	603b      	str	r3, [r7, #0]
 80028a8:	4b22      	ldr	r3, [pc, #136]	; (8002934 <SystemClock_Config+0xd0>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a21      	ldr	r2, [pc, #132]	; (8002934 <SystemClock_Config+0xd0>)
 80028ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028b2:	6013      	str	r3, [r2, #0]
 80028b4:	4b1f      	ldr	r3, [pc, #124]	; (8002934 <SystemClock_Config+0xd0>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80028bc:	603b      	str	r3, [r7, #0]
 80028be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028c0:	2301      	movs	r3, #1
 80028c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028ca:	2302      	movs	r3, #2
 80028cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80028d4:	2304      	movs	r3, #4
 80028d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 80028d8:	2340      	movs	r3, #64	; 0x40
 80028da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80028dc:	2304      	movs	r3, #4
 80028de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80028e0:	2302      	movs	r3, #2
 80028e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80028e4:	2302      	movs	r3, #2
 80028e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028e8:	f107 031c 	add.w	r3, r7, #28
 80028ec:	4618      	mov	r0, r3
 80028ee:	f003 fed3 	bl	8006698 <HAL_RCC_OscConfig>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80028f8:	f000 f9b6 	bl	8002c68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028fc:	230f      	movs	r3, #15
 80028fe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002900:	2302      	movs	r3, #2
 8002902:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002904:	2300      	movs	r3, #0
 8002906:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800290c:	2300      	movs	r3, #0
 800290e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002910:	f107 0308 	add.w	r3, r7, #8
 8002914:	2101      	movs	r1, #1
 8002916:	4618      	mov	r0, r3
 8002918:	f003 fc9e 	bl	8006258 <HAL_RCC_ClockConfig>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002922:	f000 f9a1 	bl	8002c68 <Error_Handler>
  }
}
 8002926:	bf00      	nop
 8002928:	3750      	adds	r7, #80	; 0x50
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40023800 	.word	0x40023800
 8002934:	40007000 	.word	0x40007000

08002938 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800293c:	4b17      	ldr	r3, [pc, #92]	; (800299c <MX_CAN1_Init+0x64>)
 800293e:	4a18      	ldr	r2, [pc, #96]	; (80029a0 <MX_CAN1_Init+0x68>)
 8002940:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8002942:	4b16      	ldr	r3, [pc, #88]	; (800299c <MX_CAN1_Init+0x64>)
 8002944:	2202      	movs	r2, #2
 8002946:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002948:	4b14      	ldr	r3, [pc, #80]	; (800299c <MX_CAN1_Init+0x64>)
 800294a:	2200      	movs	r2, #0
 800294c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800294e:	4b13      	ldr	r3, [pc, #76]	; (800299c <MX_CAN1_Init+0x64>)
 8002950:	2200      	movs	r2, #0
 8002952:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8002954:	4b11      	ldr	r3, [pc, #68]	; (800299c <MX_CAN1_Init+0x64>)
 8002956:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800295a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800295c:	4b0f      	ldr	r3, [pc, #60]	; (800299c <MX_CAN1_Init+0x64>)
 800295e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002962:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002964:	4b0d      	ldr	r3, [pc, #52]	; (800299c <MX_CAN1_Init+0x64>)
 8002966:	2200      	movs	r2, #0
 8002968:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800296a:	4b0c      	ldr	r3, [pc, #48]	; (800299c <MX_CAN1_Init+0x64>)
 800296c:	2200      	movs	r2, #0
 800296e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002970:	4b0a      	ldr	r3, [pc, #40]	; (800299c <MX_CAN1_Init+0x64>)
 8002972:	2200      	movs	r2, #0
 8002974:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002976:	4b09      	ldr	r3, [pc, #36]	; (800299c <MX_CAN1_Init+0x64>)
 8002978:	2200      	movs	r2, #0
 800297a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800297c:	4b07      	ldr	r3, [pc, #28]	; (800299c <MX_CAN1_Init+0x64>)
 800297e:	2200      	movs	r2, #0
 8002980:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <MX_CAN1_Init+0x64>)
 8002984:	2200      	movs	r2, #0
 8002986:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002988:	4804      	ldr	r0, [pc, #16]	; (800299c <MX_CAN1_Init+0x64>)
 800298a:	f001 fb2f 	bl	8003fec <HAL_CAN_Init>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002994:	f000 f968 	bl	8002c68 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002998:	bf00      	nop
 800299a:	bd80      	pop	{r7, pc}
 800299c:	20000214 	.word	0x20000214
 80029a0:	40006400 	.word	0x40006400

080029a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029a8:	4b12      	ldr	r3, [pc, #72]	; (80029f4 <MX_I2C1_Init+0x50>)
 80029aa:	4a13      	ldr	r2, [pc, #76]	; (80029f8 <MX_I2C1_Init+0x54>)
 80029ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80029ae:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <MX_I2C1_Init+0x50>)
 80029b0:	4a12      	ldr	r2, [pc, #72]	; (80029fc <MX_I2C1_Init+0x58>)
 80029b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029b4:	4b0f      	ldr	r3, [pc, #60]	; (80029f4 <MX_I2C1_Init+0x50>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80029ba:	4b0e      	ldr	r3, [pc, #56]	; (80029f4 <MX_I2C1_Init+0x50>)
 80029bc:	2200      	movs	r2, #0
 80029be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029c0:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <MX_I2C1_Init+0x50>)
 80029c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029c8:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <MX_I2C1_Init+0x50>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80029ce:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <MX_I2C1_Init+0x50>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029d4:	4b07      	ldr	r3, [pc, #28]	; (80029f4 <MX_I2C1_Init+0x50>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029da:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <MX_I2C1_Init+0x50>)
 80029dc:	2200      	movs	r2, #0
 80029de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029e0:	4804      	ldr	r0, [pc, #16]	; (80029f4 <MX_I2C1_Init+0x50>)
 80029e2:	f002 fc79 	bl	80052d8 <HAL_I2C_Init>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80029ec:	f000 f93c 	bl	8002c68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029f0:	bf00      	nop
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	2000023c 	.word	0x2000023c
 80029f8:	40005400 	.word	0x40005400
 80029fc:	000186a0 	.word	0x000186a0

08002a00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002a04:	4b17      	ldr	r3, [pc, #92]	; (8002a64 <MX_SPI1_Init+0x64>)
 8002a06:	4a18      	ldr	r2, [pc, #96]	; (8002a68 <MX_SPI1_Init+0x68>)
 8002a08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a0a:	4b16      	ldr	r3, [pc, #88]	; (8002a64 <MX_SPI1_Init+0x64>)
 8002a0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a12:	4b14      	ldr	r3, [pc, #80]	; (8002a64 <MX_SPI1_Init+0x64>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a18:	4b12      	ldr	r3, [pc, #72]	; (8002a64 <MX_SPI1_Init+0x64>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a1e:	4b11      	ldr	r3, [pc, #68]	; (8002a64 <MX_SPI1_Init+0x64>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a24:	4b0f      	ldr	r3, [pc, #60]	; (8002a64 <MX_SPI1_Init+0x64>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a2a:	4b0e      	ldr	r3, [pc, #56]	; (8002a64 <MX_SPI1_Init+0x64>)
 8002a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a32:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <MX_SPI1_Init+0x64>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a38:	4b0a      	ldr	r3, [pc, #40]	; (8002a64 <MX_SPI1_Init+0x64>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a3e:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <MX_SPI1_Init+0x64>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a44:	4b07      	ldr	r3, [pc, #28]	; (8002a64 <MX_SPI1_Init+0x64>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002a4a:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <MX_SPI1_Init+0x64>)
 8002a4c:	220a      	movs	r2, #10
 8002a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a50:	4804      	ldr	r0, [pc, #16]	; (8002a64 <MX_SPI1_Init+0x64>)
 8002a52:	f004 f8a5 	bl	8006ba0 <HAL_SPI_Init>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002a5c:	f000 f904 	bl	8002c68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a60:	bf00      	nop
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	20000290 	.word	0x20000290
 8002a68:	40013000 	.word	0x40013000

08002a6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a70:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <MX_USART1_UART_Init+0x4c>)
 8002a72:	4a12      	ldr	r2, [pc, #72]	; (8002abc <MX_USART1_UART_Init+0x50>)
 8002a74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a76:	4b10      	ldr	r3, [pc, #64]	; (8002ab8 <MX_USART1_UART_Init+0x4c>)
 8002a78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a7e:	4b0e      	ldr	r3, [pc, #56]	; (8002ab8 <MX_USART1_UART_Init+0x4c>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a84:	4b0c      	ldr	r3, [pc, #48]	; (8002ab8 <MX_USART1_UART_Init+0x4c>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a8a:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <MX_USART1_UART_Init+0x4c>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a90:	4b09      	ldr	r3, [pc, #36]	; (8002ab8 <MX_USART1_UART_Init+0x4c>)
 8002a92:	220c      	movs	r2, #12
 8002a94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a96:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <MX_USART1_UART_Init+0x4c>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a9c:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <MX_USART1_UART_Init+0x4c>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002aa2:	4805      	ldr	r0, [pc, #20]	; (8002ab8 <MX_USART1_UART_Init+0x4c>)
 8002aa4:	f004 fcae 	bl	8007404 <HAL_UART_Init>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002aae:	f000 f8db 	bl	8002c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ab2:	bf00      	nop
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	200002e8 	.word	0x200002e8
 8002abc:	40011000 	.word	0x40011000

08002ac0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ac4:	4b11      	ldr	r3, [pc, #68]	; (8002b0c <MX_USART2_UART_Init+0x4c>)
 8002ac6:	4a12      	ldr	r2, [pc, #72]	; (8002b10 <MX_USART2_UART_Init+0x50>)
 8002ac8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002aca:	4b10      	ldr	r3, [pc, #64]	; (8002b0c <MX_USART2_UART_Init+0x4c>)
 8002acc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ad0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ad2:	4b0e      	ldr	r3, [pc, #56]	; (8002b0c <MX_USART2_UART_Init+0x4c>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ad8:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <MX_USART2_UART_Init+0x4c>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ade:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <MX_USART2_UART_Init+0x4c>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ae4:	4b09      	ldr	r3, [pc, #36]	; (8002b0c <MX_USART2_UART_Init+0x4c>)
 8002ae6:	220c      	movs	r2, #12
 8002ae8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aea:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <MX_USART2_UART_Init+0x4c>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002af0:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <MX_USART2_UART_Init+0x4c>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002af6:	4805      	ldr	r0, [pc, #20]	; (8002b0c <MX_USART2_UART_Init+0x4c>)
 8002af8:	f004 fc84 	bl	8007404 <HAL_UART_Init>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002b02:	f000 f8b1 	bl	8002c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b06:	bf00      	nop
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	2000032c 	.word	0x2000032c
 8002b10:	40004400 	.word	0x40004400

08002b14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b08a      	sub	sp, #40	; 0x28
 8002b18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b1a:	f107 0314 	add.w	r3, r7, #20
 8002b1e:	2200      	movs	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	605a      	str	r2, [r3, #4]
 8002b24:	609a      	str	r2, [r3, #8]
 8002b26:	60da      	str	r2, [r3, #12]
 8002b28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	613b      	str	r3, [r7, #16]
 8002b2e:	4b4a      	ldr	r3, [pc, #296]	; (8002c58 <MX_GPIO_Init+0x144>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	4a49      	ldr	r2, [pc, #292]	; (8002c58 <MX_GPIO_Init+0x144>)
 8002b34:	f043 0304 	orr.w	r3, r3, #4
 8002b38:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3a:	4b47      	ldr	r3, [pc, #284]	; (8002c58 <MX_GPIO_Init+0x144>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	f003 0304 	and.w	r3, r3, #4
 8002b42:	613b      	str	r3, [r7, #16]
 8002b44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	4b43      	ldr	r3, [pc, #268]	; (8002c58 <MX_GPIO_Init+0x144>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	4a42      	ldr	r2, [pc, #264]	; (8002c58 <MX_GPIO_Init+0x144>)
 8002b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b54:	6313      	str	r3, [r2, #48]	; 0x30
 8002b56:	4b40      	ldr	r3, [pc, #256]	; (8002c58 <MX_GPIO_Init+0x144>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b62:	2300      	movs	r3, #0
 8002b64:	60bb      	str	r3, [r7, #8]
 8002b66:	4b3c      	ldr	r3, [pc, #240]	; (8002c58 <MX_GPIO_Init+0x144>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	4a3b      	ldr	r2, [pc, #236]	; (8002c58 <MX_GPIO_Init+0x144>)
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	6313      	str	r3, [r2, #48]	; 0x30
 8002b72:	4b39      	ldr	r3, [pc, #228]	; (8002c58 <MX_GPIO_Init+0x144>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	60bb      	str	r3, [r7, #8]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	607b      	str	r3, [r7, #4]
 8002b82:	4b35      	ldr	r3, [pc, #212]	; (8002c58 <MX_GPIO_Init+0x144>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	4a34      	ldr	r2, [pc, #208]	; (8002c58 <MX_GPIO_Init+0x144>)
 8002b88:	f043 0302 	orr.w	r3, r3, #2
 8002b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b8e:	4b32      	ldr	r3, [pc, #200]	; (8002c58 <MX_GPIO_Init+0x144>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	607b      	str	r3, [r7, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SD_CS1_Pin|SD_CS2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f248 1110 	movw	r1, #33040	; 0x8110
 8002ba0:	482e      	ldr	r0, [pc, #184]	; (8002c5c <MX_GPIO_Init+0x148>)
 8002ba2:	f002 fb41 	bl	8005228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SOL_N1_Pin|SOL_N2_Pin|SOL_N3_Pin|SOL_N4_Pin, GPIO_PIN_RESET);
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002bac:	482c      	ldr	r0, [pc, #176]	; (8002c60 <MX_GPIO_Init+0x14c>)
 8002bae:	f002 fb3b 	bl	8005228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SW1_EXT_Pin */
  GPIO_InitStruct.Pin = SW1_EXT_Pin;
 8002bb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002bb8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002bbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_EXT_GPIO_Port, &GPIO_InitStruct);
 8002bc2:	f107 0314 	add.w	r3, r7, #20
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4826      	ldr	r0, [pc, #152]	; (8002c64 <MX_GPIO_Init+0x150>)
 8002bca:	f002 f9b9 	bl	8004f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS1_Pin SD_CS2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = SD_CS1_Pin|SD_CS2_Pin|LED1_Pin;
 8002bce:	f248 1310 	movw	r3, #33040	; 0x8110
 8002bd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be0:	f107 0314 	add.w	r3, r7, #20
 8002be4:	4619      	mov	r1, r3
 8002be6:	481d      	ldr	r0, [pc, #116]	; (8002c5c <MX_GPIO_Init+0x148>)
 8002be8:	f002 f9aa 	bl	8004f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_COMP_Pin */
  GPIO_InitStruct.Pin = EXT_COMP_Pin;
 8002bec:	2301      	movs	r3, #1
 8002bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002bf0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002bf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXT_COMP_GPIO_Port, &GPIO_InitStruct);
 8002bfa:	f107 0314 	add.w	r3, r7, #20
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4817      	ldr	r0, [pc, #92]	; (8002c60 <MX_GPIO_Init+0x14c>)
 8002c02:	f002 f99d 	bl	8004f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_GYRO_Pin EXT_ACC_Pin */
  GPIO_InitStruct.Pin = EXT_GYRO_Pin|EXT_ACC_Pin;
 8002c06:	2306      	movs	r3, #6
 8002c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c0a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c14:	f107 0314 	add.w	r3, r7, #20
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4811      	ldr	r0, [pc, #68]	; (8002c60 <MX_GPIO_Init+0x14c>)
 8002c1c:	f002 f990 	bl	8004f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : SOL_N1_Pin SOL_N2_Pin SOL_N3_Pin SOL_N4_Pin */
  GPIO_InitStruct.Pin = SOL_N1_Pin|SOL_N2_Pin|SOL_N3_Pin|SOL_N4_Pin;
 8002c20:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002c24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c26:	2301      	movs	r3, #1
 8002c28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c32:	f107 0314 	add.w	r3, r7, #20
 8002c36:	4619      	mov	r1, r3
 8002c38:	4809      	ldr	r0, [pc, #36]	; (8002c60 <MX_GPIO_Init+0x14c>)
 8002c3a:	f002 f981 	bl	8004f40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2100      	movs	r1, #0
 8002c42:	2028      	movs	r0, #40	; 0x28
 8002c44:	f002 f945 	bl	8004ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c48:	2028      	movs	r0, #40	; 0x28
 8002c4a:	f002 f95e 	bl	8004f0a <HAL_NVIC_EnableIRQ>

}
 8002c4e:	bf00      	nop
 8002c50:	3728      	adds	r7, #40	; 0x28
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	40020000 	.word	0x40020000
 8002c60:	40020400 	.word	0x40020400
 8002c64:	40020800 	.word	0x40020800

08002c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c6c:	b672      	cpsid	i
}
 8002c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c70:	e7fe      	b.n	8002c70 <Error_Handler+0x8>

08002c72 <Process_CAN_INBOX>:
/*
 * CAN FUNCTIONS
 */

can_buf Process_CAN_INBOX( CANBUS *dev )
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b094      	sub	sp, #80	; 0x50
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
 8002c7a:	6039      	str	r1, [r7, #0]
	can_buf temp;
	for (uint8_t i = 0; i < OTHER_NODES; i++)
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002c82:	e06a      	b.n	8002d5a <Process_CAN_INBOX+0xe8>
	{
		if (dev->RX_received_flag[i] == 1)
 8002c84:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d15d      	bne.n	8002d50 <Process_CAN_INBOX+0xde>
			msg_typ: canbus->RXstack[i][0] & 0x3;
			source: canbus->RXstack[i][1] & 0xF;
			len: canbus->RXstack[i][2];
			data start: canbus->RXstack[i][3]
			 */
			temp.msg_typ = dev->RXstack[i][0] & 0x3;
 8002c94:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	019b      	lsls	r3, r3, #6
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3389      	adds	r3, #137	; 0x89
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
			temp.source = dev->RXstack[i][1] & 0xF;
 8002cac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	019b      	lsls	r3, r3, #6
 8002cb4:	4413      	add	r3, r2
 8002cb6:	338a      	adds	r3, #138	; 0x8a
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
			temp.len = dev->RXstack[i][2];
 8002cc4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	019b      	lsls	r3, r3, #6
 8002ccc:	4413      	add	r3, r2
 8002cce:	338b      	adds	r3, #139	; 0x8b
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
			for (uint8_t j = 0; j < temp.len; j++)
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002cdc:	e015      	b.n	8002d0a <Process_CAN_INBOX+0x98>
			{
				temp.buffer[j] = dev->RXstack[i][3+j];
 8002cde:	f897 104f 	ldrb.w	r1, [r7, #79]	; 0x4f
 8002ce2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002ce6:	1cda      	adds	r2, r3, #3
 8002ce8:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002cec:	6838      	ldr	r0, [r7, #0]
 8002cee:	0189      	lsls	r1, r1, #6
 8002cf0:	4401      	add	r1, r0
 8002cf2:	440a      	add	r2, r1
 8002cf4:	3289      	adds	r2, #137	; 0x89
 8002cf6:	7812      	ldrb	r2, [r2, #0]
 8002cf8:	3350      	adds	r3, #80	; 0x50
 8002cfa:	443b      	add	r3, r7
 8002cfc:	f803 2c48 	strb.w	r2, [r3, #-72]
			for (uint8_t j = 0; j < temp.len; j++)
 8002d00:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002d04:	3301      	adds	r3, #1
 8002d06:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002d0a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002d0e:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d3e3      	bcc.n	8002cde <Process_CAN_INBOX+0x6c>
			}
			CAN_CLEAR( dev, i );
 8002d16:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	6838      	ldr	r0, [r7, #0]
 8002d1e:	f001 f89a 	bl	8003e56 <CAN_CLEAR>
			dev->RX_received_flag[i] = 0;
 8002d22:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	4413      	add	r3, r2
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
			dev->RX_message_pointer[i] = 0;
 8002d30:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	4413      	add	r3, r2
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
			return temp;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f107 0308 	add.w	r3, r7, #8
 8002d46:	2243      	movs	r2, #67	; 0x43
 8002d48:	4619      	mov	r1, r3
 8002d4a:	f007 fe9d 	bl	800aa88 <memcpy>
 8002d4e:	e013      	b.n	8002d78 <Process_CAN_INBOX+0x106>
	for (uint8_t i = 0; i < OTHER_NODES; i++)
 8002d50:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002d54:	3301      	adds	r3, #1
 8002d56:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002d5a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d990      	bls.n	8002c84 <Process_CAN_INBOX+0x12>
		}
	}
	temp.msg_typ = 4;
 8002d62:	2304      	movs	r3, #4
 8002d64:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	return temp;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f107 0308 	add.w	r3, r7, #8
 8002d70:	2243      	movs	r2, #67	; 0x43
 8002d72:	4619      	mov	r1, r3
 8002d74:	f007 fe88 	bl	800aa88 <memcpy>
}
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	3750      	adds	r7, #80	; 0x50
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <Process_TELEMETRY_REQ>:
	CAN_TX_ID TX_ID = CAN_setID( SAT_OBC, SAT_EPS, MSG_DIR );
	CAN_Transmit( dev, TX_ID, (uint8_t*) message, 3 );
}

void Process_TELEMETRY_REQ( CANBUS *dev, can_buf data, ISM330 *accgyro, LIS2MDL *comp )
{
 8002d80:	b084      	sub	sp, #16
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b086      	sub	sp, #24
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002d8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	if (data.buffer[1] == 0)
 8002d92:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f040 80bb 	bne.w	8002f12 <Process_TELEMETRY_REQ+0x192>
	{
		// Process TELEMETRY
		uint8_t TEL_MSG[8];
		uint8_t TEL_LEN;
		switch(data.buffer[0])
 8002d9c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002da0:	2b04      	cmp	r3, #4
 8002da2:	f200 809f 	bhi.w	8002ee4 <Process_TELEMETRY_REQ+0x164>
 8002da6:	a201      	add	r2, pc, #4	; (adr r2, 8002dac <Process_TELEMETRY_REQ+0x2c>)
 8002da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dac:	08002dc1 	.word	0x08002dc1
 8002db0:	08002e25 	.word	0x08002e25
 8002db4:	08002e8d 	.word	0x08002e8d
 8002db8:	08002eb7 	.word	0x08002eb7
 8002dbc:	08002ee5 	.word	0x08002ee5
		{
			case 0:
				// Get Acceleration Data
				ISM330_ReadAcc(accgyro);
 8002dc0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002dc2:	f7fe fa04 	bl	80011ce <ISM330_ReadAcc>
				/*
				 * ACC DATA UINT16_t[3]
				 * [TEL_ID][SEND_DATA][ACC1u][ACC1l][ACC2u][ACC2l][ACC3u][ACC3l]
				 */
				TEL_LEN = 8;
 8002dc6:	2308      	movs	r3, #8
 8002dc8:	75fb      	strb	r3, [r7, #23]
				TEL_MSG[0] = data.buffer[0];  	// Set TEL_ID
 8002dca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002dce:	733b      	strb	r3, [r7, #12]
				TEL_MSG[1] = 1;					// Sending data
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	737b      	strb	r3, [r7, #13]

				for ( uint8_t i = 0; i < 3; i++ )
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	75bb      	strb	r3, [r7, #22]
 8002dd8:	e020      	b.n	8002e1c <Process_TELEMETRY_REQ+0x9c>
				{
					TEL_MSG[2*i+2] = (accgyro->acc_raw[i] >> 8) & 0x00FF;
 8002dda:	7dbb      	ldrb	r3, [r7, #22]
 8002ddc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	4413      	add	r3, r2
 8002de2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002de6:	121b      	asrs	r3, r3, #8
 8002de8:	b21a      	sxth	r2, r3
 8002dea:	7dbb      	ldrb	r3, [r7, #22]
 8002dec:	3301      	adds	r3, #1
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	b2d2      	uxtb	r2, r2
 8002df2:	3318      	adds	r3, #24
 8002df4:	443b      	add	r3, r7
 8002df6:	f803 2c0c 	strb.w	r2, [r3, #-12]
					TEL_MSG[2*i+3] = (accgyro->acc_raw[i]) & 0x00FF;
 8002dfa:	7dbb      	ldrb	r3, [r7, #22]
 8002dfc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	4413      	add	r3, r2
 8002e02:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8002e06:	7dbb      	ldrb	r3, [r7, #22]
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	3303      	adds	r3, #3
 8002e0c:	b2d2      	uxtb	r2, r2
 8002e0e:	3318      	adds	r3, #24
 8002e10:	443b      	add	r3, r7
 8002e12:	f803 2c0c 	strb.w	r2, [r3, #-12]
				for ( uint8_t i = 0; i < 3; i++ )
 8002e16:	7dbb      	ldrb	r3, [r7, #22]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	75bb      	strb	r3, [r7, #22]
 8002e1c:	7dbb      	ldrb	r3, [r7, #22]
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d9db      	bls.n	8002dda <Process_TELEMETRY_REQ+0x5a>
				}
				break;
 8002e22:	e05f      	b.n	8002ee4 <Process_TELEMETRY_REQ+0x164>
			case 1:
				// Get Gyroscope Data
				ISM330_ReadGyro(accgyro);
 8002e24:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002e26:	f7fe f990 	bl	800114a <ISM330_ReadGyro>
				/*
				 * GYRO DATA UINT16_t[3]
				 * [TEL_ID][SEND_DATA][GYRO1u][GYRO1l][GYRO2u][GYRO2l][GYRO3u][GYRO3l]
				 */
				TEL_LEN = 8;
 8002e2a:	2308      	movs	r3, #8
 8002e2c:	75fb      	strb	r3, [r7, #23]
				TEL_MSG[0] = data.buffer[0];  	// Set TEL_ID
 8002e2e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002e32:	733b      	strb	r3, [r7, #12]
				TEL_MSG[1] = 1;					// Sending data
 8002e34:	2301      	movs	r3, #1
 8002e36:	737b      	strb	r3, [r7, #13]
				for ( uint8_t i = 0; i < 3; i++ )
 8002e38:	2300      	movs	r3, #0
 8002e3a:	757b      	strb	r3, [r7, #21]
 8002e3c:	e022      	b.n	8002e84 <Process_TELEMETRY_REQ+0x104>
				{
					TEL_MSG[2*i+2] = (accgyro->gyro_raw[i] >> 8) & 0x00FF;
 8002e3e:	7d7b      	ldrb	r3, [r7, #21]
 8002e40:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002e42:	3304      	adds	r3, #4
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	4413      	add	r3, r2
 8002e48:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002e4c:	121b      	asrs	r3, r3, #8
 8002e4e:	b21a      	sxth	r2, r3
 8002e50:	7d7b      	ldrb	r3, [r7, #21]
 8002e52:	3301      	adds	r3, #1
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	b2d2      	uxtb	r2, r2
 8002e58:	3318      	adds	r3, #24
 8002e5a:	443b      	add	r3, r7
 8002e5c:	f803 2c0c 	strb.w	r2, [r3, #-12]
					TEL_MSG[2*i+3] = (accgyro->gyro_raw[i]) & 0x00FF;
 8002e60:	7d7b      	ldrb	r3, [r7, #21]
 8002e62:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002e64:	3304      	adds	r3, #4
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	4413      	add	r3, r2
 8002e6a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002e6e:	7d7b      	ldrb	r3, [r7, #21]
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	3303      	adds	r3, #3
 8002e74:	b2d2      	uxtb	r2, r2
 8002e76:	3318      	adds	r3, #24
 8002e78:	443b      	add	r3, r7
 8002e7a:	f803 2c0c 	strb.w	r2, [r3, #-12]
				for ( uint8_t i = 0; i < 3; i++ )
 8002e7e:	7d7b      	ldrb	r3, [r7, #21]
 8002e80:	3301      	adds	r3, #1
 8002e82:	757b      	strb	r3, [r7, #21]
 8002e84:	7d7b      	ldrb	r3, [r7, #21]
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d9d9      	bls.n	8002e3e <Process_TELEMETRY_REQ+0xbe>
				}
				break;
 8002e8a:	e02b      	b.n	8002ee4 <Process_TELEMETRY_REQ+0x164>
			case 2:
				// Get Compass Data
				LIS2MDL_ReadCompass(comp);
 8002e8c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002e8e:	f7fe fac7 	bl	8001420 <LIS2MDL_ReadCompass>
				/*
				 * COMP DATA UINT16_t[3]
				 * [TEL_ID][SEND_DATA][HEADu][HEADl]
				 */
				TEL_LEN = 4;
 8002e92:	2304      	movs	r3, #4
 8002e94:	75fb      	strb	r3, [r7, #23]
				TEL_MSG[0] = data.buffer[0];  	// Set TEL_ID
 8002e96:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002e9a:	733b      	strb	r3, [r7, #12]
				TEL_MSG[1] = 1;					// Sending data
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	737b      	strb	r3, [r7, #13]
				TEL_MSG[2] = (comp->heading >> 8) & 0x00FF;
 8002ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea2:	895b      	ldrh	r3, [r3, #10]
 8002ea4:	0a1b      	lsrs	r3, r3, #8
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	73bb      	strb	r3, [r7, #14]
				TEL_MSG[3] = (comp->heading) & 0x00FF;
 8002eac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eae:	895b      	ldrh	r3, [r3, #10]
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	73fb      	strb	r3, [r7, #15]
				break;
 8002eb4:	e016      	b.n	8002ee4 <Process_TELEMETRY_REQ+0x164>
			case 3:
				// Get Temperature Data
				ISM330_ReadTemperature(accgyro);
 8002eb6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002eb8:	f7fe f917 	bl	80010ea <ISM330_ReadTemperature>
				/*
				 * COMP DATA UINT16_t[3]
				 * [TEL_ID][SEND_DATA][TEMPu][TEMPl]
				 */
				TEL_LEN = 4;
 8002ebc:	2304      	movs	r3, #4
 8002ebe:	75fb      	strb	r3, [r7, #23]
				TEL_MSG[0] = data.buffer[0];  	// Set TEL_ID
 8002ec0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ec4:	733b      	strb	r3, [r7, #12]
				TEL_MSG[1] = 1;					// Sending data
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	737b      	strb	r3, [r7, #13]
				TEL_MSG[2] = (accgyro->temp_C_raw >> 8) & 0x00FF;
 8002eca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ecc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002ed0:	121b      	asrs	r3, r3, #8
 8002ed2:	b21b      	sxth	r3, r3
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	73bb      	strb	r3, [r7, #14]
				TEL_MSG[3] = (accgyro->temp_C_raw) & 0x00FF;
 8002ed8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002eda:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	73fb      	strb	r3, [r7, #15]
				break;
 8002ee2:	bf00      	nop
			case 4:
				// Get POSE
				break;
			}

		CAN_TX_ID TX_ID = CAN_setID( SAT_OBC, data.source, MSG_TEL );
 8002ee4:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8002ee8:	2200      	movs	r2, #0
 8002eea:	4619      	mov	r1, r3
 8002eec:	2000      	movs	r0, #0
 8002eee:	f000 fdd0 	bl	8003a92 <CAN_setID>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	723a      	strb	r2, [r7, #8]
 8002ef8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002efc:	727a      	strb	r2, [r7, #9]
 8002efe:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002f02:	72bb      	strb	r3, [r7, #10]
		CAN_Transmit( dev, TX_ID, (uint8_t*) TEL_MSG, TEL_LEN ); // SENDS [ID][REQ]
 8002f04:	7dfb      	ldrb	r3, [r7, #23]
 8002f06:	f107 020c 	add.w	r2, r7, #12
 8002f0a:	68b9      	ldr	r1, [r7, #8]
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 fde9 	bl	8003ae4 <CAN_Transmit>
	}
}
 8002f12:	bf00      	nop
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f1c:	b004      	add	sp, #16
 8002f1e:	4770      	bx	lr

08002f20 <Process_TELEMETRY_RX>:

void Process_TELEMETRY_RX( CANBUS *dev, can_buf data, tel_rx_data *save )
{
 8002f20:	b084      	sub	sp, #16
 8002f22:	b480      	push	{r7}
 8002f24:	b085      	sub	sp, #20
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
 8002f2a:	f107 001c 	add.w	r0, r7, #28
 8002f2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (data.buffer[1] == 1)
 8002f32:	7f7b      	ldrb	r3, [r7, #29]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d11b      	bne.n	8002f70 <Process_TELEMETRY_RX+0x50>
	{
		save->tel_id = data.buffer[0];
 8002f38:	7f3a      	ldrb	r2, [r7, #28]
 8002f3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f3c:	701a      	strb	r2, [r3, #0]

		switch(data.buffer[0])
 8002f3e:	7f3b      	ldrb	r3, [r7, #28]
 8002f40:	2b10      	cmp	r3, #16
 8002f42:	d115      	bne.n	8002f70 <Process_TELEMETRY_RX+0x50>
		{
		case 0x10:
			for (uint8_t i = 0; i < 4; i++)
 8002f44:	2300      	movs	r3, #0
 8002f46:	73fb      	strb	r3, [r7, #15]
 8002f48:	e00f      	b.n	8002f6a <Process_TELEMETRY_RX+0x4a>
			{
				save->data[i] = data.buffer[i+2];
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
 8002f4c:	1c9a      	adds	r2, r3, #2
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
 8002f50:	3218      	adds	r2, #24
 8002f52:	443a      	add	r2, r7
 8002f54:	7911      	ldrb	r1, [r2, #4]
 8002f56:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f58:	4413      	add	r3, r2
 8002f5a:	460a      	mov	r2, r1
 8002f5c:	709a      	strb	r2, [r3, #2]
				save->new_data = 0x10;
 8002f5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f60:	2210      	movs	r2, #16
 8002f62:	705a      	strb	r2, [r3, #1]
			for (uint8_t i = 0; i < 4; i++)
 8002f64:	7bfb      	ldrb	r3, [r7, #15]
 8002f66:	3301      	adds	r3, #1
 8002f68:	73fb      	strb	r3, [r7, #15]
 8002f6a:	7bfb      	ldrb	r3, [r7, #15]
 8002f6c:	2b03      	cmp	r3, #3
 8002f6e:	d9ec      	bls.n	8002f4a <Process_TELEMETRY_RX+0x2a>
			}
		}
	}
}
 8002f70:	bf00      	nop
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	b004      	add	sp, #16
 8002f7c:	4770      	bx	lr

08002f7e <Process_BEACON>:
/*
 * BEACON
 */

void Process_BEACON( CANBUS *dev, uint8_t obc_status )
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b086      	sub	sp, #24
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
 8002f86:	460b      	mov	r3, r1
 8002f88:	70fb      	strb	r3, [r7, #3]
	uint8_t beacon[6];

	uint32_t time = HAL_GetTick();
 8002f8a:	f000 ffff 	bl	8003f8c <HAL_GetTick>
 8002f8e:	6178      	str	r0, [r7, #20]

	beacon[0] = TASK_BEACON;
 8002f90:	2302      	movs	r3, #2
 8002f92:	733b      	strb	r3, [r7, #12]
	beacon[1] = obc_status;
 8002f94:	78fb      	ldrb	r3, [r7, #3]
 8002f96:	737b      	strb	r3, [r7, #13]
	beacon[2] = time & 0xFF;
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	73bb      	strb	r3, [r7, #14]
	beacon[3] = time>>8 & 0xFF;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	0a1b      	lsrs	r3, r3, #8
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	73fb      	strb	r3, [r7, #15]
	beacon[4] = time>>16 & 0xFF;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	0c1b      	lsrs	r3, r3, #16
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	743b      	strb	r3, [r7, #16]
	beacon[5] = time>>24 & 0xFF;
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	0e1b      	lsrs	r3, r3, #24
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	747b      	strb	r3, [r7, #17]

	CAN_TX_ID TX_ID = CAN_setID( SAT_OBC, SAT_RCS, MSG_DIR );
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	2102      	movs	r1, #2
 8002fba:	2000      	movs	r0, #0
 8002fbc:	f000 fd69 	bl	8003a92 <CAN_setID>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	723a      	strb	r2, [r7, #8]
 8002fc6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002fca:	727a      	strb	r2, [r7, #9]
 8002fcc:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002fd0:	72bb      	strb	r3, [r7, #10]
	CAN_Transmit( dev, TX_ID, beacon, 6 );
 8002fd2:	f107 020c 	add.w	r2, r7, #12
 8002fd6:	2306      	movs	r3, #6
 8002fd8:	68b9      	ldr	r1, [r7, #8]
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 fd82 	bl	8003ae4 <CAN_Transmit>
}
 8002fe0:	bf00      	nop
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <Process_OBC_Movement_Test>:
/*
 * UNIT TESTS
 */

void Process_OBC_Movement_Test( LIS2MDL *comp, SD *store, uint8_t ID )
{
 8002fe8:	b590      	push	{r4, r7, lr}
 8002fea:	b091      	sub	sp, #68	; 0x44
 8002fec:	af02      	add	r7, sp, #8
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	71fb      	strb	r3, [r7, #7]
	char SD_buffer[40];

//	uint8_t err = 0;
	sprintf( SD_buffer, "OBC_LOG_%d.csv", ID );
 8002ff6:	79fa      	ldrb	r2, [r7, #7]
 8002ff8:	f107 0310 	add.w	r3, r7, #16
 8002ffc:	4927      	ldr	r1, [pc, #156]	; (800309c <Process_OBC_Movement_Test+0xb4>)
 8002ffe:	4618      	mov	r0, r3
 8003000:	f008 f9c2 	bl	800b388 <siprintf>

//	err = SD_Init( store, SD_buffer, 0 );
	SD_Init( store, SD_buffer, 0 );
 8003004:	f107 0310 	add.w	r3, r7, #16
 8003008:	2200      	movs	r2, #0
 800300a:	4619      	mov	r1, r3
 800300c:	68b8      	ldr	r0, [r7, #8]
 800300e:	f7fe fc4f 	bl	80018b0 <SD_Init>

//	err = SD_writeNew(store,"Hello");

//	err = SD_append( store, "Movement Test\nCompass Details\n");
	SD_append( store, "Movement Test\nCompass Details\n");
 8003012:	4923      	ldr	r1, [pc, #140]	; (80030a0 <Process_OBC_Movement_Test+0xb8>)
 8003014:	68b8      	ldr	r0, [r7, #8]
 8003016:	f7fe fc9d 	bl	8001954 <SD_append>

	sprintf( SD_buffer, "MAXX,MINX,MAXY,MINY\n%d,%d,%d,%d\n", comp->compass_max[0], comp->compass_min[0], comp->compass_max[1], comp->compass_min[1] );
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003020:	4619      	mov	r1, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003028:	461c      	mov	r4, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003030:	461a      	mov	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003038:	f107 0010 	add.w	r0, r7, #16
 800303c:	9301      	str	r3, [sp, #4]
 800303e:	9200      	str	r2, [sp, #0]
 8003040:	4623      	mov	r3, r4
 8003042:	460a      	mov	r2, r1
 8003044:	4917      	ldr	r1, [pc, #92]	; (80030a4 <Process_OBC_Movement_Test+0xbc>)
 8003046:	f008 f99f 	bl	800b388 <siprintf>

	SD_append( store, SD_buffer );
 800304a:	f107 0310 	add.w	r3, r7, #16
 800304e:	4619      	mov	r1, r3
 8003050:	68b8      	ldr	r0, [r7, #8]
 8003052:	f7fe fc7f 	bl	8001954 <SD_append>

	sprintf( SD_buffer, "OFFSETX,OFFSETY,REF_HEAD\n%d,%d,%d\n", comp->offsets[0], comp->offsets[1], comp->ref_heading );
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800305c:	461a      	mov	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8003064:	4619      	mov	r1, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8bdb      	ldrh	r3, [r3, #30]
 800306a:	f107 0010 	add.w	r0, r7, #16
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	460b      	mov	r3, r1
 8003072:	490d      	ldr	r1, [pc, #52]	; (80030a8 <Process_OBC_Movement_Test+0xc0>)
 8003074:	f008 f988 	bl	800b388 <siprintf>

	SD_append( store, SD_buffer );
 8003078:	f107 0310 	add.w	r3, r7, #16
 800307c:	4619      	mov	r1, r3
 800307e:	68b8      	ldr	r0, [r7, #8]
 8003080:	f7fe fc68 	bl	8001954 <SD_append>

	SD_append( store, "DATA START\n" );
 8003084:	4909      	ldr	r1, [pc, #36]	; (80030ac <Process_OBC_Movement_Test+0xc4>)
 8003086:	68b8      	ldr	r0, [r7, #8]
 8003088:	f7fe fc64 	bl	8001954 <SD_append>

	SD_append( store, "TIME,OBC_STATE,SOLENOID_STATE,COMP_X,COMP_Y,HEAD,ACC_X,ACC_Y,GYRO_YAW,TEL_ID,NEW_DATA,5VCurr,3V3Curr\n" );
 800308c:	4908      	ldr	r1, [pc, #32]	; (80030b0 <Process_OBC_Movement_Test+0xc8>)
 800308e:	68b8      	ldr	r0, [r7, #8]
 8003090:	f7fe fc60 	bl	8001954 <SD_append>
}
 8003094:	bf00      	nop
 8003096:	373c      	adds	r7, #60	; 0x3c
 8003098:	46bd      	mov	sp, r7
 800309a:	bd90      	pop	{r4, r7, pc}
 800309c:	0800dd70 	.word	0x0800dd70
 80030a0:	0800dd80 	.word	0x0800dd80
 80030a4:	0800dda0 	.word	0x0800dda0
 80030a8:	0800ddc4 	.word	0x0800ddc4
 80030ac:	0800dde8 	.word	0x0800dde8
 80030b0:	0800ddf4 	.word	0x0800ddf4

080030b4 <Process_OBC_Movement_Test_WRITE_DATA>:

void Process_OBC_Movement_Test_WRITE_DATA( uint8_t obc_state, uint8_t solenoid_state, ISM330 *acc_gyro, LIS2MDL *comp, SD *store, tel_rx_data *save )
{
 80030b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030b6:	b0a5      	sub	sp, #148	; 0x94
 80030b8:	af0c      	add	r7, sp, #48	; 0x30
 80030ba:	623a      	str	r2, [r7, #32]
 80030bc:	61fb      	str	r3, [r7, #28]
 80030be:	4603      	mov	r3, r0
 80030c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80030c4:	460b      	mov	r3, r1
 80030c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	char SD_buffer[50];

	LIS2MDL_ReadCompass( comp );
 80030ca:	69f8      	ldr	r0, [r7, #28]
 80030cc:	f7fe f9a8 	bl	8001420 <LIS2MDL_ReadCompass>
	ISM330_ReadAcc( acc_gyro );
 80030d0:	6a38      	ldr	r0, [r7, #32]
 80030d2:	f7fe f87c 	bl	80011ce <ISM330_ReadAcc>
	ISM330_ReadGyro( acc_gyro );
 80030d6:	6a38      	ldr	r0, [r7, #32]
 80030d8:	f7fe f837 	bl	800114a <ISM330_ReadGyro>
	uint16_t currTemp5V = save->data[0] + save->data[1]*256;
 80030dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030de:	789b      	ldrb	r3, [r3, #2]
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030e4:	78db      	ldrb	r3, [r3, #3]
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	021b      	lsls	r3, r3, #8
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	4413      	add	r3, r2
 80030ee:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	uint16_t currTemp3V3 = save->data[2] + save->data[3]*256;
 80030f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030f4:	791b      	ldrb	r3, [r3, #4]
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030fa:	795b      	ldrb	r3, [r3, #5]
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	021b      	lsls	r3, r3, #8
 8003100:	b29b      	uxth	r3, r3
 8003102:	4413      	add	r3, r2
 8003104:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	uint8_t new_data_temp = save->new_data;
 8003108:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800310a:	785b      	ldrb	r3, [r3, #1]
 800310c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

	save->new_data = 0;
 8003110:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003112:	2200      	movs	r2, #0
 8003114:	705a      	strb	r2, [r3, #1]

	sprintf( SD_buffer, "%ld,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n", HAL_GetTick(), obc_state, solenoid_state, comp->compass[0], comp->compass[1], comp->heading, acc_gyro->acc_raw[0], acc_gyro->acc_raw[1], acc_gyro->gyro_raw[2], save->tel_id, new_data_temp, currTemp5V, currTemp3V3  );
 8003116:	f000 ff39 	bl	8003f8c <HAL_GetTick>
 800311a:	4606      	mov	r6, r0
 800311c:	f897 5027 	ldrb.w	r5, [r7, #39]	; 0x27
 8003120:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800312a:	61bb      	str	r3, [r7, #24]
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	895b      	ldrh	r3, [r3, #10]
 8003138:	613b      	str	r3, [r7, #16]
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	6a3b      	ldr	r3, [r7, #32]
 8003144:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003148:	60bb      	str	r3, [r7, #8]
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003150:	607b      	str	r3, [r7, #4]
 8003152:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	603b      	str	r3, [r7, #0]
 8003158:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800315c:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 8003160:	f8b7 005c 	ldrh.w	r0, [r7, #92]	; 0x5c
 8003164:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003168:	900a      	str	r0, [sp, #40]	; 0x28
 800316a:	9109      	str	r1, [sp, #36]	; 0x24
 800316c:	9308      	str	r3, [sp, #32]
 800316e:	6839      	ldr	r1, [r7, #0]
 8003170:	9107      	str	r1, [sp, #28]
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	9106      	str	r1, [sp, #24]
 8003176:	68b9      	ldr	r1, [r7, #8]
 8003178:	9105      	str	r1, [sp, #20]
 800317a:	68f9      	ldr	r1, [r7, #12]
 800317c:	9104      	str	r1, [sp, #16]
 800317e:	6939      	ldr	r1, [r7, #16]
 8003180:	9103      	str	r1, [sp, #12]
 8003182:	6979      	ldr	r1, [r7, #20]
 8003184:	9102      	str	r1, [sp, #8]
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	9301      	str	r3, [sp, #4]
 800318a:	9200      	str	r2, [sp, #0]
 800318c:	462b      	mov	r3, r5
 800318e:	4632      	mov	r2, r6
 8003190:	4906      	ldr	r1, [pc, #24]	; (80031ac <Process_OBC_Movement_Test_WRITE_DATA+0xf8>)
 8003192:	4620      	mov	r0, r4
 8003194:	f008 f8f8 	bl	800b388 <siprintf>



	SD_append(store, SD_buffer);
 8003198:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800319c:	4619      	mov	r1, r3
 800319e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80031a0:	f7fe fbd8 	bl	8001954 <SD_append>
}
 80031a4:	bf00      	nop
 80031a6:	3764      	adds	r7, #100	; 0x64
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031ac:	0800de5c 	.word	0x0800de5c

080031b0 <Process_ISM330_GYRO_TEST>:
	sprintf( SD_buffer, "%ld,%d,%d,%d\n", HAL_GetTick(), acc_gyro->acc_raw[0], acc_gyro->acc_raw[1], acc_gyro->acc_raw[2] );
	SD_append(store, SD_buffer);
}

void Process_ISM330_GYRO_TEST( ISM330 *acc_gyro, SD *store )
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
	SD_Init( store, "GYRO_TEST.csv", 1 );
 80031ba:	2201      	movs	r2, #1
 80031bc:	4905      	ldr	r1, [pc, #20]	; (80031d4 <Process_ISM330_GYRO_TEST+0x24>)
 80031be:	6838      	ldr	r0, [r7, #0]
 80031c0:	f7fe fb76 	bl	80018b0 <SD_Init>
	SD_append( store, "GYRO TEST\nTIME,YAW,Gyro0,Gyro1\n");
 80031c4:	4904      	ldr	r1, [pc, #16]	; (80031d8 <Process_ISM330_GYRO_TEST+0x28>)
 80031c6:	6838      	ldr	r0, [r7, #0]
 80031c8:	f7fe fbc4 	bl	8001954 <SD_append>
}
 80031cc:	bf00      	nop
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	0800defc 	.word	0x0800defc
 80031d8:	0800df0c 	.word	0x0800df0c

080031dc <Process_ISM330_GYRO_SD>:

void Process_ISM330_GYRO_SD( ISM330 *acc_gyro, SD *store )
{
 80031dc:	b590      	push	{r4, r7, lr}
 80031de:	b08b      	sub	sp, #44	; 0x2c
 80031e0:	af02      	add	r7, sp, #8
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
	char SD_buffer[20];
	ISM330_ReadGyro( acc_gyro );
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7fd ffaf 	bl	800114a <ISM330_ReadGyro>

	sprintf( SD_buffer, "%ld,%d,%d,%d\n", HAL_GetTick(), acc_gyro->gyro_raw[2], acc_gyro->gyro_raw[0], acc_gyro->gyro_raw[1] );
 80031ec:	f000 fece 	bl	8003f8c <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80031f8:	461c      	mov	r4, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003200:	4619      	mov	r1, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003208:	f107 000c 	add.w	r0, r7, #12
 800320c:	9301      	str	r3, [sp, #4]
 800320e:	9100      	str	r1, [sp, #0]
 8003210:	4623      	mov	r3, r4
 8003212:	4906      	ldr	r1, [pc, #24]	; (800322c <Process_ISM330_GYRO_SD+0x50>)
 8003214:	f008 f8b8 	bl	800b388 <siprintf>
	SD_append(store, SD_buffer);
 8003218:	f107 030c 	add.w	r3, r7, #12
 800321c:	4619      	mov	r1, r3
 800321e:	6838      	ldr	r0, [r7, #0]
 8003220:	f7fe fb98 	bl	8001954 <SD_append>
}
 8003224:	bf00      	nop
 8003226:	3724      	adds	r7, #36	; 0x24
 8003228:	46bd      	mov	sp, r7
 800322a:	bd90      	pop	{r4, r7, pc}
 800322c:	0800dec4 	.word	0x0800dec4

08003230 <Solenoid_Move_Start>:
/*
 * GROUND STATION INTERACTION FUNCTIONS
 */

uint8_t Solenoid_Move_Start( solenoid *dev, uint8_t move_select, uint8_t time_select )
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	460b      	mov	r3, r1
 800323a:	70fb      	strb	r3, [r7, #3]
 800323c:	4613      	mov	r3, r2
 800323e:	70bb      	strb	r3, [r7, #2]
	if (dev->move_selected == 0) //Check solenoid is not currently moving
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	791b      	ldrb	r3, [r3, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d120      	bne.n	800328a <Solenoid_Move_Start+0x5a>
	{
		if (move_select == 0 || time_select == 0)
 8003248:	78fb      	ldrb	r3, [r7, #3]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d002      	beq.n	8003254 <Solenoid_Move_Start+0x24>
 800324e:	78bb      	ldrb	r3, [r7, #2]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <Solenoid_Move_Start+0x28>
		{
			return 0;
 8003254:	2300      	movs	r3, #0
 8003256:	e019      	b.n	800328c <Solenoid_Move_Start+0x5c>
		}
		dev->move_selected = move_select;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	78fa      	ldrb	r2, [r7, #3]
 800325c:	711a      	strb	r2, [r3, #4]
		dev->end_time = HAL_GetTick() + 200*time_select;
 800325e:	f000 fe95 	bl	8003f8c <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	78bb      	ldrb	r3, [r7, #2]
 8003266:	21c8      	movs	r1, #200	; 0xc8
 8003268:	fb01 f303 	mul.w	r3, r1, r3
 800326c:	441a      	add	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8003272:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003276:	4807      	ldr	r0, [pc, #28]	; (8003294 <Solenoid_Move_Start+0x64>)
 8003278:	f001 ffef 	bl	800525a <HAL_GPIO_TogglePin>
		return Solenoid_Set_Pins(dev->move_selected);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	791b      	ldrb	r3, [r3, #4]
 8003280:	4618      	mov	r0, r3
 8003282:	f000 f829 	bl	80032d8 <Solenoid_Set_Pins>
 8003286:	4603      	mov	r3, r0
 8003288:	e000      	b.n	800328c <Solenoid_Move_Start+0x5c>
	}
	return 1;
 800328a:	2301      	movs	r3, #1
}
 800328c:	4618      	mov	r0, r3
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40020000 	.word	0x40020000

08003298 <Process_Solenoid>:


void Process_Solenoid( solenoid *dev )
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
	if (dev->move_selected != 0)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	791b      	ldrb	r3, [r3, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d010      	beq.n	80032ca <Process_Solenoid+0x32>
	{
		if (HAL_GetTick() > dev->end_time)
 80032a8:	f000 fe70 	bl	8003f8c <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d909      	bls.n	80032ca <Process_Solenoid+0x32>
		{
			Solenoid_Reset_Pins();
 80032b6:	f000 f861 	bl	800337c <Solenoid_Reset_Pins>
			dev->move_selected = 0;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	711a      	strb	r2, [r3, #4]
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80032c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032c4:	4803      	ldr	r0, [pc, #12]	; (80032d4 <Process_Solenoid+0x3c>)
 80032c6:	f001 ffc8 	bl	800525a <HAL_GPIO_TogglePin>
		}
	}
}
 80032ca:	bf00      	nop
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	40020000 	.word	0x40020000

080032d8 <Solenoid_Set_Pins>:
/*
 * LOW-LEVEL FUNCTIONS
 */

uint8_t Solenoid_Set_Pins(uint8_t option)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	4603      	mov	r3, r0
 80032e0:	71fb      	strb	r3, [r7, #7]
	switch (option)
 80032e2:	79fb      	ldrb	r3, [r7, #7]
 80032e4:	3b01      	subs	r3, #1
 80032e6:	2b03      	cmp	r3, #3
 80032e8:	d83e      	bhi.n	8003368 <Solenoid_Set_Pins+0x90>
 80032ea:	a201      	add	r2, pc, #4	; (adr r2, 80032f0 <Solenoid_Set_Pins+0x18>)
 80032ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f0:	08003301 	.word	0x08003301
 80032f4:	0800331b 	.word	0x0800331b
 80032f8:	08003335 	.word	0x08003335
 80032fc:	0800334f 	.word	0x0800334f
	{
	case 1:
		HAL_GPIO_WritePin(SOL_N1_GPIO_Port, SOL_N1_Pin, 1);
 8003300:	2201      	movs	r2, #1
 8003302:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003306:	481c      	ldr	r0, [pc, #112]	; (8003378 <Solenoid_Set_Pins+0xa0>)
 8003308:	f001 ff8e 	bl	8005228 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SOL_N2_GPIO_Port, SOL_N2_Pin, 1);
 800330c:	2201      	movs	r2, #1
 800330e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003312:	4819      	ldr	r0, [pc, #100]	; (8003378 <Solenoid_Set_Pins+0xa0>)
 8003314:	f001 ff88 	bl	8005228 <HAL_GPIO_WritePin>
		break;
 8003318:	e028      	b.n	800336c <Solenoid_Set_Pins+0x94>
	case 2:
		HAL_GPIO_WritePin(SOL_N3_GPIO_Port, SOL_N3_Pin, 1);
 800331a:	2201      	movs	r2, #1
 800331c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003320:	4815      	ldr	r0, [pc, #84]	; (8003378 <Solenoid_Set_Pins+0xa0>)
 8003322:	f001 ff81 	bl	8005228 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SOL_N4_GPIO_Port, SOL_N4_Pin, 1);
 8003326:	2201      	movs	r2, #1
 8003328:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800332c:	4812      	ldr	r0, [pc, #72]	; (8003378 <Solenoid_Set_Pins+0xa0>)
 800332e:	f001 ff7b 	bl	8005228 <HAL_GPIO_WritePin>
		break;
 8003332:	e01b      	b.n	800336c <Solenoid_Set_Pins+0x94>
	case 3:
		HAL_GPIO_WritePin(SOL_N1_GPIO_Port, SOL_N1_Pin, 1);
 8003334:	2201      	movs	r2, #1
 8003336:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800333a:	480f      	ldr	r0, [pc, #60]	; (8003378 <Solenoid_Set_Pins+0xa0>)
 800333c:	f001 ff74 	bl	8005228 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SOL_N3_GPIO_Port, SOL_N3_Pin, 1);
 8003340:	2201      	movs	r2, #1
 8003342:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003346:	480c      	ldr	r0, [pc, #48]	; (8003378 <Solenoid_Set_Pins+0xa0>)
 8003348:	f001 ff6e 	bl	8005228 <HAL_GPIO_WritePin>
		break;
 800334c:	e00e      	b.n	800336c <Solenoid_Set_Pins+0x94>
	case 4:
		HAL_GPIO_WritePin(SOL_N2_GPIO_Port, SOL_N2_Pin, 1);
 800334e:	2201      	movs	r2, #1
 8003350:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003354:	4808      	ldr	r0, [pc, #32]	; (8003378 <Solenoid_Set_Pins+0xa0>)
 8003356:	f001 ff67 	bl	8005228 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SOL_N4_GPIO_Port, SOL_N4_Pin, 1);
 800335a:	2201      	movs	r2, #1
 800335c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003360:	4805      	ldr	r0, [pc, #20]	; (8003378 <Solenoid_Set_Pins+0xa0>)
 8003362:	f001 ff61 	bl	8005228 <HAL_GPIO_WritePin>
		break;
 8003366:	e001      	b.n	800336c <Solenoid_Set_Pins+0x94>
	default:
		return 1;
 8003368:	2301      	movs	r3, #1
 800336a:	e000      	b.n	800336e <Solenoid_Set_Pins+0x96>
	}
	return 0;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	40020400 	.word	0x40020400

0800337c <Solenoid_Reset_Pins>:

void Solenoid_Reset_Pins()
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SOL_N1_GPIO_Port, SOL_N1_Pin, 0);
 8003380:	2200      	movs	r2, #0
 8003382:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003386:	480b      	ldr	r0, [pc, #44]	; (80033b4 <Solenoid_Reset_Pins+0x38>)
 8003388:	f001 ff4e 	bl	8005228 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SOL_N2_GPIO_Port, SOL_N2_Pin, 0);
 800338c:	2200      	movs	r2, #0
 800338e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003392:	4808      	ldr	r0, [pc, #32]	; (80033b4 <Solenoid_Reset_Pins+0x38>)
 8003394:	f001 ff48 	bl	8005228 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SOL_N3_GPIO_Port, SOL_N3_Pin, 0);
 8003398:	2200      	movs	r2, #0
 800339a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800339e:	4805      	ldr	r0, [pc, #20]	; (80033b4 <Solenoid_Reset_Pins+0x38>)
 80033a0:	f001 ff42 	bl	8005228 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SOL_N4_GPIO_Port, SOL_N4_Pin, 0);
 80033a4:	2200      	movs	r2, #0
 80033a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033aa:	4802      	ldr	r0, [pc, #8]	; (80033b4 <Solenoid_Reset_Pins+0x38>)
 80033ac:	f001 ff3c 	bl	8005228 <HAL_GPIO_WritePin>
}
 80033b0:	bf00      	nop
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40020400 	.word	0x40020400

080033b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033be:	2300      	movs	r3, #0
 80033c0:	607b      	str	r3, [r7, #4]
 80033c2:	4b10      	ldr	r3, [pc, #64]	; (8003404 <HAL_MspInit+0x4c>)
 80033c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c6:	4a0f      	ldr	r2, [pc, #60]	; (8003404 <HAL_MspInit+0x4c>)
 80033c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033cc:	6453      	str	r3, [r2, #68]	; 0x44
 80033ce:	4b0d      	ldr	r3, [pc, #52]	; (8003404 <HAL_MspInit+0x4c>)
 80033d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033d6:	607b      	str	r3, [r7, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	603b      	str	r3, [r7, #0]
 80033de:	4b09      	ldr	r3, [pc, #36]	; (8003404 <HAL_MspInit+0x4c>)
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	4a08      	ldr	r2, [pc, #32]	; (8003404 <HAL_MspInit+0x4c>)
 80033e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033e8:	6413      	str	r3, [r2, #64]	; 0x40
 80033ea:	4b06      	ldr	r3, [pc, #24]	; (8003404 <HAL_MspInit+0x4c>)
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f2:	603b      	str	r3, [r7, #0]
 80033f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	40023800 	.word	0x40023800

08003408 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b08a      	sub	sp, #40	; 0x28
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003410:	f107 0314 	add.w	r3, r7, #20
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	605a      	str	r2, [r3, #4]
 800341a:	609a      	str	r2, [r3, #8]
 800341c:	60da      	str	r2, [r3, #12]
 800341e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a1d      	ldr	r2, [pc, #116]	; (800349c <HAL_CAN_MspInit+0x94>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d134      	bne.n	8003494 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800342a:	2300      	movs	r3, #0
 800342c:	613b      	str	r3, [r7, #16]
 800342e:	4b1c      	ldr	r3, [pc, #112]	; (80034a0 <HAL_CAN_MspInit+0x98>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	4a1b      	ldr	r2, [pc, #108]	; (80034a0 <HAL_CAN_MspInit+0x98>)
 8003434:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003438:	6413      	str	r3, [r2, #64]	; 0x40
 800343a:	4b19      	ldr	r3, [pc, #100]	; (80034a0 <HAL_CAN_MspInit+0x98>)
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003442:	613b      	str	r3, [r7, #16]
 8003444:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003446:	2300      	movs	r3, #0
 8003448:	60fb      	str	r3, [r7, #12]
 800344a:	4b15      	ldr	r3, [pc, #84]	; (80034a0 <HAL_CAN_MspInit+0x98>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	4a14      	ldr	r2, [pc, #80]	; (80034a0 <HAL_CAN_MspInit+0x98>)
 8003450:	f043 0301 	orr.w	r3, r3, #1
 8003454:	6313      	str	r3, [r2, #48]	; 0x30
 8003456:	4b12      	ldr	r3, [pc, #72]	; (80034a0 <HAL_CAN_MspInit+0x98>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003462:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003468:	2302      	movs	r3, #2
 800346a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800346c:	2300      	movs	r3, #0
 800346e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003470:	2303      	movs	r3, #3
 8003472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003474:	2309      	movs	r3, #9
 8003476:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003478:	f107 0314 	add.w	r3, r7, #20
 800347c:	4619      	mov	r1, r3
 800347e:	4809      	ldr	r0, [pc, #36]	; (80034a4 <HAL_CAN_MspInit+0x9c>)
 8003480:	f001 fd5e 	bl	8004f40 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8003484:	2200      	movs	r2, #0
 8003486:	2100      	movs	r1, #0
 8003488:	2014      	movs	r0, #20
 800348a:	f001 fd22 	bl	8004ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800348e:	2014      	movs	r0, #20
 8003490:	f001 fd3b 	bl	8004f0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003494:	bf00      	nop
 8003496:	3728      	adds	r7, #40	; 0x28
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40006400 	.word	0x40006400
 80034a0:	40023800 	.word	0x40023800
 80034a4:	40020000 	.word	0x40020000

080034a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08a      	sub	sp, #40	; 0x28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b0:	f107 0314 	add.w	r3, r7, #20
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	605a      	str	r2, [r3, #4]
 80034ba:	609a      	str	r2, [r3, #8]
 80034bc:	60da      	str	r2, [r3, #12]
 80034be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a19      	ldr	r2, [pc, #100]	; (800352c <HAL_I2C_MspInit+0x84>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d12b      	bne.n	8003522 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	4b18      	ldr	r3, [pc, #96]	; (8003530 <HAL_I2C_MspInit+0x88>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	4a17      	ldr	r2, [pc, #92]	; (8003530 <HAL_I2C_MspInit+0x88>)
 80034d4:	f043 0302 	orr.w	r3, r3, #2
 80034d8:	6313      	str	r3, [r2, #48]	; 0x30
 80034da:	4b15      	ldr	r3, [pc, #84]	; (8003530 <HAL_I2C_MspInit+0x88>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	613b      	str	r3, [r7, #16]
 80034e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80034e6:	23c0      	movs	r3, #192	; 0xc0
 80034e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034ea:	2312      	movs	r3, #18
 80034ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ee:	2300      	movs	r3, #0
 80034f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f2:	2303      	movs	r3, #3
 80034f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80034f6:	2304      	movs	r3, #4
 80034f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034fa:	f107 0314 	add.w	r3, r7, #20
 80034fe:	4619      	mov	r1, r3
 8003500:	480c      	ldr	r0, [pc, #48]	; (8003534 <HAL_I2C_MspInit+0x8c>)
 8003502:	f001 fd1d 	bl	8004f40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003506:	2300      	movs	r3, #0
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	4b09      	ldr	r3, [pc, #36]	; (8003530 <HAL_I2C_MspInit+0x88>)
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	4a08      	ldr	r2, [pc, #32]	; (8003530 <HAL_I2C_MspInit+0x88>)
 8003510:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003514:	6413      	str	r3, [r2, #64]	; 0x40
 8003516:	4b06      	ldr	r3, [pc, #24]	; (8003530 <HAL_I2C_MspInit+0x88>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800351e:	60fb      	str	r3, [r7, #12]
 8003520:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003522:	bf00      	nop
 8003524:	3728      	adds	r7, #40	; 0x28
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40005400 	.word	0x40005400
 8003530:	40023800 	.word	0x40023800
 8003534:	40020400 	.word	0x40020400

08003538 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b08a      	sub	sp, #40	; 0x28
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003540:	f107 0314 	add.w	r3, r7, #20
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	605a      	str	r2, [r3, #4]
 800354a:	609a      	str	r2, [r3, #8]
 800354c:	60da      	str	r2, [r3, #12]
 800354e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a19      	ldr	r2, [pc, #100]	; (80035bc <HAL_SPI_MspInit+0x84>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d12b      	bne.n	80035b2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	613b      	str	r3, [r7, #16]
 800355e:	4b18      	ldr	r3, [pc, #96]	; (80035c0 <HAL_SPI_MspInit+0x88>)
 8003560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003562:	4a17      	ldr	r2, [pc, #92]	; (80035c0 <HAL_SPI_MspInit+0x88>)
 8003564:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003568:	6453      	str	r3, [r2, #68]	; 0x44
 800356a:	4b15      	ldr	r3, [pc, #84]	; (80035c0 <HAL_SPI_MspInit+0x88>)
 800356c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003572:	613b      	str	r3, [r7, #16]
 8003574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003576:	2300      	movs	r3, #0
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	4b11      	ldr	r3, [pc, #68]	; (80035c0 <HAL_SPI_MspInit+0x88>)
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	4a10      	ldr	r2, [pc, #64]	; (80035c0 <HAL_SPI_MspInit+0x88>)
 8003580:	f043 0301 	orr.w	r3, r3, #1
 8003584:	6313      	str	r3, [r2, #48]	; 0x30
 8003586:	4b0e      	ldr	r3, [pc, #56]	; (80035c0 <HAL_SPI_MspInit+0x88>)
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003592:	23e0      	movs	r3, #224	; 0xe0
 8003594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003596:	2302      	movs	r3, #2
 8003598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359a:	2300      	movs	r3, #0
 800359c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800359e:	2303      	movs	r3, #3
 80035a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035a2:	2305      	movs	r3, #5
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035a6:	f107 0314 	add.w	r3, r7, #20
 80035aa:	4619      	mov	r1, r3
 80035ac:	4805      	ldr	r0, [pc, #20]	; (80035c4 <HAL_SPI_MspInit+0x8c>)
 80035ae:	f001 fcc7 	bl	8004f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80035b2:	bf00      	nop
 80035b4:	3728      	adds	r7, #40	; 0x28
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	40013000 	.word	0x40013000
 80035c0:	40023800 	.word	0x40023800
 80035c4:	40020000 	.word	0x40020000

080035c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b08c      	sub	sp, #48	; 0x30
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035d0:	f107 031c 	add.w	r3, r7, #28
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]
 80035d8:	605a      	str	r2, [r3, #4]
 80035da:	609a      	str	r2, [r3, #8]
 80035dc:	60da      	str	r2, [r3, #12]
 80035de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a32      	ldr	r2, [pc, #200]	; (80036b0 <HAL_UART_MspInit+0xe8>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d12d      	bne.n	8003646 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80035ea:	2300      	movs	r3, #0
 80035ec:	61bb      	str	r3, [r7, #24]
 80035ee:	4b31      	ldr	r3, [pc, #196]	; (80036b4 <HAL_UART_MspInit+0xec>)
 80035f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f2:	4a30      	ldr	r2, [pc, #192]	; (80036b4 <HAL_UART_MspInit+0xec>)
 80035f4:	f043 0310 	orr.w	r3, r3, #16
 80035f8:	6453      	str	r3, [r2, #68]	; 0x44
 80035fa:	4b2e      	ldr	r3, [pc, #184]	; (80036b4 <HAL_UART_MspInit+0xec>)
 80035fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fe:	f003 0310 	and.w	r3, r3, #16
 8003602:	61bb      	str	r3, [r7, #24]
 8003604:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003606:	2300      	movs	r3, #0
 8003608:	617b      	str	r3, [r7, #20]
 800360a:	4b2a      	ldr	r3, [pc, #168]	; (80036b4 <HAL_UART_MspInit+0xec>)
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	4a29      	ldr	r2, [pc, #164]	; (80036b4 <HAL_UART_MspInit+0xec>)
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	6313      	str	r3, [r2, #48]	; 0x30
 8003616:	4b27      	ldr	r3, [pc, #156]	; (80036b4 <HAL_UART_MspInit+0xec>)
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	617b      	str	r3, [r7, #20]
 8003620:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003622:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003628:	2302      	movs	r3, #2
 800362a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362c:	2300      	movs	r3, #0
 800362e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003630:	2303      	movs	r3, #3
 8003632:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003634:	2307      	movs	r3, #7
 8003636:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003638:	f107 031c 	add.w	r3, r7, #28
 800363c:	4619      	mov	r1, r3
 800363e:	481e      	ldr	r0, [pc, #120]	; (80036b8 <HAL_UART_MspInit+0xf0>)
 8003640:	f001 fc7e 	bl	8004f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003644:	e030      	b.n	80036a8 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a1c      	ldr	r2, [pc, #112]	; (80036bc <HAL_UART_MspInit+0xf4>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d12b      	bne.n	80036a8 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003650:	2300      	movs	r3, #0
 8003652:	613b      	str	r3, [r7, #16]
 8003654:	4b17      	ldr	r3, [pc, #92]	; (80036b4 <HAL_UART_MspInit+0xec>)
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003658:	4a16      	ldr	r2, [pc, #88]	; (80036b4 <HAL_UART_MspInit+0xec>)
 800365a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800365e:	6413      	str	r3, [r2, #64]	; 0x40
 8003660:	4b14      	ldr	r3, [pc, #80]	; (80036b4 <HAL_UART_MspInit+0xec>)
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003668:	613b      	str	r3, [r7, #16]
 800366a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800366c:	2300      	movs	r3, #0
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	4b10      	ldr	r3, [pc, #64]	; (80036b4 <HAL_UART_MspInit+0xec>)
 8003672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003674:	4a0f      	ldr	r2, [pc, #60]	; (80036b4 <HAL_UART_MspInit+0xec>)
 8003676:	f043 0301 	orr.w	r3, r3, #1
 800367a:	6313      	str	r3, [r2, #48]	; 0x30
 800367c:	4b0d      	ldr	r3, [pc, #52]	; (80036b4 <HAL_UART_MspInit+0xec>)
 800367e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	60fb      	str	r3, [r7, #12]
 8003686:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003688:	230c      	movs	r3, #12
 800368a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368c:	2302      	movs	r3, #2
 800368e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003690:	2300      	movs	r3, #0
 8003692:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003694:	2303      	movs	r3, #3
 8003696:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003698:	2307      	movs	r3, #7
 800369a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800369c:	f107 031c 	add.w	r3, r7, #28
 80036a0:	4619      	mov	r1, r3
 80036a2:	4805      	ldr	r0, [pc, #20]	; (80036b8 <HAL_UART_MspInit+0xf0>)
 80036a4:	f001 fc4c 	bl	8004f40 <HAL_GPIO_Init>
}
 80036a8:	bf00      	nop
 80036aa:	3730      	adds	r7, #48	; 0x30
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40011000 	.word	0x40011000
 80036b4:	40023800 	.word	0x40023800
 80036b8:	40020000 	.word	0x40020000
 80036bc:	40004400 	.word	0x40004400

080036c0 <SDTimer_Handler>:

volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 80036c4:	4b0e      	ldr	r3, [pc, #56]	; (8003700 <SDTimer_Handler+0x40>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d006      	beq.n	80036dc <SDTimer_Handler+0x1c>
		Timer1--;
 80036ce:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <SDTimer_Handler+0x40>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	3b01      	subs	r3, #1
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	4b09      	ldr	r3, [pc, #36]	; (8003700 <SDTimer_Handler+0x40>)
 80036da:	701a      	strb	r2, [r3, #0]

	if(Timer2 > 0)
 80036dc:	4b09      	ldr	r3, [pc, #36]	; (8003704 <SDTimer_Handler+0x44>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d006      	beq.n	80036f4 <SDTimer_Handler+0x34>
		Timer2--;
 80036e6:	4b07      	ldr	r3, [pc, #28]	; (8003704 <SDTimer_Handler+0x44>)
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	3b01      	subs	r3, #1
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	4b04      	ldr	r3, [pc, #16]	; (8003704 <SDTimer_Handler+0x44>)
 80036f2:	701a      	strb	r2, [r3, #0]
}
 80036f4:	bf00      	nop
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	2000360d 	.word	0x2000360d
 8003704:	2000360e 	.word	0x2000360e

08003708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800370c:	e7fe      	b.n	800370c <NMI_Handler+0x4>

0800370e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800370e:	b480      	push	{r7}
 8003710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003712:	e7fe      	b.n	8003712 <HardFault_Handler+0x4>

08003714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003718:	e7fe      	b.n	8003718 <MemManage_Handler+0x4>

0800371a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800371a:	b480      	push	{r7}
 800371c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800371e:	e7fe      	b.n	800371e <BusFault_Handler+0x4>

08003720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003724:	e7fe      	b.n	8003724 <UsageFault_Handler+0x4>

08003726 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003726:	b480      	push	{r7}
 8003728:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800372a:	bf00      	nop
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003738:	bf00      	nop
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003742:	b480      	push	{r7}
 8003744:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003746:	bf00      	nop
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8003754:	4b0a      	ldr	r3, [pc, #40]	; (8003780 <SysTick_Handler+0x30>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	b2db      	uxtb	r3, r3
 800375a:	3301      	adds	r3, #1
 800375c:	b2da      	uxtb	r2, r3
 800375e:	4b08      	ldr	r3, [pc, #32]	; (8003780 <SysTick_Handler+0x30>)
 8003760:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8003762:	4b07      	ldr	r3, [pc, #28]	; (8003780 <SysTick_Handler+0x30>)
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b09      	cmp	r3, #9
 800376a:	d904      	bls.n	8003776 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 800376c:	4b04      	ldr	r3, [pc, #16]	; (8003780 <SysTick_Handler+0x30>)
 800376e:	2200      	movs	r2, #0
 8003770:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8003772:	f7ff ffa5 	bl	80036c0 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003776:	f000 fbf5 	bl	8003f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800377a:	bf00      	nop
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	2000360c 	.word	0x2000360c

08003784 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003788:	4802      	ldr	r0, [pc, #8]	; (8003794 <CAN1_RX0_IRQHandler+0x10>)
 800378a:	f001 f897 	bl	80048bc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800378e:	bf00      	nop
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	20000214 	.word	0x20000214

08003798 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if ( button_flag == 0 )
 800379c:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <EXTI15_10_IRQHandler+0x20>)
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d102      	bne.n	80037aa <EXTI15_10_IRQHandler+0x12>
	{
		button_flag = 1;
 80037a4:	4b04      	ldr	r3, [pc, #16]	; (80037b8 <EXTI15_10_IRQHandler+0x20>)
 80037a6:	2201      	movs	r2, #1
 80037a8:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_EXT_Pin);
 80037aa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80037ae:	f001 fd6f 	bl	8005290 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80037b2:	bf00      	nop
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	20003608 	.word	0x20003608

080037bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
	return 1;
 80037c0:	2301      	movs	r3, #1
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <_kill>:

int _kill(int pid, int sig)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80037d6:	f007 f92d 	bl	800aa34 <__errno>
 80037da:	4603      	mov	r3, r0
 80037dc:	2216      	movs	r2, #22
 80037de:	601a      	str	r2, [r3, #0]
	return -1;
 80037e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3708      	adds	r7, #8
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <_exit>:

void _exit (int status)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80037f4:	f04f 31ff 	mov.w	r1, #4294967295
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7ff ffe7 	bl	80037cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80037fe:	e7fe      	b.n	80037fe <_exit+0x12>

08003800 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800380c:	2300      	movs	r3, #0
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	e00a      	b.n	8003828 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003812:	f3af 8000 	nop.w
 8003816:	4601      	mov	r1, r0
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	1c5a      	adds	r2, r3, #1
 800381c:	60ba      	str	r2, [r7, #8]
 800381e:	b2ca      	uxtb	r2, r1
 8003820:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	3301      	adds	r3, #1
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	429a      	cmp	r2, r3
 800382e:	dbf0      	blt.n	8003812 <_read+0x12>
	}

return len;
 8003830:	687b      	ldr	r3, [r7, #4]
}
 8003832:	4618      	mov	r0, r3
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b086      	sub	sp, #24
 800383e:	af00      	add	r7, sp, #0
 8003840:	60f8      	str	r0, [r7, #12]
 8003842:	60b9      	str	r1, [r7, #8]
 8003844:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003846:	2300      	movs	r3, #0
 8003848:	617b      	str	r3, [r7, #20]
 800384a:	e009      	b.n	8003860 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	1c5a      	adds	r2, r3, #1
 8003850:	60ba      	str	r2, [r7, #8]
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	4618      	mov	r0, r3
 8003856:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	3301      	adds	r3, #1
 800385e:	617b      	str	r3, [r7, #20]
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	429a      	cmp	r2, r3
 8003866:	dbf1      	blt.n	800384c <_write+0x12>
	}
	return len;
 8003868:	687b      	ldr	r3, [r7, #4]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <_close>:

int _close(int file)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
	return -1;
 800387a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800387e:	4618      	mov	r0, r3
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800388a:	b480      	push	{r7}
 800388c:	b083      	sub	sp, #12
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
 8003892:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800389a:	605a      	str	r2, [r3, #4]
	return 0;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr

080038aa <_isatty>:

int _isatty(int file)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
	return 1;
 80038b2:	2301      	movs	r3, #1
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
	return 0;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3714      	adds	r7, #20
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
	...

080038dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038e4:	4a14      	ldr	r2, [pc, #80]	; (8003938 <_sbrk+0x5c>)
 80038e6:	4b15      	ldr	r3, [pc, #84]	; (800393c <_sbrk+0x60>)
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038f0:	4b13      	ldr	r3, [pc, #76]	; (8003940 <_sbrk+0x64>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d102      	bne.n	80038fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038f8:	4b11      	ldr	r3, [pc, #68]	; (8003940 <_sbrk+0x64>)
 80038fa:	4a12      	ldr	r2, [pc, #72]	; (8003944 <_sbrk+0x68>)
 80038fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038fe:	4b10      	ldr	r3, [pc, #64]	; (8003940 <_sbrk+0x64>)
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4413      	add	r3, r2
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	429a      	cmp	r2, r3
 800390a:	d207      	bcs.n	800391c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800390c:	f007 f892 	bl	800aa34 <__errno>
 8003910:	4603      	mov	r3, r0
 8003912:	220c      	movs	r2, #12
 8003914:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003916:	f04f 33ff 	mov.w	r3, #4294967295
 800391a:	e009      	b.n	8003930 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800391c:	4b08      	ldr	r3, [pc, #32]	; (8003940 <_sbrk+0x64>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003922:	4b07      	ldr	r3, [pc, #28]	; (8003940 <_sbrk+0x64>)
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4413      	add	r3, r2
 800392a:	4a05      	ldr	r2, [pc, #20]	; (8003940 <_sbrk+0x64>)
 800392c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800392e:	68fb      	ldr	r3, [r7, #12]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	20040000 	.word	0x20040000
 800393c:	00000400 	.word	0x00000400
 8003940:	20003610 	.word	0x20003610
 8003944:	20003868 	.word	0x20003868

08003948 <SystemInit>:
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
 800394c:	4b06      	ldr	r3, [pc, #24]	; (8003968 <SystemInit+0x20>)
 800394e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003952:	4a05      	ldr	r2, [pc, #20]	; (8003968 <SystemInit+0x20>)
 8003954:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003958:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800395c:	bf00      	nop
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	e000ed00 	.word	0xe000ed00

0800396c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 800396c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003970:	480d      	ldr	r0, [pc, #52]	; (80039a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003972:	490e      	ldr	r1, [pc, #56]	; (80039ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003974:	4a0e      	ldr	r2, [pc, #56]	; (80039b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003978:	e002      	b.n	8003980 <LoopCopyDataInit>

0800397a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800397a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800397c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800397e:	3304      	adds	r3, #4

08003980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003984:	d3f9      	bcc.n	800397a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003986:	4a0b      	ldr	r2, [pc, #44]	; (80039b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003988:	4c0b      	ldr	r4, [pc, #44]	; (80039b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800398a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800398c:	e001      	b.n	8003992 <LoopFillZerobss>

0800398e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800398e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003990:	3204      	adds	r2, #4

08003992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003994:	d3fb      	bcc.n	800398e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003996:	f7ff ffd7 	bl	8003948 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800399a:	f007 f851 	bl	800aa40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800399e:	f7fe fcff 	bl	80023a0 <main>
  bx  lr    
 80039a2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80039a4:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80039a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039ac:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80039b0:	0800e828 	.word	0x0800e828
  ldr r2, =_sbss
 80039b4:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80039b8:	20003864 	.word	0x20003864

080039bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039bc:	e7fe      	b.n	80039bc <ADC_IRQHandler>

080039be <CAN_Initialise>:
 */

uint8_t CAN_Initialise( CANBUS *dev, CAN_HandleTypeDef *CANHandle,
						uint16_t nodeID, uint16_t filterMASK,
						uint8_t selectFIFO, uint8_t filterBANK )
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b090      	sub	sp, #64	; 0x40
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	60f8      	str	r0, [r7, #12]
 80039c6:	60b9      	str	r1, [r7, #8]
 80039c8:	4611      	mov	r1, r2
 80039ca:	461a      	mov	r2, r3
 80039cc:	460b      	mov	r3, r1
 80039ce:	80fb      	strh	r3, [r7, #6]
 80039d0:	4613      	mov	r3, r2
 80039d2:	80bb      	strh	r3, [r7, #4]
	dev->nodeID = nodeID;
 80039d4:	88fb      	ldrh	r3, [r7, #6]
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	/* Set CAN device ID */
	dev->canHandle = CANHandle;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	601a      	str	r2, [r3, #0]

	CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80039e4:	2301      	movs	r3, #1
 80039e6:	637b      	str	r3, [r7, #52]	; 0x34
	canfilterconfig.FilterBank = filterBANK;  // which filter bank to use from the assigned ones
 80039e8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80039ec:	62bb      	str	r3, [r7, #40]	; 0x28
	canfilterconfig.FilterFIFOAssignment = selectFIFO;
 80039ee:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24
	canfilterconfig.FilterIdHigh = (nodeID<<4)<<5;
 80039f4:	88fb      	ldrh	r3, [r7, #6]
 80039f6:	025b      	lsls	r3, r3, #9
 80039f8:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterIdLow = 0;
 80039fa:	2300      	movs	r3, #0
 80039fc:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterMaskIdHigh = filterMASK<<5;
 80039fe:	88bb      	ldrh	r3, [r7, #4]
 8003a00:	015b      	lsls	r3, r3, #5
 8003a02:	61fb      	str	r3, [r7, #28]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8003a04:	2300      	movs	r3, #0
 8003a06:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	633b      	str	r3, [r7, #48]	; 0x30
	canfilterconfig.SlaveStartFilterBank = 27;
 8003a10:	231b      	movs	r3, #27
 8003a12:	63bb      	str	r3, [r7, #56]	; 0x38
	// Max value for cut -- Only matters for F4 with slave filter banks

	HAL_CAN_ConfigFilter( dev->canHandle, &canfilterconfig );
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f107 0214 	add.w	r2, r7, #20
 8003a1c:	4611      	mov	r1, r2
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 fbe0 	bl	80041e4 <HAL_CAN_ConfigFilter>

	dev->TXHeader.DLC = 8;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2208      	movs	r2, #8
 8003a28:	615a      	str	r2, [r3, #20]
	dev->TXHeader.IDE = CAN_ID_STD;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	60da      	str	r2, [r3, #12]
	dev->TXHeader.RTR = CAN_RTR_DATA;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	611a      	str	r2, [r3, #16]
	dev->TXHeader.TransmitGlobalTime = DISABLE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	761a      	strb	r2, [r3, #24]

	for (uint8_t i = 0; i<OTHER_NODES;i++ )
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003a42:	e012      	b.n	8003a6a <CAN_Initialise+0xac>
	{
		// Used by driver to place messages in a buffer
		dev->RX_message_pointer[i] = 0;
 8003a44:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

		// Used by device to read in messages
		dev->RX_received_flag[i] = 0;
 8003a52:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	4413      	add	r3, r2
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
	for (uint8_t i = 0; i<OTHER_NODES;i++ )
 8003a60:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003a64:	3301      	adds	r3, #1
 8003a66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003a6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d9e8      	bls.n	8003a44 <CAN_Initialise+0x86>
	}



	// CAN Setup
	HAL_CAN_Start( dev->canHandle );
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 fc94 	bl	80043a4 <HAL_CAN_Start>

	// Activate the notification
	HAL_CAN_ActivateNotification( dev->canHandle, CAN_IT_RX_FIFO0_MSG_PENDING );
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2102      	movs	r1, #2
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 fef4 	bl	8004870 <HAL_CAN_ActivateNotification>

	return 0;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3740      	adds	r7, #64	; 0x40
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <CAN_setID>:

	return 0;
}

CAN_TX_ID CAN_setID( uint8_t source, uint8_t dest, uint8_t type )
{
 8003a92:	b480      	push	{r7}
 8003a94:	b085      	sub	sp, #20
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	4603      	mov	r3, r0
 8003a9a:	71fb      	strb	r3, [r7, #7]
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	71bb      	strb	r3, [r7, #6]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	717b      	strb	r3, [r7, #5]
	CAN_TX_ID temp;
	temp.source = source;
 8003aa4:	79fb      	ldrb	r3, [r7, #7]
 8003aa6:	723b      	strb	r3, [r7, #8]
	temp.dest = dest;
 8003aa8:	79bb      	ldrb	r3, [r7, #6]
 8003aaa:	727b      	strb	r3, [r7, #9]
	temp.type = type;
 8003aac:	797b      	ldrb	r3, [r7, #5]
 8003aae:	72bb      	strb	r3, [r7, #10]
	return temp;
 8003ab0:	f107 030c 	add.w	r3, r7, #12
 8003ab4:	f107 0208 	add.w	r2, r7, #8
 8003ab8:	6812      	ldr	r2, [r2, #0]
 8003aba:	4611      	mov	r1, r2
 8003abc:	8019      	strh	r1, [r3, #0]
 8003abe:	3302      	adds	r3, #2
 8003ac0:	0c12      	lsrs	r2, r2, #16
 8003ac2:	701a      	strb	r2, [r3, #0]
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	7b3a      	ldrb	r2, [r7, #12]
 8003ac8:	f362 0307 	bfi	r3, r2, #0, #8
 8003acc:	7b7a      	ldrb	r2, [r7, #13]
 8003ace:	f362 230f 	bfi	r3, r2, #8, #8
 8003ad2:	7bba      	ldrb	r2, [r7, #14]
 8003ad4:	f362 4317 	bfi	r3, r2, #16, #8
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3714      	adds	r7, #20
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <CAN_Transmit>:
 * 		Message to be sent
 * 		Length of message to be sent
 * Outputs:
 *  	Error counter -- normal running should always be zero
 */
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
 8003af0:	70fb      	strb	r3, [r7, #3]
	// Fragmentation Step
	uint8_t no_frames = CAN_Fragment( dev, message, message_len );
 8003af2:	78fb      	ldrb	r3, [r7, #3]
 8003af4:	461a      	mov	r2, r3
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 f96e 	bl	8003dda <CAN_Fragment>
 8003afe:	4603      	mov	r3, r0
 8003b00:	74fb      	strb	r3, [r7, #19]

	/*
	 * Transmission step
	 * Transmit all values in TXstack on multiple messages back to back
	 */
	uint8_t errorNum = 0;
 8003b02:	2300      	movs	r3, #0
 8003b04:	75fb      	strb	r3, [r7, #23]

	HAL_StatusTypeDef status;
	dev->TXHeader.StdId = (uint16_t) (0x1 << 10) |(ID.type << 8) | (ID.dest << 4) | ID.source;
 8003b06:	7abb      	ldrb	r3, [r7, #10]
 8003b08:	021b      	lsls	r3, r3, #8
 8003b0a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003b0e:	7a7b      	ldrb	r3, [r7, #9]
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	4313      	orrs	r3, r2
 8003b14:	7a3a      	ldrb	r2, [r7, #8]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	461a      	mov	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	605a      	str	r2, [r3, #4]
	dev->TXHeader.DLC = 8;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2208      	movs	r2, #8
 8003b22:	615a      	str	r2, [r3, #20]
	uint8_t frame_len = 8;
 8003b24:	2308      	movs	r3, #8
 8003b26:	75bb      	strb	r3, [r7, #22]

	for (uint8_t i = 0; i < no_frames; i++) // Loop through all total number of frames
 8003b28:	2300      	movs	r3, #0
 8003b2a:	757b      	strb	r3, [r7, #21]
 8003b2c:	e061      	b.n	8003bf2 <CAN_Transmit+0x10e>
	{
		if (i == no_frames-1) // Check if this is the last frame
 8003b2e:	7d7a      	ldrb	r2, [r7, #21]
 8003b30:	7cfb      	ldrb	r3, [r7, #19]
 8003b32:	3b01      	subs	r3, #1
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d111      	bne.n	8003b5c <CAN_Transmit+0x78>
		{
			frame_len = (message_len+2)%8; // Update the frame length to fit the  data
 8003b38:	78fb      	ldrb	r3, [r7, #3]
 8003b3a:	3302      	adds	r3, #2
 8003b3c:	425a      	negs	r2, r3
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	f002 0207 	and.w	r2, r2, #7
 8003b46:	bf58      	it	pl
 8003b48:	4253      	negpl	r3, r2
 8003b4a:	75bb      	strb	r3, [r7, #22]
			// If there are a perfect number of frames
			if (frame_len == 0)
 8003b4c:	7dbb      	ldrb	r3, [r7, #22]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <CAN_Transmit+0x72>
				frame_len = 8;
 8003b52:	2308      	movs	r3, #8
 8003b54:	75bb      	strb	r3, [r7, #22]
			dev->TXHeader.DLC = frame_len; // Update the TXHeader
 8003b56:	7dba      	ldrb	r2, [r7, #22]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	615a      	str	r2, [r3, #20]
		}

		for (uint8_t j = 0; j<frame_len ; j++ )
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	753b      	strb	r3, [r7, #20]
 8003b60:	e010      	b.n	8003b84 <CAN_Transmit+0xa0>
		{
			dev->TXdata[j] = dev->TXstack[j+8*i]; // Move data from TXstack to TXdata which will be sent
 8003b62:	7d3a      	ldrb	r2, [r7, #20]
 8003b64:	7d7b      	ldrb	r3, [r7, #21]
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	441a      	add	r2, r3
 8003b6a:	7d3b      	ldrb	r3, [r7, #20]
 8003b6c:	68f9      	ldr	r1, [r7, #12]
 8003b6e:	440a      	add	r2, r1
 8003b70:	f892 1049 	ldrb.w	r1, [r2, #73]	; 0x49
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	4413      	add	r3, r2
 8003b78:	460a      	mov	r2, r1
 8003b7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		for (uint8_t j = 0; j<frame_len ; j++ )
 8003b7e:	7d3b      	ldrb	r3, [r7, #20]
 8003b80:	3301      	adds	r3, #1
 8003b82:	753b      	strb	r3, [r7, #20]
 8003b84:	7d3a      	ldrb	r2, [r7, #20]
 8003b86:	7dbb      	ldrb	r3, [r7, #22]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d3ea      	bcc.n	8003b62 <CAN_Transmit+0x7e>
		/*
		 * Check if there is an available mailbox to send message
		 * If there is none, wait for one to become available
		 * Can be done better (TX Interrupt)
		 */
		while (HAL_CAN_GetTxMailboxesFreeLevel( dev->canHandle ) == 0)
 8003b8c:	e002      	b.n	8003b94 <CAN_Transmit+0xb0>
		{
			HAL_Delay(1);
 8003b8e:	2001      	movs	r0, #1
 8003b90:	f000 fa08 	bl	8003fa4 <HAL_Delay>
		while (HAL_CAN_GetTxMailboxesFreeLevel( dev->canHandle ) == 0)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f000 fd22 	bl	80045e2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0f4      	beq.n	8003b8e <CAN_Transmit+0xaa>
		}

		status = HAL_CAN_AddTxMessage( dev->canHandle, &dev->TXHeader, dev->TXdata, &dev->TxMailbox );
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6818      	ldr	r0, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	1d19      	adds	r1, r3, #4
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f103 0239 	add.w	r2, r3, #57	; 0x39
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003bb8:	f000 fc38 	bl	800442c <HAL_CAN_AddTxMessage>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	74bb      	strb	r3, [r7, #18]
//		status = HAL_CAN_AddTxMessage( dev->canHandle, &dev->TXHeader, TXdata, &dev->TxMailbox );

		errorNum += ( status != HAL_OK );
 8003bc0:	7cbb      	ldrb	r3, [r7, #18]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	bf14      	ite	ne
 8003bc6:	2301      	movne	r3, #1
 8003bc8:	2300      	moveq	r3, #0
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	461a      	mov	r2, r3
 8003bce:	7dfb      	ldrb	r3, [r7, #23]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	75fb      	strb	r3, [r7, #23]

		if (i == 0)
 8003bd4:	7d7b      	ldrb	r3, [r7, #21]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d105      	bne.n	8003be6 <CAN_Transmit+0x102>
		{
			dev->TXHeader.StdId &= ~(0x1 << 10);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	605a      	str	r2, [r3, #4]
		}

		HAL_Delay(1);
 8003be6:	2001      	movs	r0, #1
 8003be8:	f000 f9dc 	bl	8003fa4 <HAL_Delay>
	for (uint8_t i = 0; i < no_frames; i++) // Loop through all total number of frames
 8003bec:	7d7b      	ldrb	r3, [r7, #21]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	757b      	strb	r3, [r7, #21]
 8003bf2:	7d7a      	ldrb	r2, [r7, #21]
 8003bf4:	7cfb      	ldrb	r3, [r7, #19]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d399      	bcc.n	8003b2e <CAN_Transmit+0x4a>
	}
	return errorNum;
 8003bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3718      	adds	r7, #24
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <CAN_Receive>:

HAL_StatusTypeDef CAN_Receive( CANBUS *dev )
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
	uint8_t msgBox = 0;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	73fb      	strb	r3, [r7, #15]

	// If a message is the first to be transferred
	if ((dev->RXHeader.StdId>>10 & 1) == 1)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	0a9b      	lsrs	r3, r3, #10
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d04f      	beq.n	8003cbe <CAN_Receive+0xba>
	{
		for (;msgBox < OTHER_NODES; msgBox++)
 8003c1e:	e02c      	b.n	8003c7a <CAN_Receive+0x76>
		{
			// Look for an empty message box to put message from this ID into
			if (dev->RX_message_pointer[msgBox] == 0)
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	4413      	add	r3, r2
 8003c26:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d122      	bne.n	8003c74 <CAN_Receive+0x70>
			{
//				dev->RX_message_len[msgBox] = dev->RXdata[0];
				dev->RXstack[msgBox][0] = (uint8_t) ((dev->RXHeader.StdId >> 8) & 0xFF);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	0a1a      	lsrs	r2, r3, #8
 8003c34:	7bfb      	ldrb	r3, [r7, #15]
 8003c36:	b2d1      	uxtb	r1, r2
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	019b      	lsls	r3, r3, #6
 8003c3c:	4413      	add	r3, r2
 8003c3e:	3389      	adds	r3, #137	; 0x89
 8003c40:	460a      	mov	r2, r1
 8003c42:	701a      	strb	r2, [r3, #0]
				dev->RXstack[msgBox][1] = (uint8_t) (dev->RXHeader.StdId & 0xFF);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	69da      	ldr	r2, [r3, #28]
 8003c48:	7bfb      	ldrb	r3, [r7, #15]
 8003c4a:	b2d1      	uxtb	r1, r2
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	019b      	lsls	r3, r3, #6
 8003c50:	4413      	add	r3, r2
 8003c52:	338a      	adds	r3, #138	; 0x8a
 8003c54:	460a      	mov	r2, r1
 8003c56:	701a      	strb	r2, [r3, #0]
				dev->RX_message_pointer[msgBox] += 2;
 8003c58:	7bfb      	ldrb	r3, [r7, #15]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
 8003c64:	3202      	adds	r2, #2
 8003c66:	b2d1      	uxtb	r1, r2
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	460a      	mov	r2, r1
 8003c6e:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				break;
 8003c72:	e029      	b.n	8003cc8 <CAN_Receive+0xc4>
		for (;msgBox < OTHER_NODES; msgBox++)
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	3301      	adds	r3, #1
 8003c78:	73fb      	strb	r3, [r7, #15]
 8003c7a:	7bfb      	ldrb	r3, [r7, #15]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d9cf      	bls.n	8003c20 <CAN_Receive+0x1c>
 8003c80:	e022      	b.n	8003cc8 <CAN_Receive+0xc4>
	{
		for (;msgBox < OTHER_NODES; msgBox++)
		{
			// Need to correct the header as now the message is no longer new

			if (dev->RXHeader.StdId == (uint16_t) ((dev->RXstack[msgBox][0] & 0xFB)<<8 | dev->RXstack[msgBox][1]))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	69da      	ldr	r2, [r3, #28]
 8003c86:	7bfb      	ldrb	r3, [r7, #15]
 8003c88:	6879      	ldr	r1, [r7, #4]
 8003c8a:	019b      	lsls	r3, r3, #6
 8003c8c:	440b      	add	r3, r1
 8003c8e:	3389      	adds	r3, #137	; 0x89
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	021b      	lsls	r3, r3, #8
 8003c94:	b21b      	sxth	r3, r3
 8003c96:	f423 639f 	bic.w	r3, r3, #1272	; 0x4f8
 8003c9a:	f023 0307 	bic.w	r3, r3, #7
 8003c9e:	b219      	sxth	r1, r3
 8003ca0:	7bfb      	ldrb	r3, [r7, #15]
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	019b      	lsls	r3, r3, #6
 8003ca6:	4403      	add	r3, r0
 8003ca8:	338a      	adds	r3, #138	; 0x8a
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	b21b      	sxth	r3, r3
 8003cae:	430b      	orrs	r3, r1
 8003cb0:	b21b      	sxth	r3, r3
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d006      	beq.n	8003cc6 <CAN_Receive+0xc2>
		for (;msgBox < OTHER_NODES; msgBox++)
 8003cb8:	7bfb      	ldrb	r3, [r7, #15]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	73fb      	strb	r3, [r7, #15]
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d9de      	bls.n	8003c82 <CAN_Receive+0x7e>
 8003cc4:	e000      	b.n	8003cc8 <CAN_Receive+0xc4>
				break;
 8003cc6:	bf00      	nop
		}
	}

	if (msgBox == OTHER_NODES)
 8003cc8:	7bfb      	ldrb	r3, [r7, #15]
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d101      	bne.n	8003cd2 <CAN_Receive+0xce>
	{
		return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e04e      	b.n	8003d70 <CAN_Receive+0x16c>
	}

	// Not handling case with no information
	for ( uint8_t i = 0; i < dev->RXHeader.DLC; i++ )
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	73bb      	strb	r3, [r7, #14]
 8003cd6:	e021      	b.n	8003d1c <CAN_Receive+0x118>
	{
		dev->RXstack[msgBox][dev->RX_message_pointer[msgBox]] = dev->RXdata[i];
 8003cd8:	7bba      	ldrb	r2, [r7, #14]
 8003cda:	7bfb      	ldrb	r3, [r7, #15]
 8003cdc:	7bf9      	ldrb	r1, [r7, #15]
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	4401      	add	r1, r0
 8003ce2:	f891 1110 	ldrb.w	r1, [r1, #272]	; 0x110
 8003ce6:	4608      	mov	r0, r1
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	440a      	add	r2, r1
 8003cec:	f892 1041 	ldrb.w	r1, [r2, #65]	; 0x41
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	019b      	lsls	r3, r3, #6
 8003cf4:	4413      	add	r3, r2
 8003cf6:	4403      	add	r3, r0
 8003cf8:	3389      	adds	r3, #137	; 0x89
 8003cfa:	460a      	mov	r2, r1
 8003cfc:	701a      	strb	r2, [r3, #0]
		dev->RX_message_pointer[msgBox]++;
 8003cfe:	7bfb      	ldrb	r3, [r7, #15]
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	441a      	add	r2, r3
 8003d04:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
 8003d08:	3201      	adds	r2, #1
 8003d0a:	b2d1      	uxtb	r1, r2
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	4413      	add	r3, r2
 8003d10:	460a      	mov	r2, r1
 8003d12:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
	for ( uint8_t i = 0; i < dev->RXHeader.DLC; i++ )
 8003d16:	7bbb      	ldrb	r3, [r7, #14]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	73bb      	strb	r3, [r7, #14]
 8003d1c:	7bba      	ldrb	r2, [r7, #14]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d3d8      	bcc.n	8003cd8 <CAN_Receive+0xd4>
	}

	// Check if message has been fully received
	if (dev->RX_message_pointer[msgBox] > dev->RXstack[msgBox][2] + 3){
 8003d26:	7bfb      	ldrb	r3, [r7, #15]
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8003d30:	4619      	mov	r1, r3
 8003d32:	7bfb      	ldrb	r3, [r7, #15]
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	019b      	lsls	r3, r3, #6
 8003d38:	4413      	add	r3, r2
 8003d3a:	338b      	adds	r3, #139	; 0x8b
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	3303      	adds	r3, #3
 8003d40:	4299      	cmp	r1, r3
 8003d42:	dd14      	ble.n	8003d6e <CAN_Receive+0x16a>
		// Check if message was received including termination character
		if (dev->RXstack[msgBox][dev->RX_message_pointer[msgBox]-1] == 0xFF)
 8003d44:	7bfa      	ldrb	r2, [r7, #15]
 8003d46:	7bfb      	ldrb	r3, [r7, #15]
 8003d48:	6879      	ldr	r1, [r7, #4]
 8003d4a:	440b      	add	r3, r1
 8003d4c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8003d50:	3b01      	subs	r3, #1
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	0192      	lsls	r2, r2, #6
 8003d56:	440a      	add	r2, r1
 8003d58:	4413      	add	r3, r2
 8003d5a:	3389      	adds	r3, #137	; 0x89
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2bff      	cmp	r3, #255	; 0xff
 8003d60:	d105      	bne.n	8003d6e <CAN_Receive+0x16a>
		{
			// Raise flag to say message can be read
			dev->RX_received_flag[msgBox] = 1;
 8003d62:	7bfb      	ldrb	r3, [r7, #15]
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	4413      	add	r3, r2
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
//			dev->RX_message_pointer[msgBox] = 0;
		}
		// Need to create else error handling -- may leave as out of scope
	}
	return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <SEND_ACKNACK>:

void SEND_ACKNACK( CANBUS *dev, uint8_t taskID, uint8_t acknack, uint8_t target )
/*
 * Send ACK/NACK to Ground Station
 */
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	4608      	mov	r0, r1
 8003d86:	4611      	mov	r1, r2
 8003d88:	461a      	mov	r2, r3
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	70fb      	strb	r3, [r7, #3]
 8003d8e:	460b      	mov	r3, r1
 8003d90:	70bb      	strb	r3, [r7, #2]
 8003d92:	4613      	mov	r3, r2
 8003d94:	707b      	strb	r3, [r7, #1]
	uint8_t ACKNACK[3];
	ACKNACK[0] = TASK_ACK;
 8003d96:	2310      	movs	r3, #16
 8003d98:	733b      	strb	r3, [r7, #12]
	ACKNACK[1] = taskID;
 8003d9a:	78fb      	ldrb	r3, [r7, #3]
 8003d9c:	737b      	strb	r3, [r7, #13]
	ACKNACK[2] = acknack;
 8003d9e:	78bb      	ldrb	r3, [r7, #2]
 8003da0:	73bb      	strb	r3, [r7, #14]

	//Set Up CAN ID
	CAN_TX_ID TX_ID = CAN_setID( dev->nodeID, target, MSG_DIR );
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003da8:	7879      	ldrb	r1, [r7, #1]
 8003daa:	2202      	movs	r2, #2
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7ff fe70 	bl	8003a92 <CAN_setID>
 8003db2:	4603      	mov	r3, r0
 8003db4:	461a      	mov	r2, r3
 8003db6:	723a      	strb	r2, [r7, #8]
 8003db8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003dbc:	727a      	strb	r2, [r7, #9]
 8003dbe:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8003dc2:	72bb      	strb	r3, [r7, #10]

	// Add message to CAN
	CAN_Transmit( dev, TX_ID, (uint8_t*) ACKNACK, 3 );
 8003dc4:	f107 020c 	add.w	r2, r7, #12
 8003dc8:	2303      	movs	r3, #3
 8003dca:	68b9      	ldr	r1, [r7, #8]
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7ff fe89 	bl	8003ae4 <CAN_Transmit>
}
 8003dd2:	bf00      	nop
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <CAN_Fragment>:
 * 		CAN Bus object, message and message length
 * Outputs:
 * 		Updates CAN Bus object
 * 		Returns the number of frames that will be sent
 */
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b087      	sub	sp, #28
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	60f8      	str	r0, [r7, #12]
 8003de2:	60b9      	str	r1, [r7, #8]
 8003de4:	4613      	mov	r3, r2
 8003de6:	71fb      	strb	r3, [r7, #7]
	 * Take in a message, puts it into an understandable format
	 * Returns the number of 8 byte frames required
	*/

	// Set first value of message to number of bytes being transmitted
	dev->TXstack[0] = message_len;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	79fa      	ldrb	r2, [r7, #7]
 8003dec:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

	uint8_t i = 0;
 8003df0:	2300      	movs	r3, #0
 8003df2:	75fb      	strb	r3, [r7, #23]
	// Fill following bytes with information in message
	for (; i < message_len; i++)
 8003df4:	e00d      	b.n	8003e12 <CAN_Fragment+0x38>
	{
		dev->TXstack[i+1] = message[i];
 8003df6:	7dfb      	ldrb	r3, [r7, #23]
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	441a      	add	r2, r3
 8003dfc:	7dfb      	ldrb	r3, [r7, #23]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	7811      	ldrb	r1, [r2, #0]
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	4413      	add	r3, r2
 8003e06:	460a      	mov	r2, r1
 8003e08:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	for (; i < message_len; i++)
 8003e0c:	7dfb      	ldrb	r3, [r7, #23]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	75fb      	strb	r3, [r7, #23]
 8003e12:	7dfa      	ldrb	r2, [r7, #23]
 8003e14:	79fb      	ldrb	r3, [r7, #7]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d3ed      	bcc.n	8003df6 <CAN_Fragment+0x1c>
	}
	// Add end character
	dev->TXstack[i+1] = 0xFF;
 8003e1a:	7dfb      	ldrb	r3, [r7, #23]
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	4413      	add	r3, r2
 8003e22:	22ff      	movs	r2, #255	; 0xff
 8003e24:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	i += 2;
 8003e28:	7dfb      	ldrb	r3, [r7, #23]
 8003e2a:	3302      	adds	r3, #2
 8003e2c:	75fb      	strb	r3, [r7, #23]

	return (i/8 + (i%8 > 0));
 8003e2e:	7dfb      	ldrb	r3, [r7, #23]
 8003e30:	08db      	lsrs	r3, r3, #3
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	7dfa      	ldrb	r2, [r7, #23]
 8003e36:	f002 0207 	and.w	r2, r2, #7
 8003e3a:	b2d2      	uxtb	r2, r2
 8003e3c:	2a00      	cmp	r2, #0
 8003e3e:	bf14      	ite	ne
 8003e40:	2201      	movne	r2, #1
 8003e42:	2200      	moveq	r2, #0
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	4413      	add	r3, r2
 8003e48:	b2db      	uxtb	r3, r3
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	371c      	adds	r7, #28
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <CAN_CLEAR>:

void CAN_CLEAR( CANBUS *dev, uint8_t buffer )
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
 8003e5e:	460b      	mov	r3, r1
 8003e60:	70fb      	strb	r3, [r7, #3]
	for (; dev->RX_message_pointer[buffer] > 0 ; dev->RX_message_pointer[buffer]--)
 8003e62:	e019      	b.n	8003e98 <CAN_CLEAR+0x42>
	{
		dev->RXstack[buffer][dev->RX_message_pointer[buffer]-1] = 0;
 8003e64:	78fa      	ldrb	r2, [r7, #3]
 8003e66:	78fb      	ldrb	r3, [r7, #3]
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	440b      	add	r3, r1
 8003e6c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8003e70:	3b01      	subs	r3, #1
 8003e72:	6879      	ldr	r1, [r7, #4]
 8003e74:	0192      	lsls	r2, r2, #6
 8003e76:	440a      	add	r2, r1
 8003e78:	4413      	add	r3, r2
 8003e7a:	3389      	adds	r3, #137	; 0x89
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	701a      	strb	r2, [r3, #0]
	for (; dev->RX_message_pointer[buffer] > 0 ; dev->RX_message_pointer[buffer]--)
 8003e80:	78fb      	ldrb	r3, [r7, #3]
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	441a      	add	r2, r3
 8003e86:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
 8003e8a:	3a01      	subs	r2, #1
 8003e8c:	b2d1      	uxtb	r1, r2
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	4413      	add	r3, r2
 8003e92:	460a      	mov	r2, r1
 8003e94:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 8003e98:	78fb      	ldrb	r3, [r7, #3]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1de      	bne.n	8003e64 <CAN_CLEAR+0xe>
	}
	dev->RX_received_flag[buffer] = 0;
 8003ea6:	78fb      	ldrb	r3, [r7, #3]
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	4413      	add	r3, r2
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
}
 8003eb2:	bf00      	nop
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
	...

08003ec0 <HAL_Init>:
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	4b0e      	ldr	r3, [pc, #56]	; (8003f00 <HAL_Init+0x40>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a0d      	ldr	r2, [pc, #52]	; (8003f00 <HAL_Init+0x40>)
 8003eca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ece:	6013      	str	r3, [r2, #0]
 8003ed0:	4b0b      	ldr	r3, [pc, #44]	; (8003f00 <HAL_Init+0x40>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a0a      	ldr	r2, [pc, #40]	; (8003f00 <HAL_Init+0x40>)
 8003ed6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003eda:	6013      	str	r3, [r2, #0]
 8003edc:	4b08      	ldr	r3, [pc, #32]	; (8003f00 <HAL_Init+0x40>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a07      	ldr	r2, [pc, #28]	; (8003f00 <HAL_Init+0x40>)
 8003ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ee6:	6013      	str	r3, [r2, #0]
 8003ee8:	2003      	movs	r0, #3
 8003eea:	f000 ffe7 	bl	8004ebc <HAL_NVIC_SetPriorityGrouping>
 8003eee:	200f      	movs	r0, #15
 8003ef0:	f000 f808 	bl	8003f04 <HAL_InitTick>
 8003ef4:	f7ff fa60 	bl	80033b8 <HAL_MspInit>
 8003ef8:	2300      	movs	r3, #0
 8003efa:	4618      	mov	r0, r3
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	40023c00 	.word	0x40023c00

08003f04 <HAL_InitTick>:
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	4b12      	ldr	r3, [pc, #72]	; (8003f58 <HAL_InitTick+0x54>)
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	4b12      	ldr	r3, [pc, #72]	; (8003f5c <HAL_InitTick+0x58>)
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	4619      	mov	r1, r3
 8003f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 ffff 	bl	8004f26 <HAL_SYSTICK_Config>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <HAL_InitTick+0x2e>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e00e      	b.n	8003f50 <HAL_InitTick+0x4c>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b0f      	cmp	r3, #15
 8003f36:	d80a      	bhi.n	8003f4e <HAL_InitTick+0x4a>
 8003f38:	2200      	movs	r2, #0
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f40:	f000 ffc7 	bl	8004ed2 <HAL_NVIC_SetPriority>
 8003f44:	4a06      	ldr	r2, [pc, #24]	; (8003f60 <HAL_InitTick+0x5c>)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6013      	str	r3, [r2, #0]
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	e000      	b.n	8003f50 <HAL_InitTick+0x4c>
 8003f4e:	2301      	movs	r3, #1
 8003f50:	4618      	mov	r0, r3
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	20000004 	.word	0x20000004
 8003f5c:	2000000c 	.word	0x2000000c
 8003f60:	20000008 	.word	0x20000008

08003f64 <HAL_IncTick>:
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	4b06      	ldr	r3, [pc, #24]	; (8003f84 <HAL_IncTick+0x20>)
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	4b06      	ldr	r3, [pc, #24]	; (8003f88 <HAL_IncTick+0x24>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4413      	add	r3, r2
 8003f74:	4a04      	ldr	r2, [pc, #16]	; (8003f88 <HAL_IncTick+0x24>)
 8003f76:	6013      	str	r3, [r2, #0]
 8003f78:	bf00      	nop
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	2000000c 	.word	0x2000000c
 8003f88:	20003614 	.word	0x20003614

08003f8c <HAL_GetTick>:
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	4b03      	ldr	r3, [pc, #12]	; (8003fa0 <HAL_GetTick+0x14>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4618      	mov	r0, r3
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	20003614 	.word	0x20003614

08003fa4 <HAL_Delay>:
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	f7ff ffee 	bl	8003f8c <HAL_GetTick>
 8003fb0:	60b8      	str	r0, [r7, #8]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	60fb      	str	r3, [r7, #12]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fbc:	d005      	beq.n	8003fca <HAL_Delay+0x26>
 8003fbe:	4b0a      	ldr	r3, [pc, #40]	; (8003fe8 <HAL_Delay+0x44>)
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	bf00      	nop
 8003fcc:	f7ff ffde 	bl	8003f8c <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d8f7      	bhi.n	8003fcc <HAL_Delay+0x28>
 8003fdc:	bf00      	nop
 8003fde:	bf00      	nop
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	2000000c 	.word	0x2000000c

08003fec <HAL_CAN_Init>:
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_CAN_Init+0x12>
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e0ed      	b.n	80041da <HAL_CAN_Init+0x1ee>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d102      	bne.n	8004010 <HAL_CAN_Init+0x24>
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7ff f9fc 	bl	8003408 <HAL_CAN_MspInit>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0201 	orr.w	r2, r2, #1
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	f7ff ffb4 	bl	8003f8c <HAL_GetTick>
 8004024:	60f8      	str	r0, [r7, #12]
 8004026:	e012      	b.n	800404e <HAL_CAN_Init+0x62>
 8004028:	f7ff ffb0 	bl	8003f8c <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b0a      	cmp	r3, #10
 8004034:	d90b      	bls.n	800404e <HAL_CAN_Init+0x62>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	625a      	str	r2, [r3, #36]	; 0x24
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2205      	movs	r2, #5
 8004046:	f883 2020 	strb.w	r2, [r3, #32]
 800404a:	2301      	movs	r3, #1
 800404c:	e0c5      	b.n	80041da <HAL_CAN_Init+0x1ee>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0e5      	beq.n	8004028 <HAL_CAN_Init+0x3c>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0202 	bic.w	r2, r2, #2
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	f7ff ff8e 	bl	8003f8c <HAL_GetTick>
 8004070:	60f8      	str	r0, [r7, #12]
 8004072:	e012      	b.n	800409a <HAL_CAN_Init+0xae>
 8004074:	f7ff ff8a 	bl	8003f8c <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b0a      	cmp	r3, #10
 8004080:	d90b      	bls.n	800409a <HAL_CAN_Init+0xae>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	625a      	str	r2, [r3, #36]	; 0x24
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2205      	movs	r2, #5
 8004092:	f883 2020 	strb.w	r2, [r3, #32]
 8004096:	2301      	movs	r3, #1
 8004098:	e09f      	b.n	80041da <HAL_CAN_Init+0x1ee>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1e5      	bne.n	8004074 <HAL_CAN_Init+0x88>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	7e1b      	ldrb	r3, [r3, #24]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d108      	bne.n	80040c2 <HAL_CAN_Init+0xd6>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	e007      	b.n	80040d2 <HAL_CAN_Init+0xe6>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	7e5b      	ldrb	r3, [r3, #25]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d108      	bne.n	80040ec <HAL_CAN_Init+0x100>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	e007      	b.n	80040fc <HAL_CAN_Init+0x110>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	7e9b      	ldrb	r3, [r3, #26]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d108      	bne.n	8004116 <HAL_CAN_Init+0x12a>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0220 	orr.w	r2, r2, #32
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	e007      	b.n	8004126 <HAL_CAN_Init+0x13a>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0220 	bic.w	r2, r2, #32
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	7edb      	ldrb	r3, [r3, #27]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d108      	bne.n	8004140 <HAL_CAN_Init+0x154>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 0210 	bic.w	r2, r2, #16
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	e007      	b.n	8004150 <HAL_CAN_Init+0x164>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0210 	orr.w	r2, r2, #16
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	7f1b      	ldrb	r3, [r3, #28]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d108      	bne.n	800416a <HAL_CAN_Init+0x17e>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f042 0208 	orr.w	r2, r2, #8
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	e007      	b.n	800417a <HAL_CAN_Init+0x18e>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0208 	bic.w	r2, r2, #8
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	7f5b      	ldrb	r3, [r3, #29]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d108      	bne.n	8004194 <HAL_CAN_Init+0x1a8>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f042 0204 	orr.w	r2, r2, #4
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	e007      	b.n	80041a4 <HAL_CAN_Init+0x1b8>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 0204 	bic.w	r2, r2, #4
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	431a      	orrs	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	ea42 0103 	orr.w	r1, r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	1e5a      	subs	r2, r3, #1
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	61da      	str	r2, [r3, #28]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	625a      	str	r2, [r3, #36]	; 0x24
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2020 	strb.w	r2, [r3, #32]
 80041d8:	2300      	movs	r3, #0
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
	...

080041e4 <HAL_CAN_ConfigFilter>:
 80041e4:	b480      	push	{r7}
 80041e6:	b087      	sub	sp, #28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	617b      	str	r3, [r7, #20]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041fa:	74fb      	strb	r3, [r7, #19]
 80041fc:	7cfb      	ldrb	r3, [r7, #19]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d003      	beq.n	800420a <HAL_CAN_ConfigFilter+0x26>
 8004202:	7cfb      	ldrb	r3, [r7, #19]
 8004204:	2b02      	cmp	r3, #2
 8004206:	f040 80be 	bne.w	8004386 <HAL_CAN_ConfigFilter+0x1a2>
 800420a:	4b65      	ldr	r3, [pc, #404]	; (80043a0 <HAL_CAN_ConfigFilter+0x1bc>)
 800420c:	617b      	str	r3, [r7, #20]
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004214:	f043 0201 	orr.w	r2, r3, #1
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004224:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004238:	021b      	lsls	r3, r3, #8
 800423a:	431a      	orrs	r2, r3
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	f003 031f 	and.w	r3, r3, #31
 800424a:	2201      	movs	r2, #1
 800424c:	fa02 f303 	lsl.w	r3, r2, r3
 8004250:	60fb      	str	r3, [r7, #12]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	43db      	mvns	r3, r3
 800425c:	401a      	ands	r2, r3
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	69db      	ldr	r3, [r3, #28]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d123      	bne.n	80042b4 <HAL_CAN_ConfigFilter+0xd0>
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	43db      	mvns	r3, r3
 8004276:	401a      	ands	r2, r3
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	0419      	lsls	r1, r3, #16
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	b29b      	uxth	r3, r3
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	6952      	ldr	r2, [r2, #20]
 800428e:	4319      	orrs	r1, r3
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	3248      	adds	r2, #72	; 0x48
 8004294:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	0419      	lsls	r1, r3, #16
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	430a      	orrs	r2, r1
 80042aa:	6979      	ldr	r1, [r7, #20]
 80042ac:	3348      	adds	r3, #72	; 0x48
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	440b      	add	r3, r1
 80042b2:	605a      	str	r2, [r3, #4]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	69db      	ldr	r3, [r3, #28]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d122      	bne.n	8004302 <HAL_CAN_ConfigFilter+0x11e>
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	431a      	orrs	r2, r3
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	0419      	lsls	r1, r3, #16
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	683a      	ldr	r2, [r7, #0]
 80042da:	6952      	ldr	r2, [r2, #20]
 80042dc:	4319      	orrs	r1, r3
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	3248      	adds	r2, #72	; 0x48
 80042e2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	0419      	lsls	r1, r3, #16
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	6979      	ldr	r1, [r7, #20]
 80042fa:	3348      	adds	r3, #72	; 0x48
 80042fc:	00db      	lsls	r3, r3, #3
 80042fe:	440b      	add	r3, r1
 8004300:	605a      	str	r2, [r3, #4]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d109      	bne.n	800431e <HAL_CAN_ConfigFilter+0x13a>
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	43db      	mvns	r3, r3
 8004314:	401a      	ands	r2, r3
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800431c:	e007      	b.n	800432e <HAL_CAN_ConfigFilter+0x14a>
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	431a      	orrs	r2, r3
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d109      	bne.n	800434a <HAL_CAN_ConfigFilter+0x166>
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	43db      	mvns	r3, r3
 8004340:	401a      	ands	r2, r3
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004348:	e007      	b.n	800435a <HAL_CAN_ConfigFilter+0x176>
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	431a      	orrs	r2, r3
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d107      	bne.n	8004372 <HAL_CAN_ConfigFilter+0x18e>
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	431a      	orrs	r2, r3
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004378:	f023 0201 	bic.w	r2, r3, #1
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8004382:	2300      	movs	r3, #0
 8004384:	e006      	b.n	8004394 <HAL_CAN_ConfigFilter+0x1b0>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	625a      	str	r2, [r3, #36]	; 0x24
 8004392:	2301      	movs	r3, #1
 8004394:	4618      	mov	r0, r3
 8004396:	371c      	adds	r7, #28
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	40006400 	.word	0x40006400

080043a4 <HAL_CAN_Start>:
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d12e      	bne.n	8004416 <HAL_CAN_Start+0x72>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2202      	movs	r2, #2
 80043bc:	f883 2020 	strb.w	r2, [r3, #32]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 0201 	bic.w	r2, r2, #1
 80043ce:	601a      	str	r2, [r3, #0]
 80043d0:	f7ff fddc 	bl	8003f8c <HAL_GetTick>
 80043d4:	60f8      	str	r0, [r7, #12]
 80043d6:	e012      	b.n	80043fe <HAL_CAN_Start+0x5a>
 80043d8:	f7ff fdd8 	bl	8003f8c <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b0a      	cmp	r3, #10
 80043e4:	d90b      	bls.n	80043fe <HAL_CAN_Start+0x5a>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	625a      	str	r2, [r3, #36]	; 0x24
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2205      	movs	r2, #5
 80043f6:	f883 2020 	strb.w	r2, [r3, #32]
 80043fa:	2301      	movs	r3, #1
 80043fc:	e012      	b.n	8004424 <HAL_CAN_Start+0x80>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1e5      	bne.n	80043d8 <HAL_CAN_Start+0x34>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	625a      	str	r2, [r3, #36]	; 0x24
 8004412:	2300      	movs	r3, #0
 8004414:	e006      	b.n	8004424 <HAL_CAN_Start+0x80>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	625a      	str	r2, [r3, #36]	; 0x24
 8004422:	2301      	movs	r3, #1
 8004424:	4618      	mov	r0, r3
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <HAL_CAN_AddTxMessage>:
 800442c:	b480      	push	{r7}
 800442e:	b089      	sub	sp, #36	; 0x24
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
 8004438:	603b      	str	r3, [r7, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004440:	77fb      	strb	r3, [r7, #31]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	61bb      	str	r3, [r7, #24]
 800444a:	7ffb      	ldrb	r3, [r7, #31]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d003      	beq.n	8004458 <HAL_CAN_AddTxMessage+0x2c>
 8004450:	7ffb      	ldrb	r3, [r7, #31]
 8004452:	2b02      	cmp	r3, #2
 8004454:	f040 80b8 	bne.w	80045c8 <HAL_CAN_AddTxMessage+0x19c>
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10a      	bne.n	8004478 <HAL_CAN_AddTxMessage+0x4c>
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d105      	bne.n	8004478 <HAL_CAN_AddTxMessage+0x4c>
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 80a0 	beq.w	80045b8 <HAL_CAN_AddTxMessage+0x18c>
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	0e1b      	lsrs	r3, r3, #24
 800447c:	f003 0303 	and.w	r3, r3, #3
 8004480:	617b      	str	r3, [r7, #20]
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	2b02      	cmp	r3, #2
 8004486:	d907      	bls.n	8004498 <HAL_CAN_AddTxMessage+0x6c>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	625a      	str	r2, [r3, #36]	; 0x24
 8004494:	2301      	movs	r3, #1
 8004496:	e09e      	b.n	80045d6 <HAL_CAN_AddTxMessage+0x1aa>
 8004498:	2201      	movs	r2, #1
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	409a      	lsls	r2, r3
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	601a      	str	r2, [r3, #0]
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10d      	bne.n	80044c6 <HAL_CAN_AddTxMessage+0x9a>
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	055a      	lsls	r2, r3, #21
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	68f9      	ldr	r1, [r7, #12]
 80044b6:	6809      	ldr	r1, [r1, #0]
 80044b8:	431a      	orrs	r2, r3
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	3318      	adds	r3, #24
 80044be:	011b      	lsls	r3, r3, #4
 80044c0:	440b      	add	r3, r1
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	e00f      	b.n	80044e6 <HAL_CAN_AddTxMessage+0xba>
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	00da      	lsls	r2, r3, #3
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	431a      	orrs	r2, r3
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	68f9      	ldr	r1, [r7, #12]
 80044d8:	6809      	ldr	r1, [r1, #0]
 80044da:	431a      	orrs	r2, r3
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	3318      	adds	r3, #24
 80044e0:	011b      	lsls	r3, r3, #4
 80044e2:	440b      	add	r3, r1
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6819      	ldr	r1, [r3, #0]
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	691a      	ldr	r2, [r3, #16]
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	3318      	adds	r3, #24
 80044f2:	011b      	lsls	r3, r3, #4
 80044f4:	440b      	add	r3, r1
 80044f6:	3304      	adds	r3, #4
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	7d1b      	ldrb	r3, [r3, #20]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d111      	bne.n	8004526 <HAL_CAN_AddTxMessage+0xfa>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	3318      	adds	r3, #24
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	4413      	add	r3, r2
 800450e:	3304      	adds	r3, #4
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	6811      	ldr	r1, [r2, #0]
 8004516:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	3318      	adds	r3, #24
 800451e:	011b      	lsls	r3, r3, #4
 8004520:	440b      	add	r3, r1
 8004522:	3304      	adds	r3, #4
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	3307      	adds	r3, #7
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	061a      	lsls	r2, r3, #24
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	3306      	adds	r3, #6
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	041b      	lsls	r3, r3, #16
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	3305      	adds	r3, #5
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	021b      	lsls	r3, r3, #8
 8004540:	4313      	orrs	r3, r2
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	3204      	adds	r2, #4
 8004546:	7812      	ldrb	r2, [r2, #0]
 8004548:	4610      	mov	r0, r2
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	6811      	ldr	r1, [r2, #0]
 800454e:	ea43 0200 	orr.w	r2, r3, r0
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	440b      	add	r3, r1
 8004558:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800455c:	601a      	str	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	3303      	adds	r3, #3
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	061a      	lsls	r2, r3, #24
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	3302      	adds	r3, #2
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	041b      	lsls	r3, r3, #16
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	3301      	adds	r3, #1
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	021b      	lsls	r3, r3, #8
 8004578:	4313      	orrs	r3, r2
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	7812      	ldrb	r2, [r2, #0]
 800457e:	4610      	mov	r0, r2
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	6811      	ldr	r1, [r2, #0]
 8004584:	ea43 0200 	orr.w	r2, r3, r0
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	011b      	lsls	r3, r3, #4
 800458c:	440b      	add	r3, r1
 800458e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	3318      	adds	r3, #24
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	4413      	add	r3, r2
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	6811      	ldr	r1, [r2, #0]
 80045a6:	f043 0201 	orr.w	r2, r3, #1
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	3318      	adds	r3, #24
 80045ae:	011b      	lsls	r3, r3, #4
 80045b0:	440b      	add	r3, r1
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	2300      	movs	r3, #0
 80045b6:	e00e      	b.n	80045d6 <HAL_CAN_AddTxMessage+0x1aa>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	625a      	str	r2, [r3, #36]	; 0x24
 80045c4:	2301      	movs	r3, #1
 80045c6:	e006      	b.n	80045d6 <HAL_CAN_AddTxMessage+0x1aa>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	625a      	str	r2, [r3, #36]	; 0x24
 80045d4:	2301      	movs	r3, #1
 80045d6:	4618      	mov	r0, r3
 80045d8:	3724      	adds	r7, #36	; 0x24
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <HAL_CAN_GetTxMailboxesFreeLevel>:
 80045e2:	b480      	push	{r7}
 80045e4:	b085      	sub	sp, #20
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
 80045ea:	2300      	movs	r3, #0
 80045ec:	60fb      	str	r3, [r7, #12]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045f4:	72fb      	strb	r3, [r7, #11]
 80045f6:	7afb      	ldrb	r3, [r7, #11]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d002      	beq.n	8004602 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80045fc:	7afb      	ldrb	r3, [r7, #11]
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d11d      	bne.n	800463e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d002      	beq.n	8004616 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	3301      	adds	r3, #1
 8004614:	60fb      	str	r3, [r7, #12]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d002      	beq.n	800462a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	3301      	adds	r3, #1
 8004628:	60fb      	str	r3, [r7, #12]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d002      	beq.n	800463e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	3301      	adds	r3, #1
 800463c:	60fb      	str	r3, [r7, #12]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	4618      	mov	r0, r3
 8004642:	3714      	adds	r7, #20
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_CAN_GetRxMessage>:
 800464c:	b480      	push	{r7}
 800464e:	b087      	sub	sp, #28
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
 8004658:	603b      	str	r3, [r7, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004660:	75fb      	strb	r3, [r7, #23]
 8004662:	7dfb      	ldrb	r3, [r7, #23]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d003      	beq.n	8004670 <HAL_CAN_GetRxMessage+0x24>
 8004668:	7dfb      	ldrb	r3, [r7, #23]
 800466a:	2b02      	cmp	r3, #2
 800466c:	f040 80f3 	bne.w	8004856 <HAL_CAN_GetRxMessage+0x20a>
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10e      	bne.n	8004694 <HAL_CAN_GetRxMessage+0x48>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f003 0303 	and.w	r3, r3, #3
 8004680:	2b00      	cmp	r3, #0
 8004682:	d116      	bne.n	80046b2 <HAL_CAN_GetRxMessage+0x66>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	625a      	str	r2, [r3, #36]	; 0x24
 8004690:	2301      	movs	r3, #1
 8004692:	e0e7      	b.n	8004864 <HAL_CAN_GetRxMessage+0x218>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	f003 0303 	and.w	r3, r3, #3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d107      	bne.n	80046b2 <HAL_CAN_GetRxMessage+0x66>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	625a      	str	r2, [r3, #36]	; 0x24
 80046ae:	2301      	movs	r3, #1
 80046b0:	e0d8      	b.n	8004864 <HAL_CAN_GetRxMessage+0x218>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	331b      	adds	r3, #27
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	4413      	add	r3, r2
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0204 	and.w	r2, r3, #4
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	609a      	str	r2, [r3, #8]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10c      	bne.n	80046ea <HAL_CAN_GetRxMessage+0x9e>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	331b      	adds	r3, #27
 80046d8:	011b      	lsls	r3, r3, #4
 80046da:	4413      	add	r3, r2
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	0d5b      	lsrs	r3, r3, #21
 80046e0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	e00b      	b.n	8004702 <HAL_CAN_GetRxMessage+0xb6>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	331b      	adds	r3, #27
 80046f2:	011b      	lsls	r3, r3, #4
 80046f4:	4413      	add	r3, r2
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	08db      	lsrs	r3, r3, #3
 80046fa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	605a      	str	r2, [r3, #4]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	331b      	adds	r3, #27
 800470a:	011b      	lsls	r3, r3, #4
 800470c:	4413      	add	r3, r2
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0202 	and.w	r2, r3, #2
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	60da      	str	r2, [r3, #12]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	331b      	adds	r3, #27
 8004720:	011b      	lsls	r3, r3, #4
 8004722:	4413      	add	r3, r2
 8004724:	3304      	adds	r3, #4
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 020f 	and.w	r2, r3, #15
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	611a      	str	r2, [r3, #16]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	331b      	adds	r3, #27
 8004738:	011b      	lsls	r3, r3, #4
 800473a:	4413      	add	r3, r2
 800473c:	3304      	adds	r3, #4
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	0a1b      	lsrs	r3, r3, #8
 8004742:	b2da      	uxtb	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	619a      	str	r2, [r3, #24]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	331b      	adds	r3, #27
 8004750:	011b      	lsls	r3, r3, #4
 8004752:	4413      	add	r3, r2
 8004754:	3304      	adds	r3, #4
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	0c1b      	lsrs	r3, r3, #16
 800475a:	b29a      	uxth	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	615a      	str	r2, [r3, #20]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	011b      	lsls	r3, r3, #4
 8004768:	4413      	add	r3, r2
 800476a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	b2da      	uxtb	r2, r3
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	701a      	strb	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	011b      	lsls	r3, r3, #4
 800477e:	4413      	add	r3, r2
 8004780:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	0a1a      	lsrs	r2, r3, #8
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	3301      	adds	r3, #1
 800478c:	b2d2      	uxtb	r2, r2
 800478e:	701a      	strb	r2, [r3, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	4413      	add	r3, r2
 800479a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	0c1a      	lsrs	r2, r3, #16
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	3302      	adds	r3, #2
 80047a6:	b2d2      	uxtb	r2, r2
 80047a8:	701a      	strb	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	011b      	lsls	r3, r3, #4
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	0e1a      	lsrs	r2, r3, #24
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	3303      	adds	r3, #3
 80047c0:	b2d2      	uxtb	r2, r2
 80047c2:	701a      	strb	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	011b      	lsls	r3, r3, #4
 80047cc:	4413      	add	r3, r2
 80047ce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	3304      	adds	r3, #4
 80047d8:	b2d2      	uxtb	r2, r2
 80047da:	701a      	strb	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	0a1a      	lsrs	r2, r3, #8
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	3305      	adds	r3, #5
 80047f2:	b2d2      	uxtb	r2, r2
 80047f4:	701a      	strb	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	011b      	lsls	r3, r3, #4
 80047fe:	4413      	add	r3, r2
 8004800:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	0c1a      	lsrs	r2, r3, #16
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	3306      	adds	r3, #6
 800480c:	b2d2      	uxtb	r2, r2
 800480e:	701a      	strb	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	011b      	lsls	r3, r3, #4
 8004818:	4413      	add	r3, r2
 800481a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	0e1a      	lsrs	r2, r3, #24
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	3307      	adds	r3, #7
 8004826:	b2d2      	uxtb	r2, r2
 8004828:	701a      	strb	r2, [r3, #0]
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d108      	bne.n	8004842 <HAL_CAN_GetRxMessage+0x1f6>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68da      	ldr	r2, [r3, #12]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f042 0220 	orr.w	r2, r2, #32
 800483e:	60da      	str	r2, [r3, #12]
 8004840:	e007      	b.n	8004852 <HAL_CAN_GetRxMessage+0x206>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	691a      	ldr	r2, [r3, #16]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f042 0220 	orr.w	r2, r2, #32
 8004850:	611a      	str	r2, [r3, #16]
 8004852:	2300      	movs	r3, #0
 8004854:	e006      	b.n	8004864 <HAL_CAN_GetRxMessage+0x218>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	625a      	str	r2, [r3, #36]	; 0x24
 8004862:	2301      	movs	r3, #1
 8004864:	4618      	mov	r0, r3
 8004866:	371c      	adds	r7, #28
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <HAL_CAN_ActivateNotification>:
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004880:	73fb      	strb	r3, [r7, #15]
 8004882:	7bfb      	ldrb	r3, [r7, #15]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d002      	beq.n	800488e <HAL_CAN_ActivateNotification+0x1e>
 8004888:	7bfb      	ldrb	r3, [r7, #15]
 800488a:	2b02      	cmp	r3, #2
 800488c:	d109      	bne.n	80048a2 <HAL_CAN_ActivateNotification+0x32>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	6959      	ldr	r1, [r3, #20]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	615a      	str	r2, [r3, #20]
 800489e:	2300      	movs	r3, #0
 80048a0:	e006      	b.n	80048b0 <HAL_CAN_ActivateNotification+0x40>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	625a      	str	r2, [r3, #36]	; 0x24
 80048ae:	2301      	movs	r3, #1
 80048b0:	4618      	mov	r0, r3
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_CAN_IRQHandler>:
 80048bc:	b580      	push	{r7, lr}
 80048be:	b08a      	sub	sp, #40	; 0x28
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	2300      	movs	r3, #0
 80048c6:	627b      	str	r3, [r7, #36]	; 0x24
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	623b      	str	r3, [r7, #32]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	61fb      	str	r3, [r7, #28]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	61bb      	str	r3, [r7, #24]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	617b      	str	r3, [r7, #20]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	613b      	str	r3, [r7, #16]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	6a3b      	ldr	r3, [r7, #32]
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d07c      	beq.n	80049fc <HAL_CAN_IRQHandler+0x140>
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b00      	cmp	r3, #0
 800490a:	d023      	beq.n	8004954 <HAL_CAN_IRQHandler+0x98>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2201      	movs	r2, #1
 8004912:	609a      	str	r2, [r3, #8]
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <HAL_CAN_IRQHandler+0x6a>
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f983 	bl	8004c2a <HAL_CAN_TxMailbox0CompleteCallback>
 8004924:	e016      	b.n	8004954 <HAL_CAN_IRQHandler+0x98>
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	f003 0304 	and.w	r3, r3, #4
 800492c:	2b00      	cmp	r3, #0
 800492e:	d004      	beq.n	800493a <HAL_CAN_IRQHandler+0x7e>
 8004930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004932:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004936:	627b      	str	r3, [r7, #36]	; 0x24
 8004938:	e00c      	b.n	8004954 <HAL_CAN_IRQHandler+0x98>
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	f003 0308 	and.w	r3, r3, #8
 8004940:	2b00      	cmp	r3, #0
 8004942:	d004      	beq.n	800494e <HAL_CAN_IRQHandler+0x92>
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800494a:	627b      	str	r3, [r7, #36]	; 0x24
 800494c:	e002      	b.n	8004954 <HAL_CAN_IRQHandler+0x98>
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f989 	bl	8004c66 <HAL_CAN_TxMailbox0AbortCallback>
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495a:	2b00      	cmp	r3, #0
 800495c:	d024      	beq.n	80049a8 <HAL_CAN_IRQHandler+0xec>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004966:	609a      	str	r2, [r3, #8]
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <HAL_CAN_IRQHandler+0xbe>
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f963 	bl	8004c3e <HAL_CAN_TxMailbox1CompleteCallback>
 8004978:	e016      	b.n	80049a8 <HAL_CAN_IRQHandler+0xec>
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004980:	2b00      	cmp	r3, #0
 8004982:	d004      	beq.n	800498e <HAL_CAN_IRQHandler+0xd2>
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800498a:	627b      	str	r3, [r7, #36]	; 0x24
 800498c:	e00c      	b.n	80049a8 <HAL_CAN_IRQHandler+0xec>
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004994:	2b00      	cmp	r3, #0
 8004996:	d004      	beq.n	80049a2 <HAL_CAN_IRQHandler+0xe6>
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800499e:	627b      	str	r3, [r7, #36]	; 0x24
 80049a0:	e002      	b.n	80049a8 <HAL_CAN_IRQHandler+0xec>
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f969 	bl	8004c7a <HAL_CAN_TxMailbox1AbortCallback>
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d024      	beq.n	80049fc <HAL_CAN_IRQHandler+0x140>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80049ba:	609a      	str	r2, [r3, #8]
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <HAL_CAN_IRQHandler+0x112>
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f943 	bl	8004c52 <HAL_CAN_TxMailbox2CompleteCallback>
 80049cc:	e016      	b.n	80049fc <HAL_CAN_IRQHandler+0x140>
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d004      	beq.n	80049e2 <HAL_CAN_IRQHandler+0x126>
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049de:	627b      	str	r3, [r7, #36]	; 0x24
 80049e0:	e00c      	b.n	80049fc <HAL_CAN_IRQHandler+0x140>
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d004      	beq.n	80049f6 <HAL_CAN_IRQHandler+0x13a>
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049f2:	627b      	str	r3, [r7, #36]	; 0x24
 80049f4:	e002      	b.n	80049fc <HAL_CAN_IRQHandler+0x140>
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f949 	bl	8004c8e <HAL_CAN_TxMailbox2AbortCallback>
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00c      	beq.n	8004a20 <HAL_CAN_IRQHandler+0x164>
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f003 0310 	and.w	r3, r3, #16
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d007      	beq.n	8004a20 <HAL_CAN_IRQHandler+0x164>
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a16:	627b      	str	r3, [r7, #36]	; 0x24
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2210      	movs	r2, #16
 8004a1e:	60da      	str	r2, [r3, #12]
 8004a20:	6a3b      	ldr	r3, [r7, #32]
 8004a22:	f003 0304 	and.w	r3, r3, #4
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00b      	beq.n	8004a42 <HAL_CAN_IRQHandler+0x186>
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f003 0308 	and.w	r3, r3, #8
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d006      	beq.n	8004a42 <HAL_CAN_IRQHandler+0x186>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2208      	movs	r2, #8
 8004a3a:	60da      	str	r2, [r3, #12]
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f930 	bl	8004ca2 <HAL_CAN_RxFifo0FullCallback>
 8004a42:	6a3b      	ldr	r3, [r7, #32]
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d009      	beq.n	8004a60 <HAL_CAN_IRQHandler+0x1a4>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	f003 0303 	and.w	r3, r3, #3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d002      	beq.n	8004a60 <HAL_CAN_IRQHandler+0x1a4>
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7fd fc88 	bl	8002370 <HAL_CAN_RxFifo0MsgPendingCallback>
 8004a60:	6a3b      	ldr	r3, [r7, #32]
 8004a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00c      	beq.n	8004a84 <HAL_CAN_IRQHandler+0x1c8>
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f003 0310 	and.w	r3, r3, #16
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d007      	beq.n	8004a84 <HAL_CAN_IRQHandler+0x1c8>
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2210      	movs	r2, #16
 8004a82:	611a      	str	r2, [r3, #16]
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00b      	beq.n	8004aa6 <HAL_CAN_IRQHandler+0x1ea>
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	f003 0308 	and.w	r3, r3, #8
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d006      	beq.n	8004aa6 <HAL_CAN_IRQHandler+0x1ea>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2208      	movs	r2, #8
 8004a9e:	611a      	str	r2, [r3, #16]
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f912 	bl	8004cca <HAL_CAN_RxFifo1FullCallback>
 8004aa6:	6a3b      	ldr	r3, [r7, #32]
 8004aa8:	f003 0310 	and.w	r3, r3, #16
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d009      	beq.n	8004ac4 <HAL_CAN_IRQHandler+0x208>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	f003 0303 	and.w	r3, r3, #3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d002      	beq.n	8004ac4 <HAL_CAN_IRQHandler+0x208>
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f8f9 	bl	8004cb6 <HAL_CAN_RxFifo1MsgPendingCallback>
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00b      	beq.n	8004ae6 <HAL_CAN_IRQHandler+0x22a>
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	f003 0310 	and.w	r3, r3, #16
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d006      	beq.n	8004ae6 <HAL_CAN_IRQHandler+0x22a>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2210      	movs	r2, #16
 8004ade:	605a      	str	r2, [r3, #4]
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 f8fc 	bl	8004cde <HAL_CAN_SleepCallback>
 8004ae6:	6a3b      	ldr	r3, [r7, #32]
 8004ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00b      	beq.n	8004b08 <HAL_CAN_IRQHandler+0x24c>
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	f003 0308 	and.w	r3, r3, #8
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d006      	beq.n	8004b08 <HAL_CAN_IRQHandler+0x24c>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2208      	movs	r2, #8
 8004b00:	605a      	str	r2, [r3, #4]
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f8f5 	bl	8004cf2 <HAL_CAN_WakeUpFromRxMsgCallback>
 8004b08:	6a3b      	ldr	r3, [r7, #32]
 8004b0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d07b      	beq.n	8004c0a <HAL_CAN_IRQHandler+0x34e>
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	f003 0304 	and.w	r3, r3, #4
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d072      	beq.n	8004c02 <HAL_CAN_IRQHandler+0x346>
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
 8004b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d008      	beq.n	8004b38 <HAL_CAN_IRQHandler+0x27c>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d003      	beq.n	8004b38 <HAL_CAN_IRQHandler+0x27c>
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	f043 0301 	orr.w	r3, r3, #1
 8004b36:	627b      	str	r3, [r7, #36]	; 0x24
 8004b38:	6a3b      	ldr	r3, [r7, #32]
 8004b3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d008      	beq.n	8004b54 <HAL_CAN_IRQHandler+0x298>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d003      	beq.n	8004b54 <HAL_CAN_IRQHandler+0x298>
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	f043 0302 	orr.w	r3, r3, #2
 8004b52:	627b      	str	r3, [r7, #36]	; 0x24
 8004b54:	6a3b      	ldr	r3, [r7, #32]
 8004b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d008      	beq.n	8004b70 <HAL_CAN_IRQHandler+0x2b4>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <HAL_CAN_IRQHandler+0x2b4>
 8004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6a:	f043 0304 	orr.w	r3, r3, #4
 8004b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b70:	6a3b      	ldr	r3, [r7, #32]
 8004b72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d043      	beq.n	8004c02 <HAL_CAN_IRQHandler+0x346>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d03e      	beq.n	8004c02 <HAL_CAN_IRQHandler+0x346>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b8a:	2b60      	cmp	r3, #96	; 0x60
 8004b8c:	d02b      	beq.n	8004be6 <HAL_CAN_IRQHandler+0x32a>
 8004b8e:	2b60      	cmp	r3, #96	; 0x60
 8004b90:	d82e      	bhi.n	8004bf0 <HAL_CAN_IRQHandler+0x334>
 8004b92:	2b50      	cmp	r3, #80	; 0x50
 8004b94:	d022      	beq.n	8004bdc <HAL_CAN_IRQHandler+0x320>
 8004b96:	2b50      	cmp	r3, #80	; 0x50
 8004b98:	d82a      	bhi.n	8004bf0 <HAL_CAN_IRQHandler+0x334>
 8004b9a:	2b40      	cmp	r3, #64	; 0x40
 8004b9c:	d019      	beq.n	8004bd2 <HAL_CAN_IRQHandler+0x316>
 8004b9e:	2b40      	cmp	r3, #64	; 0x40
 8004ba0:	d826      	bhi.n	8004bf0 <HAL_CAN_IRQHandler+0x334>
 8004ba2:	2b30      	cmp	r3, #48	; 0x30
 8004ba4:	d010      	beq.n	8004bc8 <HAL_CAN_IRQHandler+0x30c>
 8004ba6:	2b30      	cmp	r3, #48	; 0x30
 8004ba8:	d822      	bhi.n	8004bf0 <HAL_CAN_IRQHandler+0x334>
 8004baa:	2b10      	cmp	r3, #16
 8004bac:	d002      	beq.n	8004bb4 <HAL_CAN_IRQHandler+0x2f8>
 8004bae:	2b20      	cmp	r3, #32
 8004bb0:	d005      	beq.n	8004bbe <HAL_CAN_IRQHandler+0x302>
 8004bb2:	e01d      	b.n	8004bf0 <HAL_CAN_IRQHandler+0x334>
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	f043 0308 	orr.w	r3, r3, #8
 8004bba:	627b      	str	r3, [r7, #36]	; 0x24
 8004bbc:	e019      	b.n	8004bf2 <HAL_CAN_IRQHandler+0x336>
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	f043 0310 	orr.w	r3, r3, #16
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8004bc6:	e014      	b.n	8004bf2 <HAL_CAN_IRQHandler+0x336>
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bca:	f043 0320 	orr.w	r3, r3, #32
 8004bce:	627b      	str	r3, [r7, #36]	; 0x24
 8004bd0:	e00f      	b.n	8004bf2 <HAL_CAN_IRQHandler+0x336>
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8004bda:	e00a      	b.n	8004bf2 <HAL_CAN_IRQHandler+0x336>
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004be2:	627b      	str	r3, [r7, #36]	; 0x24
 8004be4:	e005      	b.n	8004bf2 <HAL_CAN_IRQHandler+0x336>
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bec:	627b      	str	r3, [r7, #36]	; 0x24
 8004bee:	e000      	b.n	8004bf2 <HAL_CAN_IRQHandler+0x336>
 8004bf0:	bf00      	nop
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	699a      	ldr	r2, [r3, #24]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004c00:	619a      	str	r2, [r3, #24]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2204      	movs	r2, #4
 8004c08:	605a      	str	r2, [r3, #4]
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d008      	beq.n	8004c22 <HAL_CAN_IRQHandler+0x366>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	431a      	orrs	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	625a      	str	r2, [r3, #36]	; 0x24
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 f872 	bl	8004d06 <HAL_CAN_ErrorCallback>
 8004c22:	bf00      	nop
 8004c24:	3728      	adds	r7, #40	; 0x28
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <HAL_CAN_TxMailbox0CompleteCallback>:
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <HAL_CAN_TxMailbox1CompleteCallback>:
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
 8004c46:	bf00      	nop
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <HAL_CAN_TxMailbox2CompleteCallback>:
 8004c52:	b480      	push	{r7}
 8004c54:	b083      	sub	sp, #12
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
 8004c5a:	bf00      	nop
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <HAL_CAN_TxMailbox0AbortCallback>:
 8004c66:	b480      	push	{r7}
 8004c68:	b083      	sub	sp, #12
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
 8004c6e:	bf00      	nop
 8004c70:	370c      	adds	r7, #12
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr

08004c7a <HAL_CAN_TxMailbox1AbortCallback>:
 8004c7a:	b480      	push	{r7}
 8004c7c:	b083      	sub	sp, #12
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
 8004c82:	bf00      	nop
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <HAL_CAN_TxMailbox2AbortCallback>:
 8004c8e:	b480      	push	{r7}
 8004c90:	b083      	sub	sp, #12
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <HAL_CAN_RxFifo0FullCallback>:
 8004ca2:	b480      	push	{r7}
 8004ca4:	b083      	sub	sp, #12
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
 8004caa:	bf00      	nop
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8004cb6:	b480      	push	{r7}
 8004cb8:	b083      	sub	sp, #12
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
 8004cbe:	bf00      	nop
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <HAL_CAN_RxFifo1FullCallback>:
 8004cca:	b480      	push	{r7}
 8004ccc:	b083      	sub	sp, #12
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	bf00      	nop
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <HAL_CAN_SleepCallback>:
 8004cde:	b480      	push	{r7}
 8004ce0:	b083      	sub	sp, #12
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
 8004ce6:	bf00      	nop
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8004cf2:	b480      	push	{r7}
 8004cf4:	b083      	sub	sp, #12
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
 8004cfa:	bf00      	nop
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <HAL_CAN_ErrorCallback>:
 8004d06:	b480      	push	{r7}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
 8004d0e:	bf00      	nop
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
	...

08004d1c <__NVIC_SetPriorityGrouping>:
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f003 0307 	and.w	r3, r3, #7
 8004d2a:	60fb      	str	r3, [r7, #12]
 8004d2c:	4b0c      	ldr	r3, [pc, #48]	; (8004d60 <__NVIC_SetPriorityGrouping+0x44>)
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	60bb      	str	r3, [r7, #8]
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d38:	4013      	ands	r3, r2
 8004d3a:	60bb      	str	r3, [r7, #8]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	021a      	lsls	r2, r3, #8
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d4c:	60bb      	str	r3, [r7, #8]
 8004d4e:	4a04      	ldr	r2, [pc, #16]	; (8004d60 <__NVIC_SetPriorityGrouping+0x44>)
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	60d3      	str	r3, [r2, #12]
 8004d54:	bf00      	nop
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	e000ed00 	.word	0xe000ed00

08004d64 <__NVIC_GetPriorityGrouping>:
 8004d64:	b480      	push	{r7}
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	4b04      	ldr	r3, [pc, #16]	; (8004d7c <__NVIC_GetPriorityGrouping+0x18>)
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	0a1b      	lsrs	r3, r3, #8
 8004d6e:	f003 0307 	and.w	r3, r3, #7
 8004d72:	4618      	mov	r0, r3
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr
 8004d7c:	e000ed00 	.word	0xe000ed00

08004d80 <__NVIC_EnableIRQ>:
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	4603      	mov	r3, r0
 8004d88:	71fb      	strb	r3, [r7, #7]
 8004d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	db0b      	blt.n	8004daa <__NVIC_EnableIRQ+0x2a>
 8004d92:	79fb      	ldrb	r3, [r7, #7]
 8004d94:	f003 021f 	and.w	r2, r3, #31
 8004d98:	4907      	ldr	r1, [pc, #28]	; (8004db8 <__NVIC_EnableIRQ+0x38>)
 8004d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d9e:	095b      	lsrs	r3, r3, #5
 8004da0:	2001      	movs	r0, #1
 8004da2:	fa00 f202 	lsl.w	r2, r0, r2
 8004da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004daa:	bf00      	nop
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	e000e100 	.word	0xe000e100

08004dbc <__NVIC_SetPriority>:
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	6039      	str	r1, [r7, #0]
 8004dc6:	71fb      	strb	r3, [r7, #7]
 8004dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	db0a      	blt.n	8004de6 <__NVIC_SetPriority+0x2a>
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	b2da      	uxtb	r2, r3
 8004dd4:	490c      	ldr	r1, [pc, #48]	; (8004e08 <__NVIC_SetPriority+0x4c>)
 8004dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dda:	0112      	lsls	r2, r2, #4
 8004ddc:	b2d2      	uxtb	r2, r2
 8004dde:	440b      	add	r3, r1
 8004de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8004de4:	e00a      	b.n	8004dfc <__NVIC_SetPriority+0x40>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	4908      	ldr	r1, [pc, #32]	; (8004e0c <__NVIC_SetPriority+0x50>)
 8004dec:	79fb      	ldrb	r3, [r7, #7]
 8004dee:	f003 030f 	and.w	r3, r3, #15
 8004df2:	3b04      	subs	r3, #4
 8004df4:	0112      	lsls	r2, r2, #4
 8004df6:	b2d2      	uxtb	r2, r2
 8004df8:	440b      	add	r3, r1
 8004dfa:	761a      	strb	r2, [r3, #24]
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr
 8004e08:	e000e100 	.word	0xe000e100
 8004e0c:	e000ed00 	.word	0xe000ed00

08004e10 <NVIC_EncodePriority>:
 8004e10:	b480      	push	{r7}
 8004e12:	b089      	sub	sp, #36	; 0x24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f003 0307 	and.w	r3, r3, #7
 8004e22:	61fb      	str	r3, [r7, #28]
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	f1c3 0307 	rsb	r3, r3, #7
 8004e2a:	2b04      	cmp	r3, #4
 8004e2c:	bf28      	it	cs
 8004e2e:	2304      	movcs	r3, #4
 8004e30:	61bb      	str	r3, [r7, #24]
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	3304      	adds	r3, #4
 8004e36:	2b06      	cmp	r3, #6
 8004e38:	d902      	bls.n	8004e40 <NVIC_EncodePriority+0x30>
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	3b03      	subs	r3, #3
 8004e3e:	e000      	b.n	8004e42 <NVIC_EncodePriority+0x32>
 8004e40:	2300      	movs	r3, #0
 8004e42:	617b      	str	r3, [r7, #20]
 8004e44:	f04f 32ff 	mov.w	r2, #4294967295
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4e:	43da      	mvns	r2, r3
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	401a      	ands	r2, r3
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	409a      	lsls	r2, r3
 8004e58:	f04f 31ff 	mov.w	r1, #4294967295
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e62:	43d9      	mvns	r1, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	400b      	ands	r3, r1
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3724      	adds	r7, #36	; 0x24
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
	...

08004e78 <SysTick_Config>:
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	3b01      	subs	r3, #1
 8004e84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e88:	d301      	bcc.n	8004e8e <SysTick_Config+0x16>
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e00f      	b.n	8004eae <SysTick_Config+0x36>
 8004e8e:	4a0a      	ldr	r2, [pc, #40]	; (8004eb8 <SysTick_Config+0x40>)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	6053      	str	r3, [r2, #4]
 8004e96:	210f      	movs	r1, #15
 8004e98:	f04f 30ff 	mov.w	r0, #4294967295
 8004e9c:	f7ff ff8e 	bl	8004dbc <__NVIC_SetPriority>
 8004ea0:	4b05      	ldr	r3, [pc, #20]	; (8004eb8 <SysTick_Config+0x40>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	609a      	str	r2, [r3, #8]
 8004ea6:	4b04      	ldr	r3, [pc, #16]	; (8004eb8 <SysTick_Config+0x40>)
 8004ea8:	2207      	movs	r2, #7
 8004eaa:	601a      	str	r2, [r3, #0]
 8004eac:	2300      	movs	r3, #0
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	e000e010 	.word	0xe000e010

08004ebc <HAL_NVIC_SetPriorityGrouping>:
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f7ff ff29 	bl	8004d1c <__NVIC_SetPriorityGrouping>
 8004eca:	bf00      	nop
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <HAL_NVIC_SetPriority>:
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b086      	sub	sp, #24
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	4603      	mov	r3, r0
 8004eda:	60b9      	str	r1, [r7, #8]
 8004edc:	607a      	str	r2, [r7, #4]
 8004ede:	73fb      	strb	r3, [r7, #15]
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	617b      	str	r3, [r7, #20]
 8004ee4:	f7ff ff3e 	bl	8004d64 <__NVIC_GetPriorityGrouping>
 8004ee8:	6178      	str	r0, [r7, #20]
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	68b9      	ldr	r1, [r7, #8]
 8004eee:	6978      	ldr	r0, [r7, #20]
 8004ef0:	f7ff ff8e 	bl	8004e10 <NVIC_EncodePriority>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004efa:	4611      	mov	r1, r2
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7ff ff5d 	bl	8004dbc <__NVIC_SetPriority>
 8004f02:	bf00      	nop
 8004f04:	3718      	adds	r7, #24
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <HAL_NVIC_EnableIRQ>:
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b082      	sub	sp, #8
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	4603      	mov	r3, r0
 8004f12:	71fb      	strb	r3, [r7, #7]
 8004f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7ff ff31 	bl	8004d80 <__NVIC_EnableIRQ>
 8004f1e:	bf00      	nop
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <HAL_SYSTICK_Config>:
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b082      	sub	sp, #8
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7ff ffa2 	bl	8004e78 <SysTick_Config>
 8004f34:	4603      	mov	r3, r0
 8004f36:	4618      	mov	r0, r3
 8004f38:	3708      	adds	r7, #8
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
	...

08004f40 <HAL_GPIO_Init>:
 8004f40:	b480      	push	{r7}
 8004f42:	b089      	sub	sp, #36	; 0x24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	617b      	str	r3, [r7, #20]
 8004f4e:	2300      	movs	r3, #0
 8004f50:	613b      	str	r3, [r7, #16]
 8004f52:	2300      	movs	r3, #0
 8004f54:	61bb      	str	r3, [r7, #24]
 8004f56:	2300      	movs	r3, #0
 8004f58:	61fb      	str	r3, [r7, #28]
 8004f5a:	e14d      	b.n	80051f8 <HAL_GPIO_Init+0x2b8>
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	fa02 f303 	lsl.w	r3, r2, r3
 8004f64:	617b      	str	r3, [r7, #20]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	613b      	str	r3, [r7, #16]
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	f040 813c 	bne.w	80051f2 <HAL_GPIO_Init+0x2b2>
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f003 0303 	and.w	r3, r3, #3
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d005      	beq.n	8004f92 <HAL_GPIO_Init+0x52>
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f003 0303 	and.w	r3, r3, #3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d130      	bne.n	8004ff4 <HAL_GPIO_Init+0xb4>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	61bb      	str	r3, [r7, #24]
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	005b      	lsls	r3, r3, #1
 8004f9c:	2203      	movs	r2, #3
 8004f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa2:	43db      	mvns	r3, r3
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	61bb      	str	r3, [r7, #24]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	61bb      	str	r3, [r7, #24]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	609a      	str	r2, [r3, #8]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	61bb      	str	r3, [r7, #24]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd0:	43db      	mvns	r3, r3
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	61bb      	str	r3, [r7, #24]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	091b      	lsrs	r3, r3, #4
 8004fde:	f003 0201 	and.w	r2, r3, #1
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	61bb      	str	r3, [r7, #24]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	605a      	str	r2, [r3, #4]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f003 0303 	and.w	r3, r3, #3
 8004ffc:	2b03      	cmp	r3, #3
 8004ffe:	d017      	beq.n	8005030 <HAL_GPIO_Init+0xf0>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	61bb      	str	r3, [r7, #24]
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	005b      	lsls	r3, r3, #1
 800500a:	2203      	movs	r2, #3
 800500c:	fa02 f303 	lsl.w	r3, r2, r3
 8005010:	43db      	mvns	r3, r3
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	4013      	ands	r3, r2
 8005016:	61bb      	str	r3, [r7, #24]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	005b      	lsls	r3, r3, #1
 8005020:	fa02 f303 	lsl.w	r3, r2, r3
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	4313      	orrs	r3, r2
 8005028:	61bb      	str	r3, [r7, #24]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	60da      	str	r2, [r3, #12]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f003 0303 	and.w	r3, r3, #3
 8005038:	2b02      	cmp	r3, #2
 800503a:	d123      	bne.n	8005084 <HAL_GPIO_Init+0x144>
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	08da      	lsrs	r2, r3, #3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3208      	adds	r2, #8
 8005044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005048:	61bb      	str	r3, [r7, #24]
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	f003 0307 	and.w	r3, r3, #7
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	220f      	movs	r2, #15
 8005054:	fa02 f303 	lsl.w	r3, r2, r3
 8005058:	43db      	mvns	r3, r3
 800505a:	69ba      	ldr	r2, [r7, #24]
 800505c:	4013      	ands	r3, r2
 800505e:	61bb      	str	r3, [r7, #24]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	691a      	ldr	r2, [r3, #16]
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	f003 0307 	and.w	r3, r3, #7
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	fa02 f303 	lsl.w	r3, r2, r3
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	4313      	orrs	r3, r2
 8005074:	61bb      	str	r3, [r7, #24]
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	08da      	lsrs	r2, r3, #3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	3208      	adds	r2, #8
 800507e:	69b9      	ldr	r1, [r7, #24]
 8005080:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	61bb      	str	r3, [r7, #24]
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	005b      	lsls	r3, r3, #1
 800508e:	2203      	movs	r2, #3
 8005090:	fa02 f303 	lsl.w	r3, r2, r3
 8005094:	43db      	mvns	r3, r3
 8005096:	69ba      	ldr	r2, [r7, #24]
 8005098:	4013      	ands	r3, r2
 800509a:	61bb      	str	r3, [r7, #24]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f003 0203 	and.w	r2, r3, #3
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	005b      	lsls	r3, r3, #1
 80050a8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	61bb      	str	r3, [r7, #24]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	601a      	str	r2, [r3, #0]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f000 8096 	beq.w	80051f2 <HAL_GPIO_Init+0x2b2>
 80050c6:	2300      	movs	r3, #0
 80050c8:	60fb      	str	r3, [r7, #12]
 80050ca:	4b51      	ldr	r3, [pc, #324]	; (8005210 <HAL_GPIO_Init+0x2d0>)
 80050cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ce:	4a50      	ldr	r2, [pc, #320]	; (8005210 <HAL_GPIO_Init+0x2d0>)
 80050d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050d4:	6453      	str	r3, [r2, #68]	; 0x44
 80050d6:	4b4e      	ldr	r3, [pc, #312]	; (8005210 <HAL_GPIO_Init+0x2d0>)
 80050d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050de:	60fb      	str	r3, [r7, #12]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	4a4c      	ldr	r2, [pc, #304]	; (8005214 <HAL_GPIO_Init+0x2d4>)
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	089b      	lsrs	r3, r3, #2
 80050e8:	3302      	adds	r3, #2
 80050ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050ee:	61bb      	str	r3, [r7, #24]
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	f003 0303 	and.w	r3, r3, #3
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	220f      	movs	r2, #15
 80050fa:	fa02 f303 	lsl.w	r3, r2, r3
 80050fe:	43db      	mvns	r3, r3
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	4013      	ands	r3, r2
 8005104:	61bb      	str	r3, [r7, #24]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a43      	ldr	r2, [pc, #268]	; (8005218 <HAL_GPIO_Init+0x2d8>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d00d      	beq.n	800512a <HAL_GPIO_Init+0x1ea>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a42      	ldr	r2, [pc, #264]	; (800521c <HAL_GPIO_Init+0x2dc>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d007      	beq.n	8005126 <HAL_GPIO_Init+0x1e6>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a41      	ldr	r2, [pc, #260]	; (8005220 <HAL_GPIO_Init+0x2e0>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d101      	bne.n	8005122 <HAL_GPIO_Init+0x1e2>
 800511e:	2302      	movs	r3, #2
 8005120:	e004      	b.n	800512c <HAL_GPIO_Init+0x1ec>
 8005122:	2307      	movs	r3, #7
 8005124:	e002      	b.n	800512c <HAL_GPIO_Init+0x1ec>
 8005126:	2301      	movs	r3, #1
 8005128:	e000      	b.n	800512c <HAL_GPIO_Init+0x1ec>
 800512a:	2300      	movs	r3, #0
 800512c:	69fa      	ldr	r2, [r7, #28]
 800512e:	f002 0203 	and.w	r2, r2, #3
 8005132:	0092      	lsls	r2, r2, #2
 8005134:	4093      	lsls	r3, r2
 8005136:	69ba      	ldr	r2, [r7, #24]
 8005138:	4313      	orrs	r3, r2
 800513a:	61bb      	str	r3, [r7, #24]
 800513c:	4935      	ldr	r1, [pc, #212]	; (8005214 <HAL_GPIO_Init+0x2d4>)
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	089b      	lsrs	r3, r3, #2
 8005142:	3302      	adds	r3, #2
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800514a:	4b36      	ldr	r3, [pc, #216]	; (8005224 <HAL_GPIO_Init+0x2e4>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	61bb      	str	r3, [r7, #24]
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	43db      	mvns	r3, r3
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	4013      	ands	r3, r2
 8005158:	61bb      	str	r3, [r7, #24]
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d003      	beq.n	800516e <HAL_GPIO_Init+0x22e>
 8005166:	69ba      	ldr	r2, [r7, #24]
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	4313      	orrs	r3, r2
 800516c:	61bb      	str	r3, [r7, #24]
 800516e:	4a2d      	ldr	r2, [pc, #180]	; (8005224 <HAL_GPIO_Init+0x2e4>)
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	6093      	str	r3, [r2, #8]
 8005174:	4b2b      	ldr	r3, [pc, #172]	; (8005224 <HAL_GPIO_Init+0x2e4>)
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	61bb      	str	r3, [r7, #24]
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	43db      	mvns	r3, r3
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	4013      	ands	r3, r2
 8005182:	61bb      	str	r3, [r7, #24]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d003      	beq.n	8005198 <HAL_GPIO_Init+0x258>
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	4313      	orrs	r3, r2
 8005196:	61bb      	str	r3, [r7, #24]
 8005198:	4a22      	ldr	r2, [pc, #136]	; (8005224 <HAL_GPIO_Init+0x2e4>)
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	60d3      	str	r3, [r2, #12]
 800519e:	4b21      	ldr	r3, [pc, #132]	; (8005224 <HAL_GPIO_Init+0x2e4>)
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	61bb      	str	r3, [r7, #24]
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	43db      	mvns	r3, r3
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	4013      	ands	r3, r2
 80051ac:	61bb      	str	r3, [r7, #24]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <HAL_GPIO_Init+0x282>
 80051ba:	69ba      	ldr	r2, [r7, #24]
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	4313      	orrs	r3, r2
 80051c0:	61bb      	str	r3, [r7, #24]
 80051c2:	4a18      	ldr	r2, [pc, #96]	; (8005224 <HAL_GPIO_Init+0x2e4>)
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	6053      	str	r3, [r2, #4]
 80051c8:	4b16      	ldr	r3, [pc, #88]	; (8005224 <HAL_GPIO_Init+0x2e4>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	61bb      	str	r3, [r7, #24]
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	43db      	mvns	r3, r3
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	4013      	ands	r3, r2
 80051d6:	61bb      	str	r3, [r7, #24]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d003      	beq.n	80051ec <HAL_GPIO_Init+0x2ac>
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	61bb      	str	r3, [r7, #24]
 80051ec:	4a0d      	ldr	r2, [pc, #52]	; (8005224 <HAL_GPIO_Init+0x2e4>)
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	6013      	str	r3, [r2, #0]
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	3301      	adds	r3, #1
 80051f6:	61fb      	str	r3, [r7, #28]
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	2b0f      	cmp	r3, #15
 80051fc:	f67f aeae 	bls.w	8004f5c <HAL_GPIO_Init+0x1c>
 8005200:	bf00      	nop
 8005202:	bf00      	nop
 8005204:	3724      	adds	r7, #36	; 0x24
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	40023800 	.word	0x40023800
 8005214:	40013800 	.word	0x40013800
 8005218:	40020000 	.word	0x40020000
 800521c:	40020400 	.word	0x40020400
 8005220:	40020800 	.word	0x40020800
 8005224:	40013c00 	.word	0x40013c00

08005228 <HAL_GPIO_WritePin>:
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	460b      	mov	r3, r1
 8005232:	807b      	strh	r3, [r7, #2]
 8005234:	4613      	mov	r3, r2
 8005236:	707b      	strb	r3, [r7, #1]
 8005238:	787b      	ldrb	r3, [r7, #1]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <HAL_GPIO_WritePin+0x1e>
 800523e:	887a      	ldrh	r2, [r7, #2]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	619a      	str	r2, [r3, #24]
 8005244:	e003      	b.n	800524e <HAL_GPIO_WritePin+0x26>
 8005246:	887b      	ldrh	r3, [r7, #2]
 8005248:	041a      	lsls	r2, r3, #16
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	619a      	str	r2, [r3, #24]
 800524e:	bf00      	nop
 8005250:	370c      	adds	r7, #12
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <HAL_GPIO_TogglePin>:
 800525a:	b480      	push	{r7}
 800525c:	b085      	sub	sp, #20
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
 8005262:	460b      	mov	r3, r1
 8005264:	807b      	strh	r3, [r7, #2]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	60fb      	str	r3, [r7, #12]
 800526c:	887a      	ldrh	r2, [r7, #2]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	4013      	ands	r3, r2
 8005272:	041a      	lsls	r2, r3, #16
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	43d9      	mvns	r1, r3
 8005278:	887b      	ldrh	r3, [r7, #2]
 800527a:	400b      	ands	r3, r1
 800527c:	431a      	orrs	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	619a      	str	r2, [r3, #24]
 8005282:	bf00      	nop
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
	...

08005290 <HAL_GPIO_EXTI_IRQHandler>:
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	4603      	mov	r3, r0
 8005298:	80fb      	strh	r3, [r7, #6]
 800529a:	4b08      	ldr	r3, [pc, #32]	; (80052bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800529c:	695a      	ldr	r2, [r3, #20]
 800529e:	88fb      	ldrh	r3, [r7, #6]
 80052a0:	4013      	ands	r3, r2
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d006      	beq.n	80052b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
 80052a6:	4a05      	ldr	r2, [pc, #20]	; (80052bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80052a8:	88fb      	ldrh	r3, [r7, #6]
 80052aa:	6153      	str	r3, [r2, #20]
 80052ac:	88fb      	ldrh	r3, [r7, #6]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f000 f806 	bl	80052c0 <HAL_GPIO_EXTI_Callback>
 80052b4:	bf00      	nop
 80052b6:	3708      	adds	r7, #8
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	40013c00 	.word	0x40013c00

080052c0 <HAL_GPIO_EXTI_Callback>:
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	4603      	mov	r3, r0
 80052c8:	80fb      	strh	r3, [r7, #6]
 80052ca:	bf00      	nop
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
	...

080052d8 <HAL_I2C_Init>:
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <HAL_I2C_Init+0x12>
 80052e6:	2301      	movs	r3, #1
 80052e8:	e12b      	b.n	8005542 <HAL_I2C_Init+0x26a>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d106      	bne.n	8005304 <HAL_I2C_Init+0x2c>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f7fe f8d2 	bl	80034a8 <HAL_I2C_MspInit>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2224      	movs	r2, #36	; 0x24
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f022 0201 	bic.w	r2, r2, #1
 800531a:	601a      	str	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800532a:	601a      	str	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800533a:	601a      	str	r2, [r3, #0]
 800533c:	f001 f984 	bl	8006648 <HAL_RCC_GetPCLK1Freq>
 8005340:	60f8      	str	r0, [r7, #12]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	4a81      	ldr	r2, [pc, #516]	; (800554c <HAL_I2C_Init+0x274>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d807      	bhi.n	800535c <HAL_I2C_Init+0x84>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4a80      	ldr	r2, [pc, #512]	; (8005550 <HAL_I2C_Init+0x278>)
 8005350:	4293      	cmp	r3, r2
 8005352:	bf94      	ite	ls
 8005354:	2301      	movls	r3, #1
 8005356:	2300      	movhi	r3, #0
 8005358:	b2db      	uxtb	r3, r3
 800535a:	e006      	b.n	800536a <HAL_I2C_Init+0x92>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	4a7d      	ldr	r2, [pc, #500]	; (8005554 <HAL_I2C_Init+0x27c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	bf94      	ite	ls
 8005364:	2301      	movls	r3, #1
 8005366:	2300      	movhi	r3, #0
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <HAL_I2C_Init+0x9a>
 800536e:	2301      	movs	r3, #1
 8005370:	e0e7      	b.n	8005542 <HAL_I2C_Init+0x26a>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	4a78      	ldr	r2, [pc, #480]	; (8005558 <HAL_I2C_Init+0x280>)
 8005376:	fba2 2303 	umull	r2, r3, r2, r3
 800537a:	0c9b      	lsrs	r3, r3, #18
 800537c:	60bb      	str	r3, [r7, #8]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	430a      	orrs	r2, r1
 8005390:	605a      	str	r2, [r3, #4]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	4a6a      	ldr	r2, [pc, #424]	; (800554c <HAL_I2C_Init+0x274>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d802      	bhi.n	80053ac <HAL_I2C_Init+0xd4>
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	3301      	adds	r3, #1
 80053aa:	e009      	b.n	80053c0 <HAL_I2C_Init+0xe8>
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80053b2:	fb02 f303 	mul.w	r3, r2, r3
 80053b6:	4a69      	ldr	r2, [pc, #420]	; (800555c <HAL_I2C_Init+0x284>)
 80053b8:	fba2 2303 	umull	r2, r3, r2, r3
 80053bc:	099b      	lsrs	r3, r3, #6
 80053be:	3301      	adds	r3, #1
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	6812      	ldr	r2, [r2, #0]
 80053c4:	430b      	orrs	r3, r1
 80053c6:	6213      	str	r3, [r2, #32]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80053d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	495c      	ldr	r1, [pc, #368]	; (800554c <HAL_I2C_Init+0x274>)
 80053dc:	428b      	cmp	r3, r1
 80053de:	d819      	bhi.n	8005414 <HAL_I2C_Init+0x13c>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	1e59      	subs	r1, r3, #1
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	005b      	lsls	r3, r3, #1
 80053ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80053ee:	1c59      	adds	r1, r3, #1
 80053f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80053f4:	400b      	ands	r3, r1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00a      	beq.n	8005410 <HAL_I2C_Init+0x138>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	1e59      	subs	r1, r3, #1
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	fbb1 f3f3 	udiv	r3, r1, r3
 8005408:	3301      	adds	r3, #1
 800540a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800540e:	e051      	b.n	80054b4 <HAL_I2C_Init+0x1dc>
 8005410:	2304      	movs	r3, #4
 8005412:	e04f      	b.n	80054b4 <HAL_I2C_Init+0x1dc>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d111      	bne.n	8005440 <HAL_I2C_Init+0x168>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	1e58      	subs	r0, r3, #1
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6859      	ldr	r1, [r3, #4]
 8005424:	460b      	mov	r3, r1
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	440b      	add	r3, r1
 800542a:	fbb0 f3f3 	udiv	r3, r0, r3
 800542e:	3301      	adds	r3, #1
 8005430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005434:	2b00      	cmp	r3, #0
 8005436:	bf0c      	ite	eq
 8005438:	2301      	moveq	r3, #1
 800543a:	2300      	movne	r3, #0
 800543c:	b2db      	uxtb	r3, r3
 800543e:	e012      	b.n	8005466 <HAL_I2C_Init+0x18e>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	1e58      	subs	r0, r3, #1
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6859      	ldr	r1, [r3, #4]
 8005448:	460b      	mov	r3, r1
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	440b      	add	r3, r1
 800544e:	0099      	lsls	r1, r3, #2
 8005450:	440b      	add	r3, r1
 8005452:	fbb0 f3f3 	udiv	r3, r0, r3
 8005456:	3301      	adds	r3, #1
 8005458:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800545c:	2b00      	cmp	r3, #0
 800545e:	bf0c      	ite	eq
 8005460:	2301      	moveq	r3, #1
 8005462:	2300      	movne	r3, #0
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <HAL_I2C_Init+0x196>
 800546a:	2301      	movs	r3, #1
 800546c:	e022      	b.n	80054b4 <HAL_I2C_Init+0x1dc>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10e      	bne.n	8005494 <HAL_I2C_Init+0x1bc>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	1e58      	subs	r0, r3, #1
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6859      	ldr	r1, [r3, #4]
 800547e:	460b      	mov	r3, r1
 8005480:	005b      	lsls	r3, r3, #1
 8005482:	440b      	add	r3, r1
 8005484:	fbb0 f3f3 	udiv	r3, r0, r3
 8005488:	3301      	adds	r3, #1
 800548a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800548e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005492:	e00f      	b.n	80054b4 <HAL_I2C_Init+0x1dc>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	1e58      	subs	r0, r3, #1
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6859      	ldr	r1, [r3, #4]
 800549c:	460b      	mov	r3, r1
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	440b      	add	r3, r1
 80054a2:	0099      	lsls	r1, r3, #2
 80054a4:	440b      	add	r3, r1
 80054a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80054aa:	3301      	adds	r3, #1
 80054ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054b4:	6879      	ldr	r1, [r7, #4]
 80054b6:	6809      	ldr	r1, [r1, #0]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	61cb      	str	r3, [r1, #28]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	69da      	ldr	r2, [r3, #28]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	431a      	orrs	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	430a      	orrs	r2, r1
 80054d6:	601a      	str	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80054e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	6911      	ldr	r1, [r2, #16]
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	68d2      	ldr	r2, [r2, #12]
 80054ee:	4311      	orrs	r1, r2
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	6812      	ldr	r2, [r2, #0]
 80054f4:	430b      	orrs	r3, r1
 80054f6:	6093      	str	r3, [r2, #8]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	695a      	ldr	r2, [r3, #20]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	431a      	orrs	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	60da      	str	r2, [r3, #12]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f042 0201 	orr.w	r2, r2, #1
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	641a      	str	r2, [r3, #64]	; 0x40
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2220      	movs	r2, #32
 800552e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	631a      	str	r2, [r3, #48]	; 0x30
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005540:	2300      	movs	r3, #0
 8005542:	4618      	mov	r0, r3
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	000186a0 	.word	0x000186a0
 8005550:	001e847f 	.word	0x001e847f
 8005554:	003d08ff 	.word	0x003d08ff
 8005558:	431bde83 	.word	0x431bde83
 800555c:	10624dd3 	.word	0x10624dd3

08005560 <HAL_I2C_Mem_Write>:
 8005560:	b580      	push	{r7, lr}
 8005562:	b088      	sub	sp, #32
 8005564:	af02      	add	r7, sp, #8
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	4608      	mov	r0, r1
 800556a:	4611      	mov	r1, r2
 800556c:	461a      	mov	r2, r3
 800556e:	4603      	mov	r3, r0
 8005570:	817b      	strh	r3, [r7, #10]
 8005572:	460b      	mov	r3, r1
 8005574:	813b      	strh	r3, [r7, #8]
 8005576:	4613      	mov	r3, r2
 8005578:	80fb      	strh	r3, [r7, #6]
 800557a:	f7fe fd07 	bl	8003f8c <HAL_GetTick>
 800557e:	6178      	str	r0, [r7, #20]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005586:	b2db      	uxtb	r3, r3
 8005588:	2b20      	cmp	r3, #32
 800558a:	f040 80d9 	bne.w	8005740 <HAL_I2C_Mem_Write+0x1e0>
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	2319      	movs	r3, #25
 8005594:	2201      	movs	r2, #1
 8005596:	496d      	ldr	r1, [pc, #436]	; (800574c <HAL_I2C_Mem_Write+0x1ec>)
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f000 fc7f 	bl	8005e9c <I2C_WaitOnFlagUntilTimeout>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d001      	beq.n	80055a8 <HAL_I2C_Mem_Write+0x48>
 80055a4:	2302      	movs	r3, #2
 80055a6:	e0cc      	b.n	8005742 <HAL_I2C_Mem_Write+0x1e2>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d101      	bne.n	80055b6 <HAL_I2C_Mem_Write+0x56>
 80055b2:	2302      	movs	r3, #2
 80055b4:	e0c5      	b.n	8005742 <HAL_I2C_Mem_Write+0x1e2>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0301 	and.w	r3, r3, #1
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d007      	beq.n	80055dc <HAL_I2C_Mem_Write+0x7c>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f042 0201 	orr.w	r2, r2, #1
 80055da:	601a      	str	r2, [r3, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055ea:	601a      	str	r2, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2221      	movs	r2, #33	; 0x21
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2240      	movs	r2, #64	; 0x40
 80055f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	641a      	str	r2, [r3, #64]	; 0x40
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6a3a      	ldr	r2, [r7, #32]
 8005606:	625a      	str	r2, [r3, #36]	; 0x24
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800560c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005612:	b29a      	uxth	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	851a      	strh	r2, [r3, #40]	; 0x28
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4a4d      	ldr	r2, [pc, #308]	; (8005750 <HAL_I2C_Mem_Write+0x1f0>)
 800561c:	62da      	str	r2, [r3, #44]	; 0x2c
 800561e:	88f8      	ldrh	r0, [r7, #6]
 8005620:	893a      	ldrh	r2, [r7, #8]
 8005622:	8979      	ldrh	r1, [r7, #10]
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	9301      	str	r3, [sp, #4]
 8005628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562a:	9300      	str	r3, [sp, #0]
 800562c:	4603      	mov	r3, r0
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	f000 fab6 	bl	8005ba0 <I2C_RequestMemoryWrite>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d052      	beq.n	80056e0 <HAL_I2C_Mem_Write+0x180>
 800563a:	2301      	movs	r3, #1
 800563c:	e081      	b.n	8005742 <HAL_I2C_Mem_Write+0x1e2>
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f000 fd00 	bl	8006048 <I2C_WaitOnTXEFlagUntilTimeout>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00d      	beq.n	800566a <HAL_I2C_Mem_Write+0x10a>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005652:	2b04      	cmp	r3, #4
 8005654:	d107      	bne.n	8005666 <HAL_I2C_Mem_Write+0x106>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	2301      	movs	r3, #1
 8005668:	e06b      	b.n	8005742 <HAL_I2C_Mem_Write+0x1e2>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566e:	781a      	ldrb	r2, [r3, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	611a      	str	r2, [r3, #16]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567a:	1c5a      	adds	r2, r3, #1
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	625a      	str	r2, [r3, #36]	; 0x24
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005684:	3b01      	subs	r3, #1
 8005686:	b29a      	uxth	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	851a      	strh	r2, [r3, #40]	; 0x28
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005690:	b29b      	uxth	r3, r3
 8005692:	3b01      	subs	r3, #1
 8005694:	b29a      	uxth	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	855a      	strh	r2, [r3, #42]	; 0x2a
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	f003 0304 	and.w	r3, r3, #4
 80056a4:	2b04      	cmp	r3, #4
 80056a6:	d11b      	bne.n	80056e0 <HAL_I2C_Mem_Write+0x180>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d017      	beq.n	80056e0 <HAL_I2C_Mem_Write+0x180>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b4:	781a      	ldrb	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	611a      	str	r2, [r3, #16]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c0:	1c5a      	adds	r2, r3, #1
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	625a      	str	r2, [r3, #36]	; 0x24
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ca:	3b01      	subs	r3, #1
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	851a      	strh	r2, [r3, #40]	; 0x28
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	3b01      	subs	r3, #1
 80056da:	b29a      	uxth	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1aa      	bne.n	800563e <HAL_I2C_Mem_Write+0xde>
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	f000 fcec 	bl	80060ca <I2C_WaitOnBTFFlagUntilTimeout>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00d      	beq.n	8005714 <HAL_I2C_Mem_Write+0x1b4>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fc:	2b04      	cmp	r3, #4
 80056fe:	d107      	bne.n	8005710 <HAL_I2C_Mem_Write+0x1b0>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800570e:	601a      	str	r2, [r3, #0]
 8005710:	2301      	movs	r3, #1
 8005712:	e016      	b.n	8005742 <HAL_I2C_Mem_Write+0x1e2>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2220      	movs	r2, #32
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800573c:	2300      	movs	r3, #0
 800573e:	e000      	b.n	8005742 <HAL_I2C_Mem_Write+0x1e2>
 8005740:	2302      	movs	r3, #2
 8005742:	4618      	mov	r0, r3
 8005744:	3718      	adds	r7, #24
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	00100002 	.word	0x00100002
 8005750:	ffff0000 	.word	0xffff0000

08005754 <HAL_I2C_Mem_Read>:
 8005754:	b580      	push	{r7, lr}
 8005756:	b08c      	sub	sp, #48	; 0x30
 8005758:	af02      	add	r7, sp, #8
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	4608      	mov	r0, r1
 800575e:	4611      	mov	r1, r2
 8005760:	461a      	mov	r2, r3
 8005762:	4603      	mov	r3, r0
 8005764:	817b      	strh	r3, [r7, #10]
 8005766:	460b      	mov	r3, r1
 8005768:	813b      	strh	r3, [r7, #8]
 800576a:	4613      	mov	r3, r2
 800576c:	80fb      	strh	r3, [r7, #6]
 800576e:	f7fe fc0d 	bl	8003f8c <HAL_GetTick>
 8005772:	6278      	str	r0, [r7, #36]	; 0x24
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b20      	cmp	r3, #32
 800577e:	f040 8208 	bne.w	8005b92 <HAL_I2C_Mem_Read+0x43e>
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	2319      	movs	r3, #25
 8005788:	2201      	movs	r2, #1
 800578a:	497b      	ldr	r1, [pc, #492]	; (8005978 <HAL_I2C_Mem_Read+0x224>)
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f000 fb85 	bl	8005e9c <I2C_WaitOnFlagUntilTimeout>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d001      	beq.n	800579c <HAL_I2C_Mem_Read+0x48>
 8005798:	2302      	movs	r3, #2
 800579a:	e1fb      	b.n	8005b94 <HAL_I2C_Mem_Read+0x440>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d101      	bne.n	80057aa <HAL_I2C_Mem_Read+0x56>
 80057a6:	2302      	movs	r3, #2
 80057a8:	e1f4      	b.n	8005b94 <HAL_I2C_Mem_Read+0x440>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d007      	beq.n	80057d0 <HAL_I2C_Mem_Read+0x7c>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f042 0201 	orr.w	r2, r2, #1
 80057ce:	601a      	str	r2, [r3, #0]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057de:	601a      	str	r2, [r3, #0]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2222      	movs	r2, #34	; 0x22
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2240      	movs	r2, #64	; 0x40
 80057ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	641a      	str	r2, [r3, #64]	; 0x40
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057fa:	625a      	str	r2, [r3, #36]	; 0x24
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005800:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005806:	b29a      	uxth	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	851a      	strh	r2, [r3, #40]	; 0x28
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	4a5b      	ldr	r2, [pc, #364]	; (800597c <HAL_I2C_Mem_Read+0x228>)
 8005810:	62da      	str	r2, [r3, #44]	; 0x2c
 8005812:	88f8      	ldrh	r0, [r7, #6]
 8005814:	893a      	ldrh	r2, [r7, #8]
 8005816:	8979      	ldrh	r1, [r7, #10]
 8005818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581a:	9301      	str	r3, [sp, #4]
 800581c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581e:	9300      	str	r3, [sp, #0]
 8005820:	4603      	mov	r3, r0
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f000 fa52 	bl	8005ccc <I2C_RequestMemoryRead>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d001      	beq.n	8005832 <HAL_I2C_Mem_Read+0xde>
 800582e:	2301      	movs	r3, #1
 8005830:	e1b0      	b.n	8005b94 <HAL_I2C_Mem_Read+0x440>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005836:	2b00      	cmp	r3, #0
 8005838:	d113      	bne.n	8005862 <HAL_I2C_Mem_Read+0x10e>
 800583a:	2300      	movs	r3, #0
 800583c:	623b      	str	r3, [r7, #32]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	623b      	str	r3, [r7, #32]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	623b      	str	r3, [r7, #32]
 800584e:	6a3b      	ldr	r3, [r7, #32]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	e184      	b.n	8005b6c <HAL_I2C_Mem_Read+0x418>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005866:	2b01      	cmp	r3, #1
 8005868:	d11b      	bne.n	80058a2 <HAL_I2C_Mem_Read+0x14e>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005878:	601a      	str	r2, [r3, #0]
 800587a:	2300      	movs	r3, #0
 800587c:	61fb      	str	r3, [r7, #28]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	61fb      	str	r3, [r7, #28]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	61fb      	str	r3, [r7, #28]
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800589e:	601a      	str	r2, [r3, #0]
 80058a0:	e164      	b.n	8005b6c <HAL_I2C_Mem_Read+0x418>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d11b      	bne.n	80058e2 <HAL_I2C_Mem_Read+0x18e>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058b8:	601a      	str	r2, [r3, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058c8:	601a      	str	r2, [r3, #0]
 80058ca:	2300      	movs	r3, #0
 80058cc:	61bb      	str	r3, [r7, #24]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	61bb      	str	r3, [r7, #24]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	61bb      	str	r3, [r7, #24]
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	e144      	b.n	8005b6c <HAL_I2C_Mem_Read+0x418>
 80058e2:	2300      	movs	r3, #0
 80058e4:	617b      	str	r3, [r7, #20]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	617b      	str	r3, [r7, #20]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	617b      	str	r3, [r7, #20]
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	e138      	b.n	8005b6c <HAL_I2C_Mem_Read+0x418>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058fe:	2b03      	cmp	r3, #3
 8005900:	f200 80f1 	bhi.w	8005ae6 <HAL_I2C_Mem_Read+0x392>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005908:	2b01      	cmp	r3, #1
 800590a:	d123      	bne.n	8005954 <HAL_I2C_Mem_Read+0x200>
 800590c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800590e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f000 fc1b 	bl	800614c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d001      	beq.n	8005920 <HAL_I2C_Mem_Read+0x1cc>
 800591c:	2301      	movs	r3, #1
 800591e:	e139      	b.n	8005b94 <HAL_I2C_Mem_Read+0x440>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	691a      	ldr	r2, [r3, #16]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592a:	b2d2      	uxtb	r2, r2
 800592c:	701a      	strb	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005932:	1c5a      	adds	r2, r3, #1
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	625a      	str	r2, [r3, #36]	; 0x24
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800593c:	3b01      	subs	r3, #1
 800593e:	b29a      	uxth	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	851a      	strh	r2, [r3, #40]	; 0x28
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005948:	b29b      	uxth	r3, r3
 800594a:	3b01      	subs	r3, #1
 800594c:	b29a      	uxth	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005952:	e10b      	b.n	8005b6c <HAL_I2C_Mem_Read+0x418>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005958:	2b02      	cmp	r3, #2
 800595a:	d14e      	bne.n	80059fa <HAL_I2C_Mem_Read+0x2a6>
 800595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005962:	2200      	movs	r2, #0
 8005964:	4906      	ldr	r1, [pc, #24]	; (8005980 <HAL_I2C_Mem_Read+0x22c>)
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f000 fa98 	bl	8005e9c <I2C_WaitOnFlagUntilTimeout>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d008      	beq.n	8005984 <HAL_I2C_Mem_Read+0x230>
 8005972:	2301      	movs	r3, #1
 8005974:	e10e      	b.n	8005b94 <HAL_I2C_Mem_Read+0x440>
 8005976:	bf00      	nop
 8005978:	00100002 	.word	0x00100002
 800597c:	ffff0000 	.word	0xffff0000
 8005980:	00010004 	.word	0x00010004
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005992:	601a      	str	r2, [r3, #0]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	691a      	ldr	r2, [r3, #16]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599e:	b2d2      	uxtb	r2, r2
 80059a0:	701a      	strb	r2, [r3, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a6:	1c5a      	adds	r2, r3, #1
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	625a      	str	r2, [r3, #36]	; 0x24
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059b0:	3b01      	subs	r3, #1
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	851a      	strh	r2, [r3, #40]	; 0x28
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059bc:	b29b      	uxth	r3, r3
 80059be:	3b01      	subs	r3, #1
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	691a      	ldr	r2, [r3, #16]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d0:	b2d2      	uxtb	r2, r2
 80059d2:	701a      	strb	r2, [r3, #0]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d8:	1c5a      	adds	r2, r3, #1
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	625a      	str	r2, [r3, #36]	; 0x24
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059e2:	3b01      	subs	r3, #1
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	851a      	strh	r2, [r3, #40]	; 0x28
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	3b01      	subs	r3, #1
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80059f8:	e0b8      	b.n	8005b6c <HAL_I2C_Mem_Read+0x418>
 80059fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fc:	9300      	str	r3, [sp, #0]
 80059fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a00:	2200      	movs	r2, #0
 8005a02:	4966      	ldr	r1, [pc, #408]	; (8005b9c <HAL_I2C_Mem_Read+0x448>)
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f000 fa49 	bl	8005e9c <I2C_WaitOnFlagUntilTimeout>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d001      	beq.n	8005a14 <HAL_I2C_Mem_Read+0x2c0>
 8005a10:	2301      	movs	r3, #1
 8005a12:	e0bf      	b.n	8005b94 <HAL_I2C_Mem_Read+0x440>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a22:	601a      	str	r2, [r3, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	691a      	ldr	r2, [r3, #16]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2e:	b2d2      	uxtb	r2, r2
 8005a30:	701a      	strb	r2, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a36:	1c5a      	adds	r2, r3, #1
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	625a      	str	r2, [r3, #36]	; 0x24
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a40:	3b01      	subs	r3, #1
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	851a      	strh	r2, [r3, #40]	; 0x28
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a58:	9300      	str	r3, [sp, #0]
 8005a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	494f      	ldr	r1, [pc, #316]	; (8005b9c <HAL_I2C_Mem_Read+0x448>)
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f000 fa1b 	bl	8005e9c <I2C_WaitOnFlagUntilTimeout>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d001      	beq.n	8005a70 <HAL_I2C_Mem_Read+0x31c>
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e091      	b.n	8005b94 <HAL_I2C_Mem_Read+0x440>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a7e:	601a      	str	r2, [r3, #0]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	691a      	ldr	r2, [r3, #16]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8a:	b2d2      	uxtb	r2, r2
 8005a8c:	701a      	strb	r2, [r3, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a92:	1c5a      	adds	r2, r3, #1
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	625a      	str	r2, [r3, #36]	; 0x24
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	851a      	strh	r2, [r3, #40]	; 0x28
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	691a      	ldr	r2, [r3, #16]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abc:	b2d2      	uxtb	r2, r2
 8005abe:	701a      	strb	r2, [r3, #0]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac4:	1c5a      	adds	r2, r3, #1
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	625a      	str	r2, [r3, #36]	; 0x24
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	851a      	strh	r2, [r3, #40]	; 0x28
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	3b01      	subs	r3, #1
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ae4:	e042      	b.n	8005b6c <HAL_I2C_Mem_Read+0x418>
 8005ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ae8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f000 fb2e 	bl	800614c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d001      	beq.n	8005afa <HAL_I2C_Mem_Read+0x3a6>
 8005af6:	2301      	movs	r3, #1
 8005af8:	e04c      	b.n	8005b94 <HAL_I2C_Mem_Read+0x440>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	691a      	ldr	r2, [r3, #16]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	b2d2      	uxtb	r2, r2
 8005b06:	701a      	strb	r2, [r3, #0]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0c:	1c5a      	adds	r2, r3, #1
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	625a      	str	r2, [r3, #36]	; 0x24
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b16:	3b01      	subs	r3, #1
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	851a      	strh	r2, [r3, #40]	; 0x28
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	3b01      	subs	r3, #1
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	f003 0304 	and.w	r3, r3, #4
 8005b36:	2b04      	cmp	r3, #4
 8005b38:	d118      	bne.n	8005b6c <HAL_I2C_Mem_Read+0x418>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	691a      	ldr	r2, [r3, #16]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b44:	b2d2      	uxtb	r2, r2
 8005b46:	701a      	strb	r2, [r3, #0]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4c:	1c5a      	adds	r2, r3, #1
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	625a      	str	r2, [r3, #36]	; 0x24
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b56:	3b01      	subs	r3, #1
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	851a      	strh	r2, [r3, #40]	; 0x28
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	3b01      	subs	r3, #1
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f47f aec2 	bne.w	80058fa <HAL_I2C_Mem_Read+0x1a6>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2220      	movs	r2, #32
 8005b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005b8e:	2300      	movs	r3, #0
 8005b90:	e000      	b.n	8005b94 <HAL_I2C_Mem_Read+0x440>
 8005b92:	2302      	movs	r3, #2
 8005b94:	4618      	mov	r0, r3
 8005b96:	3728      	adds	r7, #40	; 0x28
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	00010004 	.word	0x00010004

08005ba0 <I2C_RequestMemoryWrite>:
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b088      	sub	sp, #32
 8005ba4:	af02      	add	r7, sp, #8
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	4608      	mov	r0, r1
 8005baa:	4611      	mov	r1, r2
 8005bac:	461a      	mov	r2, r3
 8005bae:	4603      	mov	r3, r0
 8005bb0:	817b      	strh	r3, [r7, #10]
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	813b      	strh	r3, [r7, #8]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	80fb      	strh	r3, [r7, #6]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bc8:	601a      	str	r2, [r3, #0]
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	9300      	str	r3, [sp, #0]
 8005bce:	6a3b      	ldr	r3, [r7, #32]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f000 f960 	bl	8005e9c <I2C_WaitOnFlagUntilTimeout>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00d      	beq.n	8005bfe <I2C_RequestMemoryWrite+0x5e>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bf0:	d103      	bne.n	8005bfa <I2C_RequestMemoryWrite+0x5a>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bf8:	641a      	str	r2, [r3, #64]	; 0x40
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e05f      	b.n	8005cbe <I2C_RequestMemoryWrite+0x11e>
 8005bfe:	897b      	ldrh	r3, [r7, #10]
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	461a      	mov	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c0c:	611a      	str	r2, [r3, #16]
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c10:	6a3a      	ldr	r2, [r7, #32]
 8005c12:	492d      	ldr	r1, [pc, #180]	; (8005cc8 <I2C_RequestMemoryWrite+0x128>)
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 f998 	bl	8005f4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d001      	beq.n	8005c24 <I2C_RequestMemoryWrite+0x84>
 8005c20:	2301      	movs	r3, #1
 8005c22:	e04c      	b.n	8005cbe <I2C_RequestMemoryWrite+0x11e>
 8005c24:	2300      	movs	r3, #0
 8005c26:	617b      	str	r3, [r7, #20]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	617b      	str	r3, [r7, #20]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	617b      	str	r3, [r7, #20]
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c3c:	6a39      	ldr	r1, [r7, #32]
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f000 fa02 	bl	8006048 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00d      	beq.n	8005c66 <I2C_RequestMemoryWrite+0xc6>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4e:	2b04      	cmp	r3, #4
 8005c50:	d107      	bne.n	8005c62 <I2C_RequestMemoryWrite+0xc2>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c60:	601a      	str	r2, [r3, #0]
 8005c62:	2301      	movs	r3, #1
 8005c64:	e02b      	b.n	8005cbe <I2C_RequestMemoryWrite+0x11e>
 8005c66:	88fb      	ldrh	r3, [r7, #6]
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d105      	bne.n	8005c78 <I2C_RequestMemoryWrite+0xd8>
 8005c6c:	893b      	ldrh	r3, [r7, #8]
 8005c6e:	b2da      	uxtb	r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	611a      	str	r2, [r3, #16]
 8005c76:	e021      	b.n	8005cbc <I2C_RequestMemoryWrite+0x11c>
 8005c78:	893b      	ldrh	r3, [r7, #8]
 8005c7a:	0a1b      	lsrs	r3, r3, #8
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	b2da      	uxtb	r2, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	611a      	str	r2, [r3, #16]
 8005c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c88:	6a39      	ldr	r1, [r7, #32]
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f000 f9dc 	bl	8006048 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00d      	beq.n	8005cb2 <I2C_RequestMemoryWrite+0x112>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9a:	2b04      	cmp	r3, #4
 8005c9c:	d107      	bne.n	8005cae <I2C_RequestMemoryWrite+0x10e>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cac:	601a      	str	r2, [r3, #0]
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e005      	b.n	8005cbe <I2C_RequestMemoryWrite+0x11e>
 8005cb2:	893b      	ldrh	r3, [r7, #8]
 8005cb4:	b2da      	uxtb	r2, r3
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	611a      	str	r2, [r3, #16]
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3718      	adds	r7, #24
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	00010002 	.word	0x00010002

08005ccc <I2C_RequestMemoryRead>:
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b088      	sub	sp, #32
 8005cd0:	af02      	add	r7, sp, #8
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	4608      	mov	r0, r1
 8005cd6:	4611      	mov	r1, r2
 8005cd8:	461a      	mov	r2, r3
 8005cda:	4603      	mov	r3, r0
 8005cdc:	817b      	strh	r3, [r7, #10]
 8005cde:	460b      	mov	r3, r1
 8005ce0:	813b      	strh	r3, [r7, #8]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	80fb      	strh	r3, [r7, #6]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005cf4:	601a      	str	r2, [r3, #0]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d04:	601a      	str	r2, [r3, #0]
 8005d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f000 f8c2 	bl	8005e9c <I2C_WaitOnFlagUntilTimeout>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00d      	beq.n	8005d3a <I2C_RequestMemoryRead+0x6e>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d2c:	d103      	bne.n	8005d36 <I2C_RequestMemoryRead+0x6a>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d34:	641a      	str	r2, [r3, #64]	; 0x40
 8005d36:	2303      	movs	r3, #3
 8005d38:	e0aa      	b.n	8005e90 <I2C_RequestMemoryRead+0x1c4>
 8005d3a:	897b      	ldrh	r3, [r7, #10]
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	461a      	mov	r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d48:	611a      	str	r2, [r3, #16]
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	6a3a      	ldr	r2, [r7, #32]
 8005d4e:	4952      	ldr	r1, [pc, #328]	; (8005e98 <I2C_RequestMemoryRead+0x1cc>)
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f000 f8fa 	bl	8005f4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d001      	beq.n	8005d60 <I2C_RequestMemoryRead+0x94>
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e097      	b.n	8005e90 <I2C_RequestMemoryRead+0x1c4>
 8005d60:	2300      	movs	r3, #0
 8005d62:	617b      	str	r3, [r7, #20]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	617b      	str	r3, [r7, #20]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	617b      	str	r3, [r7, #20]
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d78:	6a39      	ldr	r1, [r7, #32]
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	f000 f964 	bl	8006048 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00d      	beq.n	8005da2 <I2C_RequestMemoryRead+0xd6>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8a:	2b04      	cmp	r3, #4
 8005d8c:	d107      	bne.n	8005d9e <I2C_RequestMemoryRead+0xd2>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d9c:	601a      	str	r2, [r3, #0]
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e076      	b.n	8005e90 <I2C_RequestMemoryRead+0x1c4>
 8005da2:	88fb      	ldrh	r3, [r7, #6]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d105      	bne.n	8005db4 <I2C_RequestMemoryRead+0xe8>
 8005da8:	893b      	ldrh	r3, [r7, #8]
 8005daa:	b2da      	uxtb	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	611a      	str	r2, [r3, #16]
 8005db2:	e021      	b.n	8005df8 <I2C_RequestMemoryRead+0x12c>
 8005db4:	893b      	ldrh	r3, [r7, #8]
 8005db6:	0a1b      	lsrs	r3, r3, #8
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	b2da      	uxtb	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	611a      	str	r2, [r3, #16]
 8005dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dc4:	6a39      	ldr	r1, [r7, #32]
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f000 f93e 	bl	8006048 <I2C_WaitOnTXEFlagUntilTimeout>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00d      	beq.n	8005dee <I2C_RequestMemoryRead+0x122>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd6:	2b04      	cmp	r3, #4
 8005dd8:	d107      	bne.n	8005dea <I2C_RequestMemoryRead+0x11e>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	2301      	movs	r3, #1
 8005dec:	e050      	b.n	8005e90 <I2C_RequestMemoryRead+0x1c4>
 8005dee:	893b      	ldrh	r3, [r7, #8]
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	611a      	str	r2, [r3, #16]
 8005df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dfa:	6a39      	ldr	r1, [r7, #32]
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f000 f923 	bl	8006048 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00d      	beq.n	8005e24 <I2C_RequestMemoryRead+0x158>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0c:	2b04      	cmp	r3, #4
 8005e0e:	d107      	bne.n	8005e20 <I2C_RequestMemoryRead+0x154>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e1e:	601a      	str	r2, [r3, #0]
 8005e20:	2301      	movs	r3, #1
 8005e22:	e035      	b.n	8005e90 <I2C_RequestMemoryRead+0x1c4>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e32:	601a      	str	r2, [r3, #0]
 8005e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	6a3b      	ldr	r3, [r7, #32]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f000 f82b 	bl	8005e9c <I2C_WaitOnFlagUntilTimeout>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00d      	beq.n	8005e68 <I2C_RequestMemoryRead+0x19c>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e5a:	d103      	bne.n	8005e64 <I2C_RequestMemoryRead+0x198>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e62:	641a      	str	r2, [r3, #64]	; 0x40
 8005e64:	2303      	movs	r3, #3
 8005e66:	e013      	b.n	8005e90 <I2C_RequestMemoryRead+0x1c4>
 8005e68:	897b      	ldrh	r3, [r7, #10]
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	f043 0301 	orr.w	r3, r3, #1
 8005e70:	b2da      	uxtb	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	611a      	str	r2, [r3, #16]
 8005e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7a:	6a3a      	ldr	r2, [r7, #32]
 8005e7c:	4906      	ldr	r1, [pc, #24]	; (8005e98 <I2C_RequestMemoryRead+0x1cc>)
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f000 f863 	bl	8005f4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d001      	beq.n	8005e8e <I2C_RequestMemoryRead+0x1c2>
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e000      	b.n	8005e90 <I2C_RequestMemoryRead+0x1c4>
 8005e8e:	2300      	movs	r3, #0
 8005e90:	4618      	mov	r0, r3
 8005e92:	3718      	adds	r7, #24
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	00010002 	.word	0x00010002

08005e9c <I2C_WaitOnFlagUntilTimeout>:
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	603b      	str	r3, [r7, #0]
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	71fb      	strb	r3, [r7, #7]
 8005eac:	e025      	b.n	8005efa <I2C_WaitOnFlagUntilTimeout+0x5e>
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb4:	d021      	beq.n	8005efa <I2C_WaitOnFlagUntilTimeout+0x5e>
 8005eb6:	f7fe f869 	bl	8003f8c <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	683a      	ldr	r2, [r7, #0]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d302      	bcc.n	8005ecc <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d116      	bne.n	8005efa <I2C_WaitOnFlagUntilTimeout+0x5e>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	631a      	str	r2, [r3, #48]	; 0x30
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2220      	movs	r2, #32
 8005ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee6:	f043 0220 	orr.w	r2, r3, #32
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	641a      	str	r2, [r3, #64]	; 0x40
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e023      	b.n	8005f42 <I2C_WaitOnFlagUntilTimeout+0xa6>
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	0c1b      	lsrs	r3, r3, #16
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d10d      	bne.n	8005f20 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	43da      	mvns	r2, r3
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	4013      	ands	r3, r2
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	bf0c      	ite	eq
 8005f16:	2301      	moveq	r3, #1
 8005f18:	2300      	movne	r3, #0
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	e00c      	b.n	8005f3a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	43da      	mvns	r2, r3
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	bf0c      	ite	eq
 8005f32:	2301      	moveq	r3, #1
 8005f34:	2300      	movne	r3, #0
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	461a      	mov	r2, r3
 8005f3a:	79fb      	ldrb	r3, [r7, #7]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d0b6      	beq.n	8005eae <I2C_WaitOnFlagUntilTimeout+0x12>
 8005f40:	2300      	movs	r3, #0
 8005f42:	4618      	mov	r0, r3
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b084      	sub	sp, #16
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	60f8      	str	r0, [r7, #12]
 8005f52:	60b9      	str	r1, [r7, #8]
 8005f54:	607a      	str	r2, [r7, #4]
 8005f56:	603b      	str	r3, [r7, #0]
 8005f58:	e051      	b.n	8005ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	695b      	ldr	r3, [r3, #20]
 8005f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f68:	d123      	bne.n	8005fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f78:	601a      	str	r2, [r3, #0]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f82:	615a      	str	r2, [r3, #20]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	631a      	str	r2, [r3, #48]	; 0x30
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2220      	movs	r2, #32
 8005f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9e:	f043 0204 	orr.w	r2, r3, #4
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	641a      	str	r2, [r3, #64]	; 0x40
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e046      	b.n	8006040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb8:	d021      	beq.n	8005ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8005fba:	f7fd ffe7 	bl	8003f8c <HAL_GetTick>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d302      	bcc.n	8005fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d116      	bne.n	8005ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	631a      	str	r2, [r3, #48]	; 0x30
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fea:	f043 0220 	orr.w	r2, r3, #32
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	641a      	str	r2, [r3, #64]	; 0x40
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e020      	b.n	8006040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	0c1b      	lsrs	r3, r3, #16
 8006002:	b2db      	uxtb	r3, r3
 8006004:	2b01      	cmp	r3, #1
 8006006:	d10c      	bne.n	8006022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	43da      	mvns	r2, r3
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	4013      	ands	r3, r2
 8006014:	b29b      	uxth	r3, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	bf14      	ite	ne
 800601a:	2301      	movne	r3, #1
 800601c:	2300      	moveq	r3, #0
 800601e:	b2db      	uxtb	r3, r3
 8006020:	e00b      	b.n	800603a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	43da      	mvns	r2, r3
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	4013      	ands	r3, r2
 800602e:	b29b      	uxth	r3, r3
 8006030:	2b00      	cmp	r3, #0
 8006032:	bf14      	ite	ne
 8006034:	2301      	movne	r3, #1
 8006036:	2300      	moveq	r3, #0
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d18d      	bne.n	8005f5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 800603e:	2300      	movs	r3, #0
 8006040:	4618      	mov	r0, r3
 8006042:	3710      	adds	r7, #16
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <I2C_WaitOnTXEFlagUntilTimeout>:
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
 8006054:	e02d      	b.n	80060b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f000 f8ce 	bl	80061f8 <I2C_IsAcknowledgeFailed>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d001      	beq.n	8006066 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 8006062:	2301      	movs	r3, #1
 8006064:	e02d      	b.n	80060c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800606c:	d021      	beq.n	80060b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 800606e:	f7fd ff8d 	bl	8003f8c <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	68ba      	ldr	r2, [r7, #8]
 800607a:	429a      	cmp	r2, r3
 800607c:	d302      	bcc.n	8006084 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d116      	bne.n	80060b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	631a      	str	r2, [r3, #48]	; 0x30
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2220      	movs	r2, #32
 800608e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609e:	f043 0220 	orr.w	r2, r3, #32
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	641a      	str	r2, [r3, #64]	; 0x40
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80060ae:	2301      	movs	r3, #1
 80060b0:	e007      	b.n	80060c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	695b      	ldr	r3, [r3, #20]
 80060b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060bc:	2b80      	cmp	r3, #128	; 0x80
 80060be:	d1ca      	bne.n	8006056 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 80060c0:	2300      	movs	r3, #0
 80060c2:	4618      	mov	r0, r3
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <I2C_WaitOnBTFFlagUntilTimeout>:
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b084      	sub	sp, #16
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	60f8      	str	r0, [r7, #12]
 80060d2:	60b9      	str	r1, [r7, #8]
 80060d4:	607a      	str	r2, [r7, #4]
 80060d6:	e02d      	b.n	8006134 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	f000 f88d 	bl	80061f8 <I2C_IsAcknowledgeFailed>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d001      	beq.n	80060e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 80060e4:	2301      	movs	r3, #1
 80060e6:	e02d      	b.n	8006144 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ee:	d021      	beq.n	8006134 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 80060f0:	f7fd ff4c 	bl	8003f8c <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d302      	bcc.n	8006106 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d116      	bne.n	8006134 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	631a      	str	r2, [r3, #48]	; 0x30
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2220      	movs	r2, #32
 8006110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006120:	f043 0220 	orr.w	r2, r3, #32
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	641a      	str	r2, [r3, #64]	; 0x40
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006130:	2301      	movs	r3, #1
 8006132:	e007      	b.n	8006144 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	f003 0304 	and.w	r3, r3, #4
 800613e:	2b04      	cmp	r3, #4
 8006140:	d1ca      	bne.n	80060d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 8006142:	2300      	movs	r3, #0
 8006144:	4618      	mov	r0, r3
 8006146:	3710      	adds	r7, #16
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <I2C_WaitOnRXNEFlagUntilTimeout>:
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
 8006158:	e042      	b.n	80061e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	f003 0310 	and.w	r3, r3, #16
 8006164:	2b10      	cmp	r3, #16
 8006166:	d119      	bne.n	800619c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f06f 0210 	mvn.w	r2, #16
 8006170:	615a      	str	r2, [r3, #20]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	631a      	str	r2, [r3, #48]	; 0x30
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2220      	movs	r2, #32
 800617c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	641a      	str	r2, [r3, #64]	; 0x40
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006198:	2301      	movs	r3, #1
 800619a:	e029      	b.n	80061f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 800619c:	f7fd fef6 	bl	8003f8c <HAL_GetTick>
 80061a0:	4602      	mov	r2, r0
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d302      	bcc.n	80061b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d116      	bne.n	80061e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	631a      	str	r2, [r3, #48]	; 0x30
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2220      	movs	r2, #32
 80061bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061cc:	f043 0220 	orr.w	r2, r3, #32
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	641a      	str	r2, [r3, #64]	; 0x40
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80061dc:	2301      	movs	r3, #1
 80061de:	e007      	b.n	80061f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ea:	2b40      	cmp	r3, #64	; 0x40
 80061ec:	d1b5      	bne.n	800615a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
 80061ee:	2300      	movs	r3, #0
 80061f0:	4618      	mov	r0, r3
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <I2C_IsAcknowledgeFailed>:
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800620a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800620e:	d11b      	bne.n	8006248 <I2C_IsAcknowledgeFailed+0x50>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006218:	615a      	str	r2, [r3, #20]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	631a      	str	r2, [r3, #48]	; 0x30
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2220      	movs	r2, #32
 8006224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006234:	f043 0204 	orr.w	r2, r3, #4
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	641a      	str	r2, [r3, #64]	; 0x40
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006244:	2301      	movs	r3, #1
 8006246:	e000      	b.n	800624a <I2C_IsAcknowledgeFailed+0x52>
 8006248:	2300      	movs	r3, #0
 800624a:	4618      	mov	r0, r3
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
	...

08006258 <HAL_RCC_ClockConfig>:
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d101      	bne.n	800626c <HAL_RCC_ClockConfig+0x14>
 8006268:	2301      	movs	r3, #1
 800626a:	e0cc      	b.n	8006406 <HAL_RCC_ClockConfig+0x1ae>
 800626c:	4b68      	ldr	r3, [pc, #416]	; (8006410 <HAL_RCC_ClockConfig+0x1b8>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0307 	and.w	r3, r3, #7
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	429a      	cmp	r2, r3
 8006278:	d90c      	bls.n	8006294 <HAL_RCC_ClockConfig+0x3c>
 800627a:	4b65      	ldr	r3, [pc, #404]	; (8006410 <HAL_RCC_ClockConfig+0x1b8>)
 800627c:	683a      	ldr	r2, [r7, #0]
 800627e:	b2d2      	uxtb	r2, r2
 8006280:	701a      	strb	r2, [r3, #0]
 8006282:	4b63      	ldr	r3, [pc, #396]	; (8006410 <HAL_RCC_ClockConfig+0x1b8>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0307 	and.w	r3, r3, #7
 800628a:	683a      	ldr	r2, [r7, #0]
 800628c:	429a      	cmp	r2, r3
 800628e:	d001      	beq.n	8006294 <HAL_RCC_ClockConfig+0x3c>
 8006290:	2301      	movs	r3, #1
 8006292:	e0b8      	b.n	8006406 <HAL_RCC_ClockConfig+0x1ae>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0302 	and.w	r3, r3, #2
 800629c:	2b00      	cmp	r3, #0
 800629e:	d020      	beq.n	80062e2 <HAL_RCC_ClockConfig+0x8a>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0304 	and.w	r3, r3, #4
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d005      	beq.n	80062b8 <HAL_RCC_ClockConfig+0x60>
 80062ac:	4b59      	ldr	r3, [pc, #356]	; (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	4a58      	ldr	r2, [pc, #352]	; (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80062b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80062b6:	6093      	str	r3, [r2, #8]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0308 	and.w	r3, r3, #8
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d005      	beq.n	80062d0 <HAL_RCC_ClockConfig+0x78>
 80062c4:	4b53      	ldr	r3, [pc, #332]	; (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	4a52      	ldr	r2, [pc, #328]	; (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80062ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80062ce:	6093      	str	r3, [r2, #8]
 80062d0:	4b50      	ldr	r3, [pc, #320]	; (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	494d      	ldr	r1, [pc, #308]	; (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	608b      	str	r3, [r1, #8]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d044      	beq.n	8006378 <HAL_RCC_ClockConfig+0x120>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d107      	bne.n	8006306 <HAL_RCC_ClockConfig+0xae>
 80062f6:	4b47      	ldr	r3, [pc, #284]	; (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d119      	bne.n	8006336 <HAL_RCC_ClockConfig+0xde>
 8006302:	2301      	movs	r3, #1
 8006304:	e07f      	b.n	8006406 <HAL_RCC_ClockConfig+0x1ae>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	2b02      	cmp	r3, #2
 800630c:	d003      	beq.n	8006316 <HAL_RCC_ClockConfig+0xbe>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	2b03      	cmp	r3, #3
 8006314:	d107      	bne.n	8006326 <HAL_RCC_ClockConfig+0xce>
 8006316:	4b3f      	ldr	r3, [pc, #252]	; (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d109      	bne.n	8006336 <HAL_RCC_ClockConfig+0xde>
 8006322:	2301      	movs	r3, #1
 8006324:	e06f      	b.n	8006406 <HAL_RCC_ClockConfig+0x1ae>
 8006326:	4b3b      	ldr	r3, [pc, #236]	; (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b00      	cmp	r3, #0
 8006330:	d101      	bne.n	8006336 <HAL_RCC_ClockConfig+0xde>
 8006332:	2301      	movs	r3, #1
 8006334:	e067      	b.n	8006406 <HAL_RCC_ClockConfig+0x1ae>
 8006336:	4b37      	ldr	r3, [pc, #220]	; (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	f023 0203 	bic.w	r2, r3, #3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	4934      	ldr	r1, [pc, #208]	; (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 8006344:	4313      	orrs	r3, r2
 8006346:	608b      	str	r3, [r1, #8]
 8006348:	f7fd fe20 	bl	8003f8c <HAL_GetTick>
 800634c:	60f8      	str	r0, [r7, #12]
 800634e:	e00a      	b.n	8006366 <HAL_RCC_ClockConfig+0x10e>
 8006350:	f7fd fe1c 	bl	8003f8c <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	f241 3288 	movw	r2, #5000	; 0x1388
 800635e:	4293      	cmp	r3, r2
 8006360:	d901      	bls.n	8006366 <HAL_RCC_ClockConfig+0x10e>
 8006362:	2303      	movs	r3, #3
 8006364:	e04f      	b.n	8006406 <HAL_RCC_ClockConfig+0x1ae>
 8006366:	4b2b      	ldr	r3, [pc, #172]	; (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f003 020c 	and.w	r2, r3, #12
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	429a      	cmp	r2, r3
 8006376:	d1eb      	bne.n	8006350 <HAL_RCC_ClockConfig+0xf8>
 8006378:	4b25      	ldr	r3, [pc, #148]	; (8006410 <HAL_RCC_ClockConfig+0x1b8>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 0307 	and.w	r3, r3, #7
 8006380:	683a      	ldr	r2, [r7, #0]
 8006382:	429a      	cmp	r2, r3
 8006384:	d20c      	bcs.n	80063a0 <HAL_RCC_ClockConfig+0x148>
 8006386:	4b22      	ldr	r3, [pc, #136]	; (8006410 <HAL_RCC_ClockConfig+0x1b8>)
 8006388:	683a      	ldr	r2, [r7, #0]
 800638a:	b2d2      	uxtb	r2, r2
 800638c:	701a      	strb	r2, [r3, #0]
 800638e:	4b20      	ldr	r3, [pc, #128]	; (8006410 <HAL_RCC_ClockConfig+0x1b8>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0307 	and.w	r3, r3, #7
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	429a      	cmp	r2, r3
 800639a:	d001      	beq.n	80063a0 <HAL_RCC_ClockConfig+0x148>
 800639c:	2301      	movs	r3, #1
 800639e:	e032      	b.n	8006406 <HAL_RCC_ClockConfig+0x1ae>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 0304 	and.w	r3, r3, #4
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d008      	beq.n	80063be <HAL_RCC_ClockConfig+0x166>
 80063ac:	4b19      	ldr	r3, [pc, #100]	; (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	4916      	ldr	r1, [pc, #88]	; (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	608b      	str	r3, [r1, #8]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0308 	and.w	r3, r3, #8
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d009      	beq.n	80063de <HAL_RCC_ClockConfig+0x186>
 80063ca:	4b12      	ldr	r3, [pc, #72]	; (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	00db      	lsls	r3, r3, #3
 80063d8:	490e      	ldr	r1, [pc, #56]	; (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	608b      	str	r3, [r1, #8]
 80063de:	f000 f821 	bl	8006424 <HAL_RCC_GetSysClockFreq>
 80063e2:	4602      	mov	r2, r0
 80063e4:	4b0b      	ldr	r3, [pc, #44]	; (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	091b      	lsrs	r3, r3, #4
 80063ea:	f003 030f 	and.w	r3, r3, #15
 80063ee:	490a      	ldr	r1, [pc, #40]	; (8006418 <HAL_RCC_ClockConfig+0x1c0>)
 80063f0:	5ccb      	ldrb	r3, [r1, r3]
 80063f2:	fa22 f303 	lsr.w	r3, r2, r3
 80063f6:	4a09      	ldr	r2, [pc, #36]	; (800641c <HAL_RCC_ClockConfig+0x1c4>)
 80063f8:	6013      	str	r3, [r2, #0]
 80063fa:	4b09      	ldr	r3, [pc, #36]	; (8006420 <HAL_RCC_ClockConfig+0x1c8>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4618      	mov	r0, r3
 8006400:	f7fd fd80 	bl	8003f04 <HAL_InitTick>
 8006404:	2300      	movs	r3, #0
 8006406:	4618      	mov	r0, r3
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	40023c00 	.word	0x40023c00
 8006414:	40023800 	.word	0x40023800
 8006418:	0800df74 	.word	0x0800df74
 800641c:	20000004 	.word	0x20000004
 8006420:	20000008 	.word	0x20000008

08006424 <HAL_RCC_GetSysClockFreq>:
 8006424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006428:	b094      	sub	sp, #80	; 0x50
 800642a:	af00      	add	r7, sp, #0
 800642c:	2300      	movs	r3, #0
 800642e:	647b      	str	r3, [r7, #68]	; 0x44
 8006430:	2300      	movs	r3, #0
 8006432:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006434:	2300      	movs	r3, #0
 8006436:	643b      	str	r3, [r7, #64]	; 0x40
 8006438:	2300      	movs	r3, #0
 800643a:	64bb      	str	r3, [r7, #72]	; 0x48
 800643c:	4b79      	ldr	r3, [pc, #484]	; (8006624 <HAL_RCC_GetSysClockFreq+0x200>)
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f003 030c 	and.w	r3, r3, #12
 8006444:	2b08      	cmp	r3, #8
 8006446:	d00d      	beq.n	8006464 <HAL_RCC_GetSysClockFreq+0x40>
 8006448:	2b08      	cmp	r3, #8
 800644a:	f200 80e1 	bhi.w	8006610 <HAL_RCC_GetSysClockFreq+0x1ec>
 800644e:	2b00      	cmp	r3, #0
 8006450:	d002      	beq.n	8006458 <HAL_RCC_GetSysClockFreq+0x34>
 8006452:	2b04      	cmp	r3, #4
 8006454:	d003      	beq.n	800645e <HAL_RCC_GetSysClockFreq+0x3a>
 8006456:	e0db      	b.n	8006610 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006458:	4b73      	ldr	r3, [pc, #460]	; (8006628 <HAL_RCC_GetSysClockFreq+0x204>)
 800645a:	64bb      	str	r3, [r7, #72]	; 0x48
 800645c:	e0db      	b.n	8006616 <HAL_RCC_GetSysClockFreq+0x1f2>
 800645e:	4b73      	ldr	r3, [pc, #460]	; (800662c <HAL_RCC_GetSysClockFreq+0x208>)
 8006460:	64bb      	str	r3, [r7, #72]	; 0x48
 8006462:	e0d8      	b.n	8006616 <HAL_RCC_GetSysClockFreq+0x1f2>
 8006464:	4b6f      	ldr	r3, [pc, #444]	; (8006624 <HAL_RCC_GetSysClockFreq+0x200>)
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800646c:	647b      	str	r3, [r7, #68]	; 0x44
 800646e:	4b6d      	ldr	r3, [pc, #436]	; (8006624 <HAL_RCC_GetSysClockFreq+0x200>)
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d063      	beq.n	8006542 <HAL_RCC_GetSysClockFreq+0x11e>
 800647a:	4b6a      	ldr	r3, [pc, #424]	; (8006624 <HAL_RCC_GetSysClockFreq+0x200>)
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	099b      	lsrs	r3, r3, #6
 8006480:	2200      	movs	r2, #0
 8006482:	63bb      	str	r3, [r7, #56]	; 0x38
 8006484:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800648c:	633b      	str	r3, [r7, #48]	; 0x30
 800648e:	2300      	movs	r3, #0
 8006490:	637b      	str	r3, [r7, #52]	; 0x34
 8006492:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006496:	4622      	mov	r2, r4
 8006498:	462b      	mov	r3, r5
 800649a:	f04f 0000 	mov.w	r0, #0
 800649e:	f04f 0100 	mov.w	r1, #0
 80064a2:	0159      	lsls	r1, r3, #5
 80064a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064a8:	0150      	lsls	r0, r2, #5
 80064aa:	4602      	mov	r2, r0
 80064ac:	460b      	mov	r3, r1
 80064ae:	4621      	mov	r1, r4
 80064b0:	1a51      	subs	r1, r2, r1
 80064b2:	6139      	str	r1, [r7, #16]
 80064b4:	4629      	mov	r1, r5
 80064b6:	eb63 0301 	sbc.w	r3, r3, r1
 80064ba:	617b      	str	r3, [r7, #20]
 80064bc:	f04f 0200 	mov.w	r2, #0
 80064c0:	f04f 0300 	mov.w	r3, #0
 80064c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064c8:	4659      	mov	r1, fp
 80064ca:	018b      	lsls	r3, r1, #6
 80064cc:	4651      	mov	r1, sl
 80064ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80064d2:	4651      	mov	r1, sl
 80064d4:	018a      	lsls	r2, r1, #6
 80064d6:	4651      	mov	r1, sl
 80064d8:	ebb2 0801 	subs.w	r8, r2, r1
 80064dc:	4659      	mov	r1, fp
 80064de:	eb63 0901 	sbc.w	r9, r3, r1
 80064e2:	f04f 0200 	mov.w	r2, #0
 80064e6:	f04f 0300 	mov.w	r3, #0
 80064ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064f6:	4690      	mov	r8, r2
 80064f8:	4699      	mov	r9, r3
 80064fa:	4623      	mov	r3, r4
 80064fc:	eb18 0303 	adds.w	r3, r8, r3
 8006500:	60bb      	str	r3, [r7, #8]
 8006502:	462b      	mov	r3, r5
 8006504:	eb49 0303 	adc.w	r3, r9, r3
 8006508:	60fb      	str	r3, [r7, #12]
 800650a:	f04f 0200 	mov.w	r2, #0
 800650e:	f04f 0300 	mov.w	r3, #0
 8006512:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006516:	4629      	mov	r1, r5
 8006518:	024b      	lsls	r3, r1, #9
 800651a:	4621      	mov	r1, r4
 800651c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006520:	4621      	mov	r1, r4
 8006522:	024a      	lsls	r2, r1, #9
 8006524:	4610      	mov	r0, r2
 8006526:	4619      	mov	r1, r3
 8006528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800652a:	2200      	movs	r2, #0
 800652c:	62bb      	str	r3, [r7, #40]	; 0x28
 800652e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006530:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006534:	f7fa fba8 	bl	8000c88 <__aeabi_uldivmod>
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	4613      	mov	r3, r2
 800653e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006540:	e058      	b.n	80065f4 <HAL_RCC_GetSysClockFreq+0x1d0>
 8006542:	4b38      	ldr	r3, [pc, #224]	; (8006624 <HAL_RCC_GetSysClockFreq+0x200>)
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	099b      	lsrs	r3, r3, #6
 8006548:	2200      	movs	r2, #0
 800654a:	4618      	mov	r0, r3
 800654c:	4611      	mov	r1, r2
 800654e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006552:	623b      	str	r3, [r7, #32]
 8006554:	2300      	movs	r3, #0
 8006556:	627b      	str	r3, [r7, #36]	; 0x24
 8006558:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800655c:	4642      	mov	r2, r8
 800655e:	464b      	mov	r3, r9
 8006560:	f04f 0000 	mov.w	r0, #0
 8006564:	f04f 0100 	mov.w	r1, #0
 8006568:	0159      	lsls	r1, r3, #5
 800656a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800656e:	0150      	lsls	r0, r2, #5
 8006570:	4602      	mov	r2, r0
 8006572:	460b      	mov	r3, r1
 8006574:	4641      	mov	r1, r8
 8006576:	ebb2 0a01 	subs.w	sl, r2, r1
 800657a:	4649      	mov	r1, r9
 800657c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006580:	f04f 0200 	mov.w	r2, #0
 8006584:	f04f 0300 	mov.w	r3, #0
 8006588:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800658c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006590:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006594:	ebb2 040a 	subs.w	r4, r2, sl
 8006598:	eb63 050b 	sbc.w	r5, r3, fp
 800659c:	f04f 0200 	mov.w	r2, #0
 80065a0:	f04f 0300 	mov.w	r3, #0
 80065a4:	00eb      	lsls	r3, r5, #3
 80065a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065aa:	00e2      	lsls	r2, r4, #3
 80065ac:	4614      	mov	r4, r2
 80065ae:	461d      	mov	r5, r3
 80065b0:	4643      	mov	r3, r8
 80065b2:	18e3      	adds	r3, r4, r3
 80065b4:	603b      	str	r3, [r7, #0]
 80065b6:	464b      	mov	r3, r9
 80065b8:	eb45 0303 	adc.w	r3, r5, r3
 80065bc:	607b      	str	r3, [r7, #4]
 80065be:	f04f 0200 	mov.w	r2, #0
 80065c2:	f04f 0300 	mov.w	r3, #0
 80065c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80065ca:	4629      	mov	r1, r5
 80065cc:	028b      	lsls	r3, r1, #10
 80065ce:	4621      	mov	r1, r4
 80065d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80065d4:	4621      	mov	r1, r4
 80065d6:	028a      	lsls	r2, r1, #10
 80065d8:	4610      	mov	r0, r2
 80065da:	4619      	mov	r1, r3
 80065dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065de:	2200      	movs	r2, #0
 80065e0:	61bb      	str	r3, [r7, #24]
 80065e2:	61fa      	str	r2, [r7, #28]
 80065e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065e8:	f7fa fb4e 	bl	8000c88 <__aeabi_uldivmod>
 80065ec:	4602      	mov	r2, r0
 80065ee:	460b      	mov	r3, r1
 80065f0:	4613      	mov	r3, r2
 80065f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065f4:	4b0b      	ldr	r3, [pc, #44]	; (8006624 <HAL_RCC_GetSysClockFreq+0x200>)
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	0c1b      	lsrs	r3, r3, #16
 80065fa:	f003 0303 	and.w	r3, r3, #3
 80065fe:	3301      	adds	r3, #1
 8006600:	005b      	lsls	r3, r3, #1
 8006602:	643b      	str	r3, [r7, #64]	; 0x40
 8006604:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006608:	fbb2 f3f3 	udiv	r3, r2, r3
 800660c:	64bb      	str	r3, [r7, #72]	; 0x48
 800660e:	e002      	b.n	8006616 <HAL_RCC_GetSysClockFreq+0x1f2>
 8006610:	4b05      	ldr	r3, [pc, #20]	; (8006628 <HAL_RCC_GetSysClockFreq+0x204>)
 8006612:	64bb      	str	r3, [r7, #72]	; 0x48
 8006614:	bf00      	nop
 8006616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006618:	4618      	mov	r0, r3
 800661a:	3750      	adds	r7, #80	; 0x50
 800661c:	46bd      	mov	sp, r7
 800661e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006622:	bf00      	nop
 8006624:	40023800 	.word	0x40023800
 8006628:	00f42400 	.word	0x00f42400
 800662c:	007a1200 	.word	0x007a1200

08006630 <HAL_RCC_GetHCLKFreq>:
 8006630:	b480      	push	{r7}
 8006632:	af00      	add	r7, sp, #0
 8006634:	4b03      	ldr	r3, [pc, #12]	; (8006644 <HAL_RCC_GetHCLKFreq+0x14>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4618      	mov	r0, r3
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	20000004 	.word	0x20000004

08006648 <HAL_RCC_GetPCLK1Freq>:
 8006648:	b580      	push	{r7, lr}
 800664a:	af00      	add	r7, sp, #0
 800664c:	f7ff fff0 	bl	8006630 <HAL_RCC_GetHCLKFreq>
 8006650:	4602      	mov	r2, r0
 8006652:	4b05      	ldr	r3, [pc, #20]	; (8006668 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	0a9b      	lsrs	r3, r3, #10
 8006658:	f003 0307 	and.w	r3, r3, #7
 800665c:	4903      	ldr	r1, [pc, #12]	; (800666c <HAL_RCC_GetPCLK1Freq+0x24>)
 800665e:	5ccb      	ldrb	r3, [r1, r3]
 8006660:	fa22 f303 	lsr.w	r3, r2, r3
 8006664:	4618      	mov	r0, r3
 8006666:	bd80      	pop	{r7, pc}
 8006668:	40023800 	.word	0x40023800
 800666c:	0800df84 	.word	0x0800df84

08006670 <HAL_RCC_GetPCLK2Freq>:
 8006670:	b580      	push	{r7, lr}
 8006672:	af00      	add	r7, sp, #0
 8006674:	f7ff ffdc 	bl	8006630 <HAL_RCC_GetHCLKFreq>
 8006678:	4602      	mov	r2, r0
 800667a:	4b05      	ldr	r3, [pc, #20]	; (8006690 <HAL_RCC_GetPCLK2Freq+0x20>)
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	0b5b      	lsrs	r3, r3, #13
 8006680:	f003 0307 	and.w	r3, r3, #7
 8006684:	4903      	ldr	r1, [pc, #12]	; (8006694 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006686:	5ccb      	ldrb	r3, [r1, r3]
 8006688:	fa22 f303 	lsr.w	r3, r2, r3
 800668c:	4618      	mov	r0, r3
 800668e:	bd80      	pop	{r7, pc}
 8006690:	40023800 	.word	0x40023800
 8006694:	0800df84 	.word	0x0800df84

08006698 <HAL_RCC_OscConfig>:
 8006698:	b580      	push	{r7, lr}
 800669a:	b086      	sub	sp, #24
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d101      	bne.n	80066aa <HAL_RCC_OscConfig+0x12>
 80066a6:	2301      	movs	r3, #1
 80066a8:	e273      	b.n	8006b92 <HAL_RCC_OscConfig+0x4fa>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0301 	and.w	r3, r3, #1
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d075      	beq.n	80067a2 <HAL_RCC_OscConfig+0x10a>
 80066b6:	4b88      	ldr	r3, [pc, #544]	; (80068d8 <HAL_RCC_OscConfig+0x240>)
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f003 030c 	and.w	r3, r3, #12
 80066be:	2b04      	cmp	r3, #4
 80066c0:	d00c      	beq.n	80066dc <HAL_RCC_OscConfig+0x44>
 80066c2:	4b85      	ldr	r3, [pc, #532]	; (80068d8 <HAL_RCC_OscConfig+0x240>)
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f003 030c 	and.w	r3, r3, #12
 80066ca:	2b08      	cmp	r3, #8
 80066cc:	d112      	bne.n	80066f4 <HAL_RCC_OscConfig+0x5c>
 80066ce:	4b82      	ldr	r3, [pc, #520]	; (80068d8 <HAL_RCC_OscConfig+0x240>)
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066da:	d10b      	bne.n	80066f4 <HAL_RCC_OscConfig+0x5c>
 80066dc:	4b7e      	ldr	r3, [pc, #504]	; (80068d8 <HAL_RCC_OscConfig+0x240>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d05b      	beq.n	80067a0 <HAL_RCC_OscConfig+0x108>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d157      	bne.n	80067a0 <HAL_RCC_OscConfig+0x108>
 80066f0:	2301      	movs	r3, #1
 80066f2:	e24e      	b.n	8006b92 <HAL_RCC_OscConfig+0x4fa>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066fc:	d106      	bne.n	800670c <HAL_RCC_OscConfig+0x74>
 80066fe:	4b76      	ldr	r3, [pc, #472]	; (80068d8 <HAL_RCC_OscConfig+0x240>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a75      	ldr	r2, [pc, #468]	; (80068d8 <HAL_RCC_OscConfig+0x240>)
 8006704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006708:	6013      	str	r3, [r2, #0]
 800670a:	e01d      	b.n	8006748 <HAL_RCC_OscConfig+0xb0>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006714:	d10c      	bne.n	8006730 <HAL_RCC_OscConfig+0x98>
 8006716:	4b70      	ldr	r3, [pc, #448]	; (80068d8 <HAL_RCC_OscConfig+0x240>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a6f      	ldr	r2, [pc, #444]	; (80068d8 <HAL_RCC_OscConfig+0x240>)
 800671c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006720:	6013      	str	r3, [r2, #0]
 8006722:	4b6d      	ldr	r3, [pc, #436]	; (80068d8 <HAL_RCC_OscConfig+0x240>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a6c      	ldr	r2, [pc, #432]	; (80068d8 <HAL_RCC_OscConfig+0x240>)
 8006728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800672c:	6013      	str	r3, [r2, #0]
 800672e:	e00b      	b.n	8006748 <HAL_RCC_OscConfig+0xb0>
 8006730:	4b69      	ldr	r3, [pc, #420]	; (80068d8 <HAL_RCC_OscConfig+0x240>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a68      	ldr	r2, [pc, #416]	; (80068d8 <HAL_RCC_OscConfig+0x240>)
 8006736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800673a:	6013      	str	r3, [r2, #0]
 800673c:	4b66      	ldr	r3, [pc, #408]	; (80068d8 <HAL_RCC_OscConfig+0x240>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a65      	ldr	r2, [pc, #404]	; (80068d8 <HAL_RCC_OscConfig+0x240>)
 8006742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006746:	6013      	str	r3, [r2, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d013      	beq.n	8006778 <HAL_RCC_OscConfig+0xe0>
 8006750:	f7fd fc1c 	bl	8003f8c <HAL_GetTick>
 8006754:	6138      	str	r0, [r7, #16]
 8006756:	e008      	b.n	800676a <HAL_RCC_OscConfig+0xd2>
 8006758:	f7fd fc18 	bl	8003f8c <HAL_GetTick>
 800675c:	4602      	mov	r2, r0
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	2b64      	cmp	r3, #100	; 0x64
 8006764:	d901      	bls.n	800676a <HAL_RCC_OscConfig+0xd2>
 8006766:	2303      	movs	r3, #3
 8006768:	e213      	b.n	8006b92 <HAL_RCC_OscConfig+0x4fa>
 800676a:	4b5b      	ldr	r3, [pc, #364]	; (80068d8 <HAL_RCC_OscConfig+0x240>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d0f0      	beq.n	8006758 <HAL_RCC_OscConfig+0xc0>
 8006776:	e014      	b.n	80067a2 <HAL_RCC_OscConfig+0x10a>
 8006778:	f7fd fc08 	bl	8003f8c <HAL_GetTick>
 800677c:	6138      	str	r0, [r7, #16]
 800677e:	e008      	b.n	8006792 <HAL_RCC_OscConfig+0xfa>
 8006780:	f7fd fc04 	bl	8003f8c <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	2b64      	cmp	r3, #100	; 0x64
 800678c:	d901      	bls.n	8006792 <HAL_RCC_OscConfig+0xfa>
 800678e:	2303      	movs	r3, #3
 8006790:	e1ff      	b.n	8006b92 <HAL_RCC_OscConfig+0x4fa>
 8006792:	4b51      	ldr	r3, [pc, #324]	; (80068d8 <HAL_RCC_OscConfig+0x240>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1f0      	bne.n	8006780 <HAL_RCC_OscConfig+0xe8>
 800679e:	e000      	b.n	80067a2 <HAL_RCC_OscConfig+0x10a>
 80067a0:	bf00      	nop
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d063      	beq.n	8006876 <HAL_RCC_OscConfig+0x1de>
 80067ae:	4b4a      	ldr	r3, [pc, #296]	; (80068d8 <HAL_RCC_OscConfig+0x240>)
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	f003 030c 	and.w	r3, r3, #12
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00b      	beq.n	80067d2 <HAL_RCC_OscConfig+0x13a>
 80067ba:	4b47      	ldr	r3, [pc, #284]	; (80068d8 <HAL_RCC_OscConfig+0x240>)
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f003 030c 	and.w	r3, r3, #12
 80067c2:	2b08      	cmp	r3, #8
 80067c4:	d11c      	bne.n	8006800 <HAL_RCC_OscConfig+0x168>
 80067c6:	4b44      	ldr	r3, [pc, #272]	; (80068d8 <HAL_RCC_OscConfig+0x240>)
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d116      	bne.n	8006800 <HAL_RCC_OscConfig+0x168>
 80067d2:	4b41      	ldr	r3, [pc, #260]	; (80068d8 <HAL_RCC_OscConfig+0x240>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0302 	and.w	r3, r3, #2
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d005      	beq.n	80067ea <HAL_RCC_OscConfig+0x152>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d001      	beq.n	80067ea <HAL_RCC_OscConfig+0x152>
 80067e6:	2301      	movs	r3, #1
 80067e8:	e1d3      	b.n	8006b92 <HAL_RCC_OscConfig+0x4fa>
 80067ea:	4b3b      	ldr	r3, [pc, #236]	; (80068d8 <HAL_RCC_OscConfig+0x240>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	00db      	lsls	r3, r3, #3
 80067f8:	4937      	ldr	r1, [pc, #220]	; (80068d8 <HAL_RCC_OscConfig+0x240>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	600b      	str	r3, [r1, #0]
 80067fe:	e03a      	b.n	8006876 <HAL_RCC_OscConfig+0x1de>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d020      	beq.n	800684a <HAL_RCC_OscConfig+0x1b2>
 8006808:	4b34      	ldr	r3, [pc, #208]	; (80068dc <HAL_RCC_OscConfig+0x244>)
 800680a:	2201      	movs	r2, #1
 800680c:	601a      	str	r2, [r3, #0]
 800680e:	f7fd fbbd 	bl	8003f8c <HAL_GetTick>
 8006812:	6138      	str	r0, [r7, #16]
 8006814:	e008      	b.n	8006828 <HAL_RCC_OscConfig+0x190>
 8006816:	f7fd fbb9 	bl	8003f8c <HAL_GetTick>
 800681a:	4602      	mov	r2, r0
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	2b02      	cmp	r3, #2
 8006822:	d901      	bls.n	8006828 <HAL_RCC_OscConfig+0x190>
 8006824:	2303      	movs	r3, #3
 8006826:	e1b4      	b.n	8006b92 <HAL_RCC_OscConfig+0x4fa>
 8006828:	4b2b      	ldr	r3, [pc, #172]	; (80068d8 <HAL_RCC_OscConfig+0x240>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0302 	and.w	r3, r3, #2
 8006830:	2b00      	cmp	r3, #0
 8006832:	d0f0      	beq.n	8006816 <HAL_RCC_OscConfig+0x17e>
 8006834:	4b28      	ldr	r3, [pc, #160]	; (80068d8 <HAL_RCC_OscConfig+0x240>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	00db      	lsls	r3, r3, #3
 8006842:	4925      	ldr	r1, [pc, #148]	; (80068d8 <HAL_RCC_OscConfig+0x240>)
 8006844:	4313      	orrs	r3, r2
 8006846:	600b      	str	r3, [r1, #0]
 8006848:	e015      	b.n	8006876 <HAL_RCC_OscConfig+0x1de>
 800684a:	4b24      	ldr	r3, [pc, #144]	; (80068dc <HAL_RCC_OscConfig+0x244>)
 800684c:	2200      	movs	r2, #0
 800684e:	601a      	str	r2, [r3, #0]
 8006850:	f7fd fb9c 	bl	8003f8c <HAL_GetTick>
 8006854:	6138      	str	r0, [r7, #16]
 8006856:	e008      	b.n	800686a <HAL_RCC_OscConfig+0x1d2>
 8006858:	f7fd fb98 	bl	8003f8c <HAL_GetTick>
 800685c:	4602      	mov	r2, r0
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	2b02      	cmp	r3, #2
 8006864:	d901      	bls.n	800686a <HAL_RCC_OscConfig+0x1d2>
 8006866:	2303      	movs	r3, #3
 8006868:	e193      	b.n	8006b92 <HAL_RCC_OscConfig+0x4fa>
 800686a:	4b1b      	ldr	r3, [pc, #108]	; (80068d8 <HAL_RCC_OscConfig+0x240>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f003 0302 	and.w	r3, r3, #2
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1f0      	bne.n	8006858 <HAL_RCC_OscConfig+0x1c0>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0308 	and.w	r3, r3, #8
 800687e:	2b00      	cmp	r3, #0
 8006880:	d036      	beq.n	80068f0 <HAL_RCC_OscConfig+0x258>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d016      	beq.n	80068b8 <HAL_RCC_OscConfig+0x220>
 800688a:	4b15      	ldr	r3, [pc, #84]	; (80068e0 <HAL_RCC_OscConfig+0x248>)
 800688c:	2201      	movs	r2, #1
 800688e:	601a      	str	r2, [r3, #0]
 8006890:	f7fd fb7c 	bl	8003f8c <HAL_GetTick>
 8006894:	6138      	str	r0, [r7, #16]
 8006896:	e008      	b.n	80068aa <HAL_RCC_OscConfig+0x212>
 8006898:	f7fd fb78 	bl	8003f8c <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d901      	bls.n	80068aa <HAL_RCC_OscConfig+0x212>
 80068a6:	2303      	movs	r3, #3
 80068a8:	e173      	b.n	8006b92 <HAL_RCC_OscConfig+0x4fa>
 80068aa:	4b0b      	ldr	r3, [pc, #44]	; (80068d8 <HAL_RCC_OscConfig+0x240>)
 80068ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d0f0      	beq.n	8006898 <HAL_RCC_OscConfig+0x200>
 80068b6:	e01b      	b.n	80068f0 <HAL_RCC_OscConfig+0x258>
 80068b8:	4b09      	ldr	r3, [pc, #36]	; (80068e0 <HAL_RCC_OscConfig+0x248>)
 80068ba:	2200      	movs	r2, #0
 80068bc:	601a      	str	r2, [r3, #0]
 80068be:	f7fd fb65 	bl	8003f8c <HAL_GetTick>
 80068c2:	6138      	str	r0, [r7, #16]
 80068c4:	e00e      	b.n	80068e4 <HAL_RCC_OscConfig+0x24c>
 80068c6:	f7fd fb61 	bl	8003f8c <HAL_GetTick>
 80068ca:	4602      	mov	r2, r0
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d907      	bls.n	80068e4 <HAL_RCC_OscConfig+0x24c>
 80068d4:	2303      	movs	r3, #3
 80068d6:	e15c      	b.n	8006b92 <HAL_RCC_OscConfig+0x4fa>
 80068d8:	40023800 	.word	0x40023800
 80068dc:	42470000 	.word	0x42470000
 80068e0:	42470e80 	.word	0x42470e80
 80068e4:	4b8a      	ldr	r3, [pc, #552]	; (8006b10 <HAL_RCC_OscConfig+0x478>)
 80068e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068e8:	f003 0302 	and.w	r3, r3, #2
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1ea      	bne.n	80068c6 <HAL_RCC_OscConfig+0x22e>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0304 	and.w	r3, r3, #4
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	f000 8097 	beq.w	8006a2c <HAL_RCC_OscConfig+0x394>
 80068fe:	2300      	movs	r3, #0
 8006900:	75fb      	strb	r3, [r7, #23]
 8006902:	4b83      	ldr	r3, [pc, #524]	; (8006b10 <HAL_RCC_OscConfig+0x478>)
 8006904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10f      	bne.n	800692e <HAL_RCC_OscConfig+0x296>
 800690e:	2300      	movs	r3, #0
 8006910:	60bb      	str	r3, [r7, #8]
 8006912:	4b7f      	ldr	r3, [pc, #508]	; (8006b10 <HAL_RCC_OscConfig+0x478>)
 8006914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006916:	4a7e      	ldr	r2, [pc, #504]	; (8006b10 <HAL_RCC_OscConfig+0x478>)
 8006918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800691c:	6413      	str	r3, [r2, #64]	; 0x40
 800691e:	4b7c      	ldr	r3, [pc, #496]	; (8006b10 <HAL_RCC_OscConfig+0x478>)
 8006920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006926:	60bb      	str	r3, [r7, #8]
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	2301      	movs	r3, #1
 800692c:	75fb      	strb	r3, [r7, #23]
 800692e:	4b79      	ldr	r3, [pc, #484]	; (8006b14 <HAL_RCC_OscConfig+0x47c>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006936:	2b00      	cmp	r3, #0
 8006938:	d118      	bne.n	800696c <HAL_RCC_OscConfig+0x2d4>
 800693a:	4b76      	ldr	r3, [pc, #472]	; (8006b14 <HAL_RCC_OscConfig+0x47c>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a75      	ldr	r2, [pc, #468]	; (8006b14 <HAL_RCC_OscConfig+0x47c>)
 8006940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006944:	6013      	str	r3, [r2, #0]
 8006946:	f7fd fb21 	bl	8003f8c <HAL_GetTick>
 800694a:	6138      	str	r0, [r7, #16]
 800694c:	e008      	b.n	8006960 <HAL_RCC_OscConfig+0x2c8>
 800694e:	f7fd fb1d 	bl	8003f8c <HAL_GetTick>
 8006952:	4602      	mov	r2, r0
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	2b02      	cmp	r3, #2
 800695a:	d901      	bls.n	8006960 <HAL_RCC_OscConfig+0x2c8>
 800695c:	2303      	movs	r3, #3
 800695e:	e118      	b.n	8006b92 <HAL_RCC_OscConfig+0x4fa>
 8006960:	4b6c      	ldr	r3, [pc, #432]	; (8006b14 <HAL_RCC_OscConfig+0x47c>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006968:	2b00      	cmp	r3, #0
 800696a:	d0f0      	beq.n	800694e <HAL_RCC_OscConfig+0x2b6>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	2b01      	cmp	r3, #1
 8006972:	d106      	bne.n	8006982 <HAL_RCC_OscConfig+0x2ea>
 8006974:	4b66      	ldr	r3, [pc, #408]	; (8006b10 <HAL_RCC_OscConfig+0x478>)
 8006976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006978:	4a65      	ldr	r2, [pc, #404]	; (8006b10 <HAL_RCC_OscConfig+0x478>)
 800697a:	f043 0301 	orr.w	r3, r3, #1
 800697e:	6713      	str	r3, [r2, #112]	; 0x70
 8006980:	e01c      	b.n	80069bc <HAL_RCC_OscConfig+0x324>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	2b05      	cmp	r3, #5
 8006988:	d10c      	bne.n	80069a4 <HAL_RCC_OscConfig+0x30c>
 800698a:	4b61      	ldr	r3, [pc, #388]	; (8006b10 <HAL_RCC_OscConfig+0x478>)
 800698c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800698e:	4a60      	ldr	r2, [pc, #384]	; (8006b10 <HAL_RCC_OscConfig+0x478>)
 8006990:	f043 0304 	orr.w	r3, r3, #4
 8006994:	6713      	str	r3, [r2, #112]	; 0x70
 8006996:	4b5e      	ldr	r3, [pc, #376]	; (8006b10 <HAL_RCC_OscConfig+0x478>)
 8006998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800699a:	4a5d      	ldr	r2, [pc, #372]	; (8006b10 <HAL_RCC_OscConfig+0x478>)
 800699c:	f043 0301 	orr.w	r3, r3, #1
 80069a0:	6713      	str	r3, [r2, #112]	; 0x70
 80069a2:	e00b      	b.n	80069bc <HAL_RCC_OscConfig+0x324>
 80069a4:	4b5a      	ldr	r3, [pc, #360]	; (8006b10 <HAL_RCC_OscConfig+0x478>)
 80069a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a8:	4a59      	ldr	r2, [pc, #356]	; (8006b10 <HAL_RCC_OscConfig+0x478>)
 80069aa:	f023 0301 	bic.w	r3, r3, #1
 80069ae:	6713      	str	r3, [r2, #112]	; 0x70
 80069b0:	4b57      	ldr	r3, [pc, #348]	; (8006b10 <HAL_RCC_OscConfig+0x478>)
 80069b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b4:	4a56      	ldr	r2, [pc, #344]	; (8006b10 <HAL_RCC_OscConfig+0x478>)
 80069b6:	f023 0304 	bic.w	r3, r3, #4
 80069ba:	6713      	str	r3, [r2, #112]	; 0x70
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d015      	beq.n	80069f0 <HAL_RCC_OscConfig+0x358>
 80069c4:	f7fd fae2 	bl	8003f8c <HAL_GetTick>
 80069c8:	6138      	str	r0, [r7, #16]
 80069ca:	e00a      	b.n	80069e2 <HAL_RCC_OscConfig+0x34a>
 80069cc:	f7fd fade 	bl	8003f8c <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80069da:	4293      	cmp	r3, r2
 80069dc:	d901      	bls.n	80069e2 <HAL_RCC_OscConfig+0x34a>
 80069de:	2303      	movs	r3, #3
 80069e0:	e0d7      	b.n	8006b92 <HAL_RCC_OscConfig+0x4fa>
 80069e2:	4b4b      	ldr	r3, [pc, #300]	; (8006b10 <HAL_RCC_OscConfig+0x478>)
 80069e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d0ee      	beq.n	80069cc <HAL_RCC_OscConfig+0x334>
 80069ee:	e014      	b.n	8006a1a <HAL_RCC_OscConfig+0x382>
 80069f0:	f7fd facc 	bl	8003f8c <HAL_GetTick>
 80069f4:	6138      	str	r0, [r7, #16]
 80069f6:	e00a      	b.n	8006a0e <HAL_RCC_OscConfig+0x376>
 80069f8:	f7fd fac8 	bl	8003f8c <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d901      	bls.n	8006a0e <HAL_RCC_OscConfig+0x376>
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	e0c1      	b.n	8006b92 <HAL_RCC_OscConfig+0x4fa>
 8006a0e:	4b40      	ldr	r3, [pc, #256]	; (8006b10 <HAL_RCC_OscConfig+0x478>)
 8006a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a12:	f003 0302 	and.w	r3, r3, #2
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d1ee      	bne.n	80069f8 <HAL_RCC_OscConfig+0x360>
 8006a1a:	7dfb      	ldrb	r3, [r7, #23]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d105      	bne.n	8006a2c <HAL_RCC_OscConfig+0x394>
 8006a20:	4b3b      	ldr	r3, [pc, #236]	; (8006b10 <HAL_RCC_OscConfig+0x478>)
 8006a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a24:	4a3a      	ldr	r2, [pc, #232]	; (8006b10 <HAL_RCC_OscConfig+0x478>)
 8006a26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a2a:	6413      	str	r3, [r2, #64]	; 0x40
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 80ad 	beq.w	8006b90 <HAL_RCC_OscConfig+0x4f8>
 8006a36:	4b36      	ldr	r3, [pc, #216]	; (8006b10 <HAL_RCC_OscConfig+0x478>)
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	f003 030c 	and.w	r3, r3, #12
 8006a3e:	2b08      	cmp	r3, #8
 8006a40:	d060      	beq.n	8006b04 <HAL_RCC_OscConfig+0x46c>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	699b      	ldr	r3, [r3, #24]
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d145      	bne.n	8006ad6 <HAL_RCC_OscConfig+0x43e>
 8006a4a:	4b33      	ldr	r3, [pc, #204]	; (8006b18 <HAL_RCC_OscConfig+0x480>)
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	601a      	str	r2, [r3, #0]
 8006a50:	f7fd fa9c 	bl	8003f8c <HAL_GetTick>
 8006a54:	6138      	str	r0, [r7, #16]
 8006a56:	e008      	b.n	8006a6a <HAL_RCC_OscConfig+0x3d2>
 8006a58:	f7fd fa98 	bl	8003f8c <HAL_GetTick>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d901      	bls.n	8006a6a <HAL_RCC_OscConfig+0x3d2>
 8006a66:	2303      	movs	r3, #3
 8006a68:	e093      	b.n	8006b92 <HAL_RCC_OscConfig+0x4fa>
 8006a6a:	4b29      	ldr	r3, [pc, #164]	; (8006b10 <HAL_RCC_OscConfig+0x478>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1f0      	bne.n	8006a58 <HAL_RCC_OscConfig+0x3c0>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	69da      	ldr	r2, [r3, #28]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	431a      	orrs	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a84:	019b      	lsls	r3, r3, #6
 8006a86:	431a      	orrs	r2, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a8c:	085b      	lsrs	r3, r3, #1
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	041b      	lsls	r3, r3, #16
 8006a92:	431a      	orrs	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a98:	061b      	lsls	r3, r3, #24
 8006a9a:	431a      	orrs	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa0:	071b      	lsls	r3, r3, #28
 8006aa2:	491b      	ldr	r1, [pc, #108]	; (8006b10 <HAL_RCC_OscConfig+0x478>)
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	604b      	str	r3, [r1, #4]
 8006aa8:	4b1b      	ldr	r3, [pc, #108]	; (8006b18 <HAL_RCC_OscConfig+0x480>)
 8006aaa:	2201      	movs	r2, #1
 8006aac:	601a      	str	r2, [r3, #0]
 8006aae:	f7fd fa6d 	bl	8003f8c <HAL_GetTick>
 8006ab2:	6138      	str	r0, [r7, #16]
 8006ab4:	e008      	b.n	8006ac8 <HAL_RCC_OscConfig+0x430>
 8006ab6:	f7fd fa69 	bl	8003f8c <HAL_GetTick>
 8006aba:	4602      	mov	r2, r0
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d901      	bls.n	8006ac8 <HAL_RCC_OscConfig+0x430>
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e064      	b.n	8006b92 <HAL_RCC_OscConfig+0x4fa>
 8006ac8:	4b11      	ldr	r3, [pc, #68]	; (8006b10 <HAL_RCC_OscConfig+0x478>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d0f0      	beq.n	8006ab6 <HAL_RCC_OscConfig+0x41e>
 8006ad4:	e05c      	b.n	8006b90 <HAL_RCC_OscConfig+0x4f8>
 8006ad6:	4b10      	ldr	r3, [pc, #64]	; (8006b18 <HAL_RCC_OscConfig+0x480>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	601a      	str	r2, [r3, #0]
 8006adc:	f7fd fa56 	bl	8003f8c <HAL_GetTick>
 8006ae0:	6138      	str	r0, [r7, #16]
 8006ae2:	e008      	b.n	8006af6 <HAL_RCC_OscConfig+0x45e>
 8006ae4:	f7fd fa52 	bl	8003f8c <HAL_GetTick>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d901      	bls.n	8006af6 <HAL_RCC_OscConfig+0x45e>
 8006af2:	2303      	movs	r3, #3
 8006af4:	e04d      	b.n	8006b92 <HAL_RCC_OscConfig+0x4fa>
 8006af6:	4b06      	ldr	r3, [pc, #24]	; (8006b10 <HAL_RCC_OscConfig+0x478>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1f0      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x44c>
 8006b02:	e045      	b.n	8006b90 <HAL_RCC_OscConfig+0x4f8>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	699b      	ldr	r3, [r3, #24]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d107      	bne.n	8006b1c <HAL_RCC_OscConfig+0x484>
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e040      	b.n	8006b92 <HAL_RCC_OscConfig+0x4fa>
 8006b10:	40023800 	.word	0x40023800
 8006b14:	40007000 	.word	0x40007000
 8006b18:	42470060 	.word	0x42470060
 8006b1c:	4b1f      	ldr	r3, [pc, #124]	; (8006b9c <HAL_RCC_OscConfig+0x504>)
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	60fb      	str	r3, [r7, #12]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d030      	beq.n	8006b8c <HAL_RCC_OscConfig+0x4f4>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	69db      	ldr	r3, [r3, #28]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d129      	bne.n	8006b8c <HAL_RCC_OscConfig+0x4f4>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a1b      	ldr	r3, [r3, #32]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d122      	bne.n	8006b8c <HAL_RCC_OscConfig+0x4f4>
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b52:	0192      	lsls	r2, r2, #6
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d119      	bne.n	8006b8c <HAL_RCC_OscConfig+0x4f4>
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b62:	085b      	lsrs	r3, r3, #1
 8006b64:	3b01      	subs	r3, #1
 8006b66:	041b      	lsls	r3, r3, #16
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d10f      	bne.n	8006b8c <HAL_RCC_OscConfig+0x4f4>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b76:	061b      	lsls	r3, r3, #24
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d107      	bne.n	8006b8c <HAL_RCC_OscConfig+0x4f4>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b86:	071b      	lsls	r3, r3, #28
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d001      	beq.n	8006b90 <HAL_RCC_OscConfig+0x4f8>
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e000      	b.n	8006b92 <HAL_RCC_OscConfig+0x4fa>
 8006b90:	2300      	movs	r3, #0
 8006b92:	4618      	mov	r0, r3
 8006b94:	3718      	adds	r7, #24
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	40023800 	.word	0x40023800

08006ba0 <HAL_SPI_Init>:
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d101      	bne.n	8006bb2 <HAL_SPI_Init+0x12>
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e07b      	b.n	8006caa <HAL_SPI_Init+0x10a>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d108      	bne.n	8006bcc <HAL_SPI_Init+0x2c>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bc2:	d009      	beq.n	8006bd8 <HAL_SPI_Init+0x38>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	61da      	str	r2, [r3, #28]
 8006bca:	e005      	b.n	8006bd8 <HAL_SPI_Init+0x38>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	611a      	str	r2, [r3, #16]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	615a      	str	r2, [r3, #20]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	629a      	str	r2, [r3, #40]	; 0x28
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d106      	bne.n	8006bf8 <HAL_SPI_Init+0x58>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f7fc fca0 	bl	8003538 <HAL_SPI_MspInit>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2202      	movs	r2, #2
 8006bfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c0e:	601a      	str	r2, [r3, #0]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006c20:	431a      	orrs	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c2a:	431a      	orrs	r2, r3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	f003 0302 	and.w	r3, r3, #2
 8006c34:	431a      	orrs	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	f003 0301 	and.w	r3, r3, #1
 8006c3e:	431a      	orrs	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c48:	431a      	orrs	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	69db      	ldr	r3, [r3, #28]
 8006c4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c52:	431a      	orrs	r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c5c:	ea42 0103 	orr.w	r1, r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c64:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	430a      	orrs	r2, r1
 8006c6e:	601a      	str	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	0c1b      	lsrs	r3, r3, #16
 8006c76:	f003 0104 	and.w	r1, r3, #4
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7e:	f003 0210 	and.w	r2, r3, #16
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	430a      	orrs	r2, r1
 8006c88:	605a      	str	r2, [r3, #4]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	69da      	ldr	r2, [r3, #28]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c98:	61da      	str	r2, [r3, #28]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	655a      	str	r2, [r3, #84]	; 0x54
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006ca8:	2300      	movs	r3, #0
 8006caa:	4618      	mov	r0, r3
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <HAL_SPI_Transmit>:
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b088      	sub	sp, #32
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	60f8      	str	r0, [r7, #12]
 8006cba:	60b9      	str	r1, [r7, #8]
 8006cbc:	603b      	str	r3, [r7, #0]
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	80fb      	strh	r3, [r7, #6]
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	77fb      	strb	r3, [r7, #31]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d101      	bne.n	8006cd4 <HAL_SPI_Transmit+0x22>
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	e126      	b.n	8006f22 <HAL_SPI_Transmit+0x270>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006cdc:	f7fd f956 	bl	8003f8c <HAL_GetTick>
 8006ce0:	61b8      	str	r0, [r7, #24]
 8006ce2:	88fb      	ldrh	r3, [r7, #6]
 8006ce4:	82fb      	strh	r3, [r7, #22]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d002      	beq.n	8006cf8 <HAL_SPI_Transmit+0x46>
 8006cf2:	2302      	movs	r3, #2
 8006cf4:	77fb      	strb	r3, [r7, #31]
 8006cf6:	e10b      	b.n	8006f10 <HAL_SPI_Transmit+0x25e>
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d002      	beq.n	8006d04 <HAL_SPI_Transmit+0x52>
 8006cfe:	88fb      	ldrh	r3, [r7, #6]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d102      	bne.n	8006d0a <HAL_SPI_Transmit+0x58>
 8006d04:	2301      	movs	r3, #1
 8006d06:	77fb      	strb	r3, [r7, #31]
 8006d08:	e102      	b.n	8006f10 <HAL_SPI_Transmit+0x25e>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2203      	movs	r2, #3
 8006d0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	655a      	str	r2, [r3, #84]	; 0x54
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	631a      	str	r2, [r3, #48]	; 0x30
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	88fa      	ldrh	r2, [r7, #6]
 8006d22:	869a      	strh	r2, [r3, #52]	; 0x34
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	88fa      	ldrh	r2, [r7, #6]
 8006d28:	86da      	strh	r2, [r3, #54]	; 0x36
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	639a      	str	r2, [r3, #56]	; 0x38
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	879a      	strh	r2, [r3, #60]	; 0x3c
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	645a      	str	r2, [r3, #68]	; 0x44
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	641a      	str	r2, [r3, #64]	; 0x40
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d50:	d10f      	bne.n	8006d72 <HAL_SPI_Transmit+0xc0>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d60:	601a      	str	r2, [r3, #0]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d70:	601a      	str	r2, [r3, #0]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d7c:	2b40      	cmp	r3, #64	; 0x40
 8006d7e:	d007      	beq.n	8006d90 <HAL_SPI_Transmit+0xde>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d8e:	601a      	str	r2, [r3, #0]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d98:	d14b      	bne.n	8006e32 <HAL_SPI_Transmit+0x180>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d002      	beq.n	8006da8 <HAL_SPI_Transmit+0xf6>
 8006da2:	8afb      	ldrh	r3, [r7, #22]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d13e      	bne.n	8006e26 <HAL_SPI_Transmit+0x174>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dac:	881a      	ldrh	r2, [r3, #0]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	60da      	str	r2, [r3, #12]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db8:	1c9a      	adds	r2, r3, #2
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	631a      	str	r2, [r3, #48]	; 0x30
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	86da      	strh	r2, [r3, #54]	; 0x36
 8006dcc:	e02b      	b.n	8006e26 <HAL_SPI_Transmit+0x174>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	f003 0302 	and.w	r3, r3, #2
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d112      	bne.n	8006e02 <HAL_SPI_Transmit+0x150>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de0:	881a      	ldrh	r2, [r3, #0]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	60da      	str	r2, [r3, #12]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dec:	1c9a      	adds	r2, r3, #2
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	631a      	str	r2, [r3, #48]	; 0x30
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	b29a      	uxth	r2, r3
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	86da      	strh	r2, [r3, #54]	; 0x36
 8006e00:	e011      	b.n	8006e26 <HAL_SPI_Transmit+0x174>
 8006e02:	f7fd f8c3 	bl	8003f8c <HAL_GetTick>
 8006e06:	4602      	mov	r2, r0
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	1ad3      	subs	r3, r2, r3
 8006e0c:	683a      	ldr	r2, [r7, #0]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d803      	bhi.n	8006e1a <HAL_SPI_Transmit+0x168>
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e18:	d102      	bne.n	8006e20 <HAL_SPI_Transmit+0x16e>
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d102      	bne.n	8006e26 <HAL_SPI_Transmit+0x174>
 8006e20:	2303      	movs	r3, #3
 8006e22:	77fb      	strb	r3, [r7, #31]
 8006e24:	e074      	b.n	8006f10 <HAL_SPI_Transmit+0x25e>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1ce      	bne.n	8006dce <HAL_SPI_Transmit+0x11c>
 8006e30:	e04c      	b.n	8006ecc <HAL_SPI_Transmit+0x21a>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d002      	beq.n	8006e40 <HAL_SPI_Transmit+0x18e>
 8006e3a:	8afb      	ldrh	r3, [r7, #22]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d140      	bne.n	8006ec2 <HAL_SPI_Transmit+0x210>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	330c      	adds	r3, #12
 8006e4a:	7812      	ldrb	r2, [r2, #0]
 8006e4c:	701a      	strb	r2, [r3, #0]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e52:	1c5a      	adds	r2, r3, #1
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	631a      	str	r2, [r3, #48]	; 0x30
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	86da      	strh	r2, [r3, #54]	; 0x36
 8006e66:	e02c      	b.n	8006ec2 <HAL_SPI_Transmit+0x210>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f003 0302 	and.w	r3, r3, #2
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d113      	bne.n	8006e9e <HAL_SPI_Transmit+0x1ec>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	330c      	adds	r3, #12
 8006e80:	7812      	ldrb	r2, [r2, #0]
 8006e82:	701a      	strb	r2, [r3, #0]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e88:	1c5a      	adds	r2, r3, #1
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	631a      	str	r2, [r3, #48]	; 0x30
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	3b01      	subs	r3, #1
 8006e96:	b29a      	uxth	r2, r3
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	86da      	strh	r2, [r3, #54]	; 0x36
 8006e9c:	e011      	b.n	8006ec2 <HAL_SPI_Transmit+0x210>
 8006e9e:	f7fd f875 	bl	8003f8c <HAL_GetTick>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	1ad3      	subs	r3, r2, r3
 8006ea8:	683a      	ldr	r2, [r7, #0]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d803      	bhi.n	8006eb6 <HAL_SPI_Transmit+0x204>
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eb4:	d102      	bne.n	8006ebc <HAL_SPI_Transmit+0x20a>
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d102      	bne.n	8006ec2 <HAL_SPI_Transmit+0x210>
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	77fb      	strb	r3, [r7, #31]
 8006ec0:	e026      	b.n	8006f10 <HAL_SPI_Transmit+0x25e>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1cd      	bne.n	8006e68 <HAL_SPI_Transmit+0x1b6>
 8006ecc:	69ba      	ldr	r2, [r7, #24]
 8006ece:	6839      	ldr	r1, [r7, #0]
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f000 fa55 	bl	8007380 <SPI_EndRxTxTransaction>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d002      	beq.n	8006ee2 <HAL_SPI_Transmit+0x230>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2220      	movs	r2, #32
 8006ee0:	655a      	str	r2, [r3, #84]	; 0x54
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10a      	bne.n	8006f00 <HAL_SPI_Transmit+0x24e>
 8006eea:	2300      	movs	r3, #0
 8006eec:	613b      	str	r3, [r7, #16]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	613b      	str	r3, [r7, #16]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	613b      	str	r3, [r7, #16]
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d002      	beq.n	8006f0e <HAL_SPI_Transmit+0x25c>
 8006f08:	2301      	movs	r3, #1
 8006f0a:	77fb      	strb	r3, [r7, #31]
 8006f0c:	e000      	b.n	8006f10 <HAL_SPI_Transmit+0x25e>
 8006f0e:	bf00      	nop
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006f20:	7ffb      	ldrb	r3, [r7, #31]
 8006f22:	4618      	mov	r0, r3
 8006f24:	3720      	adds	r7, #32
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <HAL_SPI_TransmitReceive>:
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b08c      	sub	sp, #48	; 0x30
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	60f8      	str	r0, [r7, #12]
 8006f32:	60b9      	str	r1, [r7, #8]
 8006f34:	607a      	str	r2, [r7, #4]
 8006f36:	807b      	strh	r3, [r7, #2]
 8006f38:	2301      	movs	r3, #1
 8006f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d101      	bne.n	8006f50 <HAL_SPI_TransmitReceive+0x26>
 8006f4c:	2302      	movs	r3, #2
 8006f4e:	e18a      	b.n	8007266 <HAL_SPI_TransmitReceive+0x33c>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006f58:	f7fd f818 	bl	8003f8c <HAL_GetTick>
 8006f5c:	6278      	str	r0, [r7, #36]	; 0x24
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	61fb      	str	r3, [r7, #28]
 8006f6e:	887b      	ldrh	r3, [r7, #2]
 8006f70:	837b      	strh	r3, [r7, #26]
 8006f72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d00f      	beq.n	8006f9a <HAL_SPI_TransmitReceive+0x70>
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f80:	d107      	bne.n	8006f92 <HAL_SPI_TransmitReceive+0x68>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d103      	bne.n	8006f92 <HAL_SPI_TransmitReceive+0x68>
 8006f8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f8e:	2b04      	cmp	r3, #4
 8006f90:	d003      	beq.n	8006f9a <HAL_SPI_TransmitReceive+0x70>
 8006f92:	2302      	movs	r3, #2
 8006f94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f98:	e15b      	b.n	8007252 <HAL_SPI_TransmitReceive+0x328>
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d005      	beq.n	8006fac <HAL_SPI_TransmitReceive+0x82>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d002      	beq.n	8006fac <HAL_SPI_TransmitReceive+0x82>
 8006fa6:	887b      	ldrh	r3, [r7, #2]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d103      	bne.n	8006fb4 <HAL_SPI_TransmitReceive+0x8a>
 8006fac:	2301      	movs	r3, #1
 8006fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fb2:	e14e      	b.n	8007252 <HAL_SPI_TransmitReceive+0x328>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	2b04      	cmp	r3, #4
 8006fbe:	d003      	beq.n	8006fc8 <HAL_SPI_TransmitReceive+0x9e>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2205      	movs	r2, #5
 8006fc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	655a      	str	r2, [r3, #84]	; 0x54
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	639a      	str	r2, [r3, #56]	; 0x38
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	887a      	ldrh	r2, [r7, #2]
 8006fd8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	887a      	ldrh	r2, [r7, #2]
 8006fde:	879a      	strh	r2, [r3, #60]	; 0x3c
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	631a      	str	r2, [r3, #48]	; 0x30
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	887a      	ldrh	r2, [r7, #2]
 8006fea:	86da      	strh	r2, [r3, #54]	; 0x36
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	887a      	ldrh	r2, [r7, #2]
 8006ff0:	869a      	strh	r2, [r3, #52]	; 0x34
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	641a      	str	r2, [r3, #64]	; 0x40
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	645a      	str	r2, [r3, #68]	; 0x44
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007008:	2b40      	cmp	r3, #64	; 0x40
 800700a:	d007      	beq.n	800701c <HAL_SPI_TransmitReceive+0xf2>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800701a:	601a      	str	r2, [r3, #0]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007024:	d178      	bne.n	8007118 <HAL_SPI_TransmitReceive+0x1ee>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d002      	beq.n	8007034 <HAL_SPI_TransmitReceive+0x10a>
 800702e:	8b7b      	ldrh	r3, [r7, #26]
 8007030:	2b01      	cmp	r3, #1
 8007032:	d166      	bne.n	8007102 <HAL_SPI_TransmitReceive+0x1d8>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007038:	881a      	ldrh	r2, [r3, #0]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	60da      	str	r2, [r3, #12]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007044:	1c9a      	adds	r2, r3, #2
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	631a      	str	r2, [r3, #48]	; 0x30
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800704e:	b29b      	uxth	r3, r3
 8007050:	3b01      	subs	r3, #1
 8007052:	b29a      	uxth	r2, r3
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	86da      	strh	r2, [r3, #54]	; 0x36
 8007058:	e053      	b.n	8007102 <HAL_SPI_TransmitReceive+0x1d8>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	f003 0302 	and.w	r3, r3, #2
 8007064:	2b02      	cmp	r3, #2
 8007066:	d11b      	bne.n	80070a0 <HAL_SPI_TransmitReceive+0x176>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800706c:	b29b      	uxth	r3, r3
 800706e:	2b00      	cmp	r3, #0
 8007070:	d016      	beq.n	80070a0 <HAL_SPI_TransmitReceive+0x176>
 8007072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007074:	2b01      	cmp	r3, #1
 8007076:	d113      	bne.n	80070a0 <HAL_SPI_TransmitReceive+0x176>
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800707c:	881a      	ldrh	r2, [r3, #0]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	60da      	str	r2, [r3, #12]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007088:	1c9a      	adds	r2, r3, #2
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	631a      	str	r2, [r3, #48]	; 0x30
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007092:	b29b      	uxth	r3, r3
 8007094:	3b01      	subs	r3, #1
 8007096:	b29a      	uxth	r2, r3
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	86da      	strh	r2, [r3, #54]	; 0x36
 800709c:	2300      	movs	r3, #0
 800709e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	f003 0301 	and.w	r3, r3, #1
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d119      	bne.n	80070e2 <HAL_SPI_TransmitReceive+0x1b8>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d014      	beq.n	80070e2 <HAL_SPI_TransmitReceive+0x1b8>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68da      	ldr	r2, [r3, #12]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c2:	b292      	uxth	r2, r2
 80070c4:	801a      	strh	r2, [r3, #0]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ca:	1c9a      	adds	r2, r3, #2
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	639a      	str	r2, [r3, #56]	; 0x38
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	3b01      	subs	r3, #1
 80070d8:	b29a      	uxth	r2, r3
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80070de:	2301      	movs	r3, #1
 80070e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070e2:	f7fc ff53 	bl	8003f8c <HAL_GetTick>
 80070e6:	4602      	mov	r2, r0
 80070e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ea:	1ad3      	subs	r3, r2, r3
 80070ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d807      	bhi.n	8007102 <HAL_SPI_TransmitReceive+0x1d8>
 80070f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f8:	d003      	beq.n	8007102 <HAL_SPI_TransmitReceive+0x1d8>
 80070fa:	2303      	movs	r3, #3
 80070fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007100:	e0a7      	b.n	8007252 <HAL_SPI_TransmitReceive+0x328>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007106:	b29b      	uxth	r3, r3
 8007108:	2b00      	cmp	r3, #0
 800710a:	d1a6      	bne.n	800705a <HAL_SPI_TransmitReceive+0x130>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007110:	b29b      	uxth	r3, r3
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1a1      	bne.n	800705a <HAL_SPI_TransmitReceive+0x130>
 8007116:	e07c      	b.n	8007212 <HAL_SPI_TransmitReceive+0x2e8>
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d002      	beq.n	8007126 <HAL_SPI_TransmitReceive+0x1fc>
 8007120:	8b7b      	ldrh	r3, [r7, #26]
 8007122:	2b01      	cmp	r3, #1
 8007124:	d16b      	bne.n	80071fe <HAL_SPI_TransmitReceive+0x2d4>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	330c      	adds	r3, #12
 8007130:	7812      	ldrb	r2, [r2, #0]
 8007132:	701a      	strb	r2, [r3, #0]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007138:	1c5a      	adds	r2, r3, #1
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	631a      	str	r2, [r3, #48]	; 0x30
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007142:	b29b      	uxth	r3, r3
 8007144:	3b01      	subs	r3, #1
 8007146:	b29a      	uxth	r2, r3
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	86da      	strh	r2, [r3, #54]	; 0x36
 800714c:	e057      	b.n	80071fe <HAL_SPI_TransmitReceive+0x2d4>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	f003 0302 	and.w	r3, r3, #2
 8007158:	2b02      	cmp	r3, #2
 800715a:	d11c      	bne.n	8007196 <HAL_SPI_TransmitReceive+0x26c>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007160:	b29b      	uxth	r3, r3
 8007162:	2b00      	cmp	r3, #0
 8007164:	d017      	beq.n	8007196 <HAL_SPI_TransmitReceive+0x26c>
 8007166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007168:	2b01      	cmp	r3, #1
 800716a:	d114      	bne.n	8007196 <HAL_SPI_TransmitReceive+0x26c>
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	330c      	adds	r3, #12
 8007176:	7812      	ldrb	r2, [r2, #0]
 8007178:	701a      	strb	r2, [r3, #0]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800717e:	1c5a      	adds	r2, r3, #1
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	631a      	str	r2, [r3, #48]	; 0x30
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007188:	b29b      	uxth	r3, r3
 800718a:	3b01      	subs	r3, #1
 800718c:	b29a      	uxth	r2, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	86da      	strh	r2, [r3, #54]	; 0x36
 8007192:	2300      	movs	r3, #0
 8007194:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f003 0301 	and.w	r3, r3, #1
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d119      	bne.n	80071d8 <HAL_SPI_TransmitReceive+0x2ae>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d014      	beq.n	80071d8 <HAL_SPI_TransmitReceive+0x2ae>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68da      	ldr	r2, [r3, #12]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b8:	b2d2      	uxtb	r2, r2
 80071ba:	701a      	strb	r2, [r3, #0]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c0:	1c5a      	adds	r2, r3, #1
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	639a      	str	r2, [r3, #56]	; 0x38
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	3b01      	subs	r3, #1
 80071ce:	b29a      	uxth	r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80071d4:	2301      	movs	r3, #1
 80071d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071d8:	f7fc fed8 	bl	8003f8c <HAL_GetTick>
 80071dc:	4602      	mov	r2, r0
 80071de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d803      	bhi.n	80071f0 <HAL_SPI_TransmitReceive+0x2c6>
 80071e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ee:	d102      	bne.n	80071f6 <HAL_SPI_TransmitReceive+0x2cc>
 80071f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d103      	bne.n	80071fe <HAL_SPI_TransmitReceive+0x2d4>
 80071f6:	2303      	movs	r3, #3
 80071f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071fc:	e029      	b.n	8007252 <HAL_SPI_TransmitReceive+0x328>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007202:	b29b      	uxth	r3, r3
 8007204:	2b00      	cmp	r3, #0
 8007206:	d1a2      	bne.n	800714e <HAL_SPI_TransmitReceive+0x224>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800720c:	b29b      	uxth	r3, r3
 800720e:	2b00      	cmp	r3, #0
 8007210:	d19d      	bne.n	800714e <HAL_SPI_TransmitReceive+0x224>
 8007212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007214:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f000 f8b2 	bl	8007380 <SPI_EndRxTxTransaction>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d006      	beq.n	8007230 <HAL_SPI_TransmitReceive+0x306>
 8007222:	2301      	movs	r3, #1
 8007224:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2220      	movs	r2, #32
 800722c:	655a      	str	r2, [r3, #84]	; 0x54
 800722e:	e010      	b.n	8007252 <HAL_SPI_TransmitReceive+0x328>
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10b      	bne.n	8007250 <HAL_SPI_TransmitReceive+0x326>
 8007238:	2300      	movs	r3, #0
 800723a:	617b      	str	r3, [r7, #20]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	617b      	str	r3, [r7, #20]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	617b      	str	r3, [r7, #20]
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	e000      	b.n	8007252 <HAL_SPI_TransmitReceive+0x328>
 8007250:	bf00      	nop
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2201      	movs	r2, #1
 8007256:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8007262:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007266:	4618      	mov	r0, r3
 8007268:	3730      	adds	r7, #48	; 0x30
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
	...

08007270 <SPI_WaitFlagStateUntilTimeout>:
 8007270:	b580      	push	{r7, lr}
 8007272:	b088      	sub	sp, #32
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	603b      	str	r3, [r7, #0]
 800727c:	4613      	mov	r3, r2
 800727e:	71fb      	strb	r3, [r7, #7]
 8007280:	f7fc fe84 	bl	8003f8c <HAL_GetTick>
 8007284:	4602      	mov	r2, r0
 8007286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007288:	1a9b      	subs	r3, r3, r2
 800728a:	683a      	ldr	r2, [r7, #0]
 800728c:	4413      	add	r3, r2
 800728e:	61fb      	str	r3, [r7, #28]
 8007290:	f7fc fe7c 	bl	8003f8c <HAL_GetTick>
 8007294:	61b8      	str	r0, [r7, #24]
 8007296:	4b39      	ldr	r3, [pc, #228]	; (800737c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	015b      	lsls	r3, r3, #5
 800729c:	0d1b      	lsrs	r3, r3, #20
 800729e:	69fa      	ldr	r2, [r7, #28]
 80072a0:	fb02 f303 	mul.w	r3, r2, r3
 80072a4:	617b      	str	r3, [r7, #20]
 80072a6:	e054      	b.n	8007352 <SPI_WaitFlagStateUntilTimeout+0xe2>
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ae:	d050      	beq.n	8007352 <SPI_WaitFlagStateUntilTimeout+0xe2>
 80072b0:	f7fc fe6c 	bl	8003f8c <HAL_GetTick>
 80072b4:	4602      	mov	r2, r0
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	69fa      	ldr	r2, [r7, #28]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d902      	bls.n	80072c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d13d      	bne.n	8007342 <SPI_WaitFlagStateUntilTimeout+0xd2>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	685a      	ldr	r2, [r3, #4]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80072d4:	605a      	str	r2, [r3, #4]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072de:	d111      	bne.n	8007304 <SPI_WaitFlagStateUntilTimeout+0x94>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072e8:	d004      	beq.n	80072f4 <SPI_WaitFlagStateUntilTimeout+0x84>
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072f2:	d107      	bne.n	8007304 <SPI_WaitFlagStateUntilTimeout+0x94>
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007302:	601a      	str	r2, [r3, #0]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007308:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800730c:	d10f      	bne.n	800732e <SPI_WaitFlagStateUntilTimeout+0xbe>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800731c:	601a      	str	r2, [r3, #0]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800732c:	601a      	str	r2, [r3, #0]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2200      	movs	r2, #0
 800733a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800733e:	2303      	movs	r3, #3
 8007340:	e017      	b.n	8007372 <SPI_WaitFlagStateUntilTimeout+0x102>
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d101      	bne.n	800734c <SPI_WaitFlagStateUntilTimeout+0xdc>
 8007348:	2300      	movs	r3, #0
 800734a:	61fb      	str	r3, [r7, #28]
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	3b01      	subs	r3, #1
 8007350:	617b      	str	r3, [r7, #20]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	689a      	ldr	r2, [r3, #8]
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	4013      	ands	r3, r2
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	429a      	cmp	r2, r3
 8007360:	bf0c      	ite	eq
 8007362:	2301      	moveq	r3, #1
 8007364:	2300      	movne	r3, #0
 8007366:	b2db      	uxtb	r3, r3
 8007368:	461a      	mov	r2, r3
 800736a:	79fb      	ldrb	r3, [r7, #7]
 800736c:	429a      	cmp	r2, r3
 800736e:	d19b      	bne.n	80072a8 <SPI_WaitFlagStateUntilTimeout+0x38>
 8007370:	2300      	movs	r3, #0
 8007372:	4618      	mov	r0, r3
 8007374:	3720      	adds	r7, #32
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	20000004 	.word	0x20000004

08007380 <SPI_EndRxTxTransaction>:
 8007380:	b580      	push	{r7, lr}
 8007382:	b088      	sub	sp, #32
 8007384:	af02      	add	r7, sp, #8
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]
 800738c:	4b1b      	ldr	r3, [pc, #108]	; (80073fc <SPI_EndRxTxTransaction+0x7c>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a1b      	ldr	r2, [pc, #108]	; (8007400 <SPI_EndRxTxTransaction+0x80>)
 8007392:	fba2 2303 	umull	r2, r3, r2, r3
 8007396:	0d5b      	lsrs	r3, r3, #21
 8007398:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800739c:	fb02 f303 	mul.w	r3, r2, r3
 80073a0:	617b      	str	r3, [r7, #20]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073aa:	d112      	bne.n	80073d2 <SPI_EndRxTxTransaction+0x52>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	9300      	str	r3, [sp, #0]
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	2200      	movs	r2, #0
 80073b4:	2180      	movs	r1, #128	; 0x80
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f7ff ff5a 	bl	8007270 <SPI_WaitFlagStateUntilTimeout>
 80073bc:	4603      	mov	r3, r0
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d016      	beq.n	80073f0 <SPI_EndRxTxTransaction+0x70>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073c6:	f043 0220 	orr.w	r2, r3, #32
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	655a      	str	r2, [r3, #84]	; 0x54
 80073ce:	2303      	movs	r3, #3
 80073d0:	e00f      	b.n	80073f2 <SPI_EndRxTxTransaction+0x72>
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d00a      	beq.n	80073ee <SPI_EndRxTxTransaction+0x6e>
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	3b01      	subs	r3, #1
 80073dc:	617b      	str	r3, [r7, #20]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073e8:	2b80      	cmp	r3, #128	; 0x80
 80073ea:	d0f2      	beq.n	80073d2 <SPI_EndRxTxTransaction+0x52>
 80073ec:	e000      	b.n	80073f0 <SPI_EndRxTxTransaction+0x70>
 80073ee:	bf00      	nop
 80073f0:	2300      	movs	r3, #0
 80073f2:	4618      	mov	r0, r3
 80073f4:	3718      	adds	r7, #24
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	20000004 	.word	0x20000004
 8007400:	165e9f81 	.word	0x165e9f81

08007404 <HAL_UART_Init>:
 8007404:	b580      	push	{r7, lr}
 8007406:	b082      	sub	sp, #8
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d101      	bne.n	8007416 <HAL_UART_Init+0x12>
 8007412:	2301      	movs	r3, #1
 8007414:	e03f      	b.n	8007496 <HAL_UART_Init+0x92>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800741c:	b2db      	uxtb	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	d106      	bne.n	8007430 <HAL_UART_Init+0x2c>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f7fc f8cc 	bl	80035c8 <HAL_UART_MspInit>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2224      	movs	r2, #36	; 0x24
 8007434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68da      	ldr	r2, [r3, #12]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007446:	60da      	str	r2, [r3, #12]
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 f829 	bl	80074a0 <UART_SetConfig>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	691a      	ldr	r2, [r3, #16]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800745c:	611a      	str	r2, [r3, #16]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	695a      	ldr	r2, [r3, #20]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800746c:	615a      	str	r2, [r3, #20]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68da      	ldr	r2, [r3, #12]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800747c:	60da      	str	r2, [r3, #12]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	641a      	str	r2, [r3, #64]	; 0x40
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2220      	movs	r2, #32
 8007488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2220      	movs	r2, #32
 8007490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007494:	2300      	movs	r3, #0
 8007496:	4618      	mov	r0, r3
 8007498:	3708      	adds	r7, #8
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
	...

080074a0 <UART_SetConfig>:
 80074a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074a4:	b0c0      	sub	sp, #256	; 0x100
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 80074ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80074b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074bc:	68d9      	ldr	r1, [r3, #12]
 80074be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	ea40 0301 	orr.w	r3, r0, r1
 80074c8:	6113      	str	r3, [r2, #16]
 80074ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074ce:	689a      	ldr	r2, [r3, #8]
 80074d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	431a      	orrs	r2, r3
 80074d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074dc:	695b      	ldr	r3, [r3, #20]
 80074de:	431a      	orrs	r2, r3
 80074e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074e4:	69db      	ldr	r3, [r3, #28]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80074ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80074f8:	f021 010c 	bic.w	r1, r1, #12
 80074fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007506:	430b      	orrs	r3, r1
 8007508:	60d3      	str	r3, [r2, #12]
 800750a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	695b      	ldr	r3, [r3, #20]
 8007512:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800751a:	6999      	ldr	r1, [r3, #24]
 800751c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	ea40 0301 	orr.w	r3, r0, r1
 8007526:	6153      	str	r3, [r2, #20]
 8007528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	4b8f      	ldr	r3, [pc, #572]	; (800776c <UART_SetConfig+0x2cc>)
 8007530:	429a      	cmp	r2, r3
 8007532:	d005      	beq.n	8007540 <UART_SetConfig+0xa0>
 8007534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	4b8d      	ldr	r3, [pc, #564]	; (8007770 <UART_SetConfig+0x2d0>)
 800753c:	429a      	cmp	r2, r3
 800753e:	d104      	bne.n	800754a <UART_SetConfig+0xaa>
 8007540:	f7ff f896 	bl	8006670 <HAL_RCC_GetPCLK2Freq>
 8007544:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007548:	e003      	b.n	8007552 <UART_SetConfig+0xb2>
 800754a:	f7ff f87d 	bl	8006648 <HAL_RCC_GetPCLK1Freq>
 800754e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007556:	69db      	ldr	r3, [r3, #28]
 8007558:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800755c:	f040 810c 	bne.w	8007778 <UART_SetConfig+0x2d8>
 8007560:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007564:	2200      	movs	r2, #0
 8007566:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800756a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800756e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007572:	4622      	mov	r2, r4
 8007574:	462b      	mov	r3, r5
 8007576:	1891      	adds	r1, r2, r2
 8007578:	65b9      	str	r1, [r7, #88]	; 0x58
 800757a:	415b      	adcs	r3, r3
 800757c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800757e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007582:	4621      	mov	r1, r4
 8007584:	eb12 0801 	adds.w	r8, r2, r1
 8007588:	4629      	mov	r1, r5
 800758a:	eb43 0901 	adc.w	r9, r3, r1
 800758e:	f04f 0200 	mov.w	r2, #0
 8007592:	f04f 0300 	mov.w	r3, #0
 8007596:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800759a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800759e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80075a2:	4690      	mov	r8, r2
 80075a4:	4699      	mov	r9, r3
 80075a6:	4623      	mov	r3, r4
 80075a8:	eb18 0303 	adds.w	r3, r8, r3
 80075ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80075b0:	462b      	mov	r3, r5
 80075b2:	eb49 0303 	adc.w	r3, r9, r3
 80075b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80075ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80075c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80075ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80075ce:	460b      	mov	r3, r1
 80075d0:	18db      	adds	r3, r3, r3
 80075d2:	653b      	str	r3, [r7, #80]	; 0x50
 80075d4:	4613      	mov	r3, r2
 80075d6:	eb42 0303 	adc.w	r3, r2, r3
 80075da:	657b      	str	r3, [r7, #84]	; 0x54
 80075dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80075e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80075e4:	f7f9 fb50 	bl	8000c88 <__aeabi_uldivmod>
 80075e8:	4602      	mov	r2, r0
 80075ea:	460b      	mov	r3, r1
 80075ec:	4b61      	ldr	r3, [pc, #388]	; (8007774 <UART_SetConfig+0x2d4>)
 80075ee:	fba3 2302 	umull	r2, r3, r3, r2
 80075f2:	095b      	lsrs	r3, r3, #5
 80075f4:	011c      	lsls	r4, r3, #4
 80075f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075fa:	2200      	movs	r2, #0
 80075fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007600:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007604:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007608:	4642      	mov	r2, r8
 800760a:	464b      	mov	r3, r9
 800760c:	1891      	adds	r1, r2, r2
 800760e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007610:	415b      	adcs	r3, r3
 8007612:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007614:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007618:	4641      	mov	r1, r8
 800761a:	eb12 0a01 	adds.w	sl, r2, r1
 800761e:	4649      	mov	r1, r9
 8007620:	eb43 0b01 	adc.w	fp, r3, r1
 8007624:	f04f 0200 	mov.w	r2, #0
 8007628:	f04f 0300 	mov.w	r3, #0
 800762c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007630:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007634:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007638:	4692      	mov	sl, r2
 800763a:	469b      	mov	fp, r3
 800763c:	4643      	mov	r3, r8
 800763e:	eb1a 0303 	adds.w	r3, sl, r3
 8007642:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007646:	464b      	mov	r3, r9
 8007648:	eb4b 0303 	adc.w	r3, fp, r3
 800764c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800765c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007660:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007664:	460b      	mov	r3, r1
 8007666:	18db      	adds	r3, r3, r3
 8007668:	643b      	str	r3, [r7, #64]	; 0x40
 800766a:	4613      	mov	r3, r2
 800766c:	eb42 0303 	adc.w	r3, r2, r3
 8007670:	647b      	str	r3, [r7, #68]	; 0x44
 8007672:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007676:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800767a:	f7f9 fb05 	bl	8000c88 <__aeabi_uldivmod>
 800767e:	4602      	mov	r2, r0
 8007680:	460b      	mov	r3, r1
 8007682:	4611      	mov	r1, r2
 8007684:	4b3b      	ldr	r3, [pc, #236]	; (8007774 <UART_SetConfig+0x2d4>)
 8007686:	fba3 2301 	umull	r2, r3, r3, r1
 800768a:	095b      	lsrs	r3, r3, #5
 800768c:	2264      	movs	r2, #100	; 0x64
 800768e:	fb02 f303 	mul.w	r3, r2, r3
 8007692:	1acb      	subs	r3, r1, r3
 8007694:	00db      	lsls	r3, r3, #3
 8007696:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800769a:	4b36      	ldr	r3, [pc, #216]	; (8007774 <UART_SetConfig+0x2d4>)
 800769c:	fba3 2302 	umull	r2, r3, r3, r2
 80076a0:	095b      	lsrs	r3, r3, #5
 80076a2:	005b      	lsls	r3, r3, #1
 80076a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80076a8:	441c      	add	r4, r3
 80076aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076ae:	2200      	movs	r2, #0
 80076b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80076b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80076b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80076bc:	4642      	mov	r2, r8
 80076be:	464b      	mov	r3, r9
 80076c0:	1891      	adds	r1, r2, r2
 80076c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80076c4:	415b      	adcs	r3, r3
 80076c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80076cc:	4641      	mov	r1, r8
 80076ce:	1851      	adds	r1, r2, r1
 80076d0:	6339      	str	r1, [r7, #48]	; 0x30
 80076d2:	4649      	mov	r1, r9
 80076d4:	414b      	adcs	r3, r1
 80076d6:	637b      	str	r3, [r7, #52]	; 0x34
 80076d8:	f04f 0200 	mov.w	r2, #0
 80076dc:	f04f 0300 	mov.w	r3, #0
 80076e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80076e4:	4659      	mov	r1, fp
 80076e6:	00cb      	lsls	r3, r1, #3
 80076e8:	4651      	mov	r1, sl
 80076ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076ee:	4651      	mov	r1, sl
 80076f0:	00ca      	lsls	r2, r1, #3
 80076f2:	4610      	mov	r0, r2
 80076f4:	4619      	mov	r1, r3
 80076f6:	4603      	mov	r3, r0
 80076f8:	4642      	mov	r2, r8
 80076fa:	189b      	adds	r3, r3, r2
 80076fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007700:	464b      	mov	r3, r9
 8007702:	460a      	mov	r2, r1
 8007704:	eb42 0303 	adc.w	r3, r2, r3
 8007708:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800770c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007718:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800771c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007720:	460b      	mov	r3, r1
 8007722:	18db      	adds	r3, r3, r3
 8007724:	62bb      	str	r3, [r7, #40]	; 0x28
 8007726:	4613      	mov	r3, r2
 8007728:	eb42 0303 	adc.w	r3, r2, r3
 800772c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800772e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007732:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007736:	f7f9 faa7 	bl	8000c88 <__aeabi_uldivmod>
 800773a:	4602      	mov	r2, r0
 800773c:	460b      	mov	r3, r1
 800773e:	4b0d      	ldr	r3, [pc, #52]	; (8007774 <UART_SetConfig+0x2d4>)
 8007740:	fba3 1302 	umull	r1, r3, r3, r2
 8007744:	095b      	lsrs	r3, r3, #5
 8007746:	2164      	movs	r1, #100	; 0x64
 8007748:	fb01 f303 	mul.w	r3, r1, r3
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	00db      	lsls	r3, r3, #3
 8007750:	3332      	adds	r3, #50	; 0x32
 8007752:	4a08      	ldr	r2, [pc, #32]	; (8007774 <UART_SetConfig+0x2d4>)
 8007754:	fba2 2303 	umull	r2, r3, r2, r3
 8007758:	095b      	lsrs	r3, r3, #5
 800775a:	f003 0207 	and.w	r2, r3, #7
 800775e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4422      	add	r2, r4
 8007766:	609a      	str	r2, [r3, #8]
 8007768:	e105      	b.n	8007976 <UART_SetConfig+0x4d6>
 800776a:	bf00      	nop
 800776c:	40011000 	.word	0x40011000
 8007770:	40011400 	.word	0x40011400
 8007774:	51eb851f 	.word	0x51eb851f
 8007778:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800777c:	2200      	movs	r2, #0
 800777e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007782:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007786:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800778a:	4642      	mov	r2, r8
 800778c:	464b      	mov	r3, r9
 800778e:	1891      	adds	r1, r2, r2
 8007790:	6239      	str	r1, [r7, #32]
 8007792:	415b      	adcs	r3, r3
 8007794:	627b      	str	r3, [r7, #36]	; 0x24
 8007796:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800779a:	4641      	mov	r1, r8
 800779c:	1854      	adds	r4, r2, r1
 800779e:	4649      	mov	r1, r9
 80077a0:	eb43 0501 	adc.w	r5, r3, r1
 80077a4:	f04f 0200 	mov.w	r2, #0
 80077a8:	f04f 0300 	mov.w	r3, #0
 80077ac:	00eb      	lsls	r3, r5, #3
 80077ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80077b2:	00e2      	lsls	r2, r4, #3
 80077b4:	4614      	mov	r4, r2
 80077b6:	461d      	mov	r5, r3
 80077b8:	4643      	mov	r3, r8
 80077ba:	18e3      	adds	r3, r4, r3
 80077bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80077c0:	464b      	mov	r3, r9
 80077c2:	eb45 0303 	adc.w	r3, r5, r3
 80077c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80077ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80077d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80077da:	f04f 0200 	mov.w	r2, #0
 80077de:	f04f 0300 	mov.w	r3, #0
 80077e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80077e6:	4629      	mov	r1, r5
 80077e8:	008b      	lsls	r3, r1, #2
 80077ea:	4621      	mov	r1, r4
 80077ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077f0:	4621      	mov	r1, r4
 80077f2:	008a      	lsls	r2, r1, #2
 80077f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80077f8:	f7f9 fa46 	bl	8000c88 <__aeabi_uldivmod>
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
 8007800:	4b60      	ldr	r3, [pc, #384]	; (8007984 <UART_SetConfig+0x4e4>)
 8007802:	fba3 2302 	umull	r2, r3, r3, r2
 8007806:	095b      	lsrs	r3, r3, #5
 8007808:	011c      	lsls	r4, r3, #4
 800780a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800780e:	2200      	movs	r2, #0
 8007810:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007814:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007818:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800781c:	4642      	mov	r2, r8
 800781e:	464b      	mov	r3, r9
 8007820:	1891      	adds	r1, r2, r2
 8007822:	61b9      	str	r1, [r7, #24]
 8007824:	415b      	adcs	r3, r3
 8007826:	61fb      	str	r3, [r7, #28]
 8007828:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800782c:	4641      	mov	r1, r8
 800782e:	1851      	adds	r1, r2, r1
 8007830:	6139      	str	r1, [r7, #16]
 8007832:	4649      	mov	r1, r9
 8007834:	414b      	adcs	r3, r1
 8007836:	617b      	str	r3, [r7, #20]
 8007838:	f04f 0200 	mov.w	r2, #0
 800783c:	f04f 0300 	mov.w	r3, #0
 8007840:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007844:	4659      	mov	r1, fp
 8007846:	00cb      	lsls	r3, r1, #3
 8007848:	4651      	mov	r1, sl
 800784a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800784e:	4651      	mov	r1, sl
 8007850:	00ca      	lsls	r2, r1, #3
 8007852:	4610      	mov	r0, r2
 8007854:	4619      	mov	r1, r3
 8007856:	4603      	mov	r3, r0
 8007858:	4642      	mov	r2, r8
 800785a:	189b      	adds	r3, r3, r2
 800785c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007860:	464b      	mov	r3, r9
 8007862:	460a      	mov	r2, r1
 8007864:	eb42 0303 	adc.w	r3, r2, r3
 8007868:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800786c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	67bb      	str	r3, [r7, #120]	; 0x78
 8007876:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007878:	f04f 0200 	mov.w	r2, #0
 800787c:	f04f 0300 	mov.w	r3, #0
 8007880:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007884:	4649      	mov	r1, r9
 8007886:	008b      	lsls	r3, r1, #2
 8007888:	4641      	mov	r1, r8
 800788a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800788e:	4641      	mov	r1, r8
 8007890:	008a      	lsls	r2, r1, #2
 8007892:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007896:	f7f9 f9f7 	bl	8000c88 <__aeabi_uldivmod>
 800789a:	4602      	mov	r2, r0
 800789c:	460b      	mov	r3, r1
 800789e:	4b39      	ldr	r3, [pc, #228]	; (8007984 <UART_SetConfig+0x4e4>)
 80078a0:	fba3 1302 	umull	r1, r3, r3, r2
 80078a4:	095b      	lsrs	r3, r3, #5
 80078a6:	2164      	movs	r1, #100	; 0x64
 80078a8:	fb01 f303 	mul.w	r3, r1, r3
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	011b      	lsls	r3, r3, #4
 80078b0:	3332      	adds	r3, #50	; 0x32
 80078b2:	4a34      	ldr	r2, [pc, #208]	; (8007984 <UART_SetConfig+0x4e4>)
 80078b4:	fba2 2303 	umull	r2, r3, r2, r3
 80078b8:	095b      	lsrs	r3, r3, #5
 80078ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078be:	441c      	add	r4, r3
 80078c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078c4:	2200      	movs	r2, #0
 80078c6:	673b      	str	r3, [r7, #112]	; 0x70
 80078c8:	677a      	str	r2, [r7, #116]	; 0x74
 80078ca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80078ce:	4642      	mov	r2, r8
 80078d0:	464b      	mov	r3, r9
 80078d2:	1891      	adds	r1, r2, r2
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	415b      	adcs	r3, r3
 80078d8:	60fb      	str	r3, [r7, #12]
 80078da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078de:	4641      	mov	r1, r8
 80078e0:	1851      	adds	r1, r2, r1
 80078e2:	6039      	str	r1, [r7, #0]
 80078e4:	4649      	mov	r1, r9
 80078e6:	414b      	adcs	r3, r1
 80078e8:	607b      	str	r3, [r7, #4]
 80078ea:	f04f 0200 	mov.w	r2, #0
 80078ee:	f04f 0300 	mov.w	r3, #0
 80078f2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80078f6:	4659      	mov	r1, fp
 80078f8:	00cb      	lsls	r3, r1, #3
 80078fa:	4651      	mov	r1, sl
 80078fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007900:	4651      	mov	r1, sl
 8007902:	00ca      	lsls	r2, r1, #3
 8007904:	4610      	mov	r0, r2
 8007906:	4619      	mov	r1, r3
 8007908:	4603      	mov	r3, r0
 800790a:	4642      	mov	r2, r8
 800790c:	189b      	adds	r3, r3, r2
 800790e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007910:	464b      	mov	r3, r9
 8007912:	460a      	mov	r2, r1
 8007914:	eb42 0303 	adc.w	r3, r2, r3
 8007918:	66fb      	str	r3, [r7, #108]	; 0x6c
 800791a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	663b      	str	r3, [r7, #96]	; 0x60
 8007924:	667a      	str	r2, [r7, #100]	; 0x64
 8007926:	f04f 0200 	mov.w	r2, #0
 800792a:	f04f 0300 	mov.w	r3, #0
 800792e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007932:	4649      	mov	r1, r9
 8007934:	008b      	lsls	r3, r1, #2
 8007936:	4641      	mov	r1, r8
 8007938:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800793c:	4641      	mov	r1, r8
 800793e:	008a      	lsls	r2, r1, #2
 8007940:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007944:	f7f9 f9a0 	bl	8000c88 <__aeabi_uldivmod>
 8007948:	4602      	mov	r2, r0
 800794a:	460b      	mov	r3, r1
 800794c:	4b0d      	ldr	r3, [pc, #52]	; (8007984 <UART_SetConfig+0x4e4>)
 800794e:	fba3 1302 	umull	r1, r3, r3, r2
 8007952:	095b      	lsrs	r3, r3, #5
 8007954:	2164      	movs	r1, #100	; 0x64
 8007956:	fb01 f303 	mul.w	r3, r1, r3
 800795a:	1ad3      	subs	r3, r2, r3
 800795c:	011b      	lsls	r3, r3, #4
 800795e:	3332      	adds	r3, #50	; 0x32
 8007960:	4a08      	ldr	r2, [pc, #32]	; (8007984 <UART_SetConfig+0x4e4>)
 8007962:	fba2 2303 	umull	r2, r3, r2, r3
 8007966:	095b      	lsrs	r3, r3, #5
 8007968:	f003 020f 	and.w	r2, r3, #15
 800796c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4422      	add	r2, r4
 8007974:	609a      	str	r2, [r3, #8]
 8007976:	bf00      	nop
 8007978:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800797c:	46bd      	mov	sp, r7
 800797e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007982:	bf00      	nop
 8007984:	51eb851f 	.word	0x51eb851f

08007988 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800798c:	4904      	ldr	r1, [pc, #16]	; (80079a0 <MX_FATFS_Init+0x18>)
 800798e:	4805      	ldr	r0, [pc, #20]	; (80079a4 <MX_FATFS_Init+0x1c>)
 8007990:	f002 ff7a 	bl	800a888 <FATFS_LinkDriver>
 8007994:	4603      	mov	r3, r0
 8007996:	461a      	mov	r2, r3
 8007998:	4b03      	ldr	r3, [pc, #12]	; (80079a8 <MX_FATFS_Init+0x20>)
 800799a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800799c:	bf00      	nop
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	2000361c 	.word	0x2000361c
 80079a4:	20000010 	.word	0x20000010
 80079a8:	20003618 	.word	0x20003618

080079ac <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80079ac:	b480      	push	{r7}
 80079ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80079b0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	4603      	mov	r3, r0
 80079c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80079c6:	79fb      	ldrb	r3, [r7, #7]
 80079c8:	4618      	mov	r0, r3
 80079ca:	f7fa f9b5 	bl	8001d38 <SD_disk_initialize>
 80079ce:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3708      	adds	r7, #8
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	4603      	mov	r3, r0
 80079e0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 80079e2:	79fb      	ldrb	r3, [r7, #7]
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7fa fa93 	bl	8001f10 <SD_disk_status>
 80079ea:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3708      	adds	r7, #8
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60b9      	str	r1, [r7, #8]
 80079fc:	607a      	str	r2, [r7, #4]
 80079fe:	603b      	str	r3, [r7, #0]
 8007a00:	4603      	mov	r3, r0
 8007a02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8007a04:	7bf8      	ldrb	r0, [r7, #15]
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	68b9      	ldr	r1, [r7, #8]
 8007a0c:	f7fa fa96 	bl	8001f3c <SD_disk_read>
 8007a10:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b084      	sub	sp, #16
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	607a      	str	r2, [r7, #4]
 8007a24:	603b      	str	r3, [r7, #0]
 8007a26:	4603      	mov	r3, r0
 8007a28:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8007a2a:	7bf8      	ldrb	r0, [r7, #15]
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	68b9      	ldr	r1, [r7, #8]
 8007a32:	f7fa faed 	bl	8002010 <SD_disk_write>
 8007a36:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3710      	adds	r7, #16
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	4603      	mov	r3, r0
 8007a48:	603a      	str	r2, [r7, #0]
 8007a4a:	71fb      	strb	r3, [r7, #7]
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8007a50:	79b9      	ldrb	r1, [r7, #6]
 8007a52:	79fb      	ldrb	r3, [r7, #7]
 8007a54:	683a      	ldr	r2, [r7, #0]
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7fa fb5e 	bl	8002118 <SD_disk_ioctl>
 8007a5c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3708      	adds	r7, #8
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
	...

08007a68 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	4603      	mov	r3, r0
 8007a70:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007a72:	79fb      	ldrb	r3, [r7, #7]
 8007a74:	4a08      	ldr	r2, [pc, #32]	; (8007a98 <disk_status+0x30>)
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	4413      	add	r3, r2
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	79fa      	ldrb	r2, [r7, #7]
 8007a80:	4905      	ldr	r1, [pc, #20]	; (8007a98 <disk_status+0x30>)
 8007a82:	440a      	add	r2, r1
 8007a84:	7a12      	ldrb	r2, [r2, #8]
 8007a86:	4610      	mov	r0, r2
 8007a88:	4798      	blx	r3
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3710      	adds	r7, #16
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	20003848 	.word	0x20003848

08007a9c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007aaa:	79fb      	ldrb	r3, [r7, #7]
 8007aac:	4a0d      	ldr	r2, [pc, #52]	; (8007ae4 <disk_initialize+0x48>)
 8007aae:	5cd3      	ldrb	r3, [r2, r3]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d111      	bne.n	8007ad8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007ab4:	79fb      	ldrb	r3, [r7, #7]
 8007ab6:	4a0b      	ldr	r2, [pc, #44]	; (8007ae4 <disk_initialize+0x48>)
 8007ab8:	2101      	movs	r1, #1
 8007aba:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007abc:	79fb      	ldrb	r3, [r7, #7]
 8007abe:	4a09      	ldr	r2, [pc, #36]	; (8007ae4 <disk_initialize+0x48>)
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	4413      	add	r3, r2
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	79fa      	ldrb	r2, [r7, #7]
 8007aca:	4906      	ldr	r1, [pc, #24]	; (8007ae4 <disk_initialize+0x48>)
 8007acc:	440a      	add	r2, r1
 8007ace:	7a12      	ldrb	r2, [r2, #8]
 8007ad0:	4610      	mov	r0, r2
 8007ad2:	4798      	blx	r3
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3710      	adds	r7, #16
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	20003848 	.word	0x20003848

08007ae8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007ae8:	b590      	push	{r4, r7, lr}
 8007aea:	b087      	sub	sp, #28
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	60b9      	str	r1, [r7, #8]
 8007af0:	607a      	str	r2, [r7, #4]
 8007af2:	603b      	str	r3, [r7, #0]
 8007af4:	4603      	mov	r3, r0
 8007af6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007af8:	7bfb      	ldrb	r3, [r7, #15]
 8007afa:	4a0a      	ldr	r2, [pc, #40]	; (8007b24 <disk_read+0x3c>)
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	4413      	add	r3, r2
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	689c      	ldr	r4, [r3, #8]
 8007b04:	7bfb      	ldrb	r3, [r7, #15]
 8007b06:	4a07      	ldr	r2, [pc, #28]	; (8007b24 <disk_read+0x3c>)
 8007b08:	4413      	add	r3, r2
 8007b0a:	7a18      	ldrb	r0, [r3, #8]
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	68b9      	ldr	r1, [r7, #8]
 8007b12:	47a0      	blx	r4
 8007b14:	4603      	mov	r3, r0
 8007b16:	75fb      	strb	r3, [r7, #23]
  return res;
 8007b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	371c      	adds	r7, #28
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd90      	pop	{r4, r7, pc}
 8007b22:	bf00      	nop
 8007b24:	20003848 	.word	0x20003848

08007b28 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007b28:	b590      	push	{r4, r7, lr}
 8007b2a:	b087      	sub	sp, #28
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60b9      	str	r1, [r7, #8]
 8007b30:	607a      	str	r2, [r7, #4]
 8007b32:	603b      	str	r3, [r7, #0]
 8007b34:	4603      	mov	r3, r0
 8007b36:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007b38:	7bfb      	ldrb	r3, [r7, #15]
 8007b3a:	4a0a      	ldr	r2, [pc, #40]	; (8007b64 <disk_write+0x3c>)
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	4413      	add	r3, r2
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	68dc      	ldr	r4, [r3, #12]
 8007b44:	7bfb      	ldrb	r3, [r7, #15]
 8007b46:	4a07      	ldr	r2, [pc, #28]	; (8007b64 <disk_write+0x3c>)
 8007b48:	4413      	add	r3, r2
 8007b4a:	7a18      	ldrb	r0, [r3, #8]
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	68b9      	ldr	r1, [r7, #8]
 8007b52:	47a0      	blx	r4
 8007b54:	4603      	mov	r3, r0
 8007b56:	75fb      	strb	r3, [r7, #23]
  return res;
 8007b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	371c      	adds	r7, #28
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd90      	pop	{r4, r7, pc}
 8007b62:	bf00      	nop
 8007b64:	20003848 	.word	0x20003848

08007b68 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	4603      	mov	r3, r0
 8007b70:	603a      	str	r2, [r7, #0]
 8007b72:	71fb      	strb	r3, [r7, #7]
 8007b74:	460b      	mov	r3, r1
 8007b76:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007b78:	79fb      	ldrb	r3, [r7, #7]
 8007b7a:	4a09      	ldr	r2, [pc, #36]	; (8007ba0 <disk_ioctl+0x38>)
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	4413      	add	r3, r2
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	79fa      	ldrb	r2, [r7, #7]
 8007b86:	4906      	ldr	r1, [pc, #24]	; (8007ba0 <disk_ioctl+0x38>)
 8007b88:	440a      	add	r2, r1
 8007b8a:	7a10      	ldrb	r0, [r2, #8]
 8007b8c:	79b9      	ldrb	r1, [r7, #6]
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	4798      	blx	r3
 8007b92:	4603      	mov	r3, r0
 8007b94:	73fb      	strb	r3, [r7, #15]
  return res;
 8007b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	20003848 	.word	0x20003848

08007ba4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	3301      	adds	r3, #1
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007bb4:	89fb      	ldrh	r3, [r7, #14]
 8007bb6:	021b      	lsls	r3, r3, #8
 8007bb8:	b21a      	sxth	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	b21b      	sxth	r3, r3
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	b21b      	sxth	r3, r3
 8007bc4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007bc6:	89fb      	ldrh	r3, [r7, #14]
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3714      	adds	r7, #20
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	3303      	adds	r3, #3
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	021b      	lsls	r3, r3, #8
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	3202      	adds	r2, #2
 8007bec:	7812      	ldrb	r2, [r2, #0]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	021b      	lsls	r3, r3, #8
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	3201      	adds	r2, #1
 8007bfa:	7812      	ldrb	r2, [r2, #0]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	021b      	lsls	r3, r3, #8
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	7812      	ldrb	r2, [r2, #0]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	60fb      	str	r3, [r7, #12]
	return rv;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3714      	adds	r7, #20
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr

08007c1a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007c1a:	b480      	push	{r7}
 8007c1c:	b083      	sub	sp, #12
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
 8007c22:	460b      	mov	r3, r1
 8007c24:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	1c5a      	adds	r2, r3, #1
 8007c2a:	607a      	str	r2, [r7, #4]
 8007c2c:	887a      	ldrh	r2, [r7, #2]
 8007c2e:	b2d2      	uxtb	r2, r2
 8007c30:	701a      	strb	r2, [r3, #0]
 8007c32:	887b      	ldrh	r3, [r7, #2]
 8007c34:	0a1b      	lsrs	r3, r3, #8
 8007c36:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	1c5a      	adds	r2, r3, #1
 8007c3c:	607a      	str	r2, [r7, #4]
 8007c3e:	887a      	ldrh	r2, [r7, #2]
 8007c40:	b2d2      	uxtb	r2, r2
 8007c42:	701a      	strb	r2, [r3, #0]
}
 8007c44:	bf00      	nop
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	1c5a      	adds	r2, r3, #1
 8007c5e:	607a      	str	r2, [r7, #4]
 8007c60:	683a      	ldr	r2, [r7, #0]
 8007c62:	b2d2      	uxtb	r2, r2
 8007c64:	701a      	strb	r2, [r3, #0]
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	0a1b      	lsrs	r3, r3, #8
 8007c6a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	1c5a      	adds	r2, r3, #1
 8007c70:	607a      	str	r2, [r7, #4]
 8007c72:	683a      	ldr	r2, [r7, #0]
 8007c74:	b2d2      	uxtb	r2, r2
 8007c76:	701a      	strb	r2, [r3, #0]
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	0a1b      	lsrs	r3, r3, #8
 8007c7c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	1c5a      	adds	r2, r3, #1
 8007c82:	607a      	str	r2, [r7, #4]
 8007c84:	683a      	ldr	r2, [r7, #0]
 8007c86:	b2d2      	uxtb	r2, r2
 8007c88:	701a      	strb	r2, [r3, #0]
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	0a1b      	lsrs	r3, r3, #8
 8007c8e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	1c5a      	adds	r2, r3, #1
 8007c94:	607a      	str	r2, [r7, #4]
 8007c96:	683a      	ldr	r2, [r7, #0]
 8007c98:	b2d2      	uxtb	r2, r2
 8007c9a:	701a      	strb	r2, [r3, #0]
}
 8007c9c:	bf00      	nop
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007ca8:	b480      	push	{r7}
 8007caa:	b087      	sub	sp, #28
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00d      	beq.n	8007cde <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007cc2:	693a      	ldr	r2, [r7, #16]
 8007cc4:	1c53      	adds	r3, r2, #1
 8007cc6:	613b      	str	r3, [r7, #16]
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	1c59      	adds	r1, r3, #1
 8007ccc:	6179      	str	r1, [r7, #20]
 8007cce:	7812      	ldrb	r2, [r2, #0]
 8007cd0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	3b01      	subs	r3, #1
 8007cd6:	607b      	str	r3, [r7, #4]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d1f1      	bne.n	8007cc2 <mem_cpy+0x1a>
	}
}
 8007cde:	bf00      	nop
 8007ce0:	371c      	adds	r7, #28
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr

08007cea <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007cea:	b480      	push	{r7}
 8007cec:	b087      	sub	sp, #28
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	60f8      	str	r0, [r7, #12]
 8007cf2:	60b9      	str	r1, [r7, #8]
 8007cf4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	1c5a      	adds	r2, r3, #1
 8007cfe:	617a      	str	r2, [r7, #20]
 8007d00:	68ba      	ldr	r2, [r7, #8]
 8007d02:	b2d2      	uxtb	r2, r2
 8007d04:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	607b      	str	r3, [r7, #4]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d1f3      	bne.n	8007cfa <mem_set+0x10>
}
 8007d12:	bf00      	nop
 8007d14:	bf00      	nop
 8007d16:	371c      	adds	r7, #28
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007d20:	b480      	push	{r7}
 8007d22:	b089      	sub	sp, #36	; 0x24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	61fb      	str	r3, [r7, #28]
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007d34:	2300      	movs	r3, #0
 8007d36:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	1c5a      	adds	r2, r3, #1
 8007d3c:	61fa      	str	r2, [r7, #28]
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	4619      	mov	r1, r3
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	1c5a      	adds	r2, r3, #1
 8007d46:	61ba      	str	r2, [r7, #24]
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	1acb      	subs	r3, r1, r3
 8007d4c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	3b01      	subs	r3, #1
 8007d52:	607b      	str	r3, [r7, #4]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d002      	beq.n	8007d60 <mem_cmp+0x40>
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d0eb      	beq.n	8007d38 <mem_cmp+0x18>

	return r;
 8007d60:	697b      	ldr	r3, [r7, #20]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3724      	adds	r7, #36	; 0x24
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007d6e:	b480      	push	{r7}
 8007d70:	b083      	sub	sp, #12
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
 8007d76:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007d78:	e002      	b.n	8007d80 <chk_chr+0x12>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	607b      	str	r3, [r7, #4]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d005      	beq.n	8007d94 <chk_chr+0x26>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d1f2      	bne.n	8007d7a <chk_chr+0xc>
	return *str;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	781b      	ldrb	r3, [r3, #0]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b085      	sub	sp, #20
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007dae:	2300      	movs	r3, #0
 8007db0:	60bb      	str	r3, [r7, #8]
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	60fb      	str	r3, [r7, #12]
 8007db6:	e029      	b.n	8007e0c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007db8:	4a27      	ldr	r2, [pc, #156]	; (8007e58 <chk_lock+0xb4>)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	011b      	lsls	r3, r3, #4
 8007dbe:	4413      	add	r3, r2
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d01d      	beq.n	8007e02 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007dc6:	4a24      	ldr	r2, [pc, #144]	; (8007e58 <chk_lock+0xb4>)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	011b      	lsls	r3, r3, #4
 8007dcc:	4413      	add	r3, r2
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d116      	bne.n	8007e06 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007dd8:	4a1f      	ldr	r2, [pc, #124]	; (8007e58 <chk_lock+0xb4>)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	011b      	lsls	r3, r3, #4
 8007dde:	4413      	add	r3, r2
 8007de0:	3304      	adds	r3, #4
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d10c      	bne.n	8007e06 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007dec:	4a1a      	ldr	r2, [pc, #104]	; (8007e58 <chk_lock+0xb4>)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	011b      	lsls	r3, r3, #4
 8007df2:	4413      	add	r3, r2
 8007df4:	3308      	adds	r3, #8
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d102      	bne.n	8007e06 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007e00:	e007      	b.n	8007e12 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007e02:	2301      	movs	r3, #1
 8007e04:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	60fb      	str	r3, [r7, #12]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d9d2      	bls.n	8007db8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d109      	bne.n	8007e2c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d102      	bne.n	8007e24 <chk_lock+0x80>
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	d101      	bne.n	8007e28 <chk_lock+0x84>
 8007e24:	2300      	movs	r3, #0
 8007e26:	e010      	b.n	8007e4a <chk_lock+0xa6>
 8007e28:	2312      	movs	r3, #18
 8007e2a:	e00e      	b.n	8007e4a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d108      	bne.n	8007e44 <chk_lock+0xa0>
 8007e32:	4a09      	ldr	r2, [pc, #36]	; (8007e58 <chk_lock+0xb4>)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	011b      	lsls	r3, r3, #4
 8007e38:	4413      	add	r3, r2
 8007e3a:	330c      	adds	r3, #12
 8007e3c:	881b      	ldrh	r3, [r3, #0]
 8007e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e42:	d101      	bne.n	8007e48 <chk_lock+0xa4>
 8007e44:	2310      	movs	r3, #16
 8007e46:	e000      	b.n	8007e4a <chk_lock+0xa6>
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3714      	adds	r7, #20
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
 8007e58:	20003628 	.word	0x20003628

08007e5c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007e62:	2300      	movs	r3, #0
 8007e64:	607b      	str	r3, [r7, #4]
 8007e66:	e002      	b.n	8007e6e <enq_lock+0x12>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	607b      	str	r3, [r7, #4]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d806      	bhi.n	8007e82 <enq_lock+0x26>
 8007e74:	4a09      	ldr	r2, [pc, #36]	; (8007e9c <enq_lock+0x40>)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	011b      	lsls	r3, r3, #4
 8007e7a:	4413      	add	r3, r2
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1f2      	bne.n	8007e68 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2b02      	cmp	r3, #2
 8007e86:	bf14      	ite	ne
 8007e88:	2301      	movne	r3, #1
 8007e8a:	2300      	moveq	r3, #0
 8007e8c:	b2db      	uxtb	r3, r3
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	20003628 	.word	0x20003628

08007ea0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b085      	sub	sp, #20
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007eaa:	2300      	movs	r3, #0
 8007eac:	60fb      	str	r3, [r7, #12]
 8007eae:	e01f      	b.n	8007ef0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007eb0:	4a41      	ldr	r2, [pc, #260]	; (8007fb8 <inc_lock+0x118>)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	011b      	lsls	r3, r3, #4
 8007eb6:	4413      	add	r3, r2
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d113      	bne.n	8007eea <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007ec2:	4a3d      	ldr	r2, [pc, #244]	; (8007fb8 <inc_lock+0x118>)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	011b      	lsls	r3, r3, #4
 8007ec8:	4413      	add	r3, r2
 8007eca:	3304      	adds	r3, #4
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d109      	bne.n	8007eea <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007ed6:	4a38      	ldr	r2, [pc, #224]	; (8007fb8 <inc_lock+0x118>)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	011b      	lsls	r3, r3, #4
 8007edc:	4413      	add	r3, r2
 8007ede:	3308      	adds	r3, #8
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d006      	beq.n	8007ef8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	3301      	adds	r3, #1
 8007eee:	60fb      	str	r3, [r7, #12]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d9dc      	bls.n	8007eb0 <inc_lock+0x10>
 8007ef6:	e000      	b.n	8007efa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007ef8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	d132      	bne.n	8007f66 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007f00:	2300      	movs	r3, #0
 8007f02:	60fb      	str	r3, [r7, #12]
 8007f04:	e002      	b.n	8007f0c <inc_lock+0x6c>
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	3301      	adds	r3, #1
 8007f0a:	60fb      	str	r3, [r7, #12]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d806      	bhi.n	8007f20 <inc_lock+0x80>
 8007f12:	4a29      	ldr	r2, [pc, #164]	; (8007fb8 <inc_lock+0x118>)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	011b      	lsls	r3, r3, #4
 8007f18:	4413      	add	r3, r2
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1f2      	bne.n	8007f06 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d101      	bne.n	8007f2a <inc_lock+0x8a>
 8007f26:	2300      	movs	r3, #0
 8007f28:	e040      	b.n	8007fac <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	4922      	ldr	r1, [pc, #136]	; (8007fb8 <inc_lock+0x118>)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	011b      	lsls	r3, r3, #4
 8007f34:	440b      	add	r3, r1
 8007f36:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	689a      	ldr	r2, [r3, #8]
 8007f3c:	491e      	ldr	r1, [pc, #120]	; (8007fb8 <inc_lock+0x118>)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	011b      	lsls	r3, r3, #4
 8007f42:	440b      	add	r3, r1
 8007f44:	3304      	adds	r3, #4
 8007f46:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	695a      	ldr	r2, [r3, #20]
 8007f4c:	491a      	ldr	r1, [pc, #104]	; (8007fb8 <inc_lock+0x118>)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	011b      	lsls	r3, r3, #4
 8007f52:	440b      	add	r3, r1
 8007f54:	3308      	adds	r3, #8
 8007f56:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007f58:	4a17      	ldr	r2, [pc, #92]	; (8007fb8 <inc_lock+0x118>)
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	011b      	lsls	r3, r3, #4
 8007f5e:	4413      	add	r3, r2
 8007f60:	330c      	adds	r3, #12
 8007f62:	2200      	movs	r2, #0
 8007f64:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d009      	beq.n	8007f80 <inc_lock+0xe0>
 8007f6c:	4a12      	ldr	r2, [pc, #72]	; (8007fb8 <inc_lock+0x118>)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	011b      	lsls	r3, r3, #4
 8007f72:	4413      	add	r3, r2
 8007f74:	330c      	adds	r3, #12
 8007f76:	881b      	ldrh	r3, [r3, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d001      	beq.n	8007f80 <inc_lock+0xe0>
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	e015      	b.n	8007fac <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d108      	bne.n	8007f98 <inc_lock+0xf8>
 8007f86:	4a0c      	ldr	r2, [pc, #48]	; (8007fb8 <inc_lock+0x118>)
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	011b      	lsls	r3, r3, #4
 8007f8c:	4413      	add	r3, r2
 8007f8e:	330c      	adds	r3, #12
 8007f90:	881b      	ldrh	r3, [r3, #0]
 8007f92:	3301      	adds	r3, #1
 8007f94:	b29a      	uxth	r2, r3
 8007f96:	e001      	b.n	8007f9c <inc_lock+0xfc>
 8007f98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f9c:	4906      	ldr	r1, [pc, #24]	; (8007fb8 <inc_lock+0x118>)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	011b      	lsls	r3, r3, #4
 8007fa2:	440b      	add	r3, r1
 8007fa4:	330c      	adds	r3, #12
 8007fa6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	3301      	adds	r3, #1
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3714      	adds	r7, #20
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr
 8007fb8:	20003628 	.word	0x20003628

08007fbc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b085      	sub	sp, #20
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	3b01      	subs	r3, #1
 8007fc8:	607b      	str	r3, [r7, #4]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d825      	bhi.n	800801c <dec_lock+0x60>
		n = Files[i].ctr;
 8007fd0:	4a17      	ldr	r2, [pc, #92]	; (8008030 <dec_lock+0x74>)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	011b      	lsls	r3, r3, #4
 8007fd6:	4413      	add	r3, r2
 8007fd8:	330c      	adds	r3, #12
 8007fda:	881b      	ldrh	r3, [r3, #0]
 8007fdc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007fde:	89fb      	ldrh	r3, [r7, #14]
 8007fe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fe4:	d101      	bne.n	8007fea <dec_lock+0x2e>
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007fea:	89fb      	ldrh	r3, [r7, #14]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d002      	beq.n	8007ff6 <dec_lock+0x3a>
 8007ff0:	89fb      	ldrh	r3, [r7, #14]
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007ff6:	4a0e      	ldr	r2, [pc, #56]	; (8008030 <dec_lock+0x74>)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	011b      	lsls	r3, r3, #4
 8007ffc:	4413      	add	r3, r2
 8007ffe:	330c      	adds	r3, #12
 8008000:	89fa      	ldrh	r2, [r7, #14]
 8008002:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008004:	89fb      	ldrh	r3, [r7, #14]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d105      	bne.n	8008016 <dec_lock+0x5a>
 800800a:	4a09      	ldr	r2, [pc, #36]	; (8008030 <dec_lock+0x74>)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	011b      	lsls	r3, r3, #4
 8008010:	4413      	add	r3, r2
 8008012:	2200      	movs	r2, #0
 8008014:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008016:	2300      	movs	r3, #0
 8008018:	737b      	strb	r3, [r7, #13]
 800801a:	e001      	b.n	8008020 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800801c:	2302      	movs	r3, #2
 800801e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008020:	7b7b      	ldrb	r3, [r7, #13]
}
 8008022:	4618      	mov	r0, r3
 8008024:	3714      	adds	r7, #20
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	20003628 	.word	0x20003628

08008034 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008034:	b480      	push	{r7}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800803c:	2300      	movs	r3, #0
 800803e:	60fb      	str	r3, [r7, #12]
 8008040:	e010      	b.n	8008064 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008042:	4a0d      	ldr	r2, [pc, #52]	; (8008078 <clear_lock+0x44>)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	011b      	lsls	r3, r3, #4
 8008048:	4413      	add	r3, r2
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	429a      	cmp	r2, r3
 8008050:	d105      	bne.n	800805e <clear_lock+0x2a>
 8008052:	4a09      	ldr	r2, [pc, #36]	; (8008078 <clear_lock+0x44>)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	011b      	lsls	r3, r3, #4
 8008058:	4413      	add	r3, r2
 800805a:	2200      	movs	r2, #0
 800805c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	3301      	adds	r3, #1
 8008062:	60fb      	str	r3, [r7, #12]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2b01      	cmp	r3, #1
 8008068:	d9eb      	bls.n	8008042 <clear_lock+0xe>
	}
}
 800806a:	bf00      	nop
 800806c:	bf00      	nop
 800806e:	3714      	adds	r7, #20
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr
 8008078:	20003628 	.word	0x20003628

0800807c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b086      	sub	sp, #24
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008084:	2300      	movs	r3, #0
 8008086:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	78db      	ldrb	r3, [r3, #3]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d034      	beq.n	80080fa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008094:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	7858      	ldrb	r0, [r3, #1]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80080a0:	2301      	movs	r3, #1
 80080a2:	697a      	ldr	r2, [r7, #20]
 80080a4:	f7ff fd40 	bl	8007b28 <disk_write>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d002      	beq.n	80080b4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	73fb      	strb	r3, [r7, #15]
 80080b2:	e022      	b.n	80080fa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080be:	697a      	ldr	r2, [r7, #20]
 80080c0:	1ad2      	subs	r2, r2, r3
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6a1b      	ldr	r3, [r3, #32]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d217      	bcs.n	80080fa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	789b      	ldrb	r3, [r3, #2]
 80080ce:	613b      	str	r3, [r7, #16]
 80080d0:	e010      	b.n	80080f4 <sync_window+0x78>
					wsect += fs->fsize;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a1b      	ldr	r3, [r3, #32]
 80080d6:	697a      	ldr	r2, [r7, #20]
 80080d8:	4413      	add	r3, r2
 80080da:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	7858      	ldrb	r0, [r3, #1]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80080e6:	2301      	movs	r3, #1
 80080e8:	697a      	ldr	r2, [r7, #20]
 80080ea:	f7ff fd1d 	bl	8007b28 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	3b01      	subs	r3, #1
 80080f2:	613b      	str	r3, [r7, #16]
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d8eb      	bhi.n	80080d2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80080fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3718      	adds	r7, #24
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800810e:	2300      	movs	r3, #0
 8008110:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008116:	683a      	ldr	r2, [r7, #0]
 8008118:	429a      	cmp	r2, r3
 800811a:	d01b      	beq.n	8008154 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f7ff ffad 	bl	800807c <sync_window>
 8008122:	4603      	mov	r3, r0
 8008124:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008126:	7bfb      	ldrb	r3, [r7, #15]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d113      	bne.n	8008154 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	7858      	ldrb	r0, [r3, #1]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008136:	2301      	movs	r3, #1
 8008138:	683a      	ldr	r2, [r7, #0]
 800813a:	f7ff fcd5 	bl	8007ae8 <disk_read>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d004      	beq.n	800814e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008144:	f04f 33ff 	mov.w	r3, #4294967295
 8008148:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800814a:	2301      	movs	r3, #1
 800814c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	683a      	ldr	r2, [r7, #0]
 8008152:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8008154:	7bfb      	ldrb	r3, [r7, #15]
}
 8008156:	4618      	mov	r0, r3
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
	...

08008160 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f7ff ff87 	bl	800807c <sync_window>
 800816e:	4603      	mov	r3, r0
 8008170:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008172:	7bfb      	ldrb	r3, [r7, #15]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d159      	bne.n	800822c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	2b03      	cmp	r3, #3
 800817e:	d149      	bne.n	8008214 <sync_fs+0xb4>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	791b      	ldrb	r3, [r3, #4]
 8008184:	2b01      	cmp	r3, #1
 8008186:	d145      	bne.n	8008214 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	899b      	ldrh	r3, [r3, #12]
 8008192:	461a      	mov	r2, r3
 8008194:	2100      	movs	r1, #0
 8008196:	f7ff fda8 	bl	8007cea <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	3338      	adds	r3, #56	; 0x38
 800819e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80081a2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7ff fd37 	bl	8007c1a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	3338      	adds	r3, #56	; 0x38
 80081b0:	4921      	ldr	r1, [pc, #132]	; (8008238 <sync_fs+0xd8>)
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7ff fd4c 	bl	8007c50 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	3338      	adds	r3, #56	; 0x38
 80081bc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80081c0:	491e      	ldr	r1, [pc, #120]	; (800823c <sync_fs+0xdc>)
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7ff fd44 	bl	8007c50 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	3338      	adds	r3, #56	; 0x38
 80081cc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	699b      	ldr	r3, [r3, #24]
 80081d4:	4619      	mov	r1, r3
 80081d6:	4610      	mov	r0, r2
 80081d8:	f7ff fd3a 	bl	8007c50 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	3338      	adds	r3, #56	; 0x38
 80081e0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	695b      	ldr	r3, [r3, #20]
 80081e8:	4619      	mov	r1, r3
 80081ea:	4610      	mov	r0, r2
 80081ec:	f7ff fd30 	bl	8007c50 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f4:	1c5a      	adds	r2, r3, #1
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	7858      	ldrb	r0, [r3, #1]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008208:	2301      	movs	r3, #1
 800820a:	f7ff fc8d 	bl	8007b28 <disk_write>
			fs->fsi_flag = 0;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	785b      	ldrb	r3, [r3, #1]
 8008218:	2200      	movs	r2, #0
 800821a:	2100      	movs	r1, #0
 800821c:	4618      	mov	r0, r3
 800821e:	f7ff fca3 	bl	8007b68 <disk_ioctl>
 8008222:	4603      	mov	r3, r0
 8008224:	2b00      	cmp	r3, #0
 8008226:	d001      	beq.n	800822c <sync_fs+0xcc>
 8008228:	2301      	movs	r3, #1
 800822a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800822c:	7bfb      	ldrb	r3, [r7, #15]
}
 800822e:	4618      	mov	r0, r3
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	41615252 	.word	0x41615252
 800823c:	61417272 	.word	0x61417272

08008240 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008240:	b480      	push	{r7}
 8008242:	b083      	sub	sp, #12
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	3b02      	subs	r3, #2
 800824e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	69db      	ldr	r3, [r3, #28]
 8008254:	3b02      	subs	r3, #2
 8008256:	683a      	ldr	r2, [r7, #0]
 8008258:	429a      	cmp	r2, r3
 800825a:	d301      	bcc.n	8008260 <clust2sect+0x20>
 800825c:	2300      	movs	r3, #0
 800825e:	e008      	b.n	8008272 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	895b      	ldrh	r3, [r3, #10]
 8008264:	461a      	mov	r2, r3
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	fb03 f202 	mul.w	r2, r3, r2
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008270:	4413      	add	r3, r2
}
 8008272:	4618      	mov	r0, r3
 8008274:	370c      	adds	r7, #12
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr

0800827e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b086      	sub	sp, #24
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
 8008286:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	2b01      	cmp	r3, #1
 8008292:	d904      	bls.n	800829e <get_fat+0x20>
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	69db      	ldr	r3, [r3, #28]
 8008298:	683a      	ldr	r2, [r7, #0]
 800829a:	429a      	cmp	r2, r3
 800829c:	d302      	bcc.n	80082a4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800829e:	2301      	movs	r3, #1
 80082a0:	617b      	str	r3, [r7, #20]
 80082a2:	e0bb      	b.n	800841c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80082a4:	f04f 33ff 	mov.w	r3, #4294967295
 80082a8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	2b03      	cmp	r3, #3
 80082b0:	f000 8083 	beq.w	80083ba <get_fat+0x13c>
 80082b4:	2b03      	cmp	r3, #3
 80082b6:	f300 80a7 	bgt.w	8008408 <get_fat+0x18a>
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d002      	beq.n	80082c4 <get_fat+0x46>
 80082be:	2b02      	cmp	r3, #2
 80082c0:	d056      	beq.n	8008370 <get_fat+0xf2>
 80082c2:	e0a1      	b.n	8008408 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	60fb      	str	r3, [r7, #12]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	085b      	lsrs	r3, r3, #1
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	4413      	add	r3, r2
 80082d0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	899b      	ldrh	r3, [r3, #12]
 80082da:	4619      	mov	r1, r3
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	fbb3 f3f1 	udiv	r3, r3, r1
 80082e2:	4413      	add	r3, r2
 80082e4:	4619      	mov	r1, r3
 80082e6:	6938      	ldr	r0, [r7, #16]
 80082e8:	f7ff ff0c 	bl	8008104 <move_window>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	f040 808d 	bne.w	800840e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	1c5a      	adds	r2, r3, #1
 80082f8:	60fa      	str	r2, [r7, #12]
 80082fa:	693a      	ldr	r2, [r7, #16]
 80082fc:	8992      	ldrh	r2, [r2, #12]
 80082fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8008302:	fb01 f202 	mul.w	r2, r1, r2
 8008306:	1a9b      	subs	r3, r3, r2
 8008308:	693a      	ldr	r2, [r7, #16]
 800830a:	4413      	add	r3, r2
 800830c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008310:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	899b      	ldrh	r3, [r3, #12]
 800831a:	4619      	mov	r1, r3
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008322:	4413      	add	r3, r2
 8008324:	4619      	mov	r1, r3
 8008326:	6938      	ldr	r0, [r7, #16]
 8008328:	f7ff feec 	bl	8008104 <move_window>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d16f      	bne.n	8008412 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	899b      	ldrh	r3, [r3, #12]
 8008336:	461a      	mov	r2, r3
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	fbb3 f1f2 	udiv	r1, r3, r2
 800833e:	fb01 f202 	mul.w	r2, r1, r2
 8008342:	1a9b      	subs	r3, r3, r2
 8008344:	693a      	ldr	r2, [r7, #16]
 8008346:	4413      	add	r3, r2
 8008348:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800834c:	021b      	lsls	r3, r3, #8
 800834e:	461a      	mov	r2, r3
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	4313      	orrs	r3, r2
 8008354:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	f003 0301 	and.w	r3, r3, #1
 800835c:	2b00      	cmp	r3, #0
 800835e:	d002      	beq.n	8008366 <get_fat+0xe8>
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	091b      	lsrs	r3, r3, #4
 8008364:	e002      	b.n	800836c <get_fat+0xee>
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800836c:	617b      	str	r3, [r7, #20]
			break;
 800836e:	e055      	b.n	800841c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	899b      	ldrh	r3, [r3, #12]
 8008378:	085b      	lsrs	r3, r3, #1
 800837a:	b29b      	uxth	r3, r3
 800837c:	4619      	mov	r1, r3
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	fbb3 f3f1 	udiv	r3, r3, r1
 8008384:	4413      	add	r3, r2
 8008386:	4619      	mov	r1, r3
 8008388:	6938      	ldr	r0, [r7, #16]
 800838a:	f7ff febb 	bl	8008104 <move_window>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d140      	bne.n	8008416 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	005b      	lsls	r3, r3, #1
 800839e:	693a      	ldr	r2, [r7, #16]
 80083a0:	8992      	ldrh	r2, [r2, #12]
 80083a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80083a6:	fb00 f202 	mul.w	r2, r0, r2
 80083aa:	1a9b      	subs	r3, r3, r2
 80083ac:	440b      	add	r3, r1
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7ff fbf8 	bl	8007ba4 <ld_word>
 80083b4:	4603      	mov	r3, r0
 80083b6:	617b      	str	r3, [r7, #20]
			break;
 80083b8:	e030      	b.n	800841c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	899b      	ldrh	r3, [r3, #12]
 80083c2:	089b      	lsrs	r3, r3, #2
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	4619      	mov	r1, r3
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80083ce:	4413      	add	r3, r2
 80083d0:	4619      	mov	r1, r3
 80083d2:	6938      	ldr	r0, [r7, #16]
 80083d4:	f7ff fe96 	bl	8008104 <move_window>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d11d      	bne.n	800841a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	693a      	ldr	r2, [r7, #16]
 80083ea:	8992      	ldrh	r2, [r2, #12]
 80083ec:	fbb3 f0f2 	udiv	r0, r3, r2
 80083f0:	fb00 f202 	mul.w	r2, r0, r2
 80083f4:	1a9b      	subs	r3, r3, r2
 80083f6:	440b      	add	r3, r1
 80083f8:	4618      	mov	r0, r3
 80083fa:	f7ff fbeb 	bl	8007bd4 <ld_dword>
 80083fe:	4603      	mov	r3, r0
 8008400:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008404:	617b      	str	r3, [r7, #20]
			break;
 8008406:	e009      	b.n	800841c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008408:	2301      	movs	r3, #1
 800840a:	617b      	str	r3, [r7, #20]
 800840c:	e006      	b.n	800841c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800840e:	bf00      	nop
 8008410:	e004      	b.n	800841c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008412:	bf00      	nop
 8008414:	e002      	b.n	800841c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008416:	bf00      	nop
 8008418:	e000      	b.n	800841c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800841a:	bf00      	nop
		}
	}

	return val;
 800841c:	697b      	ldr	r3, [r7, #20]
}
 800841e:	4618      	mov	r0, r3
 8008420:	3718      	adds	r7, #24
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008426:	b590      	push	{r4, r7, lr}
 8008428:	b089      	sub	sp, #36	; 0x24
 800842a:	af00      	add	r7, sp, #0
 800842c:	60f8      	str	r0, [r7, #12]
 800842e:	60b9      	str	r1, [r7, #8]
 8008430:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008432:	2302      	movs	r3, #2
 8008434:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	2b01      	cmp	r3, #1
 800843a:	f240 8102 	bls.w	8008642 <put_fat+0x21c>
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	69db      	ldr	r3, [r3, #28]
 8008442:	68ba      	ldr	r2, [r7, #8]
 8008444:	429a      	cmp	r2, r3
 8008446:	f080 80fc 	bcs.w	8008642 <put_fat+0x21c>
		switch (fs->fs_type) {
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	2b03      	cmp	r3, #3
 8008450:	f000 80b6 	beq.w	80085c0 <put_fat+0x19a>
 8008454:	2b03      	cmp	r3, #3
 8008456:	f300 80fd 	bgt.w	8008654 <put_fat+0x22e>
 800845a:	2b01      	cmp	r3, #1
 800845c:	d003      	beq.n	8008466 <put_fat+0x40>
 800845e:	2b02      	cmp	r3, #2
 8008460:	f000 8083 	beq.w	800856a <put_fat+0x144>
 8008464:	e0f6      	b.n	8008654 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	61bb      	str	r3, [r7, #24]
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	085b      	lsrs	r3, r3, #1
 800846e:	69ba      	ldr	r2, [r7, #24]
 8008470:	4413      	add	r3, r2
 8008472:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	899b      	ldrh	r3, [r3, #12]
 800847c:	4619      	mov	r1, r3
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	fbb3 f3f1 	udiv	r3, r3, r1
 8008484:	4413      	add	r3, r2
 8008486:	4619      	mov	r1, r3
 8008488:	68f8      	ldr	r0, [r7, #12]
 800848a:	f7ff fe3b 	bl	8008104 <move_window>
 800848e:	4603      	mov	r3, r0
 8008490:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008492:	7ffb      	ldrb	r3, [r7, #31]
 8008494:	2b00      	cmp	r3, #0
 8008496:	f040 80d6 	bne.w	8008646 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80084a0:	69bb      	ldr	r3, [r7, #24]
 80084a2:	1c5a      	adds	r2, r3, #1
 80084a4:	61ba      	str	r2, [r7, #24]
 80084a6:	68fa      	ldr	r2, [r7, #12]
 80084a8:	8992      	ldrh	r2, [r2, #12]
 80084aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80084ae:	fb00 f202 	mul.w	r2, r0, r2
 80084b2:	1a9b      	subs	r3, r3, r2
 80084b4:	440b      	add	r3, r1
 80084b6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	f003 0301 	and.w	r3, r3, #1
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00d      	beq.n	80084de <put_fat+0xb8>
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	b25b      	sxtb	r3, r3
 80084c8:	f003 030f 	and.w	r3, r3, #15
 80084cc:	b25a      	sxtb	r2, r3
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	011b      	lsls	r3, r3, #4
 80084d4:	b25b      	sxtb	r3, r3
 80084d6:	4313      	orrs	r3, r2
 80084d8:	b25b      	sxtb	r3, r3
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	e001      	b.n	80084e2 <put_fat+0xbc>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	697a      	ldr	r2, [r7, #20]
 80084e4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2201      	movs	r2, #1
 80084ea:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	899b      	ldrh	r3, [r3, #12]
 80084f4:	4619      	mov	r1, r3
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80084fc:	4413      	add	r3, r2
 80084fe:	4619      	mov	r1, r3
 8008500:	68f8      	ldr	r0, [r7, #12]
 8008502:	f7ff fdff 	bl	8008104 <move_window>
 8008506:	4603      	mov	r3, r0
 8008508:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800850a:	7ffb      	ldrb	r3, [r7, #31]
 800850c:	2b00      	cmp	r3, #0
 800850e:	f040 809c 	bne.w	800864a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	899b      	ldrh	r3, [r3, #12]
 800851c:	461a      	mov	r2, r3
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	fbb3 f0f2 	udiv	r0, r3, r2
 8008524:	fb00 f202 	mul.w	r2, r0, r2
 8008528:	1a9b      	subs	r3, r3, r2
 800852a:	440b      	add	r3, r1
 800852c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	f003 0301 	and.w	r3, r3, #1
 8008534:	2b00      	cmp	r3, #0
 8008536:	d003      	beq.n	8008540 <put_fat+0x11a>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	091b      	lsrs	r3, r3, #4
 800853c:	b2db      	uxtb	r3, r3
 800853e:	e00e      	b.n	800855e <put_fat+0x138>
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	b25b      	sxtb	r3, r3
 8008546:	f023 030f 	bic.w	r3, r3, #15
 800854a:	b25a      	sxtb	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	0a1b      	lsrs	r3, r3, #8
 8008550:	b25b      	sxtb	r3, r3
 8008552:	f003 030f 	and.w	r3, r3, #15
 8008556:	b25b      	sxtb	r3, r3
 8008558:	4313      	orrs	r3, r2
 800855a:	b25b      	sxtb	r3, r3
 800855c:	b2db      	uxtb	r3, r3
 800855e:	697a      	ldr	r2, [r7, #20]
 8008560:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2201      	movs	r2, #1
 8008566:	70da      	strb	r2, [r3, #3]
			break;
 8008568:	e074      	b.n	8008654 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	899b      	ldrh	r3, [r3, #12]
 8008572:	085b      	lsrs	r3, r3, #1
 8008574:	b29b      	uxth	r3, r3
 8008576:	4619      	mov	r1, r3
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	fbb3 f3f1 	udiv	r3, r3, r1
 800857e:	4413      	add	r3, r2
 8008580:	4619      	mov	r1, r3
 8008582:	68f8      	ldr	r0, [r7, #12]
 8008584:	f7ff fdbe 	bl	8008104 <move_window>
 8008588:	4603      	mov	r3, r0
 800858a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800858c:	7ffb      	ldrb	r3, [r7, #31]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d15d      	bne.n	800864e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	005b      	lsls	r3, r3, #1
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	8992      	ldrh	r2, [r2, #12]
 80085a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80085a4:	fb00 f202 	mul.w	r2, r0, r2
 80085a8:	1a9b      	subs	r3, r3, r2
 80085aa:	440b      	add	r3, r1
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	b292      	uxth	r2, r2
 80085b0:	4611      	mov	r1, r2
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7ff fb31 	bl	8007c1a <st_word>
			fs->wflag = 1;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2201      	movs	r2, #1
 80085bc:	70da      	strb	r2, [r3, #3]
			break;
 80085be:	e049      	b.n	8008654 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	899b      	ldrh	r3, [r3, #12]
 80085c8:	089b      	lsrs	r3, r3, #2
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	4619      	mov	r1, r3
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80085d4:	4413      	add	r3, r2
 80085d6:	4619      	mov	r1, r3
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f7ff fd93 	bl	8008104 <move_window>
 80085de:	4603      	mov	r3, r0
 80085e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80085e2:	7ffb      	ldrb	r3, [r7, #31]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d134      	bne.n	8008652 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	68fa      	ldr	r2, [r7, #12]
 80085fa:	8992      	ldrh	r2, [r2, #12]
 80085fc:	fbb3 f0f2 	udiv	r0, r3, r2
 8008600:	fb00 f202 	mul.w	r2, r0, r2
 8008604:	1a9b      	subs	r3, r3, r2
 8008606:	440b      	add	r3, r1
 8008608:	4618      	mov	r0, r3
 800860a:	f7ff fae3 	bl	8007bd4 <ld_dword>
 800860e:	4603      	mov	r3, r0
 8008610:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008614:	4323      	orrs	r3, r4
 8008616:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	68fa      	ldr	r2, [r7, #12]
 8008624:	8992      	ldrh	r2, [r2, #12]
 8008626:	fbb3 f0f2 	udiv	r0, r3, r2
 800862a:	fb00 f202 	mul.w	r2, r0, r2
 800862e:	1a9b      	subs	r3, r3, r2
 8008630:	440b      	add	r3, r1
 8008632:	6879      	ldr	r1, [r7, #4]
 8008634:	4618      	mov	r0, r3
 8008636:	f7ff fb0b 	bl	8007c50 <st_dword>
			fs->wflag = 1;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2201      	movs	r2, #1
 800863e:	70da      	strb	r2, [r3, #3]
			break;
 8008640:	e008      	b.n	8008654 <put_fat+0x22e>
		}
	}
 8008642:	bf00      	nop
 8008644:	e006      	b.n	8008654 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008646:	bf00      	nop
 8008648:	e004      	b.n	8008654 <put_fat+0x22e>
			if (res != FR_OK) break;
 800864a:	bf00      	nop
 800864c:	e002      	b.n	8008654 <put_fat+0x22e>
			if (res != FR_OK) break;
 800864e:	bf00      	nop
 8008650:	e000      	b.n	8008654 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008652:	bf00      	nop
	return res;
 8008654:	7ffb      	ldrb	r3, [r7, #31]
}
 8008656:	4618      	mov	r0, r3
 8008658:	3724      	adds	r7, #36	; 0x24
 800865a:	46bd      	mov	sp, r7
 800865c:	bd90      	pop	{r4, r7, pc}

0800865e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b088      	sub	sp, #32
 8008662:	af00      	add	r7, sp, #0
 8008664:	60f8      	str	r0, [r7, #12]
 8008666:	60b9      	str	r1, [r7, #8]
 8008668:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800866a:	2300      	movs	r3, #0
 800866c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	2b01      	cmp	r3, #1
 8008678:	d904      	bls.n	8008684 <remove_chain+0x26>
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	69db      	ldr	r3, [r3, #28]
 800867e:	68ba      	ldr	r2, [r7, #8]
 8008680:	429a      	cmp	r2, r3
 8008682:	d301      	bcc.n	8008688 <remove_chain+0x2a>
 8008684:	2302      	movs	r3, #2
 8008686:	e04b      	b.n	8008720 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00c      	beq.n	80086a8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800868e:	f04f 32ff 	mov.w	r2, #4294967295
 8008692:	6879      	ldr	r1, [r7, #4]
 8008694:	69b8      	ldr	r0, [r7, #24]
 8008696:	f7ff fec6 	bl	8008426 <put_fat>
 800869a:	4603      	mov	r3, r0
 800869c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800869e:	7ffb      	ldrb	r3, [r7, #31]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d001      	beq.n	80086a8 <remove_chain+0x4a>
 80086a4:	7ffb      	ldrb	r3, [r7, #31]
 80086a6:	e03b      	b.n	8008720 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80086a8:	68b9      	ldr	r1, [r7, #8]
 80086aa:	68f8      	ldr	r0, [r7, #12]
 80086ac:	f7ff fde7 	bl	800827e <get_fat>
 80086b0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d031      	beq.n	800871c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d101      	bne.n	80086c2 <remove_chain+0x64>
 80086be:	2302      	movs	r3, #2
 80086c0:	e02e      	b.n	8008720 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c8:	d101      	bne.n	80086ce <remove_chain+0x70>
 80086ca:	2301      	movs	r3, #1
 80086cc:	e028      	b.n	8008720 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80086ce:	2200      	movs	r2, #0
 80086d0:	68b9      	ldr	r1, [r7, #8]
 80086d2:	69b8      	ldr	r0, [r7, #24]
 80086d4:	f7ff fea7 	bl	8008426 <put_fat>
 80086d8:	4603      	mov	r3, r0
 80086da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80086dc:	7ffb      	ldrb	r3, [r7, #31]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d001      	beq.n	80086e6 <remove_chain+0x88>
 80086e2:	7ffb      	ldrb	r3, [r7, #31]
 80086e4:	e01c      	b.n	8008720 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	699a      	ldr	r2, [r3, #24]
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	69db      	ldr	r3, [r3, #28]
 80086ee:	3b02      	subs	r3, #2
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d20b      	bcs.n	800870c <remove_chain+0xae>
			fs->free_clst++;
 80086f4:	69bb      	ldr	r3, [r7, #24]
 80086f6:	699b      	ldr	r3, [r3, #24]
 80086f8:	1c5a      	adds	r2, r3, #1
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	791b      	ldrb	r3, [r3, #4]
 8008702:	f043 0301 	orr.w	r3, r3, #1
 8008706:	b2da      	uxtb	r2, r3
 8008708:	69bb      	ldr	r3, [r7, #24]
 800870a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	69db      	ldr	r3, [r3, #28]
 8008714:	68ba      	ldr	r2, [r7, #8]
 8008716:	429a      	cmp	r2, r3
 8008718:	d3c6      	bcc.n	80086a8 <remove_chain+0x4a>
 800871a:	e000      	b.n	800871e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800871c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800871e:	2300      	movs	r3, #0
}
 8008720:	4618      	mov	r0, r3
 8008722:	3720      	adds	r7, #32
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b088      	sub	sp, #32
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d10d      	bne.n	800875a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	695b      	ldr	r3, [r3, #20]
 8008742:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008744:	69bb      	ldr	r3, [r7, #24]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d004      	beq.n	8008754 <create_chain+0x2c>
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	69db      	ldr	r3, [r3, #28]
 800874e:	69ba      	ldr	r2, [r7, #24]
 8008750:	429a      	cmp	r2, r3
 8008752:	d31b      	bcc.n	800878c <create_chain+0x64>
 8008754:	2301      	movs	r3, #1
 8008756:	61bb      	str	r3, [r7, #24]
 8008758:	e018      	b.n	800878c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800875a:	6839      	ldr	r1, [r7, #0]
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f7ff fd8e 	bl	800827e <get_fat>
 8008762:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2b01      	cmp	r3, #1
 8008768:	d801      	bhi.n	800876e <create_chain+0x46>
 800876a:	2301      	movs	r3, #1
 800876c:	e070      	b.n	8008850 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008774:	d101      	bne.n	800877a <create_chain+0x52>
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	e06a      	b.n	8008850 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	69db      	ldr	r3, [r3, #28]
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	429a      	cmp	r2, r3
 8008782:	d201      	bcs.n	8008788 <create_chain+0x60>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	e063      	b.n	8008850 <create_chain+0x128>
		scl = clst;
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800878c:	69bb      	ldr	r3, [r7, #24]
 800878e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	3301      	adds	r3, #1
 8008794:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	69db      	ldr	r3, [r3, #28]
 800879a:	69fa      	ldr	r2, [r7, #28]
 800879c:	429a      	cmp	r2, r3
 800879e:	d307      	bcc.n	80087b0 <create_chain+0x88>
				ncl = 2;
 80087a0:	2302      	movs	r3, #2
 80087a2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80087a4:	69fa      	ldr	r2, [r7, #28]
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d901      	bls.n	80087b0 <create_chain+0x88>
 80087ac:	2300      	movs	r3, #0
 80087ae:	e04f      	b.n	8008850 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80087b0:	69f9      	ldr	r1, [r7, #28]
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f7ff fd63 	bl	800827e <get_fat>
 80087b8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d00e      	beq.n	80087de <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d003      	beq.n	80087ce <create_chain+0xa6>
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087cc:	d101      	bne.n	80087d2 <create_chain+0xaa>
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	e03e      	b.n	8008850 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80087d2:	69fa      	ldr	r2, [r7, #28]
 80087d4:	69bb      	ldr	r3, [r7, #24]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d1da      	bne.n	8008790 <create_chain+0x68>
 80087da:	2300      	movs	r3, #0
 80087dc:	e038      	b.n	8008850 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80087de:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80087e0:	f04f 32ff 	mov.w	r2, #4294967295
 80087e4:	69f9      	ldr	r1, [r7, #28]
 80087e6:	6938      	ldr	r0, [r7, #16]
 80087e8:	f7ff fe1d 	bl	8008426 <put_fat>
 80087ec:	4603      	mov	r3, r0
 80087ee:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80087f0:	7dfb      	ldrb	r3, [r7, #23]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d109      	bne.n	800880a <create_chain+0xe2>
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d006      	beq.n	800880a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80087fc:	69fa      	ldr	r2, [r7, #28]
 80087fe:	6839      	ldr	r1, [r7, #0]
 8008800:	6938      	ldr	r0, [r7, #16]
 8008802:	f7ff fe10 	bl	8008426 <put_fat>
 8008806:	4603      	mov	r3, r0
 8008808:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800880a:	7dfb      	ldrb	r3, [r7, #23]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d116      	bne.n	800883e <create_chain+0x116>
		fs->last_clst = ncl;
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	69fa      	ldr	r2, [r7, #28]
 8008814:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	699a      	ldr	r2, [r3, #24]
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	69db      	ldr	r3, [r3, #28]
 800881e:	3b02      	subs	r3, #2
 8008820:	429a      	cmp	r2, r3
 8008822:	d804      	bhi.n	800882e <create_chain+0x106>
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	699b      	ldr	r3, [r3, #24]
 8008828:	1e5a      	subs	r2, r3, #1
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	791b      	ldrb	r3, [r3, #4]
 8008832:	f043 0301 	orr.w	r3, r3, #1
 8008836:	b2da      	uxtb	r2, r3
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	711a      	strb	r2, [r3, #4]
 800883c:	e007      	b.n	800884e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800883e:	7dfb      	ldrb	r3, [r7, #23]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d102      	bne.n	800884a <create_chain+0x122>
 8008844:	f04f 33ff 	mov.w	r3, #4294967295
 8008848:	e000      	b.n	800884c <create_chain+0x124>
 800884a:	2301      	movs	r3, #1
 800884c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800884e:	69fb      	ldr	r3, [r7, #28]
}
 8008850:	4618      	mov	r0, r3
 8008852:	3720      	adds	r7, #32
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008858:	b480      	push	{r7}
 800885a:	b087      	sub	sp, #28
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800886c:	3304      	adds	r3, #4
 800886e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	899b      	ldrh	r3, [r3, #12]
 8008874:	461a      	mov	r2, r3
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	fbb3 f3f2 	udiv	r3, r3, r2
 800887c:	68fa      	ldr	r2, [r7, #12]
 800887e:	8952      	ldrh	r2, [r2, #10]
 8008880:	fbb3 f3f2 	udiv	r3, r3, r2
 8008884:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	1d1a      	adds	r2, r3, #4
 800888a:	613a      	str	r2, [r7, #16]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d101      	bne.n	800889a <clmt_clust+0x42>
 8008896:	2300      	movs	r3, #0
 8008898:	e010      	b.n	80088bc <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800889a:	697a      	ldr	r2, [r7, #20]
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	429a      	cmp	r2, r3
 80088a0:	d307      	bcc.n	80088b2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80088a2:	697a      	ldr	r2, [r7, #20]
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	1ad3      	subs	r3, r2, r3
 80088a8:	617b      	str	r3, [r7, #20]
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	3304      	adds	r3, #4
 80088ae:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80088b0:	e7e9      	b.n	8008886 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80088b2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	4413      	add	r3, r2
}
 80088bc:	4618      	mov	r0, r3
 80088be:	371c      	adds	r7, #28
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr

080088c8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b086      	sub	sp, #24
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80088de:	d204      	bcs.n	80088ea <dir_sdi+0x22>
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	f003 031f 	and.w	r3, r3, #31
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d001      	beq.n	80088ee <dir_sdi+0x26>
		return FR_INT_ERR;
 80088ea:	2302      	movs	r3, #2
 80088ec:	e071      	b.n	80089d2 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	683a      	ldr	r2, [r7, #0]
 80088f2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d106      	bne.n	800890e <dir_sdi+0x46>
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	2b02      	cmp	r3, #2
 8008906:	d902      	bls.n	800890e <dir_sdi+0x46>
		clst = fs->dirbase;
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d10c      	bne.n	800892e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	095b      	lsrs	r3, r3, #5
 8008918:	693a      	ldr	r2, [r7, #16]
 800891a:	8912      	ldrh	r2, [r2, #8]
 800891c:	4293      	cmp	r3, r2
 800891e:	d301      	bcc.n	8008924 <dir_sdi+0x5c>
 8008920:	2302      	movs	r3, #2
 8008922:	e056      	b.n	80089d2 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	61da      	str	r2, [r3, #28]
 800892c:	e02d      	b.n	800898a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	895b      	ldrh	r3, [r3, #10]
 8008932:	461a      	mov	r2, r3
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	899b      	ldrh	r3, [r3, #12]
 8008938:	fb02 f303 	mul.w	r3, r2, r3
 800893c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800893e:	e019      	b.n	8008974 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6979      	ldr	r1, [r7, #20]
 8008944:	4618      	mov	r0, r3
 8008946:	f7ff fc9a 	bl	800827e <get_fat>
 800894a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008952:	d101      	bne.n	8008958 <dir_sdi+0x90>
 8008954:	2301      	movs	r3, #1
 8008956:	e03c      	b.n	80089d2 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	2b01      	cmp	r3, #1
 800895c:	d904      	bls.n	8008968 <dir_sdi+0xa0>
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	69db      	ldr	r3, [r3, #28]
 8008962:	697a      	ldr	r2, [r7, #20]
 8008964:	429a      	cmp	r2, r3
 8008966:	d301      	bcc.n	800896c <dir_sdi+0xa4>
 8008968:	2302      	movs	r3, #2
 800896a:	e032      	b.n	80089d2 <dir_sdi+0x10a>
			ofs -= csz;
 800896c:	683a      	ldr	r2, [r7, #0]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	1ad3      	subs	r3, r2, r3
 8008972:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008974:	683a      	ldr	r2, [r7, #0]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	429a      	cmp	r2, r3
 800897a:	d2e1      	bcs.n	8008940 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800897c:	6979      	ldr	r1, [r7, #20]
 800897e:	6938      	ldr	r0, [r7, #16]
 8008980:	f7ff fc5e 	bl	8008240 <clust2sect>
 8008984:	4602      	mov	r2, r0
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	697a      	ldr	r2, [r7, #20]
 800898e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	69db      	ldr	r3, [r3, #28]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d101      	bne.n	800899c <dir_sdi+0xd4>
 8008998:	2302      	movs	r3, #2
 800899a:	e01a      	b.n	80089d2 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	69da      	ldr	r2, [r3, #28]
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	899b      	ldrh	r3, [r3, #12]
 80089a4:	4619      	mov	r1, r3
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80089ac:	441a      	add	r2, r3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	899b      	ldrh	r3, [r3, #12]
 80089bc:	461a      	mov	r2, r3
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80089c4:	fb00 f202 	mul.w	r2, r0, r2
 80089c8:	1a9b      	subs	r3, r3, r2
 80089ca:	18ca      	adds	r2, r1, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3718      	adds	r7, #24
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}

080089da <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80089da:	b580      	push	{r7, lr}
 80089dc:	b086      	sub	sp, #24
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
 80089e2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	695b      	ldr	r3, [r3, #20]
 80089ee:	3320      	adds	r3, #32
 80089f0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	69db      	ldr	r3, [r3, #28]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d003      	beq.n	8008a02 <dir_next+0x28>
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a00:	d301      	bcc.n	8008a06 <dir_next+0x2c>
 8008a02:	2304      	movs	r3, #4
 8008a04:	e0bb      	b.n	8008b7e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	899b      	ldrh	r3, [r3, #12]
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a12:	fb01 f202 	mul.w	r2, r1, r2
 8008a16:	1a9b      	subs	r3, r3, r2
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	f040 809d 	bne.w	8008b58 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	69db      	ldr	r3, [r3, #28]
 8008a22:	1c5a      	adds	r2, r3, #1
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	699b      	ldr	r3, [r3, #24]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d10b      	bne.n	8008a48 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	095b      	lsrs	r3, r3, #5
 8008a34:	68fa      	ldr	r2, [r7, #12]
 8008a36:	8912      	ldrh	r2, [r2, #8]
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	f0c0 808d 	bcc.w	8008b58 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2200      	movs	r2, #0
 8008a42:	61da      	str	r2, [r3, #28]
 8008a44:	2304      	movs	r3, #4
 8008a46:	e09a      	b.n	8008b7e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	899b      	ldrh	r3, [r3, #12]
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	8952      	ldrh	r2, [r2, #10]
 8008a58:	3a01      	subs	r2, #1
 8008a5a:	4013      	ands	r3, r2
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d17b      	bne.n	8008b58 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	699b      	ldr	r3, [r3, #24]
 8008a66:	4619      	mov	r1, r3
 8008a68:	4610      	mov	r0, r2
 8008a6a:	f7ff fc08 	bl	800827e <get_fat>
 8008a6e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d801      	bhi.n	8008a7a <dir_next+0xa0>
 8008a76:	2302      	movs	r3, #2
 8008a78:	e081      	b.n	8008b7e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a80:	d101      	bne.n	8008a86 <dir_next+0xac>
 8008a82:	2301      	movs	r3, #1
 8008a84:	e07b      	b.n	8008b7e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	69db      	ldr	r3, [r3, #28]
 8008a8a:	697a      	ldr	r2, [r7, #20]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d359      	bcc.n	8008b44 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d104      	bne.n	8008aa0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	61da      	str	r2, [r3, #28]
 8008a9c:	2304      	movs	r3, #4
 8008a9e:	e06e      	b.n	8008b7e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	699b      	ldr	r3, [r3, #24]
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	4610      	mov	r0, r2
 8008aaa:	f7ff fe3d 	bl	8008728 <create_chain>
 8008aae:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d101      	bne.n	8008aba <dir_next+0xe0>
 8008ab6:	2307      	movs	r3, #7
 8008ab8:	e061      	b.n	8008b7e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d101      	bne.n	8008ac4 <dir_next+0xea>
 8008ac0:	2302      	movs	r3, #2
 8008ac2:	e05c      	b.n	8008b7e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aca:	d101      	bne.n	8008ad0 <dir_next+0xf6>
 8008acc:	2301      	movs	r3, #1
 8008ace:	e056      	b.n	8008b7e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008ad0:	68f8      	ldr	r0, [r7, #12]
 8008ad2:	f7ff fad3 	bl	800807c <sync_window>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d001      	beq.n	8008ae0 <dir_next+0x106>
 8008adc:	2301      	movs	r3, #1
 8008ade:	e04e      	b.n	8008b7e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	899b      	ldrh	r3, [r3, #12]
 8008aea:	461a      	mov	r2, r3
 8008aec:	2100      	movs	r1, #0
 8008aee:	f7ff f8fc 	bl	8007cea <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008af2:	2300      	movs	r3, #0
 8008af4:	613b      	str	r3, [r7, #16]
 8008af6:	6979      	ldr	r1, [r7, #20]
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	f7ff fba1 	bl	8008240 <clust2sect>
 8008afe:	4602      	mov	r2, r0
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	635a      	str	r2, [r3, #52]	; 0x34
 8008b04:	e012      	b.n	8008b2c <dir_next+0x152>
						fs->wflag = 1;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2201      	movs	r2, #1
 8008b0a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008b0c:	68f8      	ldr	r0, [r7, #12]
 8008b0e:	f7ff fab5 	bl	800807c <sync_window>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d001      	beq.n	8008b1c <dir_next+0x142>
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e030      	b.n	8008b7e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	3301      	adds	r3, #1
 8008b20:	613b      	str	r3, [r7, #16]
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b26:	1c5a      	adds	r2, r3, #1
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	635a      	str	r2, [r3, #52]	; 0x34
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	895b      	ldrh	r3, [r3, #10]
 8008b30:	461a      	mov	r2, r3
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d3e6      	bcc.n	8008b06 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	1ad2      	subs	r2, r2, r3
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008b4a:	6979      	ldr	r1, [r7, #20]
 8008b4c:	68f8      	ldr	r0, [r7, #12]
 8008b4e:	f7ff fb77 	bl	8008240 <clust2sect>
 8008b52:	4602      	mov	r2, r0
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	68ba      	ldr	r2, [r7, #8]
 8008b5c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	899b      	ldrh	r3, [r3, #12]
 8008b68:	461a      	mov	r2, r3
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008b70:	fb00 f202 	mul.w	r2, r0, r2
 8008b74:	1a9b      	subs	r3, r3, r2
 8008b76:	18ca      	adds	r2, r1, r3
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008b7c:	2300      	movs	r3, #0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3718      	adds	r7, #24
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}

08008b86 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008b86:	b580      	push	{r7, lr}
 8008b88:	b086      	sub	sp, #24
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
 8008b8e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008b96:	2100      	movs	r1, #0
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f7ff fe95 	bl	80088c8 <dir_sdi>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008ba2:	7dfb      	ldrb	r3, [r7, #23]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d12b      	bne.n	8008c00 <dir_alloc+0x7a>
		n = 0;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	69db      	ldr	r3, [r3, #28]
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	68f8      	ldr	r0, [r7, #12]
 8008bb4:	f7ff faa6 	bl	8008104 <move_window>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008bbc:	7dfb      	ldrb	r3, [r7, #23]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d11d      	bne.n	8008bfe <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a1b      	ldr	r3, [r3, #32]
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	2be5      	cmp	r3, #229	; 0xe5
 8008bca:	d004      	beq.n	8008bd6 <dir_alloc+0x50>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6a1b      	ldr	r3, [r3, #32]
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d107      	bne.n	8008be6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	3301      	adds	r3, #1
 8008bda:	613b      	str	r3, [r7, #16]
 8008bdc:	693a      	ldr	r2, [r7, #16]
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d102      	bne.n	8008bea <dir_alloc+0x64>
 8008be4:	e00c      	b.n	8008c00 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008be6:	2300      	movs	r3, #0
 8008be8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008bea:	2101      	movs	r1, #1
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f7ff fef4 	bl	80089da <dir_next>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008bf6:	7dfb      	ldrb	r3, [r7, #23]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d0d7      	beq.n	8008bac <dir_alloc+0x26>
 8008bfc:	e000      	b.n	8008c00 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008bfe:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008c00:	7dfb      	ldrb	r3, [r7, #23]
 8008c02:	2b04      	cmp	r3, #4
 8008c04:	d101      	bne.n	8008c0a <dir_alloc+0x84>
 8008c06:	2307      	movs	r3, #7
 8008c08:	75fb      	strb	r3, [r7, #23]
	return res;
 8008c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3718      	adds	r7, #24
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	331a      	adds	r3, #26
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7fe ffbe 	bl	8007ba4 <ld_word>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	2b03      	cmp	r3, #3
 8008c32:	d109      	bne.n	8008c48 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	3314      	adds	r3, #20
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f7fe ffb3 	bl	8007ba4 <ld_word>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	041b      	lsls	r3, r3, #16
 8008c42:	68fa      	ldr	r2, [r7, #12]
 8008c44:	4313      	orrs	r3, r2
 8008c46:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008c48:	68fb      	ldr	r3, [r7, #12]
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b084      	sub	sp, #16
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	60f8      	str	r0, [r7, #12]
 8008c5a:	60b9      	str	r1, [r7, #8]
 8008c5c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	331a      	adds	r3, #26
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	b292      	uxth	r2, r2
 8008c66:	4611      	mov	r1, r2
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f7fe ffd6 	bl	8007c1a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	2b03      	cmp	r3, #3
 8008c74:	d109      	bne.n	8008c8a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	f103 0214 	add.w	r2, r3, #20
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	0c1b      	lsrs	r3, r3, #16
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	4619      	mov	r1, r3
 8008c84:	4610      	mov	r0, r2
 8008c86:	f7fe ffc8 	bl	8007c1a <st_word>
	}
}
 8008c8a:	bf00      	nop
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
	...

08008c94 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8008c94:	b590      	push	{r4, r7, lr}
 8008c96:	b087      	sub	sp, #28
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	331a      	adds	r3, #26
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7fe ff7e 	bl	8007ba4 <ld_word>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d001      	beq.n	8008cb2 <cmp_lfn+0x1e>
 8008cae:	2300      	movs	r3, #0
 8008cb0:	e059      	b.n	8008d66 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008cba:	1e5a      	subs	r2, r3, #1
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	005b      	lsls	r3, r3, #1
 8008cc0:	4413      	add	r3, r2
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	4413      	add	r3, r2
 8008cc6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008cc8:	2301      	movs	r3, #1
 8008cca:	81fb      	strh	r3, [r7, #14]
 8008ccc:	2300      	movs	r3, #0
 8008cce:	613b      	str	r3, [r7, #16]
 8008cd0:	e033      	b.n	8008d3a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8008cd2:	4a27      	ldr	r2, [pc, #156]	; (8008d70 <cmp_lfn+0xdc>)
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	4413      	add	r3, r2
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	461a      	mov	r2, r3
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	4413      	add	r3, r2
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7fe ff5f 	bl	8007ba4 <ld_word>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008cea:	89fb      	ldrh	r3, [r7, #14]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d01a      	beq.n	8008d26 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	2bfe      	cmp	r3, #254	; 0xfe
 8008cf4:	d812      	bhi.n	8008d1c <cmp_lfn+0x88>
 8008cf6:	89bb      	ldrh	r3, [r7, #12]
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f001 fe11 	bl	800a920 <ff_wtoupper>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	461c      	mov	r4, r3
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	1c5a      	adds	r2, r3, #1
 8008d06:	617a      	str	r2, [r7, #20]
 8008d08:	005b      	lsls	r3, r3, #1
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	881b      	ldrh	r3, [r3, #0]
 8008d10:	4618      	mov	r0, r3
 8008d12:	f001 fe05 	bl	800a920 <ff_wtoupper>
 8008d16:	4603      	mov	r3, r0
 8008d18:	429c      	cmp	r4, r3
 8008d1a:	d001      	beq.n	8008d20 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	e022      	b.n	8008d66 <cmp_lfn+0xd2>
			}
			wc = uc;
 8008d20:	89bb      	ldrh	r3, [r7, #12]
 8008d22:	81fb      	strh	r3, [r7, #14]
 8008d24:	e006      	b.n	8008d34 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008d26:	89bb      	ldrh	r3, [r7, #12]
 8008d28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d001      	beq.n	8008d34 <cmp_lfn+0xa0>
 8008d30:	2300      	movs	r3, #0
 8008d32:	e018      	b.n	8008d66 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	3301      	adds	r3, #1
 8008d38:	613b      	str	r3, [r7, #16]
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	2b0c      	cmp	r3, #12
 8008d3e:	d9c8      	bls.n	8008cd2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d00b      	beq.n	8008d64 <cmp_lfn+0xd0>
 8008d4c:	89fb      	ldrh	r3, [r7, #14]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d008      	beq.n	8008d64 <cmp_lfn+0xd0>
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	005b      	lsls	r3, r3, #1
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	4413      	add	r3, r2
 8008d5a:	881b      	ldrh	r3, [r3, #0]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d001      	beq.n	8008d64 <cmp_lfn+0xd0>
 8008d60:	2300      	movs	r3, #0
 8008d62:	e000      	b.n	8008d66 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8008d64:	2301      	movs	r3, #1
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	371c      	adds	r7, #28
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd90      	pop	{r4, r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	0800e00c 	.word	0x0800e00c

08008d74 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b088      	sub	sp, #32
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	4611      	mov	r1, r2
 8008d80:	461a      	mov	r2, r3
 8008d82:	460b      	mov	r3, r1
 8008d84:	71fb      	strb	r3, [r7, #7]
 8008d86:	4613      	mov	r3, r2
 8008d88:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	330d      	adds	r3, #13
 8008d8e:	79ba      	ldrb	r2, [r7, #6]
 8008d90:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	330b      	adds	r3, #11
 8008d96:	220f      	movs	r2, #15
 8008d98:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	330c      	adds	r3, #12
 8008d9e:	2200      	movs	r2, #0
 8008da0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	331a      	adds	r3, #26
 8008da6:	2100      	movs	r1, #0
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7fe ff36 	bl	8007c1a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8008dae:	79fb      	ldrb	r3, [r7, #7]
 8008db0:	1e5a      	subs	r2, r3, #1
 8008db2:	4613      	mov	r3, r2
 8008db4:	005b      	lsls	r3, r3, #1
 8008db6:	4413      	add	r3, r2
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	4413      	add	r3, r2
 8008dbc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	82fb      	strh	r3, [r7, #22]
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008dc6:	8afb      	ldrh	r3, [r7, #22]
 8008dc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d007      	beq.n	8008de0 <put_lfn+0x6c>
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	1c5a      	adds	r2, r3, #1
 8008dd4:	61fa      	str	r2, [r7, #28]
 8008dd6:	005b      	lsls	r3, r3, #1
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	4413      	add	r3, r2
 8008ddc:	881b      	ldrh	r3, [r3, #0]
 8008dde:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8008de0:	4a17      	ldr	r2, [pc, #92]	; (8008e40 <put_lfn+0xcc>)
 8008de2:	69bb      	ldr	r3, [r7, #24]
 8008de4:	4413      	add	r3, r2
 8008de6:	781b      	ldrb	r3, [r3, #0]
 8008de8:	461a      	mov	r2, r3
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	4413      	add	r3, r2
 8008dee:	8afa      	ldrh	r2, [r7, #22]
 8008df0:	4611      	mov	r1, r2
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7fe ff11 	bl	8007c1a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008df8:	8afb      	ldrh	r3, [r7, #22]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d102      	bne.n	8008e04 <put_lfn+0x90>
 8008dfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e02:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8008e04:	69bb      	ldr	r3, [r7, #24]
 8008e06:	3301      	adds	r3, #1
 8008e08:	61bb      	str	r3, [r7, #24]
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	2b0c      	cmp	r3, #12
 8008e0e:	d9da      	bls.n	8008dc6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8008e10:	8afb      	ldrh	r3, [r7, #22]
 8008e12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d006      	beq.n	8008e28 <put_lfn+0xb4>
 8008e1a:	69fb      	ldr	r3, [r7, #28]
 8008e1c:	005b      	lsls	r3, r3, #1
 8008e1e:	68fa      	ldr	r2, [r7, #12]
 8008e20:	4413      	add	r3, r2
 8008e22:	881b      	ldrh	r3, [r3, #0]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d103      	bne.n	8008e30 <put_lfn+0xbc>
 8008e28:	79fb      	ldrb	r3, [r7, #7]
 8008e2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e2e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	79fa      	ldrb	r2, [r7, #7]
 8008e34:	701a      	strb	r2, [r3, #0]
}
 8008e36:	bf00      	nop
 8008e38:	3720      	adds	r7, #32
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	0800e00c 	.word	0x0800e00c

08008e44 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b08c      	sub	sp, #48	; 0x30
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	60b9      	str	r1, [r7, #8]
 8008e4e:	607a      	str	r2, [r7, #4]
 8008e50:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8008e52:	220b      	movs	r2, #11
 8008e54:	68b9      	ldr	r1, [r7, #8]
 8008e56:	68f8      	ldr	r0, [r7, #12]
 8008e58:	f7fe ff26 	bl	8007ca8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	2b05      	cmp	r3, #5
 8008e60:	d92b      	bls.n	8008eba <gen_numname+0x76>
		sr = seq;
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8008e66:	e022      	b.n	8008eae <gen_numname+0x6a>
			wc = *lfn++;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	1c9a      	adds	r2, r3, #2
 8008e6c:	607a      	str	r2, [r7, #4]
 8008e6e:	881b      	ldrh	r3, [r3, #0]
 8008e70:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8008e72:	2300      	movs	r3, #0
 8008e74:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e76:	e017      	b.n	8008ea8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	005a      	lsls	r2, r3, #1
 8008e7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008e7e:	f003 0301 	and.w	r3, r3, #1
 8008e82:	4413      	add	r3, r2
 8008e84:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8008e86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008e88:	085b      	lsrs	r3, r3, #1
 8008e8a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d005      	beq.n	8008ea2 <gen_numname+0x5e>
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8008e9c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8008ea0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8008ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eaa:	2b0f      	cmp	r3, #15
 8008eac:	d9e4      	bls.n	8008e78 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	881b      	ldrh	r3, [r3, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d1d8      	bne.n	8008e68 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8008eb6:	69fb      	ldr	r3, [r7, #28]
 8008eb8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8008eba:	2307      	movs	r3, #7
 8008ebc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	f003 030f 	and.w	r3, r3, #15
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	3330      	adds	r3, #48	; 0x30
 8008eca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8008ece:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008ed2:	2b39      	cmp	r3, #57	; 0x39
 8008ed4:	d904      	bls.n	8008ee0 <gen_numname+0x9c>
 8008ed6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008eda:	3307      	adds	r3, #7
 8008edc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8008ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee2:	1e5a      	subs	r2, r3, #1
 8008ee4:	62ba      	str	r2, [r7, #40]	; 0x28
 8008ee6:	3330      	adds	r3, #48	; 0x30
 8008ee8:	443b      	add	r3, r7
 8008eea:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008eee:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	091b      	lsrs	r3, r3, #4
 8008ef6:	603b      	str	r3, [r7, #0]
	} while (seq);
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d1df      	bne.n	8008ebe <gen_numname+0x7a>
	ns[i] = '~';
 8008efe:	f107 0214 	add.w	r2, r7, #20
 8008f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f04:	4413      	add	r3, r2
 8008f06:	227e      	movs	r2, #126	; 0x7e
 8008f08:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8008f0e:	e002      	b.n	8008f16 <gen_numname+0xd2>
 8008f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f12:	3301      	adds	r3, #1
 8008f14:	627b      	str	r3, [r7, #36]	; 0x24
 8008f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d205      	bcs.n	8008f2a <gen_numname+0xe6>
 8008f1e:	68fa      	ldr	r2, [r7, #12]
 8008f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f22:	4413      	add	r3, r2
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	2b20      	cmp	r3, #32
 8008f28:	d1f2      	bne.n	8008f10 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2c:	2b07      	cmp	r3, #7
 8008f2e:	d807      	bhi.n	8008f40 <gen_numname+0xfc>
 8008f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f32:	1c5a      	adds	r2, r3, #1
 8008f34:	62ba      	str	r2, [r7, #40]	; 0x28
 8008f36:	3330      	adds	r3, #48	; 0x30
 8008f38:	443b      	add	r3, r7
 8008f3a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8008f3e:	e000      	b.n	8008f42 <gen_numname+0xfe>
 8008f40:	2120      	movs	r1, #32
 8008f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f44:	1c5a      	adds	r2, r3, #1
 8008f46:	627a      	str	r2, [r7, #36]	; 0x24
 8008f48:	68fa      	ldr	r2, [r7, #12]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	460a      	mov	r2, r1
 8008f4e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8008f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f52:	2b07      	cmp	r3, #7
 8008f54:	d9e9      	bls.n	8008f2a <gen_numname+0xe6>
}
 8008f56:	bf00      	nop
 8008f58:	bf00      	nop
 8008f5a:	3730      	adds	r7, #48	; 0x30
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b085      	sub	sp, #20
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8008f6c:	230b      	movs	r3, #11
 8008f6e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8008f70:	7bfb      	ldrb	r3, [r7, #15]
 8008f72:	b2da      	uxtb	r2, r3
 8008f74:	0852      	lsrs	r2, r2, #1
 8008f76:	01db      	lsls	r3, r3, #7
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	b2da      	uxtb	r2, r3
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	1c59      	adds	r1, r3, #1
 8008f80:	6079      	str	r1, [r7, #4]
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	4413      	add	r3, r2
 8008f86:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	60bb      	str	r3, [r7, #8]
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d1ed      	bne.n	8008f70 <sum_sfn+0x10>
	return sum;
 8008f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3714      	adds	r7, #20
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr

08008fa2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b086      	sub	sp, #24
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f7ff fc88 	bl	80088c8 <dir_sdi>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008fbc:	7dfb      	ldrb	r3, [r7, #23]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d001      	beq.n	8008fc6 <dir_find+0x24>
 8008fc2:	7dfb      	ldrb	r3, [r7, #23]
 8008fc4:	e0a9      	b.n	800911a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008fc6:	23ff      	movs	r3, #255	; 0xff
 8008fc8:	753b      	strb	r3, [r7, #20]
 8008fca:	7d3b      	ldrb	r3, [r7, #20]
 8008fcc:	757b      	strb	r3, [r7, #21]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8008fd4:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	69db      	ldr	r3, [r3, #28]
 8008fda:	4619      	mov	r1, r3
 8008fdc:	6938      	ldr	r0, [r7, #16]
 8008fde:	f7ff f891 	bl	8008104 <move_window>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008fe6:	7dfb      	ldrb	r3, [r7, #23]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	f040 8090 	bne.w	800910e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6a1b      	ldr	r3, [r3, #32]
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008ff6:	7dbb      	ldrb	r3, [r7, #22]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d102      	bne.n	8009002 <dir_find+0x60>
 8008ffc:	2304      	movs	r3, #4
 8008ffe:	75fb      	strb	r3, [r7, #23]
 8009000:	e08a      	b.n	8009118 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6a1b      	ldr	r3, [r3, #32]
 8009006:	330b      	adds	r3, #11
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800900e:	73fb      	strb	r3, [r7, #15]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	7bfa      	ldrb	r2, [r7, #15]
 8009014:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009016:	7dbb      	ldrb	r3, [r7, #22]
 8009018:	2be5      	cmp	r3, #229	; 0xe5
 800901a:	d007      	beq.n	800902c <dir_find+0x8a>
 800901c:	7bfb      	ldrb	r3, [r7, #15]
 800901e:	f003 0308 	and.w	r3, r3, #8
 8009022:	2b00      	cmp	r3, #0
 8009024:	d009      	beq.n	800903a <dir_find+0x98>
 8009026:	7bfb      	ldrb	r3, [r7, #15]
 8009028:	2b0f      	cmp	r3, #15
 800902a:	d006      	beq.n	800903a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800902c:	23ff      	movs	r3, #255	; 0xff
 800902e:	757b      	strb	r3, [r7, #21]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f04f 32ff 	mov.w	r2, #4294967295
 8009036:	631a      	str	r2, [r3, #48]	; 0x30
 8009038:	e05e      	b.n	80090f8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800903a:	7bfb      	ldrb	r3, [r7, #15]
 800903c:	2b0f      	cmp	r3, #15
 800903e:	d136      	bne.n	80090ae <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800904a:	2b00      	cmp	r3, #0
 800904c:	d154      	bne.n	80090f8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800904e:	7dbb      	ldrb	r3, [r7, #22]
 8009050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009054:	2b00      	cmp	r3, #0
 8009056:	d00d      	beq.n	8009074 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6a1b      	ldr	r3, [r3, #32]
 800905c:	7b5b      	ldrb	r3, [r3, #13]
 800905e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8009060:	7dbb      	ldrb	r3, [r7, #22]
 8009062:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009066:	75bb      	strb	r3, [r7, #22]
 8009068:	7dbb      	ldrb	r3, [r7, #22]
 800906a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	695a      	ldr	r2, [r3, #20]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009074:	7dba      	ldrb	r2, [r7, #22]
 8009076:	7d7b      	ldrb	r3, [r7, #21]
 8009078:	429a      	cmp	r2, r3
 800907a:	d115      	bne.n	80090a8 <dir_find+0x106>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6a1b      	ldr	r3, [r3, #32]
 8009080:	330d      	adds	r3, #13
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	7d3a      	ldrb	r2, [r7, #20]
 8009086:	429a      	cmp	r2, r3
 8009088:	d10e      	bne.n	80090a8 <dir_find+0x106>
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	691a      	ldr	r2, [r3, #16]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6a1b      	ldr	r3, [r3, #32]
 8009092:	4619      	mov	r1, r3
 8009094:	4610      	mov	r0, r2
 8009096:	f7ff fdfd 	bl	8008c94 <cmp_lfn>
 800909a:	4603      	mov	r3, r0
 800909c:	2b00      	cmp	r3, #0
 800909e:	d003      	beq.n	80090a8 <dir_find+0x106>
 80090a0:	7d7b      	ldrb	r3, [r7, #21]
 80090a2:	3b01      	subs	r3, #1
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	e000      	b.n	80090aa <dir_find+0x108>
 80090a8:	23ff      	movs	r3, #255	; 0xff
 80090aa:	757b      	strb	r3, [r7, #21]
 80090ac:	e024      	b.n	80090f8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80090ae:	7d7b      	ldrb	r3, [r7, #21]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d109      	bne.n	80090c8 <dir_find+0x126>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6a1b      	ldr	r3, [r3, #32]
 80090b8:	4618      	mov	r0, r3
 80090ba:	f7ff ff51 	bl	8008f60 <sum_sfn>
 80090be:	4603      	mov	r3, r0
 80090c0:	461a      	mov	r2, r3
 80090c2:	7d3b      	ldrb	r3, [r7, #20]
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d024      	beq.n	8009112 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80090ce:	f003 0301 	and.w	r3, r3, #1
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d10a      	bne.n	80090ec <dir_find+0x14a>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6a18      	ldr	r0, [r3, #32]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	3324      	adds	r3, #36	; 0x24
 80090de:	220b      	movs	r2, #11
 80090e0:	4619      	mov	r1, r3
 80090e2:	f7fe fe1d 	bl	8007d20 <mem_cmp>
 80090e6:	4603      	mov	r3, r0
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d014      	beq.n	8009116 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80090ec:	23ff      	movs	r3, #255	; 0xff
 80090ee:	757b      	strb	r3, [r7, #21]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f04f 32ff 	mov.w	r2, #4294967295
 80090f6:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80090f8:	2100      	movs	r1, #0
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f7ff fc6d 	bl	80089da <dir_next>
 8009100:	4603      	mov	r3, r0
 8009102:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009104:	7dfb      	ldrb	r3, [r7, #23]
 8009106:	2b00      	cmp	r3, #0
 8009108:	f43f af65 	beq.w	8008fd6 <dir_find+0x34>
 800910c:	e004      	b.n	8009118 <dir_find+0x176>
		if (res != FR_OK) break;
 800910e:	bf00      	nop
 8009110:	e002      	b.n	8009118 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009112:	bf00      	nop
 8009114:	e000      	b.n	8009118 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009116:	bf00      	nop

	return res;
 8009118:	7dfb      	ldrb	r3, [r7, #23]
}
 800911a:	4618      	mov	r0, r3
 800911c:	3718      	adds	r7, #24
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
	...

08009124 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b08c      	sub	sp, #48	; 0x30
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009138:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d001      	beq.n	8009144 <dir_register+0x20>
 8009140:	2306      	movs	r3, #6
 8009142:	e0e0      	b.n	8009306 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009144:	2300      	movs	r3, #0
 8009146:	627b      	str	r3, [r7, #36]	; 0x24
 8009148:	e002      	b.n	8009150 <dir_register+0x2c>
 800914a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914c:	3301      	adds	r3, #1
 800914e:	627b      	str	r3, [r7, #36]	; 0x24
 8009150:	69fb      	ldr	r3, [r7, #28]
 8009152:	691a      	ldr	r2, [r3, #16]
 8009154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009156:	005b      	lsls	r3, r3, #1
 8009158:	4413      	add	r3, r2
 800915a:	881b      	ldrh	r3, [r3, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d1f4      	bne.n	800914a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8009166:	f107 030c 	add.w	r3, r7, #12
 800916a:	220c      	movs	r2, #12
 800916c:	4618      	mov	r0, r3
 800916e:	f7fe fd9b 	bl	8007ca8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009172:	7dfb      	ldrb	r3, [r7, #23]
 8009174:	f003 0301 	and.w	r3, r3, #1
 8009178:	2b00      	cmp	r3, #0
 800917a:	d032      	beq.n	80091e2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2240      	movs	r2, #64	; 0x40
 8009180:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8009184:	2301      	movs	r3, #1
 8009186:	62bb      	str	r3, [r7, #40]	; 0x28
 8009188:	e016      	b.n	80091b8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8009190:	69fb      	ldr	r3, [r7, #28]
 8009192:	691a      	ldr	r2, [r3, #16]
 8009194:	f107 010c 	add.w	r1, r7, #12
 8009198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800919a:	f7ff fe53 	bl	8008e44 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f7ff feff 	bl	8008fa2 <dir_find>
 80091a4:	4603      	mov	r3, r0
 80091a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80091aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d106      	bne.n	80091c0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80091b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b4:	3301      	adds	r3, #1
 80091b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80091b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ba:	2b63      	cmp	r3, #99	; 0x63
 80091bc:	d9e5      	bls.n	800918a <dir_register+0x66>
 80091be:	e000      	b.n	80091c2 <dir_register+0x9e>
			if (res != FR_OK) break;
 80091c0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80091c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c4:	2b64      	cmp	r3, #100	; 0x64
 80091c6:	d101      	bne.n	80091cc <dir_register+0xa8>
 80091c8:	2307      	movs	r3, #7
 80091ca:	e09c      	b.n	8009306 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80091cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80091d0:	2b04      	cmp	r3, #4
 80091d2:	d002      	beq.n	80091da <dir_register+0xb6>
 80091d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80091d8:	e095      	b.n	8009306 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80091da:	7dfa      	ldrb	r2, [r7, #23]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80091e2:	7dfb      	ldrb	r3, [r7, #23]
 80091e4:	f003 0302 	and.w	r3, r3, #2
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d007      	beq.n	80091fc <dir_register+0xd8>
 80091ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ee:	330c      	adds	r3, #12
 80091f0:	4a47      	ldr	r2, [pc, #284]	; (8009310 <dir_register+0x1ec>)
 80091f2:	fba2 2303 	umull	r2, r3, r2, r3
 80091f6:	089b      	lsrs	r3, r3, #2
 80091f8:	3301      	adds	r3, #1
 80091fa:	e000      	b.n	80091fe <dir_register+0xda>
 80091fc:	2301      	movs	r3, #1
 80091fe:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009200:	6a39      	ldr	r1, [r7, #32]
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f7ff fcbf 	bl	8008b86 <dir_alloc>
 8009208:	4603      	mov	r3, r0
 800920a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800920e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009212:	2b00      	cmp	r3, #0
 8009214:	d148      	bne.n	80092a8 <dir_register+0x184>
 8009216:	6a3b      	ldr	r3, [r7, #32]
 8009218:	3b01      	subs	r3, #1
 800921a:	623b      	str	r3, [r7, #32]
 800921c:	6a3b      	ldr	r3, [r7, #32]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d042      	beq.n	80092a8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	695a      	ldr	r2, [r3, #20]
 8009226:	6a3b      	ldr	r3, [r7, #32]
 8009228:	015b      	lsls	r3, r3, #5
 800922a:	1ad3      	subs	r3, r2, r3
 800922c:	4619      	mov	r1, r3
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f7ff fb4a 	bl	80088c8 <dir_sdi>
 8009234:	4603      	mov	r3, r0
 8009236:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800923a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800923e:	2b00      	cmp	r3, #0
 8009240:	d132      	bne.n	80092a8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	3324      	adds	r3, #36	; 0x24
 8009246:	4618      	mov	r0, r3
 8009248:	f7ff fe8a 	bl	8008f60 <sum_sfn>
 800924c:	4603      	mov	r3, r0
 800924e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	69db      	ldr	r3, [r3, #28]
 8009254:	4619      	mov	r1, r3
 8009256:	69f8      	ldr	r0, [r7, #28]
 8009258:	f7fe ff54 	bl	8008104 <move_window>
 800925c:	4603      	mov	r3, r0
 800925e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8009262:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009266:	2b00      	cmp	r3, #0
 8009268:	d11d      	bne.n	80092a6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800926a:	69fb      	ldr	r3, [r7, #28]
 800926c:	6918      	ldr	r0, [r3, #16]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6a19      	ldr	r1, [r3, #32]
 8009272:	6a3b      	ldr	r3, [r7, #32]
 8009274:	b2da      	uxtb	r2, r3
 8009276:	7efb      	ldrb	r3, [r7, #27]
 8009278:	f7ff fd7c 	bl	8008d74 <put_lfn>
				fs->wflag = 1;
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	2201      	movs	r2, #1
 8009280:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009282:	2100      	movs	r1, #0
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f7ff fba8 	bl	80089da <dir_next>
 800928a:	4603      	mov	r3, r0
 800928c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8009290:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009294:	2b00      	cmp	r3, #0
 8009296:	d107      	bne.n	80092a8 <dir_register+0x184>
 8009298:	6a3b      	ldr	r3, [r7, #32]
 800929a:	3b01      	subs	r3, #1
 800929c:	623b      	str	r3, [r7, #32]
 800929e:	6a3b      	ldr	r3, [r7, #32]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d1d5      	bne.n	8009250 <dir_register+0x12c>
 80092a4:	e000      	b.n	80092a8 <dir_register+0x184>
				if (res != FR_OK) break;
 80092a6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80092a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d128      	bne.n	8009302 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	69db      	ldr	r3, [r3, #28]
 80092b4:	4619      	mov	r1, r3
 80092b6:	69f8      	ldr	r0, [r7, #28]
 80092b8:	f7fe ff24 	bl	8008104 <move_window>
 80092bc:	4603      	mov	r3, r0
 80092be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80092c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d11b      	bne.n	8009302 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6a1b      	ldr	r3, [r3, #32]
 80092ce:	2220      	movs	r2, #32
 80092d0:	2100      	movs	r1, #0
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7fe fd09 	bl	8007cea <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6a18      	ldr	r0, [r3, #32]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	3324      	adds	r3, #36	; 0x24
 80092e0:	220b      	movs	r2, #11
 80092e2:	4619      	mov	r1, r3
 80092e4:	f7fe fce0 	bl	8007ca8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6a1b      	ldr	r3, [r3, #32]
 80092f2:	330c      	adds	r3, #12
 80092f4:	f002 0218 	and.w	r2, r2, #24
 80092f8:	b2d2      	uxtb	r2, r2
 80092fa:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80092fc:	69fb      	ldr	r3, [r7, #28]
 80092fe:	2201      	movs	r2, #1
 8009300:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009302:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009306:	4618      	mov	r0, r3
 8009308:	3730      	adds	r7, #48	; 0x30
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
 800930e:	bf00      	nop
 8009310:	4ec4ec4f 	.word	0x4ec4ec4f

08009314 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b08a      	sub	sp, #40	; 0x28
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	613b      	str	r3, [r7, #16]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	691b      	ldr	r3, [r3, #16]
 800932a:	60fb      	str	r3, [r7, #12]
 800932c:	2300      	movs	r3, #0
 800932e:	617b      	str	r3, [r7, #20]
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009334:	69bb      	ldr	r3, [r7, #24]
 8009336:	1c5a      	adds	r2, r3, #1
 8009338:	61ba      	str	r2, [r7, #24]
 800933a:	693a      	ldr	r2, [r7, #16]
 800933c:	4413      	add	r3, r2
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8009342:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009344:	2b1f      	cmp	r3, #31
 8009346:	d940      	bls.n	80093ca <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009348:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800934a:	2b2f      	cmp	r3, #47	; 0x2f
 800934c:	d006      	beq.n	800935c <create_name+0x48>
 800934e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009350:	2b5c      	cmp	r3, #92	; 0x5c
 8009352:	d110      	bne.n	8009376 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009354:	e002      	b.n	800935c <create_name+0x48>
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	3301      	adds	r3, #1
 800935a:	61bb      	str	r3, [r7, #24]
 800935c:	693a      	ldr	r2, [r7, #16]
 800935e:	69bb      	ldr	r3, [r7, #24]
 8009360:	4413      	add	r3, r2
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	2b2f      	cmp	r3, #47	; 0x2f
 8009366:	d0f6      	beq.n	8009356 <create_name+0x42>
 8009368:	693a      	ldr	r2, [r7, #16]
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	4413      	add	r3, r2
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	2b5c      	cmp	r3, #92	; 0x5c
 8009372:	d0f0      	beq.n	8009356 <create_name+0x42>
			break;
 8009374:	e02a      	b.n	80093cc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	2bfe      	cmp	r3, #254	; 0xfe
 800937a:	d901      	bls.n	8009380 <create_name+0x6c>
 800937c:	2306      	movs	r3, #6
 800937e:	e17d      	b.n	800967c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009380:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009382:	b2db      	uxtb	r3, r3
 8009384:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009386:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009388:	2101      	movs	r1, #1
 800938a:	4618      	mov	r0, r3
 800938c:	f001 fa8c 	bl	800a8a8 <ff_convert>
 8009390:	4603      	mov	r3, r0
 8009392:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009394:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009396:	2b00      	cmp	r3, #0
 8009398:	d101      	bne.n	800939e <create_name+0x8a>
 800939a:	2306      	movs	r3, #6
 800939c:	e16e      	b.n	800967c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800939e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093a0:	2b7f      	cmp	r3, #127	; 0x7f
 80093a2:	d809      	bhi.n	80093b8 <create_name+0xa4>
 80093a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093a6:	4619      	mov	r1, r3
 80093a8:	488d      	ldr	r0, [pc, #564]	; (80095e0 <create_name+0x2cc>)
 80093aa:	f7fe fce0 	bl	8007d6e <chk_chr>
 80093ae:	4603      	mov	r3, r0
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d001      	beq.n	80093b8 <create_name+0xa4>
 80093b4:	2306      	movs	r3, #6
 80093b6:	e161      	b.n	800967c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	1c5a      	adds	r2, r3, #1
 80093bc:	617a      	str	r2, [r7, #20]
 80093be:	005b      	lsls	r3, r3, #1
 80093c0:	68fa      	ldr	r2, [r7, #12]
 80093c2:	4413      	add	r3, r2
 80093c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80093c6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80093c8:	e7b4      	b.n	8009334 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80093ca:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80093cc:	693a      	ldr	r2, [r7, #16]
 80093ce:	69bb      	ldr	r3, [r7, #24]
 80093d0:	441a      	add	r2, r3
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80093d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093d8:	2b1f      	cmp	r3, #31
 80093da:	d801      	bhi.n	80093e0 <create_name+0xcc>
 80093dc:	2304      	movs	r3, #4
 80093de:	e000      	b.n	80093e2 <create_name+0xce>
 80093e0:	2300      	movs	r3, #0
 80093e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80093e6:	e011      	b.n	800940c <create_name+0xf8>
		w = lfn[di - 1];
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80093ee:	3b01      	subs	r3, #1
 80093f0:	005b      	lsls	r3, r3, #1
 80093f2:	68fa      	ldr	r2, [r7, #12]
 80093f4:	4413      	add	r3, r2
 80093f6:	881b      	ldrh	r3, [r3, #0]
 80093f8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80093fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093fc:	2b20      	cmp	r3, #32
 80093fe:	d002      	beq.n	8009406 <create_name+0xf2>
 8009400:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009402:	2b2e      	cmp	r3, #46	; 0x2e
 8009404:	d106      	bne.n	8009414 <create_name+0x100>
		di--;
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	3b01      	subs	r3, #1
 800940a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d1ea      	bne.n	80093e8 <create_name+0xd4>
 8009412:	e000      	b.n	8009416 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8009414:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	005b      	lsls	r3, r3, #1
 800941a:	68fa      	ldr	r2, [r7, #12]
 800941c:	4413      	add	r3, r2
 800941e:	2200      	movs	r2, #0
 8009420:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d101      	bne.n	800942c <create_name+0x118>
 8009428:	2306      	movs	r3, #6
 800942a:	e127      	b.n	800967c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	3324      	adds	r3, #36	; 0x24
 8009430:	220b      	movs	r2, #11
 8009432:	2120      	movs	r1, #32
 8009434:	4618      	mov	r0, r3
 8009436:	f7fe fc58 	bl	8007cea <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800943a:	2300      	movs	r3, #0
 800943c:	61bb      	str	r3, [r7, #24]
 800943e:	e002      	b.n	8009446 <create_name+0x132>
 8009440:	69bb      	ldr	r3, [r7, #24]
 8009442:	3301      	adds	r3, #1
 8009444:	61bb      	str	r3, [r7, #24]
 8009446:	69bb      	ldr	r3, [r7, #24]
 8009448:	005b      	lsls	r3, r3, #1
 800944a:	68fa      	ldr	r2, [r7, #12]
 800944c:	4413      	add	r3, r2
 800944e:	881b      	ldrh	r3, [r3, #0]
 8009450:	2b20      	cmp	r3, #32
 8009452:	d0f5      	beq.n	8009440 <create_name+0x12c>
 8009454:	69bb      	ldr	r3, [r7, #24]
 8009456:	005b      	lsls	r3, r3, #1
 8009458:	68fa      	ldr	r2, [r7, #12]
 800945a:	4413      	add	r3, r2
 800945c:	881b      	ldrh	r3, [r3, #0]
 800945e:	2b2e      	cmp	r3, #46	; 0x2e
 8009460:	d0ee      	beq.n	8009440 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009462:	69bb      	ldr	r3, [r7, #24]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d009      	beq.n	800947c <create_name+0x168>
 8009468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800946c:	f043 0303 	orr.w	r3, r3, #3
 8009470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009474:	e002      	b.n	800947c <create_name+0x168>
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	3b01      	subs	r3, #1
 800947a:	617b      	str	r3, [r7, #20]
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d009      	beq.n	8009496 <create_name+0x182>
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009488:	3b01      	subs	r3, #1
 800948a:	005b      	lsls	r3, r3, #1
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	4413      	add	r3, r2
 8009490:	881b      	ldrh	r3, [r3, #0]
 8009492:	2b2e      	cmp	r3, #46	; 0x2e
 8009494:	d1ef      	bne.n	8009476 <create_name+0x162>

	i = b = 0; ni = 8;
 8009496:	2300      	movs	r3, #0
 8009498:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800949c:	2300      	movs	r3, #0
 800949e:	623b      	str	r3, [r7, #32]
 80094a0:	2308      	movs	r3, #8
 80094a2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80094a4:	69bb      	ldr	r3, [r7, #24]
 80094a6:	1c5a      	adds	r2, r3, #1
 80094a8:	61ba      	str	r2, [r7, #24]
 80094aa:	005b      	lsls	r3, r3, #1
 80094ac:	68fa      	ldr	r2, [r7, #12]
 80094ae:	4413      	add	r3, r2
 80094b0:	881b      	ldrh	r3, [r3, #0]
 80094b2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80094b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	f000 8090 	beq.w	80095dc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80094bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80094be:	2b20      	cmp	r3, #32
 80094c0:	d006      	beq.n	80094d0 <create_name+0x1bc>
 80094c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80094c4:	2b2e      	cmp	r3, #46	; 0x2e
 80094c6:	d10a      	bne.n	80094de <create_name+0x1ca>
 80094c8:	69ba      	ldr	r2, [r7, #24]
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d006      	beq.n	80094de <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80094d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094d4:	f043 0303 	orr.w	r3, r3, #3
 80094d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80094dc:	e07d      	b.n	80095da <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80094de:	6a3a      	ldr	r2, [r7, #32]
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d203      	bcs.n	80094ee <create_name+0x1da>
 80094e6:	69ba      	ldr	r2, [r7, #24]
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d123      	bne.n	8009536 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80094ee:	69fb      	ldr	r3, [r7, #28]
 80094f0:	2b0b      	cmp	r3, #11
 80094f2:	d106      	bne.n	8009502 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80094f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094f8:	f043 0303 	orr.w	r3, r3, #3
 80094fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009500:	e075      	b.n	80095ee <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009502:	69ba      	ldr	r2, [r7, #24]
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	429a      	cmp	r2, r3
 8009508:	d005      	beq.n	8009516 <create_name+0x202>
 800950a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800950e:	f043 0303 	orr.w	r3, r3, #3
 8009512:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8009516:	69ba      	ldr	r2, [r7, #24]
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	429a      	cmp	r2, r3
 800951c:	d866      	bhi.n	80095ec <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	61bb      	str	r3, [r7, #24]
 8009522:	2308      	movs	r3, #8
 8009524:	623b      	str	r3, [r7, #32]
 8009526:	230b      	movs	r3, #11
 8009528:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800952a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009534:	e051      	b.n	80095da <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009536:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009538:	2b7f      	cmp	r3, #127	; 0x7f
 800953a:	d914      	bls.n	8009566 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800953c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800953e:	2100      	movs	r1, #0
 8009540:	4618      	mov	r0, r3
 8009542:	f001 f9b1 	bl	800a8a8 <ff_convert>
 8009546:	4603      	mov	r3, r0
 8009548:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800954a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800954c:	2b00      	cmp	r3, #0
 800954e:	d004      	beq.n	800955a <create_name+0x246>
 8009550:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009552:	3b80      	subs	r3, #128	; 0x80
 8009554:	4a23      	ldr	r2, [pc, #140]	; (80095e4 <create_name+0x2d0>)
 8009556:	5cd3      	ldrb	r3, [r2, r3]
 8009558:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800955a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800955e:	f043 0302 	orr.w	r3, r3, #2
 8009562:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009566:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009568:	2b00      	cmp	r3, #0
 800956a:	d007      	beq.n	800957c <create_name+0x268>
 800956c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800956e:	4619      	mov	r1, r3
 8009570:	481d      	ldr	r0, [pc, #116]	; (80095e8 <create_name+0x2d4>)
 8009572:	f7fe fbfc 	bl	8007d6e <chk_chr>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d008      	beq.n	800958e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800957c:	235f      	movs	r3, #95	; 0x5f
 800957e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009580:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009584:	f043 0303 	orr.w	r3, r3, #3
 8009588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800958c:	e01b      	b.n	80095c6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800958e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009590:	2b40      	cmp	r3, #64	; 0x40
 8009592:	d909      	bls.n	80095a8 <create_name+0x294>
 8009594:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009596:	2b5a      	cmp	r3, #90	; 0x5a
 8009598:	d806      	bhi.n	80095a8 <create_name+0x294>
					b |= 2;
 800959a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800959e:	f043 0302 	orr.w	r3, r3, #2
 80095a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80095a6:	e00e      	b.n	80095c6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80095a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095aa:	2b60      	cmp	r3, #96	; 0x60
 80095ac:	d90b      	bls.n	80095c6 <create_name+0x2b2>
 80095ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095b0:	2b7a      	cmp	r3, #122	; 0x7a
 80095b2:	d808      	bhi.n	80095c6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80095b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80095b8:	f043 0301 	orr.w	r3, r3, #1
 80095bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80095c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095c2:	3b20      	subs	r3, #32
 80095c4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80095c6:	6a3b      	ldr	r3, [r7, #32]
 80095c8:	1c5a      	adds	r2, r3, #1
 80095ca:	623a      	str	r2, [r7, #32]
 80095cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80095ce:	b2d1      	uxtb	r1, r2
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	4413      	add	r3, r2
 80095d4:	460a      	mov	r2, r1
 80095d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80095da:	e763      	b.n	80094a4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80095dc:	bf00      	nop
 80095de:	e006      	b.n	80095ee <create_name+0x2da>
 80095e0:	0800df2c 	.word	0x0800df2c
 80095e4:	0800df8c 	.word	0x0800df8c
 80095e8:	0800df38 	.word	0x0800df38
			if (si > di) break;			/* No extension */
 80095ec:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80095f4:	2be5      	cmp	r3, #229	; 0xe5
 80095f6:	d103      	bne.n	8009600 <create_name+0x2ec>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2205      	movs	r2, #5
 80095fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8009600:	69fb      	ldr	r3, [r7, #28]
 8009602:	2b08      	cmp	r3, #8
 8009604:	d104      	bne.n	8009610 <create_name+0x2fc>
 8009606:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009610:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009614:	f003 030c 	and.w	r3, r3, #12
 8009618:	2b0c      	cmp	r3, #12
 800961a:	d005      	beq.n	8009628 <create_name+0x314>
 800961c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009620:	f003 0303 	and.w	r3, r3, #3
 8009624:	2b03      	cmp	r3, #3
 8009626:	d105      	bne.n	8009634 <create_name+0x320>
 8009628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800962c:	f043 0302 	orr.w	r3, r3, #2
 8009630:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009638:	f003 0302 	and.w	r3, r3, #2
 800963c:	2b00      	cmp	r3, #0
 800963e:	d117      	bne.n	8009670 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009640:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009644:	f003 0303 	and.w	r3, r3, #3
 8009648:	2b01      	cmp	r3, #1
 800964a:	d105      	bne.n	8009658 <create_name+0x344>
 800964c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009650:	f043 0310 	orr.w	r3, r3, #16
 8009654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009658:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800965c:	f003 030c 	and.w	r3, r3, #12
 8009660:	2b04      	cmp	r3, #4
 8009662:	d105      	bne.n	8009670 <create_name+0x35c>
 8009664:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009668:	f043 0308 	orr.w	r3, r3, #8
 800966c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009676:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800967a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800967c:	4618      	mov	r0, r3
 800967e:	3728      	adds	r7, #40	; 0x28
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b086      	sub	sp, #24
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009698:	e002      	b.n	80096a0 <follow_path+0x1c>
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	3301      	adds	r3, #1
 800969e:	603b      	str	r3, [r7, #0]
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	2b2f      	cmp	r3, #47	; 0x2f
 80096a6:	d0f8      	beq.n	800969a <follow_path+0x16>
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	2b5c      	cmp	r3, #92	; 0x5c
 80096ae:	d0f4      	beq.n	800969a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	2200      	movs	r2, #0
 80096b4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	2b1f      	cmp	r3, #31
 80096bc:	d80a      	bhi.n	80096d4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2280      	movs	r2, #128	; 0x80
 80096c2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80096c6:	2100      	movs	r1, #0
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f7ff f8fd 	bl	80088c8 <dir_sdi>
 80096ce:	4603      	mov	r3, r0
 80096d0:	75fb      	strb	r3, [r7, #23]
 80096d2:	e048      	b.n	8009766 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80096d4:	463b      	mov	r3, r7
 80096d6:	4619      	mov	r1, r3
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f7ff fe1b 	bl	8009314 <create_name>
 80096de:	4603      	mov	r3, r0
 80096e0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80096e2:	7dfb      	ldrb	r3, [r7, #23]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d139      	bne.n	800975c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f7ff fc5a 	bl	8008fa2 <dir_find>
 80096ee:	4603      	mov	r3, r0
 80096f0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80096f8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80096fa:	7dfb      	ldrb	r3, [r7, #23]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d00a      	beq.n	8009716 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009700:	7dfb      	ldrb	r3, [r7, #23]
 8009702:	2b04      	cmp	r3, #4
 8009704:	d12c      	bne.n	8009760 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009706:	7afb      	ldrb	r3, [r7, #11]
 8009708:	f003 0304 	and.w	r3, r3, #4
 800970c:	2b00      	cmp	r3, #0
 800970e:	d127      	bne.n	8009760 <follow_path+0xdc>
 8009710:	2305      	movs	r3, #5
 8009712:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009714:	e024      	b.n	8009760 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009716:	7afb      	ldrb	r3, [r7, #11]
 8009718:	f003 0304 	and.w	r3, r3, #4
 800971c:	2b00      	cmp	r3, #0
 800971e:	d121      	bne.n	8009764 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	799b      	ldrb	r3, [r3, #6]
 8009724:	f003 0310 	and.w	r3, r3, #16
 8009728:	2b00      	cmp	r3, #0
 800972a:	d102      	bne.n	8009732 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800972c:	2305      	movs	r3, #5
 800972e:	75fb      	strb	r3, [r7, #23]
 8009730:	e019      	b.n	8009766 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	695b      	ldr	r3, [r3, #20]
 800973c:	68fa      	ldr	r2, [r7, #12]
 800973e:	8992      	ldrh	r2, [r2, #12]
 8009740:	fbb3 f0f2 	udiv	r0, r3, r2
 8009744:	fb00 f202 	mul.w	r2, r0, r2
 8009748:	1a9b      	subs	r3, r3, r2
 800974a:	440b      	add	r3, r1
 800974c:	4619      	mov	r1, r3
 800974e:	68f8      	ldr	r0, [r7, #12]
 8009750:	f7ff fa60 	bl	8008c14 <ld_clust>
 8009754:	4602      	mov	r2, r0
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800975a:	e7bb      	b.n	80096d4 <follow_path+0x50>
			if (res != FR_OK) break;
 800975c:	bf00      	nop
 800975e:	e002      	b.n	8009766 <follow_path+0xe2>
				break;
 8009760:	bf00      	nop
 8009762:	e000      	b.n	8009766 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009764:	bf00      	nop
			}
		}
	}

	return res;
 8009766:	7dfb      	ldrb	r3, [r7, #23]
}
 8009768:	4618      	mov	r0, r3
 800976a:	3718      	adds	r7, #24
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009770:	b480      	push	{r7}
 8009772:	b087      	sub	sp, #28
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009778:	f04f 33ff 	mov.w	r3, #4294967295
 800977c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d031      	beq.n	80097ea <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	617b      	str	r3, [r7, #20]
 800978c:	e002      	b.n	8009794 <get_ldnumber+0x24>
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	3301      	adds	r3, #1
 8009792:	617b      	str	r3, [r7, #20]
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	2b1f      	cmp	r3, #31
 800979a:	d903      	bls.n	80097a4 <get_ldnumber+0x34>
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	2b3a      	cmp	r3, #58	; 0x3a
 80097a2:	d1f4      	bne.n	800978e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	2b3a      	cmp	r3, #58	; 0x3a
 80097aa:	d11c      	bne.n	80097e6 <get_ldnumber+0x76>
			tp = *path;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	1c5a      	adds	r2, r3, #1
 80097b6:	60fa      	str	r2, [r7, #12]
 80097b8:	781b      	ldrb	r3, [r3, #0]
 80097ba:	3b30      	subs	r3, #48	; 0x30
 80097bc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	2b09      	cmp	r3, #9
 80097c2:	d80e      	bhi.n	80097e2 <get_ldnumber+0x72>
 80097c4:	68fa      	ldr	r2, [r7, #12]
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d10a      	bne.n	80097e2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d107      	bne.n	80097e2 <get_ldnumber+0x72>
					vol = (int)i;
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	3301      	adds	r3, #1
 80097da:	617b      	str	r3, [r7, #20]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	697a      	ldr	r2, [r7, #20]
 80097e0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	e002      	b.n	80097ec <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80097e6:	2300      	movs	r3, #0
 80097e8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80097ea:	693b      	ldr	r3, [r7, #16]
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	371c      	adds	r7, #28
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr

080097f8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2200      	movs	r2, #0
 8009806:	70da      	strb	r2, [r3, #3]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f04f 32ff 	mov.w	r2, #4294967295
 800980e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009810:	6839      	ldr	r1, [r7, #0]
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f7fe fc76 	bl	8008104 <move_window>
 8009818:	4603      	mov	r3, r0
 800981a:	2b00      	cmp	r3, #0
 800981c:	d001      	beq.n	8009822 <check_fs+0x2a>
 800981e:	2304      	movs	r3, #4
 8009820:	e038      	b.n	8009894 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	3338      	adds	r3, #56	; 0x38
 8009826:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800982a:	4618      	mov	r0, r3
 800982c:	f7fe f9ba 	bl	8007ba4 <ld_word>
 8009830:	4603      	mov	r3, r0
 8009832:	461a      	mov	r2, r3
 8009834:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009838:	429a      	cmp	r2, r3
 800983a:	d001      	beq.n	8009840 <check_fs+0x48>
 800983c:	2303      	movs	r3, #3
 800983e:	e029      	b.n	8009894 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009846:	2be9      	cmp	r3, #233	; 0xe9
 8009848:	d009      	beq.n	800985e <check_fs+0x66>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009850:	2beb      	cmp	r3, #235	; 0xeb
 8009852:	d11e      	bne.n	8009892 <check_fs+0x9a>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800985a:	2b90      	cmp	r3, #144	; 0x90
 800985c:	d119      	bne.n	8009892 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	3338      	adds	r3, #56	; 0x38
 8009862:	3336      	adds	r3, #54	; 0x36
 8009864:	4618      	mov	r0, r3
 8009866:	f7fe f9b5 	bl	8007bd4 <ld_dword>
 800986a:	4603      	mov	r3, r0
 800986c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009870:	4a0a      	ldr	r2, [pc, #40]	; (800989c <check_fs+0xa4>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d101      	bne.n	800987a <check_fs+0x82>
 8009876:	2300      	movs	r3, #0
 8009878:	e00c      	b.n	8009894 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	3338      	adds	r3, #56	; 0x38
 800987e:	3352      	adds	r3, #82	; 0x52
 8009880:	4618      	mov	r0, r3
 8009882:	f7fe f9a7 	bl	8007bd4 <ld_dword>
 8009886:	4603      	mov	r3, r0
 8009888:	4a05      	ldr	r2, [pc, #20]	; (80098a0 <check_fs+0xa8>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d101      	bne.n	8009892 <check_fs+0x9a>
 800988e:	2300      	movs	r3, #0
 8009890:	e000      	b.n	8009894 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009892:	2302      	movs	r3, #2
}
 8009894:	4618      	mov	r0, r3
 8009896:	3708      	adds	r7, #8
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}
 800989c:	00544146 	.word	0x00544146
 80098a0:	33544146 	.word	0x33544146

080098a4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b096      	sub	sp, #88	; 0x58
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	60b9      	str	r1, [r7, #8]
 80098ae:	4613      	mov	r3, r2
 80098b0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	2200      	movs	r2, #0
 80098b6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80098b8:	68f8      	ldr	r0, [r7, #12]
 80098ba:	f7ff ff59 	bl	8009770 <get_ldnumber>
 80098be:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80098c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	da01      	bge.n	80098ca <find_volume+0x26>
 80098c6:	230b      	movs	r3, #11
 80098c8:	e265      	b.n	8009d96 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80098ca:	4a9f      	ldr	r2, [pc, #636]	; (8009b48 <find_volume+0x2a4>)
 80098cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098d2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80098d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d101      	bne.n	80098de <find_volume+0x3a>
 80098da:	230c      	movs	r3, #12
 80098dc:	e25b      	b.n	8009d96 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098e2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80098e4:	79fb      	ldrb	r3, [r7, #7]
 80098e6:	f023 0301 	bic.w	r3, r3, #1
 80098ea:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80098ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d01a      	beq.n	800992a <find_volume+0x86>
		stat = disk_status(fs->drv);
 80098f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f6:	785b      	ldrb	r3, [r3, #1]
 80098f8:	4618      	mov	r0, r3
 80098fa:	f7fe f8b5 	bl	8007a68 <disk_status>
 80098fe:	4603      	mov	r3, r0
 8009900:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009904:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009908:	f003 0301 	and.w	r3, r3, #1
 800990c:	2b00      	cmp	r3, #0
 800990e:	d10c      	bne.n	800992a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009910:	79fb      	ldrb	r3, [r7, #7]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d007      	beq.n	8009926 <find_volume+0x82>
 8009916:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800991a:	f003 0304 	and.w	r3, r3, #4
 800991e:	2b00      	cmp	r3, #0
 8009920:	d001      	beq.n	8009926 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009922:	230a      	movs	r3, #10
 8009924:	e237      	b.n	8009d96 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8009926:	2300      	movs	r3, #0
 8009928:	e235      	b.n	8009d96 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800992a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800992c:	2200      	movs	r2, #0
 800992e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009932:	b2da      	uxtb	r2, r3
 8009934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009936:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800993a:	785b      	ldrb	r3, [r3, #1]
 800993c:	4618      	mov	r0, r3
 800993e:	f7fe f8ad 	bl	8007a9c <disk_initialize>
 8009942:	4603      	mov	r3, r0
 8009944:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009948:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800994c:	f003 0301 	and.w	r3, r3, #1
 8009950:	2b00      	cmp	r3, #0
 8009952:	d001      	beq.n	8009958 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009954:	2303      	movs	r3, #3
 8009956:	e21e      	b.n	8009d96 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009958:	79fb      	ldrb	r3, [r7, #7]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d007      	beq.n	800996e <find_volume+0xca>
 800995e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009962:	f003 0304 	and.w	r3, r3, #4
 8009966:	2b00      	cmp	r3, #0
 8009968:	d001      	beq.n	800996e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800996a:	230a      	movs	r3, #10
 800996c:	e213      	b.n	8009d96 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800996e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009970:	7858      	ldrb	r0, [r3, #1]
 8009972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009974:	330c      	adds	r3, #12
 8009976:	461a      	mov	r2, r3
 8009978:	2102      	movs	r1, #2
 800997a:	f7fe f8f5 	bl	8007b68 <disk_ioctl>
 800997e:	4603      	mov	r3, r0
 8009980:	2b00      	cmp	r3, #0
 8009982:	d001      	beq.n	8009988 <find_volume+0xe4>
 8009984:	2301      	movs	r3, #1
 8009986:	e206      	b.n	8009d96 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800998a:	899b      	ldrh	r3, [r3, #12]
 800998c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009990:	d80d      	bhi.n	80099ae <find_volume+0x10a>
 8009992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009994:	899b      	ldrh	r3, [r3, #12]
 8009996:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800999a:	d308      	bcc.n	80099ae <find_volume+0x10a>
 800999c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800999e:	899b      	ldrh	r3, [r3, #12]
 80099a0:	461a      	mov	r2, r3
 80099a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a4:	899b      	ldrh	r3, [r3, #12]
 80099a6:	3b01      	subs	r3, #1
 80099a8:	4013      	ands	r3, r2
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d001      	beq.n	80099b2 <find_volume+0x10e>
 80099ae:	2301      	movs	r3, #1
 80099b0:	e1f1      	b.n	8009d96 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80099b2:	2300      	movs	r3, #0
 80099b4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80099b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80099b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80099ba:	f7ff ff1d 	bl	80097f8 <check_fs>
 80099be:	4603      	mov	r3, r0
 80099c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80099c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80099c8:	2b02      	cmp	r3, #2
 80099ca:	d149      	bne.n	8009a60 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80099cc:	2300      	movs	r3, #0
 80099ce:	643b      	str	r3, [r7, #64]	; 0x40
 80099d0:	e01e      	b.n	8009a10 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80099d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80099d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099da:	011b      	lsls	r3, r3, #4
 80099dc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80099e0:	4413      	add	r3, r2
 80099e2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80099e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e6:	3304      	adds	r3, #4
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d006      	beq.n	80099fc <find_volume+0x158>
 80099ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f0:	3308      	adds	r3, #8
 80099f2:	4618      	mov	r0, r3
 80099f4:	f7fe f8ee 	bl	8007bd4 <ld_dword>
 80099f8:	4602      	mov	r2, r0
 80099fa:	e000      	b.n	80099fe <find_volume+0x15a>
 80099fc:	2200      	movs	r2, #0
 80099fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	3358      	adds	r3, #88	; 0x58
 8009a04:	443b      	add	r3, r7
 8009a06:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009a0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	643b      	str	r3, [r7, #64]	; 0x40
 8009a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a12:	2b03      	cmp	r3, #3
 8009a14:	d9dd      	bls.n	80099d2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009a16:	2300      	movs	r3, #0
 8009a18:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d002      	beq.n	8009a26 <find_volume+0x182>
 8009a20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a22:	3b01      	subs	r3, #1
 8009a24:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	3358      	adds	r3, #88	; 0x58
 8009a2c:	443b      	add	r3, r7
 8009a2e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009a32:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d005      	beq.n	8009a46 <find_volume+0x1a2>
 8009a3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009a3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009a3e:	f7ff fedb 	bl	80097f8 <check_fs>
 8009a42:	4603      	mov	r3, r0
 8009a44:	e000      	b.n	8009a48 <find_volume+0x1a4>
 8009a46:	2303      	movs	r3, #3
 8009a48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009a4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d905      	bls.n	8009a60 <find_volume+0x1bc>
 8009a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a56:	3301      	adds	r3, #1
 8009a58:	643b      	str	r3, [r7, #64]	; 0x40
 8009a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a5c:	2b03      	cmp	r3, #3
 8009a5e:	d9e2      	bls.n	8009a26 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009a60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009a64:	2b04      	cmp	r3, #4
 8009a66:	d101      	bne.n	8009a6c <find_volume+0x1c8>
 8009a68:	2301      	movs	r3, #1
 8009a6a:	e194      	b.n	8009d96 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009a6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d901      	bls.n	8009a78 <find_volume+0x1d4>
 8009a74:	230d      	movs	r3, #13
 8009a76:	e18e      	b.n	8009d96 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a7a:	3338      	adds	r3, #56	; 0x38
 8009a7c:	330b      	adds	r3, #11
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f7fe f890 	bl	8007ba4 <ld_word>
 8009a84:	4603      	mov	r3, r0
 8009a86:	461a      	mov	r2, r3
 8009a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a8a:	899b      	ldrh	r3, [r3, #12]
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d001      	beq.n	8009a94 <find_volume+0x1f0>
 8009a90:	230d      	movs	r3, #13
 8009a92:	e180      	b.n	8009d96 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a96:	3338      	adds	r3, #56	; 0x38
 8009a98:	3316      	adds	r3, #22
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7fe f882 	bl	8007ba4 <ld_word>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d106      	bne.n	8009ab8 <find_volume+0x214>
 8009aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aac:	3338      	adds	r3, #56	; 0x38
 8009aae:	3324      	adds	r3, #36	; 0x24
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f7fe f88f 	bl	8007bd4 <ld_dword>
 8009ab6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009abc:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8009ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aca:	789b      	ldrb	r3, [r3, #2]
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	d005      	beq.n	8009adc <find_volume+0x238>
 8009ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad2:	789b      	ldrb	r3, [r3, #2]
 8009ad4:	2b02      	cmp	r3, #2
 8009ad6:	d001      	beq.n	8009adc <find_volume+0x238>
 8009ad8:	230d      	movs	r3, #13
 8009ada:	e15c      	b.n	8009d96 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ade:	789b      	ldrb	r3, [r3, #2]
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ae4:	fb02 f303 	mul.w	r3, r2, r3
 8009ae8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009af0:	b29a      	uxth	r2, r3
 8009af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af8:	895b      	ldrh	r3, [r3, #10]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d008      	beq.n	8009b10 <find_volume+0x26c>
 8009afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b00:	895b      	ldrh	r3, [r3, #10]
 8009b02:	461a      	mov	r2, r3
 8009b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b06:	895b      	ldrh	r3, [r3, #10]
 8009b08:	3b01      	subs	r3, #1
 8009b0a:	4013      	ands	r3, r2
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d001      	beq.n	8009b14 <find_volume+0x270>
 8009b10:	230d      	movs	r3, #13
 8009b12:	e140      	b.n	8009d96 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b16:	3338      	adds	r3, #56	; 0x38
 8009b18:	3311      	adds	r3, #17
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f7fe f842 	bl	8007ba4 <ld_word>
 8009b20:	4603      	mov	r3, r0
 8009b22:	461a      	mov	r2, r3
 8009b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b26:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b2a:	891b      	ldrh	r3, [r3, #8]
 8009b2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b2e:	8992      	ldrh	r2, [r2, #12]
 8009b30:	0952      	lsrs	r2, r2, #5
 8009b32:	b292      	uxth	r2, r2
 8009b34:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b38:	fb01 f202 	mul.w	r2, r1, r2
 8009b3c:	1a9b      	subs	r3, r3, r2
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d003      	beq.n	8009b4c <find_volume+0x2a8>
 8009b44:	230d      	movs	r3, #13
 8009b46:	e126      	b.n	8009d96 <find_volume+0x4f2>
 8009b48:	20003620 	.word	0x20003620

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b4e:	3338      	adds	r3, #56	; 0x38
 8009b50:	3313      	adds	r3, #19
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7fe f826 	bl	8007ba4 <ld_word>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009b5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d106      	bne.n	8009b70 <find_volume+0x2cc>
 8009b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b64:	3338      	adds	r3, #56	; 0x38
 8009b66:	3320      	adds	r3, #32
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f7fe f833 	bl	8007bd4 <ld_dword>
 8009b6e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b72:	3338      	adds	r3, #56	; 0x38
 8009b74:	330e      	adds	r3, #14
 8009b76:	4618      	mov	r0, r3
 8009b78:	f7fe f814 	bl	8007ba4 <ld_word>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009b80:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d101      	bne.n	8009b8a <find_volume+0x2e6>
 8009b86:	230d      	movs	r3, #13
 8009b88:	e105      	b.n	8009d96 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009b8a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b8e:	4413      	add	r3, r2
 8009b90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b92:	8911      	ldrh	r1, [r2, #8]
 8009b94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b96:	8992      	ldrh	r2, [r2, #12]
 8009b98:	0952      	lsrs	r2, r2, #5
 8009b9a:	b292      	uxth	r2, r2
 8009b9c:	fbb1 f2f2 	udiv	r2, r1, r2
 8009ba0:	b292      	uxth	r2, r2
 8009ba2:	4413      	add	r3, r2
 8009ba4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009ba6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d201      	bcs.n	8009bb2 <find_volume+0x30e>
 8009bae:	230d      	movs	r3, #13
 8009bb0:	e0f1      	b.n	8009d96 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009bb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb6:	1ad3      	subs	r3, r2, r3
 8009bb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009bba:	8952      	ldrh	r2, [r2, #10]
 8009bbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009bc0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d101      	bne.n	8009bcc <find_volume+0x328>
 8009bc8:	230d      	movs	r3, #13
 8009bca:	e0e4      	b.n	8009d96 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8009bcc:	2303      	movs	r3, #3
 8009bce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d802      	bhi.n	8009be2 <find_volume+0x33e>
 8009bdc:	2302      	movs	r3, #2
 8009bde:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be4:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d802      	bhi.n	8009bf2 <find_volume+0x34e>
 8009bec:	2301      	movs	r3, #1
 8009bee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf4:	1c9a      	adds	r2, r3, #2
 8009bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf8:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8009bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bfc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009bfe:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009c00:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009c02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c04:	441a      	add	r2, r3
 8009c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c08:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8009c0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c0e:	441a      	add	r2, r3
 8009c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c12:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8009c14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009c18:	2b03      	cmp	r3, #3
 8009c1a:	d11e      	bne.n	8009c5a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c1e:	3338      	adds	r3, #56	; 0x38
 8009c20:	332a      	adds	r3, #42	; 0x2a
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7fd ffbe 	bl	8007ba4 <ld_word>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d001      	beq.n	8009c32 <find_volume+0x38e>
 8009c2e:	230d      	movs	r3, #13
 8009c30:	e0b1      	b.n	8009d96 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c34:	891b      	ldrh	r3, [r3, #8]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d001      	beq.n	8009c3e <find_volume+0x39a>
 8009c3a:	230d      	movs	r3, #13
 8009c3c:	e0ab      	b.n	8009d96 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c40:	3338      	adds	r3, #56	; 0x38
 8009c42:	332c      	adds	r3, #44	; 0x2c
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7fd ffc5 	bl	8007bd4 <ld_dword>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c4e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c52:	69db      	ldr	r3, [r3, #28]
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	647b      	str	r3, [r7, #68]	; 0x44
 8009c58:	e01f      	b.n	8009c9a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c5c:	891b      	ldrh	r3, [r3, #8]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d101      	bne.n	8009c66 <find_volume+0x3c2>
 8009c62:	230d      	movs	r3, #13
 8009c64:	e097      	b.n	8009d96 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c6c:	441a      	add	r2, r3
 8009c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c70:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009c72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009c76:	2b02      	cmp	r3, #2
 8009c78:	d103      	bne.n	8009c82 <find_volume+0x3de>
 8009c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c7c:	69db      	ldr	r3, [r3, #28]
 8009c7e:	005b      	lsls	r3, r3, #1
 8009c80:	e00a      	b.n	8009c98 <find_volume+0x3f4>
 8009c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c84:	69da      	ldr	r2, [r3, #28]
 8009c86:	4613      	mov	r3, r2
 8009c88:	005b      	lsls	r3, r3, #1
 8009c8a:	4413      	add	r3, r2
 8009c8c:	085a      	lsrs	r2, r3, #1
 8009c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c90:	69db      	ldr	r3, [r3, #28]
 8009c92:	f003 0301 	and.w	r3, r3, #1
 8009c96:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009c98:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c9c:	6a1a      	ldr	r2, [r3, #32]
 8009c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca0:	899b      	ldrh	r3, [r3, #12]
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ca6:	440b      	add	r3, r1
 8009ca8:	3b01      	subs	r3, #1
 8009caa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009cac:	8989      	ldrh	r1, [r1, #12]
 8009cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d201      	bcs.n	8009cba <find_volume+0x416>
 8009cb6:	230d      	movs	r3, #13
 8009cb8:	e06d      	b.n	8009d96 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8009cc0:	619a      	str	r2, [r3, #24]
 8009cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cc4:	699a      	ldr	r2, [r3, #24]
 8009cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cc8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8009cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ccc:	2280      	movs	r2, #128	; 0x80
 8009cce:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009cd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009cd4:	2b03      	cmp	r3, #3
 8009cd6:	d149      	bne.n	8009d6c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cda:	3338      	adds	r3, #56	; 0x38
 8009cdc:	3330      	adds	r3, #48	; 0x30
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f7fd ff60 	bl	8007ba4 <ld_word>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	2b01      	cmp	r3, #1
 8009ce8:	d140      	bne.n	8009d6c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009cea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cec:	3301      	adds	r3, #1
 8009cee:	4619      	mov	r1, r3
 8009cf0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009cf2:	f7fe fa07 	bl	8008104 <move_window>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d137      	bne.n	8009d6c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8009cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cfe:	2200      	movs	r2, #0
 8009d00:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d04:	3338      	adds	r3, #56	; 0x38
 8009d06:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7fd ff4a 	bl	8007ba4 <ld_word>
 8009d10:	4603      	mov	r3, r0
 8009d12:	461a      	mov	r2, r3
 8009d14:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d127      	bne.n	8009d6c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d1e:	3338      	adds	r3, #56	; 0x38
 8009d20:	4618      	mov	r0, r3
 8009d22:	f7fd ff57 	bl	8007bd4 <ld_dword>
 8009d26:	4603      	mov	r3, r0
 8009d28:	4a1d      	ldr	r2, [pc, #116]	; (8009da0 <find_volume+0x4fc>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d11e      	bne.n	8009d6c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d30:	3338      	adds	r3, #56	; 0x38
 8009d32:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7fd ff4c 	bl	8007bd4 <ld_dword>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	4a19      	ldr	r2, [pc, #100]	; (8009da4 <find_volume+0x500>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d113      	bne.n	8009d6c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d46:	3338      	adds	r3, #56	; 0x38
 8009d48:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f7fd ff41 	bl	8007bd4 <ld_dword>
 8009d52:	4602      	mov	r2, r0
 8009d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d56:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d5a:	3338      	adds	r3, #56	; 0x38
 8009d5c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7fd ff37 	bl	8007bd4 <ld_dword>
 8009d66:	4602      	mov	r2, r0
 8009d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d6a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d6e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009d72:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009d74:	4b0c      	ldr	r3, [pc, #48]	; (8009da8 <find_volume+0x504>)
 8009d76:	881b      	ldrh	r3, [r3, #0]
 8009d78:	3301      	adds	r3, #1
 8009d7a:	b29a      	uxth	r2, r3
 8009d7c:	4b0a      	ldr	r3, [pc, #40]	; (8009da8 <find_volume+0x504>)
 8009d7e:	801a      	strh	r2, [r3, #0]
 8009d80:	4b09      	ldr	r3, [pc, #36]	; (8009da8 <find_volume+0x504>)
 8009d82:	881a      	ldrh	r2, [r3, #0]
 8009d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d86:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8009d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d8a:	4a08      	ldr	r2, [pc, #32]	; (8009dac <find_volume+0x508>)
 8009d8c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009d8e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009d90:	f7fe f950 	bl	8008034 <clear_lock>
#endif
	return FR_OK;
 8009d94:	2300      	movs	r3, #0
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3758      	adds	r7, #88	; 0x58
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	41615252 	.word	0x41615252
 8009da4:	61417272 	.word	0x61417272
 8009da8:	20003624 	.word	0x20003624
 8009dac:	20003648 	.word	0x20003648

08009db0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009dba:	2309      	movs	r3, #9
 8009dbc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d01c      	beq.n	8009dfe <validate+0x4e>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d018      	beq.n	8009dfe <validate+0x4e>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d013      	beq.n	8009dfe <validate+0x4e>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	889a      	ldrh	r2, [r3, #4]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	88db      	ldrh	r3, [r3, #6]
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d10c      	bne.n	8009dfe <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	785b      	ldrb	r3, [r3, #1]
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7fd fe3c 	bl	8007a68 <disk_status>
 8009df0:	4603      	mov	r3, r0
 8009df2:	f003 0301 	and.w	r3, r3, #1
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d101      	bne.n	8009dfe <validate+0x4e>
			res = FR_OK;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009dfe:	7bfb      	ldrb	r3, [r7, #15]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d102      	bne.n	8009e0a <validate+0x5a>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	e000      	b.n	8009e0c <validate+0x5c>
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	683a      	ldr	r2, [r7, #0]
 8009e0e:	6013      	str	r3, [r2, #0]
	return res;
 8009e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3710      	adds	r7, #16
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
	...

08009e1c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b088      	sub	sp, #32
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	60b9      	str	r1, [r7, #8]
 8009e26:	4613      	mov	r3, r2
 8009e28:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009e2e:	f107 0310 	add.w	r3, r7, #16
 8009e32:	4618      	mov	r0, r3
 8009e34:	f7ff fc9c 	bl	8009770 <get_ldnumber>
 8009e38:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009e3a:	69fb      	ldr	r3, [r7, #28]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	da01      	bge.n	8009e44 <f_mount+0x28>
 8009e40:	230b      	movs	r3, #11
 8009e42:	e02b      	b.n	8009e9c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009e44:	4a17      	ldr	r2, [pc, #92]	; (8009ea4 <f_mount+0x88>)
 8009e46:	69fb      	ldr	r3, [r7, #28]
 8009e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e4c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009e4e:	69bb      	ldr	r3, [r7, #24]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d005      	beq.n	8009e60 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009e54:	69b8      	ldr	r0, [r7, #24]
 8009e56:	f7fe f8ed 	bl	8008034 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009e5a:	69bb      	ldr	r3, [r7, #24]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d002      	beq.n	8009e6c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009e6c:	68fa      	ldr	r2, [r7, #12]
 8009e6e:	490d      	ldr	r1, [pc, #52]	; (8009ea4 <f_mount+0x88>)
 8009e70:	69fb      	ldr	r3, [r7, #28]
 8009e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d002      	beq.n	8009e82 <f_mount+0x66>
 8009e7c:	79fb      	ldrb	r3, [r7, #7]
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d001      	beq.n	8009e86 <f_mount+0x6a>
 8009e82:	2300      	movs	r3, #0
 8009e84:	e00a      	b.n	8009e9c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009e86:	f107 010c 	add.w	r1, r7, #12
 8009e8a:	f107 0308 	add.w	r3, r7, #8
 8009e8e:	2200      	movs	r2, #0
 8009e90:	4618      	mov	r0, r3
 8009e92:	f7ff fd07 	bl	80098a4 <find_volume>
 8009e96:	4603      	mov	r3, r0
 8009e98:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3720      	adds	r7, #32
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}
 8009ea4:	20003620 	.word	0x20003620

08009ea8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b09a      	sub	sp, #104	; 0x68
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	4613      	mov	r3, r2
 8009eb4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d101      	bne.n	8009ec0 <f_open+0x18>
 8009ebc:	2309      	movs	r3, #9
 8009ebe:	e1bb      	b.n	800a238 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009ec0:	79fb      	ldrb	r3, [r7, #7]
 8009ec2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ec6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009ec8:	79fa      	ldrb	r2, [r7, #7]
 8009eca:	f107 0114 	add.w	r1, r7, #20
 8009ece:	f107 0308 	add.w	r3, r7, #8
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7ff fce6 	bl	80098a4 <find_volume>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8009ede:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	f040 819f 	bne.w	800a226 <f_open+0x37e>
		dj.obj.fs = fs;
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009eec:	68ba      	ldr	r2, [r7, #8]
 8009eee:	f107 0318 	add.w	r3, r7, #24
 8009ef2:	4611      	mov	r1, r2
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f7ff fbc5 	bl	8009684 <follow_path>
 8009efa:	4603      	mov	r3, r0
 8009efc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009f00:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d11a      	bne.n	8009f3e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009f08:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009f0c:	b25b      	sxtb	r3, r3
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	da03      	bge.n	8009f1a <f_open+0x72>
				res = FR_INVALID_NAME;
 8009f12:	2306      	movs	r3, #6
 8009f14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009f18:	e011      	b.n	8009f3e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009f1a:	79fb      	ldrb	r3, [r7, #7]
 8009f1c:	f023 0301 	bic.w	r3, r3, #1
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	bf14      	ite	ne
 8009f24:	2301      	movne	r3, #1
 8009f26:	2300      	moveq	r3, #0
 8009f28:	b2db      	uxtb	r3, r3
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	f107 0318 	add.w	r3, r7, #24
 8009f30:	4611      	mov	r1, r2
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7fd ff36 	bl	8007da4 <chk_lock>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009f3e:	79fb      	ldrb	r3, [r7, #7]
 8009f40:	f003 031c 	and.w	r3, r3, #28
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d07f      	beq.n	800a048 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009f48:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d017      	beq.n	8009f80 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009f50:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009f54:	2b04      	cmp	r3, #4
 8009f56:	d10e      	bne.n	8009f76 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009f58:	f7fd ff80 	bl	8007e5c <enq_lock>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d006      	beq.n	8009f70 <f_open+0xc8>
 8009f62:	f107 0318 	add.w	r3, r7, #24
 8009f66:	4618      	mov	r0, r3
 8009f68:	f7ff f8dc 	bl	8009124 <dir_register>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	e000      	b.n	8009f72 <f_open+0xca>
 8009f70:	2312      	movs	r3, #18
 8009f72:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009f76:	79fb      	ldrb	r3, [r7, #7]
 8009f78:	f043 0308 	orr.w	r3, r3, #8
 8009f7c:	71fb      	strb	r3, [r7, #7]
 8009f7e:	e010      	b.n	8009fa2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009f80:	7fbb      	ldrb	r3, [r7, #30]
 8009f82:	f003 0311 	and.w	r3, r3, #17
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d003      	beq.n	8009f92 <f_open+0xea>
					res = FR_DENIED;
 8009f8a:	2307      	movs	r3, #7
 8009f8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009f90:	e007      	b.n	8009fa2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009f92:	79fb      	ldrb	r3, [r7, #7]
 8009f94:	f003 0304 	and.w	r3, r3, #4
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d002      	beq.n	8009fa2 <f_open+0xfa>
 8009f9c:	2308      	movs	r3, #8
 8009f9e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009fa2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d168      	bne.n	800a07c <f_open+0x1d4>
 8009faa:	79fb      	ldrb	r3, [r7, #7]
 8009fac:	f003 0308 	and.w	r3, r3, #8
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d063      	beq.n	800a07c <f_open+0x1d4>
				dw = GET_FATTIME();
 8009fb4:	f7fd fcfa 	bl	80079ac <get_fattime>
 8009fb8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fbc:	330e      	adds	r3, #14
 8009fbe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f7fd fe45 	bl	8007c50 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc8:	3316      	adds	r3, #22
 8009fca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f7fd fe3f 	bl	8007c50 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd4:	330b      	adds	r3, #11
 8009fd6:	2220      	movs	r2, #32
 8009fd8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009fde:	4611      	mov	r1, r2
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7fe fe17 	bl	8008c14 <ld_clust>
 8009fe6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009fec:	2200      	movs	r2, #0
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7fe fe2f 	bl	8008c52 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff6:	331c      	adds	r3, #28
 8009ff8:	2100      	movs	r1, #0
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7fd fe28 	bl	8007c50 <st_dword>
					fs->wflag = 1;
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	2201      	movs	r2, #1
 800a004:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a006:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d037      	beq.n	800a07c <f_open+0x1d4>
						dw = fs->winsect;
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a010:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800a012:	f107 0318 	add.w	r3, r7, #24
 800a016:	2200      	movs	r2, #0
 800a018:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a01a:	4618      	mov	r0, r3
 800a01c:	f7fe fb1f 	bl	800865e <remove_chain>
 800a020:	4603      	mov	r3, r0
 800a022:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800a026:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d126      	bne.n	800a07c <f_open+0x1d4>
							res = move_window(fs, dw);
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a032:	4618      	mov	r0, r3
 800a034:	f7fe f866 	bl	8008104 <move_window>
 800a038:	4603      	mov	r3, r0
 800a03a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a042:	3a01      	subs	r2, #1
 800a044:	615a      	str	r2, [r3, #20]
 800a046:	e019      	b.n	800a07c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a048:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d115      	bne.n	800a07c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a050:	7fbb      	ldrb	r3, [r7, #30]
 800a052:	f003 0310 	and.w	r3, r3, #16
 800a056:	2b00      	cmp	r3, #0
 800a058:	d003      	beq.n	800a062 <f_open+0x1ba>
					res = FR_NO_FILE;
 800a05a:	2304      	movs	r3, #4
 800a05c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a060:	e00c      	b.n	800a07c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a062:	79fb      	ldrb	r3, [r7, #7]
 800a064:	f003 0302 	and.w	r3, r3, #2
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d007      	beq.n	800a07c <f_open+0x1d4>
 800a06c:	7fbb      	ldrb	r3, [r7, #30]
 800a06e:	f003 0301 	and.w	r3, r3, #1
 800a072:	2b00      	cmp	r3, #0
 800a074:	d002      	beq.n	800a07c <f_open+0x1d4>
						res = FR_DENIED;
 800a076:	2307      	movs	r3, #7
 800a078:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800a07c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a080:	2b00      	cmp	r3, #0
 800a082:	d128      	bne.n	800a0d6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a084:	79fb      	ldrb	r3, [r7, #7]
 800a086:	f003 0308 	and.w	r3, r3, #8
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d003      	beq.n	800a096 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a08e:	79fb      	ldrb	r3, [r7, #7]
 800a090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a094:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a09e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a0a4:	79fb      	ldrb	r3, [r7, #7]
 800a0a6:	f023 0301 	bic.w	r3, r3, #1
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	bf14      	ite	ne
 800a0ae:	2301      	movne	r3, #1
 800a0b0:	2300      	moveq	r3, #0
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	f107 0318 	add.w	r3, r7, #24
 800a0ba:	4611      	mov	r1, r2
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f7fd feef 	bl	8007ea0 <inc_lock>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	691b      	ldr	r3, [r3, #16]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d102      	bne.n	800a0d6 <f_open+0x22e>
 800a0d0:	2302      	movs	r3, #2
 800a0d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a0d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	f040 80a3 	bne.w	800a226 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0e4:	4611      	mov	r1, r2
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f7fe fd94 	bl	8008c14 <ld_clust>
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f4:	331c      	adds	r3, #28
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7fd fd6c 	bl	8007bd4 <ld_dword>
 800a0fc:	4602      	mov	r2, r0
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2200      	movs	r2, #0
 800a106:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a108:	697a      	ldr	r2, [r7, #20]
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	88da      	ldrh	r2, [r3, #6]
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	79fa      	ldrb	r2, [r7, #7]
 800a11a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2200      	movs	r2, #0
 800a120:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2200      	movs	r2, #0
 800a126:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2200      	movs	r2, #0
 800a12c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	3330      	adds	r3, #48	; 0x30
 800a132:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a136:	2100      	movs	r1, #0
 800a138:	4618      	mov	r0, r3
 800a13a:	f7fd fdd6 	bl	8007cea <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a13e:	79fb      	ldrb	r3, [r7, #7]
 800a140:	f003 0320 	and.w	r3, r3, #32
 800a144:	2b00      	cmp	r3, #0
 800a146:	d06e      	beq.n	800a226 <f_open+0x37e>
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	68db      	ldr	r3, [r3, #12]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d06a      	beq.n	800a226 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	68da      	ldr	r2, [r3, #12]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	895b      	ldrh	r3, [r3, #10]
 800a15c:	461a      	mov	r2, r3
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	899b      	ldrh	r3, [r3, #12]
 800a162:	fb02 f303 	mul.w	r3, r2, r3
 800a166:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	68db      	ldr	r3, [r3, #12]
 800a172:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a174:	e016      	b.n	800a1a4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7fe f87f 	bl	800827e <get_fat>
 800a180:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800a182:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a184:	2b01      	cmp	r3, #1
 800a186:	d802      	bhi.n	800a18e <f_open+0x2e6>
 800a188:	2302      	movs	r3, #2
 800a18a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a18e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a190:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a194:	d102      	bne.n	800a19c <f_open+0x2f4>
 800a196:	2301      	movs	r3, #1
 800a198:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a19c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a19e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1a0:	1ad3      	subs	r3, r2, r3
 800a1a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a1a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d103      	bne.n	800a1b4 <f_open+0x30c>
 800a1ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a1ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d8e0      	bhi.n	800a176 <f_open+0x2ce>
				}
				fp->clust = clst;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a1b8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a1ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d131      	bne.n	800a226 <f_open+0x37e>
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	899b      	ldrh	r3, [r3, #12]
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1ca:	fbb3 f1f2 	udiv	r1, r3, r2
 800a1ce:	fb01 f202 	mul.w	r2, r1, r2
 800a1d2:	1a9b      	subs	r3, r3, r2
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d026      	beq.n	800a226 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f7fe f82f 	bl	8008240 <clust2sect>
 800a1e2:	64f8      	str	r0, [r7, #76]	; 0x4c
 800a1e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d103      	bne.n	800a1f2 <f_open+0x34a>
						res = FR_INT_ERR;
 800a1ea:	2302      	movs	r3, #2
 800a1ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a1f0:	e019      	b.n	800a226 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	899b      	ldrh	r3, [r3, #12]
 800a1f6:	461a      	mov	r2, r3
 800a1f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1fa:	fbb3 f2f2 	udiv	r2, r3, r2
 800a1fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a200:	441a      	add	r2, r3
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	7858      	ldrb	r0, [r3, #1]
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	6a1a      	ldr	r2, [r3, #32]
 800a214:	2301      	movs	r3, #1
 800a216:	f7fd fc67 	bl	8007ae8 <disk_read>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d002      	beq.n	800a226 <f_open+0x37e>
 800a220:	2301      	movs	r3, #1
 800a222:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a226:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d002      	beq.n	800a234 <f_open+0x38c>
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2200      	movs	r2, #0
 800a232:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a234:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3768      	adds	r7, #104	; 0x68
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b08c      	sub	sp, #48	; 0x30
 800a244:	af00      	add	r7, sp, #0
 800a246:	60f8      	str	r0, [r7, #12]
 800a248:	60b9      	str	r1, [r7, #8]
 800a24a:	607a      	str	r2, [r7, #4]
 800a24c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	2200      	movs	r2, #0
 800a256:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f107 0210 	add.w	r2, r7, #16
 800a25e:	4611      	mov	r1, r2
 800a260:	4618      	mov	r0, r3
 800a262:	f7ff fda5 	bl	8009db0 <validate>
 800a266:	4603      	mov	r3, r0
 800a268:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a26c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a270:	2b00      	cmp	r3, #0
 800a272:	d107      	bne.n	800a284 <f_write+0x44>
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	7d5b      	ldrb	r3, [r3, #21]
 800a278:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a27c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a280:	2b00      	cmp	r3, #0
 800a282:	d002      	beq.n	800a28a <f_write+0x4a>
 800a284:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a288:	e16a      	b.n	800a560 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	7d1b      	ldrb	r3, [r3, #20]
 800a28e:	f003 0302 	and.w	r3, r3, #2
 800a292:	2b00      	cmp	r3, #0
 800a294:	d101      	bne.n	800a29a <f_write+0x5a>
 800a296:	2307      	movs	r3, #7
 800a298:	e162      	b.n	800a560 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	699a      	ldr	r2, [r3, #24]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	441a      	add	r2, r3
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	699b      	ldr	r3, [r3, #24]
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	f080 814c 	bcs.w	800a544 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	699b      	ldr	r3, [r3, #24]
 800a2b0:	43db      	mvns	r3, r3
 800a2b2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a2b4:	e146      	b.n	800a544 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	699b      	ldr	r3, [r3, #24]
 800a2ba:	693a      	ldr	r2, [r7, #16]
 800a2bc:	8992      	ldrh	r2, [r2, #12]
 800a2be:	fbb3 f1f2 	udiv	r1, r3, r2
 800a2c2:	fb01 f202 	mul.w	r2, r1, r2
 800a2c6:	1a9b      	subs	r3, r3, r2
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	f040 80f1 	bne.w	800a4b0 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	699b      	ldr	r3, [r3, #24]
 800a2d2:	693a      	ldr	r2, [r7, #16]
 800a2d4:	8992      	ldrh	r2, [r2, #12]
 800a2d6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2da:	693a      	ldr	r2, [r7, #16]
 800a2dc:	8952      	ldrh	r2, [r2, #10]
 800a2de:	3a01      	subs	r2, #1
 800a2e0:	4013      	ands	r3, r2
 800a2e2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a2e4:	69bb      	ldr	r3, [r7, #24]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d143      	bne.n	800a372 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	699b      	ldr	r3, [r3, #24]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d10c      	bne.n	800a30c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d11a      	bne.n	800a334 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2100      	movs	r1, #0
 800a302:	4618      	mov	r0, r3
 800a304:	f7fe fa10 	bl	8008728 <create_chain>
 800a308:	62b8      	str	r0, [r7, #40]	; 0x28
 800a30a:	e013      	b.n	800a334 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a310:	2b00      	cmp	r3, #0
 800a312:	d007      	beq.n	800a324 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	699b      	ldr	r3, [r3, #24]
 800a318:	4619      	mov	r1, r3
 800a31a:	68f8      	ldr	r0, [r7, #12]
 800a31c:	f7fe fa9c 	bl	8008858 <clmt_clust>
 800a320:	62b8      	str	r0, [r7, #40]	; 0x28
 800a322:	e007      	b.n	800a334 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a324:	68fa      	ldr	r2, [r7, #12]
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	69db      	ldr	r3, [r3, #28]
 800a32a:	4619      	mov	r1, r3
 800a32c:	4610      	mov	r0, r2
 800a32e:	f7fe f9fb 	bl	8008728 <create_chain>
 800a332:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a336:	2b00      	cmp	r3, #0
 800a338:	f000 8109 	beq.w	800a54e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d104      	bne.n	800a34c <f_write+0x10c>
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2202      	movs	r2, #2
 800a346:	755a      	strb	r2, [r3, #21]
 800a348:	2302      	movs	r3, #2
 800a34a:	e109      	b.n	800a560 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a34e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a352:	d104      	bne.n	800a35e <f_write+0x11e>
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2201      	movs	r2, #1
 800a358:	755a      	strb	r2, [r3, #21]
 800a35a:	2301      	movs	r3, #1
 800a35c:	e100      	b.n	800a560 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a362:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	689b      	ldr	r3, [r3, #8]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d102      	bne.n	800a372 <f_write+0x132>
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a370:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	7d1b      	ldrb	r3, [r3, #20]
 800a376:	b25b      	sxtb	r3, r3
 800a378:	2b00      	cmp	r3, #0
 800a37a:	da18      	bge.n	800a3ae <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	7858      	ldrb	r0, [r3, #1]
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	6a1a      	ldr	r2, [r3, #32]
 800a38a:	2301      	movs	r3, #1
 800a38c:	f7fd fbcc 	bl	8007b28 <disk_write>
 800a390:	4603      	mov	r3, r0
 800a392:	2b00      	cmp	r3, #0
 800a394:	d004      	beq.n	800a3a0 <f_write+0x160>
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2201      	movs	r2, #1
 800a39a:	755a      	strb	r2, [r3, #21]
 800a39c:	2301      	movs	r3, #1
 800a39e:	e0df      	b.n	800a560 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	7d1b      	ldrb	r3, [r3, #20]
 800a3a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3a8:	b2da      	uxtb	r2, r3
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a3ae:	693a      	ldr	r2, [r7, #16]
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	69db      	ldr	r3, [r3, #28]
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	4610      	mov	r0, r2
 800a3b8:	f7fd ff42 	bl	8008240 <clust2sect>
 800a3bc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d104      	bne.n	800a3ce <f_write+0x18e>
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2202      	movs	r2, #2
 800a3c8:	755a      	strb	r2, [r3, #21]
 800a3ca:	2302      	movs	r3, #2
 800a3cc:	e0c8      	b.n	800a560 <f_write+0x320>
			sect += csect;
 800a3ce:	697a      	ldr	r2, [r7, #20]
 800a3d0:	69bb      	ldr	r3, [r7, #24]
 800a3d2:	4413      	add	r3, r2
 800a3d4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	899b      	ldrh	r3, [r3, #12]
 800a3da:	461a      	mov	r2, r3
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3e2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a3e4:	6a3b      	ldr	r3, [r7, #32]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d043      	beq.n	800a472 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a3ea:	69ba      	ldr	r2, [r7, #24]
 800a3ec:	6a3b      	ldr	r3, [r7, #32]
 800a3ee:	4413      	add	r3, r2
 800a3f0:	693a      	ldr	r2, [r7, #16]
 800a3f2:	8952      	ldrh	r2, [r2, #10]
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d905      	bls.n	800a404 <f_write+0x1c4>
					cc = fs->csize - csect;
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	895b      	ldrh	r3, [r3, #10]
 800a3fc:	461a      	mov	r2, r3
 800a3fe:	69bb      	ldr	r3, [r7, #24]
 800a400:	1ad3      	subs	r3, r2, r3
 800a402:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	7858      	ldrb	r0, [r3, #1]
 800a408:	6a3b      	ldr	r3, [r7, #32]
 800a40a:	697a      	ldr	r2, [r7, #20]
 800a40c:	69f9      	ldr	r1, [r7, #28]
 800a40e:	f7fd fb8b 	bl	8007b28 <disk_write>
 800a412:	4603      	mov	r3, r0
 800a414:	2b00      	cmp	r3, #0
 800a416:	d004      	beq.n	800a422 <f_write+0x1e2>
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2201      	movs	r2, #1
 800a41c:	755a      	strb	r2, [r3, #21]
 800a41e:	2301      	movs	r3, #1
 800a420:	e09e      	b.n	800a560 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	6a1a      	ldr	r2, [r3, #32]
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	1ad3      	subs	r3, r2, r3
 800a42a:	6a3a      	ldr	r2, [r7, #32]
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d918      	bls.n	800a462 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	6a1a      	ldr	r2, [r3, #32]
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	1ad3      	subs	r3, r2, r3
 800a43e:	693a      	ldr	r2, [r7, #16]
 800a440:	8992      	ldrh	r2, [r2, #12]
 800a442:	fb02 f303 	mul.w	r3, r2, r3
 800a446:	69fa      	ldr	r2, [r7, #28]
 800a448:	18d1      	adds	r1, r2, r3
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	899b      	ldrh	r3, [r3, #12]
 800a44e:	461a      	mov	r2, r3
 800a450:	f7fd fc2a 	bl	8007ca8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	7d1b      	ldrb	r3, [r3, #20]
 800a458:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a45c:	b2da      	uxtb	r2, r3
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	899b      	ldrh	r3, [r3, #12]
 800a466:	461a      	mov	r2, r3
 800a468:	6a3b      	ldr	r3, [r7, #32]
 800a46a:	fb02 f303 	mul.w	r3, r2, r3
 800a46e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a470:	e04b      	b.n	800a50a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	6a1b      	ldr	r3, [r3, #32]
 800a476:	697a      	ldr	r2, [r7, #20]
 800a478:	429a      	cmp	r2, r3
 800a47a:	d016      	beq.n	800a4aa <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	699a      	ldr	r2, [r3, #24]
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a484:	429a      	cmp	r2, r3
 800a486:	d210      	bcs.n	800a4aa <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	7858      	ldrb	r0, [r3, #1]
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a492:	2301      	movs	r3, #1
 800a494:	697a      	ldr	r2, [r7, #20]
 800a496:	f7fd fb27 	bl	8007ae8 <disk_read>
 800a49a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d004      	beq.n	800a4aa <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	755a      	strb	r2, [r3, #21]
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	e05a      	b.n	800a560 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	697a      	ldr	r2, [r7, #20]
 800a4ae:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	899b      	ldrh	r3, [r3, #12]
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	699b      	ldr	r3, [r3, #24]
 800a4ba:	693a      	ldr	r2, [r7, #16]
 800a4bc:	8992      	ldrh	r2, [r2, #12]
 800a4be:	fbb3 f1f2 	udiv	r1, r3, r2
 800a4c2:	fb01 f202 	mul.w	r2, r1, r2
 800a4c6:	1a9b      	subs	r3, r3, r2
 800a4c8:	1ac3      	subs	r3, r0, r3
 800a4ca:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a4cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d901      	bls.n	800a4d8 <f_write+0x298>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	699b      	ldr	r3, [r3, #24]
 800a4e2:	693a      	ldr	r2, [r7, #16]
 800a4e4:	8992      	ldrh	r2, [r2, #12]
 800a4e6:	fbb3 f0f2 	udiv	r0, r3, r2
 800a4ea:	fb00 f202 	mul.w	r2, r0, r2
 800a4ee:	1a9b      	subs	r3, r3, r2
 800a4f0:	440b      	add	r3, r1
 800a4f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4f4:	69f9      	ldr	r1, [r7, #28]
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7fd fbd6 	bl	8007ca8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	7d1b      	ldrb	r3, [r3, #20]
 800a500:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a504:	b2da      	uxtb	r2, r3
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a50a:	69fa      	ldr	r2, [r7, #28]
 800a50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50e:	4413      	add	r3, r2
 800a510:	61fb      	str	r3, [r7, #28]
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	699a      	ldr	r2, [r3, #24]
 800a516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a518:	441a      	add	r2, r3
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	619a      	str	r2, [r3, #24]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	68da      	ldr	r2, [r3, #12]
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	699b      	ldr	r3, [r3, #24]
 800a526:	429a      	cmp	r2, r3
 800a528:	bf38      	it	cc
 800a52a:	461a      	movcc	r2, r3
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	60da      	str	r2, [r3, #12]
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a536:	441a      	add	r2, r3
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	601a      	str	r2, [r3, #0]
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a540:	1ad3      	subs	r3, r2, r3
 800a542:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2b00      	cmp	r3, #0
 800a548:	f47f aeb5 	bne.w	800a2b6 <f_write+0x76>
 800a54c:	e000      	b.n	800a550 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a54e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	7d1b      	ldrb	r3, [r3, #20]
 800a554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a558:	b2da      	uxtb	r2, r3
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a55e:	2300      	movs	r3, #0
}
 800a560:	4618      	mov	r0, r3
 800a562:	3730      	adds	r7, #48	; 0x30
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b086      	sub	sp, #24
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f107 0208 	add.w	r2, r7, #8
 800a576:	4611      	mov	r1, r2
 800a578:	4618      	mov	r0, r3
 800a57a:	f7ff fc19 	bl	8009db0 <validate>
 800a57e:	4603      	mov	r3, r0
 800a580:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a582:	7dfb      	ldrb	r3, [r7, #23]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d168      	bne.n	800a65a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	7d1b      	ldrb	r3, [r3, #20]
 800a58c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a590:	2b00      	cmp	r3, #0
 800a592:	d062      	beq.n	800a65a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	7d1b      	ldrb	r3, [r3, #20]
 800a598:	b25b      	sxtb	r3, r3
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	da15      	bge.n	800a5ca <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	7858      	ldrb	r0, [r3, #1]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6a1a      	ldr	r2, [r3, #32]
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	f7fd fabb 	bl	8007b28 <disk_write>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d001      	beq.n	800a5bc <f_sync+0x54>
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	e04f      	b.n	800a65c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	7d1b      	ldrb	r3, [r3, #20]
 800a5c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5c4:	b2da      	uxtb	r2, r3
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a5ca:	f7fd f9ef 	bl	80079ac <get_fattime>
 800a5ce:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a5d0:	68ba      	ldr	r2, [r7, #8]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	4610      	mov	r0, r2
 800a5da:	f7fd fd93 	bl	8008104 <move_window>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a5e2:	7dfb      	ldrb	r3, [r7, #23]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d138      	bne.n	800a65a <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ec:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	330b      	adds	r3, #11
 800a5f2:	781a      	ldrb	r2, [r3, #0]
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	330b      	adds	r3, #11
 800a5f8:	f042 0220 	orr.w	r2, r2, #32
 800a5fc:	b2d2      	uxtb	r2, r2
 800a5fe:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6818      	ldr	r0, [r3, #0]
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	689b      	ldr	r3, [r3, #8]
 800a608:	461a      	mov	r2, r3
 800a60a:	68f9      	ldr	r1, [r7, #12]
 800a60c:	f7fe fb21 	bl	8008c52 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f103 021c 	add.w	r2, r3, #28
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	68db      	ldr	r3, [r3, #12]
 800a61a:	4619      	mov	r1, r3
 800a61c:	4610      	mov	r0, r2
 800a61e:	f7fd fb17 	bl	8007c50 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	3316      	adds	r3, #22
 800a626:	6939      	ldr	r1, [r7, #16]
 800a628:	4618      	mov	r0, r3
 800a62a:	f7fd fb11 	bl	8007c50 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	3312      	adds	r3, #18
 800a632:	2100      	movs	r1, #0
 800a634:	4618      	mov	r0, r3
 800a636:	f7fd faf0 	bl	8007c1a <st_word>
					fs->wflag = 1;
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	2201      	movs	r2, #1
 800a63e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	4618      	mov	r0, r3
 800a644:	f7fd fd8c 	bl	8008160 <sync_fs>
 800a648:	4603      	mov	r3, r0
 800a64a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	7d1b      	ldrb	r3, [r3, #20]
 800a650:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a654:	b2da      	uxtb	r2, r3
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a65a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3718      	adds	r7, #24
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b084      	sub	sp, #16
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f7ff ff7b 	bl	800a568 <f_sync>
 800a672:	4603      	mov	r3, r0
 800a674:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a676:	7bfb      	ldrb	r3, [r7, #15]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d118      	bne.n	800a6ae <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f107 0208 	add.w	r2, r7, #8
 800a682:	4611      	mov	r1, r2
 800a684:	4618      	mov	r0, r3
 800a686:	f7ff fb93 	bl	8009db0 <validate>
 800a68a:	4603      	mov	r3, r0
 800a68c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a68e:	7bfb      	ldrb	r3, [r7, #15]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d10c      	bne.n	800a6ae <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	691b      	ldr	r3, [r3, #16]
 800a698:	4618      	mov	r0, r3
 800a69a:	f7fd fc8f 	bl	8007fbc <dec_lock>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a6a2:	7bfb      	ldrb	r3, [r7, #15]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d102      	bne.n	800a6ae <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a6ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3710      	adds	r7, #16
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b084      	sub	sp, #16
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	460b      	mov	r3, r1
 800a6c2:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800a6c4:	78fb      	ldrb	r3, [r7, #3]
 800a6c6:	2b0a      	cmp	r3, #10
 800a6c8:	d103      	bne.n	800a6d2 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800a6ca:	210d      	movs	r1, #13
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f7ff fff3 	bl	800a6b8 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	685b      	ldr	r3, [r3, #4]
 800a6d6:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	db25      	blt.n	800a72a <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	1c5a      	adds	r2, r3, #1
 800a6e2:	60fa      	str	r2, [r7, #12]
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	4413      	add	r3, r2
 800a6e8:	78fa      	ldrb	r2, [r7, #3]
 800a6ea:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	2b3c      	cmp	r3, #60	; 0x3c
 800a6f0:	dd12      	ble.n	800a718 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6818      	ldr	r0, [r3, #0]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f103 010c 	add.w	r1, r3, #12
 800a6fc:	68fa      	ldr	r2, [r7, #12]
 800a6fe:	f107 0308 	add.w	r3, r7, #8
 800a702:	f7ff fd9d 	bl	800a240 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800a706:	68ba      	ldr	r2, [r7, #8]
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d101      	bne.n	800a712 <putc_bfd+0x5a>
 800a70e:	2300      	movs	r3, #0
 800a710:	e001      	b.n	800a716 <putc_bfd+0x5e>
 800a712:	f04f 33ff 	mov.w	r3, #4294967295
 800a716:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	68fa      	ldr	r2, [r7, #12]
 800a71c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	689b      	ldr	r3, [r3, #8]
 800a722:	1c5a      	adds	r2, r3, #1
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	609a      	str	r2, [r3, #8]
 800a728:	e000      	b.n	800a72c <putc_bfd+0x74>
	if (i < 0) return;
 800a72a:	bf00      	nop
}
 800a72c:	3710      	adds	r7, #16
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}

0800a732 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800a732:	b580      	push	{r7, lr}
 800a734:	b084      	sub	sp, #16
 800a736:	af00      	add	r7, sp, #0
 800a738:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	db16      	blt.n	800a770 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6818      	ldr	r0, [r3, #0]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f103 010c 	add.w	r1, r3, #12
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	685b      	ldr	r3, [r3, #4]
 800a750:	461a      	mov	r2, r3
 800a752:	f107 030c 	add.w	r3, r7, #12
 800a756:	f7ff fd73 	bl	800a240 <f_write>
 800a75a:	4603      	mov	r3, r0
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d107      	bne.n	800a770 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	68fa      	ldr	r2, [r7, #12]
 800a766:	4293      	cmp	r3, r2
 800a768:	d102      	bne.n	800a770 <putc_flush+0x3e>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	689b      	ldr	r3, [r3, #8]
 800a76e:	e001      	b.n	800a774 <putc_flush+0x42>
	return EOF;
 800a770:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a774:	4618      	mov	r0, r3
 800a776:	3710      	adds	r7, #16
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b083      	sub	sp, #12
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	683a      	ldr	r2, [r7, #0]
 800a78a:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2200      	movs	r2, #0
 800a790:	605a      	str	r2, [r3, #4]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	685a      	ldr	r2, [r3, #4]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	609a      	str	r2, [r3, #8]
}
 800a79a:	bf00      	nop
 800a79c:	370c      	adds	r7, #12
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a4:	4770      	bx	lr

0800a7a6 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b096      	sub	sp, #88	; 0x58
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
 800a7ae:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800a7b0:	f107 030c 	add.w	r3, r7, #12
 800a7b4:	6839      	ldr	r1, [r7, #0]
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f7ff ffe0 	bl	800a77c <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800a7bc:	e009      	b.n	800a7d2 <f_puts+0x2c>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	1c5a      	adds	r2, r3, #1
 800a7c2:	607a      	str	r2, [r7, #4]
 800a7c4:	781a      	ldrb	r2, [r3, #0]
 800a7c6:	f107 030c 	add.w	r3, r7, #12
 800a7ca:	4611      	mov	r1, r2
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f7ff ff73 	bl	800a6b8 <putc_bfd>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d1f1      	bne.n	800a7be <f_puts+0x18>
	return putc_flush(&pb);
 800a7da:	f107 030c 	add.w	r3, r7, #12
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7ff ffa7 	bl	800a732 <putc_flush>
 800a7e4:	4603      	mov	r3, r0
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3758      	adds	r7, #88	; 0x58
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}
	...

0800a7f0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b087      	sub	sp, #28
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	60f8      	str	r0, [r7, #12]
 800a7f8:	60b9      	str	r1, [r7, #8]
 800a7fa:	4613      	mov	r3, r2
 800a7fc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a7fe:	2301      	movs	r3, #1
 800a800:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a802:	2300      	movs	r3, #0
 800a804:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a806:	4b1f      	ldr	r3, [pc, #124]	; (800a884 <FATFS_LinkDriverEx+0x94>)
 800a808:	7a5b      	ldrb	r3, [r3, #9]
 800a80a:	b2db      	uxtb	r3, r3
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d131      	bne.n	800a874 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a810:	4b1c      	ldr	r3, [pc, #112]	; (800a884 <FATFS_LinkDriverEx+0x94>)
 800a812:	7a5b      	ldrb	r3, [r3, #9]
 800a814:	b2db      	uxtb	r3, r3
 800a816:	461a      	mov	r2, r3
 800a818:	4b1a      	ldr	r3, [pc, #104]	; (800a884 <FATFS_LinkDriverEx+0x94>)
 800a81a:	2100      	movs	r1, #0
 800a81c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a81e:	4b19      	ldr	r3, [pc, #100]	; (800a884 <FATFS_LinkDriverEx+0x94>)
 800a820:	7a5b      	ldrb	r3, [r3, #9]
 800a822:	b2db      	uxtb	r3, r3
 800a824:	4a17      	ldr	r2, [pc, #92]	; (800a884 <FATFS_LinkDriverEx+0x94>)
 800a826:	009b      	lsls	r3, r3, #2
 800a828:	4413      	add	r3, r2
 800a82a:	68fa      	ldr	r2, [r7, #12]
 800a82c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a82e:	4b15      	ldr	r3, [pc, #84]	; (800a884 <FATFS_LinkDriverEx+0x94>)
 800a830:	7a5b      	ldrb	r3, [r3, #9]
 800a832:	b2db      	uxtb	r3, r3
 800a834:	461a      	mov	r2, r3
 800a836:	4b13      	ldr	r3, [pc, #76]	; (800a884 <FATFS_LinkDriverEx+0x94>)
 800a838:	4413      	add	r3, r2
 800a83a:	79fa      	ldrb	r2, [r7, #7]
 800a83c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a83e:	4b11      	ldr	r3, [pc, #68]	; (800a884 <FATFS_LinkDriverEx+0x94>)
 800a840:	7a5b      	ldrb	r3, [r3, #9]
 800a842:	b2db      	uxtb	r3, r3
 800a844:	1c5a      	adds	r2, r3, #1
 800a846:	b2d1      	uxtb	r1, r2
 800a848:	4a0e      	ldr	r2, [pc, #56]	; (800a884 <FATFS_LinkDriverEx+0x94>)
 800a84a:	7251      	strb	r1, [r2, #9]
 800a84c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a84e:	7dbb      	ldrb	r3, [r7, #22]
 800a850:	3330      	adds	r3, #48	; 0x30
 800a852:	b2da      	uxtb	r2, r3
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	3301      	adds	r3, #1
 800a85c:	223a      	movs	r2, #58	; 0x3a
 800a85e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	3302      	adds	r3, #2
 800a864:	222f      	movs	r2, #47	; 0x2f
 800a866:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	3303      	adds	r3, #3
 800a86c:	2200      	movs	r2, #0
 800a86e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a870:	2300      	movs	r3, #0
 800a872:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a874:	7dfb      	ldrb	r3, [r7, #23]
}
 800a876:	4618      	mov	r0, r3
 800a878:	371c      	adds	r7, #28
 800a87a:	46bd      	mov	sp, r7
 800a87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a880:	4770      	bx	lr
 800a882:	bf00      	nop
 800a884:	20003848 	.word	0x20003848

0800a888 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b082      	sub	sp, #8
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a892:	2200      	movs	r2, #0
 800a894:	6839      	ldr	r1, [r7, #0]
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f7ff ffaa 	bl	800a7f0 <FATFS_LinkDriverEx>
 800a89c:	4603      	mov	r3, r0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3708      	adds	r7, #8
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
	...

0800a8a8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b085      	sub	sp, #20
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	6039      	str	r1, [r7, #0]
 800a8b2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800a8b4:	88fb      	ldrh	r3, [r7, #6]
 800a8b6:	2b7f      	cmp	r3, #127	; 0x7f
 800a8b8:	d802      	bhi.n	800a8c0 <ff_convert+0x18>
		c = chr;
 800a8ba:	88fb      	ldrh	r3, [r7, #6]
 800a8bc:	81fb      	strh	r3, [r7, #14]
 800a8be:	e025      	b.n	800a90c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d00b      	beq.n	800a8de <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800a8c6:	88fb      	ldrh	r3, [r7, #6]
 800a8c8:	2bff      	cmp	r3, #255	; 0xff
 800a8ca:	d805      	bhi.n	800a8d8 <ff_convert+0x30>
 800a8cc:	88fb      	ldrh	r3, [r7, #6]
 800a8ce:	3b80      	subs	r3, #128	; 0x80
 800a8d0:	4a12      	ldr	r2, [pc, #72]	; (800a91c <ff_convert+0x74>)
 800a8d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8d6:	e000      	b.n	800a8da <ff_convert+0x32>
 800a8d8:	2300      	movs	r3, #0
 800a8da:	81fb      	strh	r3, [r7, #14]
 800a8dc:	e016      	b.n	800a90c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800a8de:	2300      	movs	r3, #0
 800a8e0:	81fb      	strh	r3, [r7, #14]
 800a8e2:	e009      	b.n	800a8f8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800a8e4:	89fb      	ldrh	r3, [r7, #14]
 800a8e6:	4a0d      	ldr	r2, [pc, #52]	; (800a91c <ff_convert+0x74>)
 800a8e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8ec:	88fa      	ldrh	r2, [r7, #6]
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d006      	beq.n	800a900 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800a8f2:	89fb      	ldrh	r3, [r7, #14]
 800a8f4:	3301      	adds	r3, #1
 800a8f6:	81fb      	strh	r3, [r7, #14]
 800a8f8:	89fb      	ldrh	r3, [r7, #14]
 800a8fa:	2b7f      	cmp	r3, #127	; 0x7f
 800a8fc:	d9f2      	bls.n	800a8e4 <ff_convert+0x3c>
 800a8fe:	e000      	b.n	800a902 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800a900:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800a902:	89fb      	ldrh	r3, [r7, #14]
 800a904:	3380      	adds	r3, #128	; 0x80
 800a906:	b29b      	uxth	r3, r3
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800a90c:	89fb      	ldrh	r3, [r7, #14]
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3714      	adds	r7, #20
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr
 800a91a:	bf00      	nop
 800a91c:	0800e01c 	.word	0x0800e01c

0800a920 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800a920:	b480      	push	{r7}
 800a922:	b087      	sub	sp, #28
 800a924:	af00      	add	r7, sp, #0
 800a926:	4603      	mov	r3, r0
 800a928:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800a92a:	88fb      	ldrh	r3, [r7, #6]
 800a92c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a930:	d201      	bcs.n	800a936 <ff_wtoupper+0x16>
 800a932:	4b3e      	ldr	r3, [pc, #248]	; (800aa2c <ff_wtoupper+0x10c>)
 800a934:	e000      	b.n	800a938 <ff_wtoupper+0x18>
 800a936:	4b3e      	ldr	r3, [pc, #248]	; (800aa30 <ff_wtoupper+0x110>)
 800a938:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	1c9a      	adds	r2, r3, #2
 800a93e:	617a      	str	r2, [r7, #20]
 800a940:	881b      	ldrh	r3, [r3, #0]
 800a942:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800a944:	8a7b      	ldrh	r3, [r7, #18]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d068      	beq.n	800aa1c <ff_wtoupper+0xfc>
 800a94a:	88fa      	ldrh	r2, [r7, #6]
 800a94c:	8a7b      	ldrh	r3, [r7, #18]
 800a94e:	429a      	cmp	r2, r3
 800a950:	d364      	bcc.n	800aa1c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	1c9a      	adds	r2, r3, #2
 800a956:	617a      	str	r2, [r7, #20]
 800a958:	881b      	ldrh	r3, [r3, #0]
 800a95a:	823b      	strh	r3, [r7, #16]
 800a95c:	8a3b      	ldrh	r3, [r7, #16]
 800a95e:	0a1b      	lsrs	r3, r3, #8
 800a960:	81fb      	strh	r3, [r7, #14]
 800a962:	8a3b      	ldrh	r3, [r7, #16]
 800a964:	b2db      	uxtb	r3, r3
 800a966:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800a968:	88fa      	ldrh	r2, [r7, #6]
 800a96a:	8a79      	ldrh	r1, [r7, #18]
 800a96c:	8a3b      	ldrh	r3, [r7, #16]
 800a96e:	440b      	add	r3, r1
 800a970:	429a      	cmp	r2, r3
 800a972:	da49      	bge.n	800aa08 <ff_wtoupper+0xe8>
			switch (cmd) {
 800a974:	89fb      	ldrh	r3, [r7, #14]
 800a976:	2b08      	cmp	r3, #8
 800a978:	d84f      	bhi.n	800aa1a <ff_wtoupper+0xfa>
 800a97a:	a201      	add	r2, pc, #4	; (adr r2, 800a980 <ff_wtoupper+0x60>)
 800a97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a980:	0800a9a5 	.word	0x0800a9a5
 800a984:	0800a9b7 	.word	0x0800a9b7
 800a988:	0800a9cd 	.word	0x0800a9cd
 800a98c:	0800a9d5 	.word	0x0800a9d5
 800a990:	0800a9dd 	.word	0x0800a9dd
 800a994:	0800a9e5 	.word	0x0800a9e5
 800a998:	0800a9ed 	.word	0x0800a9ed
 800a99c:	0800a9f5 	.word	0x0800a9f5
 800a9a0:	0800a9fd 	.word	0x0800a9fd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800a9a4:	88fa      	ldrh	r2, [r7, #6]
 800a9a6:	8a7b      	ldrh	r3, [r7, #18]
 800a9a8:	1ad3      	subs	r3, r2, r3
 800a9aa:	005b      	lsls	r3, r3, #1
 800a9ac:	697a      	ldr	r2, [r7, #20]
 800a9ae:	4413      	add	r3, r2
 800a9b0:	881b      	ldrh	r3, [r3, #0]
 800a9b2:	80fb      	strh	r3, [r7, #6]
 800a9b4:	e027      	b.n	800aa06 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800a9b6:	88fa      	ldrh	r2, [r7, #6]
 800a9b8:	8a7b      	ldrh	r3, [r7, #18]
 800a9ba:	1ad3      	subs	r3, r2, r3
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	f003 0301 	and.w	r3, r3, #1
 800a9c2:	b29b      	uxth	r3, r3
 800a9c4:	88fa      	ldrh	r2, [r7, #6]
 800a9c6:	1ad3      	subs	r3, r2, r3
 800a9c8:	80fb      	strh	r3, [r7, #6]
 800a9ca:	e01c      	b.n	800aa06 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800a9cc:	88fb      	ldrh	r3, [r7, #6]
 800a9ce:	3b10      	subs	r3, #16
 800a9d0:	80fb      	strh	r3, [r7, #6]
 800a9d2:	e018      	b.n	800aa06 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800a9d4:	88fb      	ldrh	r3, [r7, #6]
 800a9d6:	3b20      	subs	r3, #32
 800a9d8:	80fb      	strh	r3, [r7, #6]
 800a9da:	e014      	b.n	800aa06 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800a9dc:	88fb      	ldrh	r3, [r7, #6]
 800a9de:	3b30      	subs	r3, #48	; 0x30
 800a9e0:	80fb      	strh	r3, [r7, #6]
 800a9e2:	e010      	b.n	800aa06 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800a9e4:	88fb      	ldrh	r3, [r7, #6]
 800a9e6:	3b1a      	subs	r3, #26
 800a9e8:	80fb      	strh	r3, [r7, #6]
 800a9ea:	e00c      	b.n	800aa06 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800a9ec:	88fb      	ldrh	r3, [r7, #6]
 800a9ee:	3308      	adds	r3, #8
 800a9f0:	80fb      	strh	r3, [r7, #6]
 800a9f2:	e008      	b.n	800aa06 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800a9f4:	88fb      	ldrh	r3, [r7, #6]
 800a9f6:	3b50      	subs	r3, #80	; 0x50
 800a9f8:	80fb      	strh	r3, [r7, #6]
 800a9fa:	e004      	b.n	800aa06 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800a9fc:	88fb      	ldrh	r3, [r7, #6]
 800a9fe:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800aa02:	80fb      	strh	r3, [r7, #6]
 800aa04:	bf00      	nop
			}
			break;
 800aa06:	e008      	b.n	800aa1a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800aa08:	89fb      	ldrh	r3, [r7, #14]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d195      	bne.n	800a93a <ff_wtoupper+0x1a>
 800aa0e:	8a3b      	ldrh	r3, [r7, #16]
 800aa10:	005b      	lsls	r3, r3, #1
 800aa12:	697a      	ldr	r2, [r7, #20]
 800aa14:	4413      	add	r3, r2
 800aa16:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800aa18:	e78f      	b.n	800a93a <ff_wtoupper+0x1a>
			break;
 800aa1a:	bf00      	nop
	}

	return chr;
 800aa1c:	88fb      	ldrh	r3, [r7, #6]
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	371c      	adds	r7, #28
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr
 800aa2a:	bf00      	nop
 800aa2c:	0800e11c 	.word	0x0800e11c
 800aa30:	0800e310 	.word	0x0800e310

0800aa34 <__errno>:
 800aa34:	4b01      	ldr	r3, [pc, #4]	; (800aa3c <__errno+0x8>)
 800aa36:	6818      	ldr	r0, [r3, #0]
 800aa38:	4770      	bx	lr
 800aa3a:	bf00      	nop
 800aa3c:	20000024 	.word	0x20000024

0800aa40 <__libc_init_array>:
 800aa40:	b570      	push	{r4, r5, r6, lr}
 800aa42:	4d0d      	ldr	r5, [pc, #52]	; (800aa78 <__libc_init_array+0x38>)
 800aa44:	4c0d      	ldr	r4, [pc, #52]	; (800aa7c <__libc_init_array+0x3c>)
 800aa46:	1b64      	subs	r4, r4, r5
 800aa48:	10a4      	asrs	r4, r4, #2
 800aa4a:	2600      	movs	r6, #0
 800aa4c:	42a6      	cmp	r6, r4
 800aa4e:	d109      	bne.n	800aa64 <__libc_init_array+0x24>
 800aa50:	4d0b      	ldr	r5, [pc, #44]	; (800aa80 <__libc_init_array+0x40>)
 800aa52:	4c0c      	ldr	r4, [pc, #48]	; (800aa84 <__libc_init_array+0x44>)
 800aa54:	f003 f97a 	bl	800dd4c <_init>
 800aa58:	1b64      	subs	r4, r4, r5
 800aa5a:	10a4      	asrs	r4, r4, #2
 800aa5c:	2600      	movs	r6, #0
 800aa5e:	42a6      	cmp	r6, r4
 800aa60:	d105      	bne.n	800aa6e <__libc_init_array+0x2e>
 800aa62:	bd70      	pop	{r4, r5, r6, pc}
 800aa64:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa68:	4798      	blx	r3
 800aa6a:	3601      	adds	r6, #1
 800aa6c:	e7ee      	b.n	800aa4c <__libc_init_array+0xc>
 800aa6e:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa72:	4798      	blx	r3
 800aa74:	3601      	adds	r6, #1
 800aa76:	e7f2      	b.n	800aa5e <__libc_init_array+0x1e>
 800aa78:	0800e820 	.word	0x0800e820
 800aa7c:	0800e820 	.word	0x0800e820
 800aa80:	0800e820 	.word	0x0800e820
 800aa84:	0800e824 	.word	0x0800e824

0800aa88 <memcpy>:
 800aa88:	440a      	add	r2, r1
 800aa8a:	4291      	cmp	r1, r2
 800aa8c:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa90:	d100      	bne.n	800aa94 <memcpy+0xc>
 800aa92:	4770      	bx	lr
 800aa94:	b510      	push	{r4, lr}
 800aa96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa9e:	4291      	cmp	r1, r2
 800aaa0:	d1f9      	bne.n	800aa96 <memcpy+0xe>
 800aaa2:	bd10      	pop	{r4, pc}

0800aaa4 <memset>:
 800aaa4:	4402      	add	r2, r0
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d100      	bne.n	800aaae <memset+0xa>
 800aaac:	4770      	bx	lr
 800aaae:	f803 1b01 	strb.w	r1, [r3], #1
 800aab2:	e7f9      	b.n	800aaa8 <memset+0x4>

0800aab4 <__cvt>:
 800aab4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aab8:	ec55 4b10 	vmov	r4, r5, d0
 800aabc:	2d00      	cmp	r5, #0
 800aabe:	460e      	mov	r6, r1
 800aac0:	4619      	mov	r1, r3
 800aac2:	462b      	mov	r3, r5
 800aac4:	bfbb      	ittet	lt
 800aac6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800aaca:	461d      	movlt	r5, r3
 800aacc:	2300      	movge	r3, #0
 800aace:	232d      	movlt	r3, #45	; 0x2d
 800aad0:	700b      	strb	r3, [r1, #0]
 800aad2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aad4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800aad8:	4691      	mov	r9, r2
 800aada:	f023 0820 	bic.w	r8, r3, #32
 800aade:	bfbc      	itt	lt
 800aae0:	4622      	movlt	r2, r4
 800aae2:	4614      	movlt	r4, r2
 800aae4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aae8:	d005      	beq.n	800aaf6 <__cvt+0x42>
 800aaea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800aaee:	d100      	bne.n	800aaf2 <__cvt+0x3e>
 800aaf0:	3601      	adds	r6, #1
 800aaf2:	2102      	movs	r1, #2
 800aaf4:	e000      	b.n	800aaf8 <__cvt+0x44>
 800aaf6:	2103      	movs	r1, #3
 800aaf8:	ab03      	add	r3, sp, #12
 800aafa:	9301      	str	r3, [sp, #4]
 800aafc:	ab02      	add	r3, sp, #8
 800aafe:	9300      	str	r3, [sp, #0]
 800ab00:	ec45 4b10 	vmov	d0, r4, r5
 800ab04:	4653      	mov	r3, sl
 800ab06:	4632      	mov	r2, r6
 800ab08:	f000 fcea 	bl	800b4e0 <_dtoa_r>
 800ab0c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ab10:	4607      	mov	r7, r0
 800ab12:	d102      	bne.n	800ab1a <__cvt+0x66>
 800ab14:	f019 0f01 	tst.w	r9, #1
 800ab18:	d022      	beq.n	800ab60 <__cvt+0xac>
 800ab1a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ab1e:	eb07 0906 	add.w	r9, r7, r6
 800ab22:	d110      	bne.n	800ab46 <__cvt+0x92>
 800ab24:	783b      	ldrb	r3, [r7, #0]
 800ab26:	2b30      	cmp	r3, #48	; 0x30
 800ab28:	d10a      	bne.n	800ab40 <__cvt+0x8c>
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	4620      	mov	r0, r4
 800ab30:	4629      	mov	r1, r5
 800ab32:	f7f5 ffe9 	bl	8000b08 <__aeabi_dcmpeq>
 800ab36:	b918      	cbnz	r0, 800ab40 <__cvt+0x8c>
 800ab38:	f1c6 0601 	rsb	r6, r6, #1
 800ab3c:	f8ca 6000 	str.w	r6, [sl]
 800ab40:	f8da 3000 	ldr.w	r3, [sl]
 800ab44:	4499      	add	r9, r3
 800ab46:	2200      	movs	r2, #0
 800ab48:	2300      	movs	r3, #0
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	4629      	mov	r1, r5
 800ab4e:	f7f5 ffdb 	bl	8000b08 <__aeabi_dcmpeq>
 800ab52:	b108      	cbz	r0, 800ab58 <__cvt+0xa4>
 800ab54:	f8cd 900c 	str.w	r9, [sp, #12]
 800ab58:	2230      	movs	r2, #48	; 0x30
 800ab5a:	9b03      	ldr	r3, [sp, #12]
 800ab5c:	454b      	cmp	r3, r9
 800ab5e:	d307      	bcc.n	800ab70 <__cvt+0xbc>
 800ab60:	9b03      	ldr	r3, [sp, #12]
 800ab62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab64:	1bdb      	subs	r3, r3, r7
 800ab66:	4638      	mov	r0, r7
 800ab68:	6013      	str	r3, [r2, #0]
 800ab6a:	b004      	add	sp, #16
 800ab6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab70:	1c59      	adds	r1, r3, #1
 800ab72:	9103      	str	r1, [sp, #12]
 800ab74:	701a      	strb	r2, [r3, #0]
 800ab76:	e7f0      	b.n	800ab5a <__cvt+0xa6>

0800ab78 <__exponent>:
 800ab78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	2900      	cmp	r1, #0
 800ab7e:	bfb8      	it	lt
 800ab80:	4249      	neglt	r1, r1
 800ab82:	f803 2b02 	strb.w	r2, [r3], #2
 800ab86:	bfb4      	ite	lt
 800ab88:	222d      	movlt	r2, #45	; 0x2d
 800ab8a:	222b      	movge	r2, #43	; 0x2b
 800ab8c:	2909      	cmp	r1, #9
 800ab8e:	7042      	strb	r2, [r0, #1]
 800ab90:	dd2a      	ble.n	800abe8 <__exponent+0x70>
 800ab92:	f10d 0407 	add.w	r4, sp, #7
 800ab96:	46a4      	mov	ip, r4
 800ab98:	270a      	movs	r7, #10
 800ab9a:	46a6      	mov	lr, r4
 800ab9c:	460a      	mov	r2, r1
 800ab9e:	fb91 f6f7 	sdiv	r6, r1, r7
 800aba2:	fb07 1516 	mls	r5, r7, r6, r1
 800aba6:	3530      	adds	r5, #48	; 0x30
 800aba8:	2a63      	cmp	r2, #99	; 0x63
 800abaa:	f104 34ff 	add.w	r4, r4, #4294967295
 800abae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800abb2:	4631      	mov	r1, r6
 800abb4:	dcf1      	bgt.n	800ab9a <__exponent+0x22>
 800abb6:	3130      	adds	r1, #48	; 0x30
 800abb8:	f1ae 0502 	sub.w	r5, lr, #2
 800abbc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800abc0:	1c44      	adds	r4, r0, #1
 800abc2:	4629      	mov	r1, r5
 800abc4:	4561      	cmp	r1, ip
 800abc6:	d30a      	bcc.n	800abde <__exponent+0x66>
 800abc8:	f10d 0209 	add.w	r2, sp, #9
 800abcc:	eba2 020e 	sub.w	r2, r2, lr
 800abd0:	4565      	cmp	r5, ip
 800abd2:	bf88      	it	hi
 800abd4:	2200      	movhi	r2, #0
 800abd6:	4413      	add	r3, r2
 800abd8:	1a18      	subs	r0, r3, r0
 800abda:	b003      	add	sp, #12
 800abdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abde:	f811 2b01 	ldrb.w	r2, [r1], #1
 800abe2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800abe6:	e7ed      	b.n	800abc4 <__exponent+0x4c>
 800abe8:	2330      	movs	r3, #48	; 0x30
 800abea:	3130      	adds	r1, #48	; 0x30
 800abec:	7083      	strb	r3, [r0, #2]
 800abee:	70c1      	strb	r1, [r0, #3]
 800abf0:	1d03      	adds	r3, r0, #4
 800abf2:	e7f1      	b.n	800abd8 <__exponent+0x60>

0800abf4 <_printf_float>:
 800abf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf8:	ed2d 8b02 	vpush	{d8}
 800abfc:	b08d      	sub	sp, #52	; 0x34
 800abfe:	460c      	mov	r4, r1
 800ac00:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ac04:	4616      	mov	r6, r2
 800ac06:	461f      	mov	r7, r3
 800ac08:	4605      	mov	r5, r0
 800ac0a:	f001 fa57 	bl	800c0bc <_localeconv_r>
 800ac0e:	f8d0 a000 	ldr.w	sl, [r0]
 800ac12:	4650      	mov	r0, sl
 800ac14:	f7f5 fafc 	bl	8000210 <strlen>
 800ac18:	2300      	movs	r3, #0
 800ac1a:	930a      	str	r3, [sp, #40]	; 0x28
 800ac1c:	6823      	ldr	r3, [r4, #0]
 800ac1e:	9305      	str	r3, [sp, #20]
 800ac20:	f8d8 3000 	ldr.w	r3, [r8]
 800ac24:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ac28:	3307      	adds	r3, #7
 800ac2a:	f023 0307 	bic.w	r3, r3, #7
 800ac2e:	f103 0208 	add.w	r2, r3, #8
 800ac32:	f8c8 2000 	str.w	r2, [r8]
 800ac36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac3a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ac3e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ac42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ac46:	9307      	str	r3, [sp, #28]
 800ac48:	f8cd 8018 	str.w	r8, [sp, #24]
 800ac4c:	ee08 0a10 	vmov	s16, r0
 800ac50:	4b9f      	ldr	r3, [pc, #636]	; (800aed0 <_printf_float+0x2dc>)
 800ac52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac56:	f04f 32ff 	mov.w	r2, #4294967295
 800ac5a:	f7f5 ff87 	bl	8000b6c <__aeabi_dcmpun>
 800ac5e:	bb88      	cbnz	r0, 800acc4 <_printf_float+0xd0>
 800ac60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac64:	4b9a      	ldr	r3, [pc, #616]	; (800aed0 <_printf_float+0x2dc>)
 800ac66:	f04f 32ff 	mov.w	r2, #4294967295
 800ac6a:	f7f5 ff61 	bl	8000b30 <__aeabi_dcmple>
 800ac6e:	bb48      	cbnz	r0, 800acc4 <_printf_float+0xd0>
 800ac70:	2200      	movs	r2, #0
 800ac72:	2300      	movs	r3, #0
 800ac74:	4640      	mov	r0, r8
 800ac76:	4649      	mov	r1, r9
 800ac78:	f7f5 ff50 	bl	8000b1c <__aeabi_dcmplt>
 800ac7c:	b110      	cbz	r0, 800ac84 <_printf_float+0x90>
 800ac7e:	232d      	movs	r3, #45	; 0x2d
 800ac80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac84:	4b93      	ldr	r3, [pc, #588]	; (800aed4 <_printf_float+0x2e0>)
 800ac86:	4894      	ldr	r0, [pc, #592]	; (800aed8 <_printf_float+0x2e4>)
 800ac88:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ac8c:	bf94      	ite	ls
 800ac8e:	4698      	movls	r8, r3
 800ac90:	4680      	movhi	r8, r0
 800ac92:	2303      	movs	r3, #3
 800ac94:	6123      	str	r3, [r4, #16]
 800ac96:	9b05      	ldr	r3, [sp, #20]
 800ac98:	f023 0204 	bic.w	r2, r3, #4
 800ac9c:	6022      	str	r2, [r4, #0]
 800ac9e:	f04f 0900 	mov.w	r9, #0
 800aca2:	9700      	str	r7, [sp, #0]
 800aca4:	4633      	mov	r3, r6
 800aca6:	aa0b      	add	r2, sp, #44	; 0x2c
 800aca8:	4621      	mov	r1, r4
 800acaa:	4628      	mov	r0, r5
 800acac:	f000 f9d8 	bl	800b060 <_printf_common>
 800acb0:	3001      	adds	r0, #1
 800acb2:	f040 8090 	bne.w	800add6 <_printf_float+0x1e2>
 800acb6:	f04f 30ff 	mov.w	r0, #4294967295
 800acba:	b00d      	add	sp, #52	; 0x34
 800acbc:	ecbd 8b02 	vpop	{d8}
 800acc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acc4:	4642      	mov	r2, r8
 800acc6:	464b      	mov	r3, r9
 800acc8:	4640      	mov	r0, r8
 800acca:	4649      	mov	r1, r9
 800accc:	f7f5 ff4e 	bl	8000b6c <__aeabi_dcmpun>
 800acd0:	b140      	cbz	r0, 800ace4 <_printf_float+0xf0>
 800acd2:	464b      	mov	r3, r9
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	bfbc      	itt	lt
 800acd8:	232d      	movlt	r3, #45	; 0x2d
 800acda:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800acde:	487f      	ldr	r0, [pc, #508]	; (800aedc <_printf_float+0x2e8>)
 800ace0:	4b7f      	ldr	r3, [pc, #508]	; (800aee0 <_printf_float+0x2ec>)
 800ace2:	e7d1      	b.n	800ac88 <_printf_float+0x94>
 800ace4:	6863      	ldr	r3, [r4, #4]
 800ace6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800acea:	9206      	str	r2, [sp, #24]
 800acec:	1c5a      	adds	r2, r3, #1
 800acee:	d13f      	bne.n	800ad70 <_printf_float+0x17c>
 800acf0:	2306      	movs	r3, #6
 800acf2:	6063      	str	r3, [r4, #4]
 800acf4:	9b05      	ldr	r3, [sp, #20]
 800acf6:	6861      	ldr	r1, [r4, #4]
 800acf8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800acfc:	2300      	movs	r3, #0
 800acfe:	9303      	str	r3, [sp, #12]
 800ad00:	ab0a      	add	r3, sp, #40	; 0x28
 800ad02:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ad06:	ab09      	add	r3, sp, #36	; 0x24
 800ad08:	ec49 8b10 	vmov	d0, r8, r9
 800ad0c:	9300      	str	r3, [sp, #0]
 800ad0e:	6022      	str	r2, [r4, #0]
 800ad10:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ad14:	4628      	mov	r0, r5
 800ad16:	f7ff fecd 	bl	800aab4 <__cvt>
 800ad1a:	9b06      	ldr	r3, [sp, #24]
 800ad1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad1e:	2b47      	cmp	r3, #71	; 0x47
 800ad20:	4680      	mov	r8, r0
 800ad22:	d108      	bne.n	800ad36 <_printf_float+0x142>
 800ad24:	1cc8      	adds	r0, r1, #3
 800ad26:	db02      	blt.n	800ad2e <_printf_float+0x13a>
 800ad28:	6863      	ldr	r3, [r4, #4]
 800ad2a:	4299      	cmp	r1, r3
 800ad2c:	dd41      	ble.n	800adb2 <_printf_float+0x1be>
 800ad2e:	f1ab 0b02 	sub.w	fp, fp, #2
 800ad32:	fa5f fb8b 	uxtb.w	fp, fp
 800ad36:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ad3a:	d820      	bhi.n	800ad7e <_printf_float+0x18a>
 800ad3c:	3901      	subs	r1, #1
 800ad3e:	465a      	mov	r2, fp
 800ad40:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ad44:	9109      	str	r1, [sp, #36]	; 0x24
 800ad46:	f7ff ff17 	bl	800ab78 <__exponent>
 800ad4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad4c:	1813      	adds	r3, r2, r0
 800ad4e:	2a01      	cmp	r2, #1
 800ad50:	4681      	mov	r9, r0
 800ad52:	6123      	str	r3, [r4, #16]
 800ad54:	dc02      	bgt.n	800ad5c <_printf_float+0x168>
 800ad56:	6822      	ldr	r2, [r4, #0]
 800ad58:	07d2      	lsls	r2, r2, #31
 800ad5a:	d501      	bpl.n	800ad60 <_printf_float+0x16c>
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	6123      	str	r3, [r4, #16]
 800ad60:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d09c      	beq.n	800aca2 <_printf_float+0xae>
 800ad68:	232d      	movs	r3, #45	; 0x2d
 800ad6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad6e:	e798      	b.n	800aca2 <_printf_float+0xae>
 800ad70:	9a06      	ldr	r2, [sp, #24]
 800ad72:	2a47      	cmp	r2, #71	; 0x47
 800ad74:	d1be      	bne.n	800acf4 <_printf_float+0x100>
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d1bc      	bne.n	800acf4 <_printf_float+0x100>
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	e7b9      	b.n	800acf2 <_printf_float+0xfe>
 800ad7e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ad82:	d118      	bne.n	800adb6 <_printf_float+0x1c2>
 800ad84:	2900      	cmp	r1, #0
 800ad86:	6863      	ldr	r3, [r4, #4]
 800ad88:	dd0b      	ble.n	800ada2 <_printf_float+0x1ae>
 800ad8a:	6121      	str	r1, [r4, #16]
 800ad8c:	b913      	cbnz	r3, 800ad94 <_printf_float+0x1a0>
 800ad8e:	6822      	ldr	r2, [r4, #0]
 800ad90:	07d0      	lsls	r0, r2, #31
 800ad92:	d502      	bpl.n	800ad9a <_printf_float+0x1a6>
 800ad94:	3301      	adds	r3, #1
 800ad96:	440b      	add	r3, r1
 800ad98:	6123      	str	r3, [r4, #16]
 800ad9a:	65a1      	str	r1, [r4, #88]	; 0x58
 800ad9c:	f04f 0900 	mov.w	r9, #0
 800ada0:	e7de      	b.n	800ad60 <_printf_float+0x16c>
 800ada2:	b913      	cbnz	r3, 800adaa <_printf_float+0x1b6>
 800ada4:	6822      	ldr	r2, [r4, #0]
 800ada6:	07d2      	lsls	r2, r2, #31
 800ada8:	d501      	bpl.n	800adae <_printf_float+0x1ba>
 800adaa:	3302      	adds	r3, #2
 800adac:	e7f4      	b.n	800ad98 <_printf_float+0x1a4>
 800adae:	2301      	movs	r3, #1
 800adb0:	e7f2      	b.n	800ad98 <_printf_float+0x1a4>
 800adb2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800adb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adb8:	4299      	cmp	r1, r3
 800adba:	db05      	blt.n	800adc8 <_printf_float+0x1d4>
 800adbc:	6823      	ldr	r3, [r4, #0]
 800adbe:	6121      	str	r1, [r4, #16]
 800adc0:	07d8      	lsls	r0, r3, #31
 800adc2:	d5ea      	bpl.n	800ad9a <_printf_float+0x1a6>
 800adc4:	1c4b      	adds	r3, r1, #1
 800adc6:	e7e7      	b.n	800ad98 <_printf_float+0x1a4>
 800adc8:	2900      	cmp	r1, #0
 800adca:	bfd4      	ite	le
 800adcc:	f1c1 0202 	rsble	r2, r1, #2
 800add0:	2201      	movgt	r2, #1
 800add2:	4413      	add	r3, r2
 800add4:	e7e0      	b.n	800ad98 <_printf_float+0x1a4>
 800add6:	6823      	ldr	r3, [r4, #0]
 800add8:	055a      	lsls	r2, r3, #21
 800adda:	d407      	bmi.n	800adec <_printf_float+0x1f8>
 800addc:	6923      	ldr	r3, [r4, #16]
 800adde:	4642      	mov	r2, r8
 800ade0:	4631      	mov	r1, r6
 800ade2:	4628      	mov	r0, r5
 800ade4:	47b8      	blx	r7
 800ade6:	3001      	adds	r0, #1
 800ade8:	d12c      	bne.n	800ae44 <_printf_float+0x250>
 800adea:	e764      	b.n	800acb6 <_printf_float+0xc2>
 800adec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800adf0:	f240 80e0 	bls.w	800afb4 <_printf_float+0x3c0>
 800adf4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800adf8:	2200      	movs	r2, #0
 800adfa:	2300      	movs	r3, #0
 800adfc:	f7f5 fe84 	bl	8000b08 <__aeabi_dcmpeq>
 800ae00:	2800      	cmp	r0, #0
 800ae02:	d034      	beq.n	800ae6e <_printf_float+0x27a>
 800ae04:	4a37      	ldr	r2, [pc, #220]	; (800aee4 <_printf_float+0x2f0>)
 800ae06:	2301      	movs	r3, #1
 800ae08:	4631      	mov	r1, r6
 800ae0a:	4628      	mov	r0, r5
 800ae0c:	47b8      	blx	r7
 800ae0e:	3001      	adds	r0, #1
 800ae10:	f43f af51 	beq.w	800acb6 <_printf_float+0xc2>
 800ae14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	db02      	blt.n	800ae22 <_printf_float+0x22e>
 800ae1c:	6823      	ldr	r3, [r4, #0]
 800ae1e:	07d8      	lsls	r0, r3, #31
 800ae20:	d510      	bpl.n	800ae44 <_printf_float+0x250>
 800ae22:	ee18 3a10 	vmov	r3, s16
 800ae26:	4652      	mov	r2, sl
 800ae28:	4631      	mov	r1, r6
 800ae2a:	4628      	mov	r0, r5
 800ae2c:	47b8      	blx	r7
 800ae2e:	3001      	adds	r0, #1
 800ae30:	f43f af41 	beq.w	800acb6 <_printf_float+0xc2>
 800ae34:	f04f 0800 	mov.w	r8, #0
 800ae38:	f104 091a 	add.w	r9, r4, #26
 800ae3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae3e:	3b01      	subs	r3, #1
 800ae40:	4543      	cmp	r3, r8
 800ae42:	dc09      	bgt.n	800ae58 <_printf_float+0x264>
 800ae44:	6823      	ldr	r3, [r4, #0]
 800ae46:	079b      	lsls	r3, r3, #30
 800ae48:	f100 8105 	bmi.w	800b056 <_printf_float+0x462>
 800ae4c:	68e0      	ldr	r0, [r4, #12]
 800ae4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae50:	4298      	cmp	r0, r3
 800ae52:	bfb8      	it	lt
 800ae54:	4618      	movlt	r0, r3
 800ae56:	e730      	b.n	800acba <_printf_float+0xc6>
 800ae58:	2301      	movs	r3, #1
 800ae5a:	464a      	mov	r2, r9
 800ae5c:	4631      	mov	r1, r6
 800ae5e:	4628      	mov	r0, r5
 800ae60:	47b8      	blx	r7
 800ae62:	3001      	adds	r0, #1
 800ae64:	f43f af27 	beq.w	800acb6 <_printf_float+0xc2>
 800ae68:	f108 0801 	add.w	r8, r8, #1
 800ae6c:	e7e6      	b.n	800ae3c <_printf_float+0x248>
 800ae6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	dc39      	bgt.n	800aee8 <_printf_float+0x2f4>
 800ae74:	4a1b      	ldr	r2, [pc, #108]	; (800aee4 <_printf_float+0x2f0>)
 800ae76:	2301      	movs	r3, #1
 800ae78:	4631      	mov	r1, r6
 800ae7a:	4628      	mov	r0, r5
 800ae7c:	47b8      	blx	r7
 800ae7e:	3001      	adds	r0, #1
 800ae80:	f43f af19 	beq.w	800acb6 <_printf_float+0xc2>
 800ae84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	d102      	bne.n	800ae92 <_printf_float+0x29e>
 800ae8c:	6823      	ldr	r3, [r4, #0]
 800ae8e:	07d9      	lsls	r1, r3, #31
 800ae90:	d5d8      	bpl.n	800ae44 <_printf_float+0x250>
 800ae92:	ee18 3a10 	vmov	r3, s16
 800ae96:	4652      	mov	r2, sl
 800ae98:	4631      	mov	r1, r6
 800ae9a:	4628      	mov	r0, r5
 800ae9c:	47b8      	blx	r7
 800ae9e:	3001      	adds	r0, #1
 800aea0:	f43f af09 	beq.w	800acb6 <_printf_float+0xc2>
 800aea4:	f04f 0900 	mov.w	r9, #0
 800aea8:	f104 0a1a 	add.w	sl, r4, #26
 800aeac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeae:	425b      	negs	r3, r3
 800aeb0:	454b      	cmp	r3, r9
 800aeb2:	dc01      	bgt.n	800aeb8 <_printf_float+0x2c4>
 800aeb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aeb6:	e792      	b.n	800adde <_printf_float+0x1ea>
 800aeb8:	2301      	movs	r3, #1
 800aeba:	4652      	mov	r2, sl
 800aebc:	4631      	mov	r1, r6
 800aebe:	4628      	mov	r0, r5
 800aec0:	47b8      	blx	r7
 800aec2:	3001      	adds	r0, #1
 800aec4:	f43f aef7 	beq.w	800acb6 <_printf_float+0xc2>
 800aec8:	f109 0901 	add.w	r9, r9, #1
 800aecc:	e7ee      	b.n	800aeac <_printf_float+0x2b8>
 800aece:	bf00      	nop
 800aed0:	7fefffff 	.word	0x7fefffff
 800aed4:	0800e3d0 	.word	0x0800e3d0
 800aed8:	0800e3d4 	.word	0x0800e3d4
 800aedc:	0800e3dc 	.word	0x0800e3dc
 800aee0:	0800e3d8 	.word	0x0800e3d8
 800aee4:	0800e3e0 	.word	0x0800e3e0
 800aee8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aeea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aeec:	429a      	cmp	r2, r3
 800aeee:	bfa8      	it	ge
 800aef0:	461a      	movge	r2, r3
 800aef2:	2a00      	cmp	r2, #0
 800aef4:	4691      	mov	r9, r2
 800aef6:	dc37      	bgt.n	800af68 <_printf_float+0x374>
 800aef8:	f04f 0b00 	mov.w	fp, #0
 800aefc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af00:	f104 021a 	add.w	r2, r4, #26
 800af04:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af06:	9305      	str	r3, [sp, #20]
 800af08:	eba3 0309 	sub.w	r3, r3, r9
 800af0c:	455b      	cmp	r3, fp
 800af0e:	dc33      	bgt.n	800af78 <_printf_float+0x384>
 800af10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af14:	429a      	cmp	r2, r3
 800af16:	db3b      	blt.n	800af90 <_printf_float+0x39c>
 800af18:	6823      	ldr	r3, [r4, #0]
 800af1a:	07da      	lsls	r2, r3, #31
 800af1c:	d438      	bmi.n	800af90 <_printf_float+0x39c>
 800af1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af20:	9a05      	ldr	r2, [sp, #20]
 800af22:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af24:	1a9a      	subs	r2, r3, r2
 800af26:	eba3 0901 	sub.w	r9, r3, r1
 800af2a:	4591      	cmp	r9, r2
 800af2c:	bfa8      	it	ge
 800af2e:	4691      	movge	r9, r2
 800af30:	f1b9 0f00 	cmp.w	r9, #0
 800af34:	dc35      	bgt.n	800afa2 <_printf_float+0x3ae>
 800af36:	f04f 0800 	mov.w	r8, #0
 800af3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af3e:	f104 0a1a 	add.w	sl, r4, #26
 800af42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af46:	1a9b      	subs	r3, r3, r2
 800af48:	eba3 0309 	sub.w	r3, r3, r9
 800af4c:	4543      	cmp	r3, r8
 800af4e:	f77f af79 	ble.w	800ae44 <_printf_float+0x250>
 800af52:	2301      	movs	r3, #1
 800af54:	4652      	mov	r2, sl
 800af56:	4631      	mov	r1, r6
 800af58:	4628      	mov	r0, r5
 800af5a:	47b8      	blx	r7
 800af5c:	3001      	adds	r0, #1
 800af5e:	f43f aeaa 	beq.w	800acb6 <_printf_float+0xc2>
 800af62:	f108 0801 	add.w	r8, r8, #1
 800af66:	e7ec      	b.n	800af42 <_printf_float+0x34e>
 800af68:	4613      	mov	r3, r2
 800af6a:	4631      	mov	r1, r6
 800af6c:	4642      	mov	r2, r8
 800af6e:	4628      	mov	r0, r5
 800af70:	47b8      	blx	r7
 800af72:	3001      	adds	r0, #1
 800af74:	d1c0      	bne.n	800aef8 <_printf_float+0x304>
 800af76:	e69e      	b.n	800acb6 <_printf_float+0xc2>
 800af78:	2301      	movs	r3, #1
 800af7a:	4631      	mov	r1, r6
 800af7c:	4628      	mov	r0, r5
 800af7e:	9205      	str	r2, [sp, #20]
 800af80:	47b8      	blx	r7
 800af82:	3001      	adds	r0, #1
 800af84:	f43f ae97 	beq.w	800acb6 <_printf_float+0xc2>
 800af88:	9a05      	ldr	r2, [sp, #20]
 800af8a:	f10b 0b01 	add.w	fp, fp, #1
 800af8e:	e7b9      	b.n	800af04 <_printf_float+0x310>
 800af90:	ee18 3a10 	vmov	r3, s16
 800af94:	4652      	mov	r2, sl
 800af96:	4631      	mov	r1, r6
 800af98:	4628      	mov	r0, r5
 800af9a:	47b8      	blx	r7
 800af9c:	3001      	adds	r0, #1
 800af9e:	d1be      	bne.n	800af1e <_printf_float+0x32a>
 800afa0:	e689      	b.n	800acb6 <_printf_float+0xc2>
 800afa2:	9a05      	ldr	r2, [sp, #20]
 800afa4:	464b      	mov	r3, r9
 800afa6:	4442      	add	r2, r8
 800afa8:	4631      	mov	r1, r6
 800afaa:	4628      	mov	r0, r5
 800afac:	47b8      	blx	r7
 800afae:	3001      	adds	r0, #1
 800afb0:	d1c1      	bne.n	800af36 <_printf_float+0x342>
 800afb2:	e680      	b.n	800acb6 <_printf_float+0xc2>
 800afb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800afb6:	2a01      	cmp	r2, #1
 800afb8:	dc01      	bgt.n	800afbe <_printf_float+0x3ca>
 800afba:	07db      	lsls	r3, r3, #31
 800afbc:	d538      	bpl.n	800b030 <_printf_float+0x43c>
 800afbe:	2301      	movs	r3, #1
 800afc0:	4642      	mov	r2, r8
 800afc2:	4631      	mov	r1, r6
 800afc4:	4628      	mov	r0, r5
 800afc6:	47b8      	blx	r7
 800afc8:	3001      	adds	r0, #1
 800afca:	f43f ae74 	beq.w	800acb6 <_printf_float+0xc2>
 800afce:	ee18 3a10 	vmov	r3, s16
 800afd2:	4652      	mov	r2, sl
 800afd4:	4631      	mov	r1, r6
 800afd6:	4628      	mov	r0, r5
 800afd8:	47b8      	blx	r7
 800afda:	3001      	adds	r0, #1
 800afdc:	f43f ae6b 	beq.w	800acb6 <_printf_float+0xc2>
 800afe0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800afe4:	2200      	movs	r2, #0
 800afe6:	2300      	movs	r3, #0
 800afe8:	f7f5 fd8e 	bl	8000b08 <__aeabi_dcmpeq>
 800afec:	b9d8      	cbnz	r0, 800b026 <_printf_float+0x432>
 800afee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aff0:	f108 0201 	add.w	r2, r8, #1
 800aff4:	3b01      	subs	r3, #1
 800aff6:	4631      	mov	r1, r6
 800aff8:	4628      	mov	r0, r5
 800affa:	47b8      	blx	r7
 800affc:	3001      	adds	r0, #1
 800affe:	d10e      	bne.n	800b01e <_printf_float+0x42a>
 800b000:	e659      	b.n	800acb6 <_printf_float+0xc2>
 800b002:	2301      	movs	r3, #1
 800b004:	4652      	mov	r2, sl
 800b006:	4631      	mov	r1, r6
 800b008:	4628      	mov	r0, r5
 800b00a:	47b8      	blx	r7
 800b00c:	3001      	adds	r0, #1
 800b00e:	f43f ae52 	beq.w	800acb6 <_printf_float+0xc2>
 800b012:	f108 0801 	add.w	r8, r8, #1
 800b016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b018:	3b01      	subs	r3, #1
 800b01a:	4543      	cmp	r3, r8
 800b01c:	dcf1      	bgt.n	800b002 <_printf_float+0x40e>
 800b01e:	464b      	mov	r3, r9
 800b020:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b024:	e6dc      	b.n	800ade0 <_printf_float+0x1ec>
 800b026:	f04f 0800 	mov.w	r8, #0
 800b02a:	f104 0a1a 	add.w	sl, r4, #26
 800b02e:	e7f2      	b.n	800b016 <_printf_float+0x422>
 800b030:	2301      	movs	r3, #1
 800b032:	4642      	mov	r2, r8
 800b034:	e7df      	b.n	800aff6 <_printf_float+0x402>
 800b036:	2301      	movs	r3, #1
 800b038:	464a      	mov	r2, r9
 800b03a:	4631      	mov	r1, r6
 800b03c:	4628      	mov	r0, r5
 800b03e:	47b8      	blx	r7
 800b040:	3001      	adds	r0, #1
 800b042:	f43f ae38 	beq.w	800acb6 <_printf_float+0xc2>
 800b046:	f108 0801 	add.w	r8, r8, #1
 800b04a:	68e3      	ldr	r3, [r4, #12]
 800b04c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b04e:	1a5b      	subs	r3, r3, r1
 800b050:	4543      	cmp	r3, r8
 800b052:	dcf0      	bgt.n	800b036 <_printf_float+0x442>
 800b054:	e6fa      	b.n	800ae4c <_printf_float+0x258>
 800b056:	f04f 0800 	mov.w	r8, #0
 800b05a:	f104 0919 	add.w	r9, r4, #25
 800b05e:	e7f4      	b.n	800b04a <_printf_float+0x456>

0800b060 <_printf_common>:
 800b060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b064:	4616      	mov	r6, r2
 800b066:	4699      	mov	r9, r3
 800b068:	688a      	ldr	r2, [r1, #8]
 800b06a:	690b      	ldr	r3, [r1, #16]
 800b06c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b070:	4293      	cmp	r3, r2
 800b072:	bfb8      	it	lt
 800b074:	4613      	movlt	r3, r2
 800b076:	6033      	str	r3, [r6, #0]
 800b078:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b07c:	4607      	mov	r7, r0
 800b07e:	460c      	mov	r4, r1
 800b080:	b10a      	cbz	r2, 800b086 <_printf_common+0x26>
 800b082:	3301      	adds	r3, #1
 800b084:	6033      	str	r3, [r6, #0]
 800b086:	6823      	ldr	r3, [r4, #0]
 800b088:	0699      	lsls	r1, r3, #26
 800b08a:	bf42      	ittt	mi
 800b08c:	6833      	ldrmi	r3, [r6, #0]
 800b08e:	3302      	addmi	r3, #2
 800b090:	6033      	strmi	r3, [r6, #0]
 800b092:	6825      	ldr	r5, [r4, #0]
 800b094:	f015 0506 	ands.w	r5, r5, #6
 800b098:	d106      	bne.n	800b0a8 <_printf_common+0x48>
 800b09a:	f104 0a19 	add.w	sl, r4, #25
 800b09e:	68e3      	ldr	r3, [r4, #12]
 800b0a0:	6832      	ldr	r2, [r6, #0]
 800b0a2:	1a9b      	subs	r3, r3, r2
 800b0a4:	42ab      	cmp	r3, r5
 800b0a6:	dc26      	bgt.n	800b0f6 <_printf_common+0x96>
 800b0a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b0ac:	1e13      	subs	r3, r2, #0
 800b0ae:	6822      	ldr	r2, [r4, #0]
 800b0b0:	bf18      	it	ne
 800b0b2:	2301      	movne	r3, #1
 800b0b4:	0692      	lsls	r2, r2, #26
 800b0b6:	d42b      	bmi.n	800b110 <_printf_common+0xb0>
 800b0b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b0bc:	4649      	mov	r1, r9
 800b0be:	4638      	mov	r0, r7
 800b0c0:	47c0      	blx	r8
 800b0c2:	3001      	adds	r0, #1
 800b0c4:	d01e      	beq.n	800b104 <_printf_common+0xa4>
 800b0c6:	6823      	ldr	r3, [r4, #0]
 800b0c8:	68e5      	ldr	r5, [r4, #12]
 800b0ca:	6832      	ldr	r2, [r6, #0]
 800b0cc:	f003 0306 	and.w	r3, r3, #6
 800b0d0:	2b04      	cmp	r3, #4
 800b0d2:	bf08      	it	eq
 800b0d4:	1aad      	subeq	r5, r5, r2
 800b0d6:	68a3      	ldr	r3, [r4, #8]
 800b0d8:	6922      	ldr	r2, [r4, #16]
 800b0da:	bf0c      	ite	eq
 800b0dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0e0:	2500      	movne	r5, #0
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	bfc4      	itt	gt
 800b0e6:	1a9b      	subgt	r3, r3, r2
 800b0e8:	18ed      	addgt	r5, r5, r3
 800b0ea:	2600      	movs	r6, #0
 800b0ec:	341a      	adds	r4, #26
 800b0ee:	42b5      	cmp	r5, r6
 800b0f0:	d11a      	bne.n	800b128 <_printf_common+0xc8>
 800b0f2:	2000      	movs	r0, #0
 800b0f4:	e008      	b.n	800b108 <_printf_common+0xa8>
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	4652      	mov	r2, sl
 800b0fa:	4649      	mov	r1, r9
 800b0fc:	4638      	mov	r0, r7
 800b0fe:	47c0      	blx	r8
 800b100:	3001      	adds	r0, #1
 800b102:	d103      	bne.n	800b10c <_printf_common+0xac>
 800b104:	f04f 30ff 	mov.w	r0, #4294967295
 800b108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b10c:	3501      	adds	r5, #1
 800b10e:	e7c6      	b.n	800b09e <_printf_common+0x3e>
 800b110:	18e1      	adds	r1, r4, r3
 800b112:	1c5a      	adds	r2, r3, #1
 800b114:	2030      	movs	r0, #48	; 0x30
 800b116:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b11a:	4422      	add	r2, r4
 800b11c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b120:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b124:	3302      	adds	r3, #2
 800b126:	e7c7      	b.n	800b0b8 <_printf_common+0x58>
 800b128:	2301      	movs	r3, #1
 800b12a:	4622      	mov	r2, r4
 800b12c:	4649      	mov	r1, r9
 800b12e:	4638      	mov	r0, r7
 800b130:	47c0      	blx	r8
 800b132:	3001      	adds	r0, #1
 800b134:	d0e6      	beq.n	800b104 <_printf_common+0xa4>
 800b136:	3601      	adds	r6, #1
 800b138:	e7d9      	b.n	800b0ee <_printf_common+0x8e>
	...

0800b13c <_printf_i>:
 800b13c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b140:	7e0f      	ldrb	r7, [r1, #24]
 800b142:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b144:	2f78      	cmp	r7, #120	; 0x78
 800b146:	4691      	mov	r9, r2
 800b148:	4680      	mov	r8, r0
 800b14a:	460c      	mov	r4, r1
 800b14c:	469a      	mov	sl, r3
 800b14e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b152:	d807      	bhi.n	800b164 <_printf_i+0x28>
 800b154:	2f62      	cmp	r7, #98	; 0x62
 800b156:	d80a      	bhi.n	800b16e <_printf_i+0x32>
 800b158:	2f00      	cmp	r7, #0
 800b15a:	f000 80d8 	beq.w	800b30e <_printf_i+0x1d2>
 800b15e:	2f58      	cmp	r7, #88	; 0x58
 800b160:	f000 80a3 	beq.w	800b2aa <_printf_i+0x16e>
 800b164:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b168:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b16c:	e03a      	b.n	800b1e4 <_printf_i+0xa8>
 800b16e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b172:	2b15      	cmp	r3, #21
 800b174:	d8f6      	bhi.n	800b164 <_printf_i+0x28>
 800b176:	a101      	add	r1, pc, #4	; (adr r1, 800b17c <_printf_i+0x40>)
 800b178:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b17c:	0800b1d5 	.word	0x0800b1d5
 800b180:	0800b1e9 	.word	0x0800b1e9
 800b184:	0800b165 	.word	0x0800b165
 800b188:	0800b165 	.word	0x0800b165
 800b18c:	0800b165 	.word	0x0800b165
 800b190:	0800b165 	.word	0x0800b165
 800b194:	0800b1e9 	.word	0x0800b1e9
 800b198:	0800b165 	.word	0x0800b165
 800b19c:	0800b165 	.word	0x0800b165
 800b1a0:	0800b165 	.word	0x0800b165
 800b1a4:	0800b165 	.word	0x0800b165
 800b1a8:	0800b2f5 	.word	0x0800b2f5
 800b1ac:	0800b219 	.word	0x0800b219
 800b1b0:	0800b2d7 	.word	0x0800b2d7
 800b1b4:	0800b165 	.word	0x0800b165
 800b1b8:	0800b165 	.word	0x0800b165
 800b1bc:	0800b317 	.word	0x0800b317
 800b1c0:	0800b165 	.word	0x0800b165
 800b1c4:	0800b219 	.word	0x0800b219
 800b1c8:	0800b165 	.word	0x0800b165
 800b1cc:	0800b165 	.word	0x0800b165
 800b1d0:	0800b2df 	.word	0x0800b2df
 800b1d4:	682b      	ldr	r3, [r5, #0]
 800b1d6:	1d1a      	adds	r2, r3, #4
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	602a      	str	r2, [r5, #0]
 800b1dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	e0a3      	b.n	800b330 <_printf_i+0x1f4>
 800b1e8:	6820      	ldr	r0, [r4, #0]
 800b1ea:	6829      	ldr	r1, [r5, #0]
 800b1ec:	0606      	lsls	r6, r0, #24
 800b1ee:	f101 0304 	add.w	r3, r1, #4
 800b1f2:	d50a      	bpl.n	800b20a <_printf_i+0xce>
 800b1f4:	680e      	ldr	r6, [r1, #0]
 800b1f6:	602b      	str	r3, [r5, #0]
 800b1f8:	2e00      	cmp	r6, #0
 800b1fa:	da03      	bge.n	800b204 <_printf_i+0xc8>
 800b1fc:	232d      	movs	r3, #45	; 0x2d
 800b1fe:	4276      	negs	r6, r6
 800b200:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b204:	485e      	ldr	r0, [pc, #376]	; (800b380 <_printf_i+0x244>)
 800b206:	230a      	movs	r3, #10
 800b208:	e019      	b.n	800b23e <_printf_i+0x102>
 800b20a:	680e      	ldr	r6, [r1, #0]
 800b20c:	602b      	str	r3, [r5, #0]
 800b20e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b212:	bf18      	it	ne
 800b214:	b236      	sxthne	r6, r6
 800b216:	e7ef      	b.n	800b1f8 <_printf_i+0xbc>
 800b218:	682b      	ldr	r3, [r5, #0]
 800b21a:	6820      	ldr	r0, [r4, #0]
 800b21c:	1d19      	adds	r1, r3, #4
 800b21e:	6029      	str	r1, [r5, #0]
 800b220:	0601      	lsls	r1, r0, #24
 800b222:	d501      	bpl.n	800b228 <_printf_i+0xec>
 800b224:	681e      	ldr	r6, [r3, #0]
 800b226:	e002      	b.n	800b22e <_printf_i+0xf2>
 800b228:	0646      	lsls	r6, r0, #25
 800b22a:	d5fb      	bpl.n	800b224 <_printf_i+0xe8>
 800b22c:	881e      	ldrh	r6, [r3, #0]
 800b22e:	4854      	ldr	r0, [pc, #336]	; (800b380 <_printf_i+0x244>)
 800b230:	2f6f      	cmp	r7, #111	; 0x6f
 800b232:	bf0c      	ite	eq
 800b234:	2308      	moveq	r3, #8
 800b236:	230a      	movne	r3, #10
 800b238:	2100      	movs	r1, #0
 800b23a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b23e:	6865      	ldr	r5, [r4, #4]
 800b240:	60a5      	str	r5, [r4, #8]
 800b242:	2d00      	cmp	r5, #0
 800b244:	bfa2      	ittt	ge
 800b246:	6821      	ldrge	r1, [r4, #0]
 800b248:	f021 0104 	bicge.w	r1, r1, #4
 800b24c:	6021      	strge	r1, [r4, #0]
 800b24e:	b90e      	cbnz	r6, 800b254 <_printf_i+0x118>
 800b250:	2d00      	cmp	r5, #0
 800b252:	d04d      	beq.n	800b2f0 <_printf_i+0x1b4>
 800b254:	4615      	mov	r5, r2
 800b256:	fbb6 f1f3 	udiv	r1, r6, r3
 800b25a:	fb03 6711 	mls	r7, r3, r1, r6
 800b25e:	5dc7      	ldrb	r7, [r0, r7]
 800b260:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b264:	4637      	mov	r7, r6
 800b266:	42bb      	cmp	r3, r7
 800b268:	460e      	mov	r6, r1
 800b26a:	d9f4      	bls.n	800b256 <_printf_i+0x11a>
 800b26c:	2b08      	cmp	r3, #8
 800b26e:	d10b      	bne.n	800b288 <_printf_i+0x14c>
 800b270:	6823      	ldr	r3, [r4, #0]
 800b272:	07de      	lsls	r6, r3, #31
 800b274:	d508      	bpl.n	800b288 <_printf_i+0x14c>
 800b276:	6923      	ldr	r3, [r4, #16]
 800b278:	6861      	ldr	r1, [r4, #4]
 800b27a:	4299      	cmp	r1, r3
 800b27c:	bfde      	ittt	le
 800b27e:	2330      	movle	r3, #48	; 0x30
 800b280:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b284:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b288:	1b52      	subs	r2, r2, r5
 800b28a:	6122      	str	r2, [r4, #16]
 800b28c:	f8cd a000 	str.w	sl, [sp]
 800b290:	464b      	mov	r3, r9
 800b292:	aa03      	add	r2, sp, #12
 800b294:	4621      	mov	r1, r4
 800b296:	4640      	mov	r0, r8
 800b298:	f7ff fee2 	bl	800b060 <_printf_common>
 800b29c:	3001      	adds	r0, #1
 800b29e:	d14c      	bne.n	800b33a <_printf_i+0x1fe>
 800b2a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b2a4:	b004      	add	sp, #16
 800b2a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2aa:	4835      	ldr	r0, [pc, #212]	; (800b380 <_printf_i+0x244>)
 800b2ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b2b0:	6829      	ldr	r1, [r5, #0]
 800b2b2:	6823      	ldr	r3, [r4, #0]
 800b2b4:	f851 6b04 	ldr.w	r6, [r1], #4
 800b2b8:	6029      	str	r1, [r5, #0]
 800b2ba:	061d      	lsls	r5, r3, #24
 800b2bc:	d514      	bpl.n	800b2e8 <_printf_i+0x1ac>
 800b2be:	07df      	lsls	r7, r3, #31
 800b2c0:	bf44      	itt	mi
 800b2c2:	f043 0320 	orrmi.w	r3, r3, #32
 800b2c6:	6023      	strmi	r3, [r4, #0]
 800b2c8:	b91e      	cbnz	r6, 800b2d2 <_printf_i+0x196>
 800b2ca:	6823      	ldr	r3, [r4, #0]
 800b2cc:	f023 0320 	bic.w	r3, r3, #32
 800b2d0:	6023      	str	r3, [r4, #0]
 800b2d2:	2310      	movs	r3, #16
 800b2d4:	e7b0      	b.n	800b238 <_printf_i+0xfc>
 800b2d6:	6823      	ldr	r3, [r4, #0]
 800b2d8:	f043 0320 	orr.w	r3, r3, #32
 800b2dc:	6023      	str	r3, [r4, #0]
 800b2de:	2378      	movs	r3, #120	; 0x78
 800b2e0:	4828      	ldr	r0, [pc, #160]	; (800b384 <_printf_i+0x248>)
 800b2e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b2e6:	e7e3      	b.n	800b2b0 <_printf_i+0x174>
 800b2e8:	0659      	lsls	r1, r3, #25
 800b2ea:	bf48      	it	mi
 800b2ec:	b2b6      	uxthmi	r6, r6
 800b2ee:	e7e6      	b.n	800b2be <_printf_i+0x182>
 800b2f0:	4615      	mov	r5, r2
 800b2f2:	e7bb      	b.n	800b26c <_printf_i+0x130>
 800b2f4:	682b      	ldr	r3, [r5, #0]
 800b2f6:	6826      	ldr	r6, [r4, #0]
 800b2f8:	6961      	ldr	r1, [r4, #20]
 800b2fa:	1d18      	adds	r0, r3, #4
 800b2fc:	6028      	str	r0, [r5, #0]
 800b2fe:	0635      	lsls	r5, r6, #24
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	d501      	bpl.n	800b308 <_printf_i+0x1cc>
 800b304:	6019      	str	r1, [r3, #0]
 800b306:	e002      	b.n	800b30e <_printf_i+0x1d2>
 800b308:	0670      	lsls	r0, r6, #25
 800b30a:	d5fb      	bpl.n	800b304 <_printf_i+0x1c8>
 800b30c:	8019      	strh	r1, [r3, #0]
 800b30e:	2300      	movs	r3, #0
 800b310:	6123      	str	r3, [r4, #16]
 800b312:	4615      	mov	r5, r2
 800b314:	e7ba      	b.n	800b28c <_printf_i+0x150>
 800b316:	682b      	ldr	r3, [r5, #0]
 800b318:	1d1a      	adds	r2, r3, #4
 800b31a:	602a      	str	r2, [r5, #0]
 800b31c:	681d      	ldr	r5, [r3, #0]
 800b31e:	6862      	ldr	r2, [r4, #4]
 800b320:	2100      	movs	r1, #0
 800b322:	4628      	mov	r0, r5
 800b324:	f7f4 ff7c 	bl	8000220 <memchr>
 800b328:	b108      	cbz	r0, 800b32e <_printf_i+0x1f2>
 800b32a:	1b40      	subs	r0, r0, r5
 800b32c:	6060      	str	r0, [r4, #4]
 800b32e:	6863      	ldr	r3, [r4, #4]
 800b330:	6123      	str	r3, [r4, #16]
 800b332:	2300      	movs	r3, #0
 800b334:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b338:	e7a8      	b.n	800b28c <_printf_i+0x150>
 800b33a:	6923      	ldr	r3, [r4, #16]
 800b33c:	462a      	mov	r2, r5
 800b33e:	4649      	mov	r1, r9
 800b340:	4640      	mov	r0, r8
 800b342:	47d0      	blx	sl
 800b344:	3001      	adds	r0, #1
 800b346:	d0ab      	beq.n	800b2a0 <_printf_i+0x164>
 800b348:	6823      	ldr	r3, [r4, #0]
 800b34a:	079b      	lsls	r3, r3, #30
 800b34c:	d413      	bmi.n	800b376 <_printf_i+0x23a>
 800b34e:	68e0      	ldr	r0, [r4, #12]
 800b350:	9b03      	ldr	r3, [sp, #12]
 800b352:	4298      	cmp	r0, r3
 800b354:	bfb8      	it	lt
 800b356:	4618      	movlt	r0, r3
 800b358:	e7a4      	b.n	800b2a4 <_printf_i+0x168>
 800b35a:	2301      	movs	r3, #1
 800b35c:	4632      	mov	r2, r6
 800b35e:	4649      	mov	r1, r9
 800b360:	4640      	mov	r0, r8
 800b362:	47d0      	blx	sl
 800b364:	3001      	adds	r0, #1
 800b366:	d09b      	beq.n	800b2a0 <_printf_i+0x164>
 800b368:	3501      	adds	r5, #1
 800b36a:	68e3      	ldr	r3, [r4, #12]
 800b36c:	9903      	ldr	r1, [sp, #12]
 800b36e:	1a5b      	subs	r3, r3, r1
 800b370:	42ab      	cmp	r3, r5
 800b372:	dcf2      	bgt.n	800b35a <_printf_i+0x21e>
 800b374:	e7eb      	b.n	800b34e <_printf_i+0x212>
 800b376:	2500      	movs	r5, #0
 800b378:	f104 0619 	add.w	r6, r4, #25
 800b37c:	e7f5      	b.n	800b36a <_printf_i+0x22e>
 800b37e:	bf00      	nop
 800b380:	0800e3e2 	.word	0x0800e3e2
 800b384:	0800e3f3 	.word	0x0800e3f3

0800b388 <siprintf>:
 800b388:	b40e      	push	{r1, r2, r3}
 800b38a:	b500      	push	{lr}
 800b38c:	b09c      	sub	sp, #112	; 0x70
 800b38e:	ab1d      	add	r3, sp, #116	; 0x74
 800b390:	9002      	str	r0, [sp, #8]
 800b392:	9006      	str	r0, [sp, #24]
 800b394:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b398:	4809      	ldr	r0, [pc, #36]	; (800b3c0 <siprintf+0x38>)
 800b39a:	9107      	str	r1, [sp, #28]
 800b39c:	9104      	str	r1, [sp, #16]
 800b39e:	4909      	ldr	r1, [pc, #36]	; (800b3c4 <siprintf+0x3c>)
 800b3a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3a4:	9105      	str	r1, [sp, #20]
 800b3a6:	6800      	ldr	r0, [r0, #0]
 800b3a8:	9301      	str	r3, [sp, #4]
 800b3aa:	a902      	add	r1, sp, #8
 800b3ac:	f001 fb68 	bl	800ca80 <_svfiprintf_r>
 800b3b0:	9b02      	ldr	r3, [sp, #8]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	701a      	strb	r2, [r3, #0]
 800b3b6:	b01c      	add	sp, #112	; 0x70
 800b3b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3bc:	b003      	add	sp, #12
 800b3be:	4770      	bx	lr
 800b3c0:	20000024 	.word	0x20000024
 800b3c4:	ffff0208 	.word	0xffff0208

0800b3c8 <quorem>:
 800b3c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3cc:	6903      	ldr	r3, [r0, #16]
 800b3ce:	690c      	ldr	r4, [r1, #16]
 800b3d0:	42a3      	cmp	r3, r4
 800b3d2:	4607      	mov	r7, r0
 800b3d4:	f2c0 8081 	blt.w	800b4da <quorem+0x112>
 800b3d8:	3c01      	subs	r4, #1
 800b3da:	f101 0814 	add.w	r8, r1, #20
 800b3de:	f100 0514 	add.w	r5, r0, #20
 800b3e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b3e6:	9301      	str	r3, [sp, #4]
 800b3e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b3ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b3f0:	3301      	adds	r3, #1
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b3f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b3fc:	fbb2 f6f3 	udiv	r6, r2, r3
 800b400:	d331      	bcc.n	800b466 <quorem+0x9e>
 800b402:	f04f 0e00 	mov.w	lr, #0
 800b406:	4640      	mov	r0, r8
 800b408:	46ac      	mov	ip, r5
 800b40a:	46f2      	mov	sl, lr
 800b40c:	f850 2b04 	ldr.w	r2, [r0], #4
 800b410:	b293      	uxth	r3, r2
 800b412:	fb06 e303 	mla	r3, r6, r3, lr
 800b416:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b41a:	b29b      	uxth	r3, r3
 800b41c:	ebaa 0303 	sub.w	r3, sl, r3
 800b420:	f8dc a000 	ldr.w	sl, [ip]
 800b424:	0c12      	lsrs	r2, r2, #16
 800b426:	fa13 f38a 	uxtah	r3, r3, sl
 800b42a:	fb06 e202 	mla	r2, r6, r2, lr
 800b42e:	9300      	str	r3, [sp, #0]
 800b430:	9b00      	ldr	r3, [sp, #0]
 800b432:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b436:	b292      	uxth	r2, r2
 800b438:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b43c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b440:	f8bd 3000 	ldrh.w	r3, [sp]
 800b444:	4581      	cmp	r9, r0
 800b446:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b44a:	f84c 3b04 	str.w	r3, [ip], #4
 800b44e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b452:	d2db      	bcs.n	800b40c <quorem+0x44>
 800b454:	f855 300b 	ldr.w	r3, [r5, fp]
 800b458:	b92b      	cbnz	r3, 800b466 <quorem+0x9e>
 800b45a:	9b01      	ldr	r3, [sp, #4]
 800b45c:	3b04      	subs	r3, #4
 800b45e:	429d      	cmp	r5, r3
 800b460:	461a      	mov	r2, r3
 800b462:	d32e      	bcc.n	800b4c2 <quorem+0xfa>
 800b464:	613c      	str	r4, [r7, #16]
 800b466:	4638      	mov	r0, r7
 800b468:	f001 f8b6 	bl	800c5d8 <__mcmp>
 800b46c:	2800      	cmp	r0, #0
 800b46e:	db24      	blt.n	800b4ba <quorem+0xf2>
 800b470:	3601      	adds	r6, #1
 800b472:	4628      	mov	r0, r5
 800b474:	f04f 0c00 	mov.w	ip, #0
 800b478:	f858 2b04 	ldr.w	r2, [r8], #4
 800b47c:	f8d0 e000 	ldr.w	lr, [r0]
 800b480:	b293      	uxth	r3, r2
 800b482:	ebac 0303 	sub.w	r3, ip, r3
 800b486:	0c12      	lsrs	r2, r2, #16
 800b488:	fa13 f38e 	uxtah	r3, r3, lr
 800b48c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b490:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b494:	b29b      	uxth	r3, r3
 800b496:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b49a:	45c1      	cmp	r9, r8
 800b49c:	f840 3b04 	str.w	r3, [r0], #4
 800b4a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b4a4:	d2e8      	bcs.n	800b478 <quorem+0xb0>
 800b4a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b4aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b4ae:	b922      	cbnz	r2, 800b4ba <quorem+0xf2>
 800b4b0:	3b04      	subs	r3, #4
 800b4b2:	429d      	cmp	r5, r3
 800b4b4:	461a      	mov	r2, r3
 800b4b6:	d30a      	bcc.n	800b4ce <quorem+0x106>
 800b4b8:	613c      	str	r4, [r7, #16]
 800b4ba:	4630      	mov	r0, r6
 800b4bc:	b003      	add	sp, #12
 800b4be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4c2:	6812      	ldr	r2, [r2, #0]
 800b4c4:	3b04      	subs	r3, #4
 800b4c6:	2a00      	cmp	r2, #0
 800b4c8:	d1cc      	bne.n	800b464 <quorem+0x9c>
 800b4ca:	3c01      	subs	r4, #1
 800b4cc:	e7c7      	b.n	800b45e <quorem+0x96>
 800b4ce:	6812      	ldr	r2, [r2, #0]
 800b4d0:	3b04      	subs	r3, #4
 800b4d2:	2a00      	cmp	r2, #0
 800b4d4:	d1f0      	bne.n	800b4b8 <quorem+0xf0>
 800b4d6:	3c01      	subs	r4, #1
 800b4d8:	e7eb      	b.n	800b4b2 <quorem+0xea>
 800b4da:	2000      	movs	r0, #0
 800b4dc:	e7ee      	b.n	800b4bc <quorem+0xf4>
	...

0800b4e0 <_dtoa_r>:
 800b4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4e4:	ed2d 8b04 	vpush	{d8-d9}
 800b4e8:	ec57 6b10 	vmov	r6, r7, d0
 800b4ec:	b093      	sub	sp, #76	; 0x4c
 800b4ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b4f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b4f4:	9106      	str	r1, [sp, #24]
 800b4f6:	ee10 aa10 	vmov	sl, s0
 800b4fa:	4604      	mov	r4, r0
 800b4fc:	9209      	str	r2, [sp, #36]	; 0x24
 800b4fe:	930c      	str	r3, [sp, #48]	; 0x30
 800b500:	46bb      	mov	fp, r7
 800b502:	b975      	cbnz	r5, 800b522 <_dtoa_r+0x42>
 800b504:	2010      	movs	r0, #16
 800b506:	f000 fddd 	bl	800c0c4 <malloc>
 800b50a:	4602      	mov	r2, r0
 800b50c:	6260      	str	r0, [r4, #36]	; 0x24
 800b50e:	b920      	cbnz	r0, 800b51a <_dtoa_r+0x3a>
 800b510:	4ba7      	ldr	r3, [pc, #668]	; (800b7b0 <_dtoa_r+0x2d0>)
 800b512:	21ea      	movs	r1, #234	; 0xea
 800b514:	48a7      	ldr	r0, [pc, #668]	; (800b7b4 <_dtoa_r+0x2d4>)
 800b516:	f001 fbc3 	bl	800cca0 <__assert_func>
 800b51a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b51e:	6005      	str	r5, [r0, #0]
 800b520:	60c5      	str	r5, [r0, #12]
 800b522:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b524:	6819      	ldr	r1, [r3, #0]
 800b526:	b151      	cbz	r1, 800b53e <_dtoa_r+0x5e>
 800b528:	685a      	ldr	r2, [r3, #4]
 800b52a:	604a      	str	r2, [r1, #4]
 800b52c:	2301      	movs	r3, #1
 800b52e:	4093      	lsls	r3, r2
 800b530:	608b      	str	r3, [r1, #8]
 800b532:	4620      	mov	r0, r4
 800b534:	f000 fe0e 	bl	800c154 <_Bfree>
 800b538:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b53a:	2200      	movs	r2, #0
 800b53c:	601a      	str	r2, [r3, #0]
 800b53e:	1e3b      	subs	r3, r7, #0
 800b540:	bfaa      	itet	ge
 800b542:	2300      	movge	r3, #0
 800b544:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b548:	f8c8 3000 	strge.w	r3, [r8]
 800b54c:	4b9a      	ldr	r3, [pc, #616]	; (800b7b8 <_dtoa_r+0x2d8>)
 800b54e:	bfbc      	itt	lt
 800b550:	2201      	movlt	r2, #1
 800b552:	f8c8 2000 	strlt.w	r2, [r8]
 800b556:	ea33 030b 	bics.w	r3, r3, fp
 800b55a:	d11b      	bne.n	800b594 <_dtoa_r+0xb4>
 800b55c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b55e:	f242 730f 	movw	r3, #9999	; 0x270f
 800b562:	6013      	str	r3, [r2, #0]
 800b564:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b568:	4333      	orrs	r3, r6
 800b56a:	f000 8592 	beq.w	800c092 <_dtoa_r+0xbb2>
 800b56e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b570:	b963      	cbnz	r3, 800b58c <_dtoa_r+0xac>
 800b572:	4b92      	ldr	r3, [pc, #584]	; (800b7bc <_dtoa_r+0x2dc>)
 800b574:	e022      	b.n	800b5bc <_dtoa_r+0xdc>
 800b576:	4b92      	ldr	r3, [pc, #584]	; (800b7c0 <_dtoa_r+0x2e0>)
 800b578:	9301      	str	r3, [sp, #4]
 800b57a:	3308      	adds	r3, #8
 800b57c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b57e:	6013      	str	r3, [r2, #0]
 800b580:	9801      	ldr	r0, [sp, #4]
 800b582:	b013      	add	sp, #76	; 0x4c
 800b584:	ecbd 8b04 	vpop	{d8-d9}
 800b588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b58c:	4b8b      	ldr	r3, [pc, #556]	; (800b7bc <_dtoa_r+0x2dc>)
 800b58e:	9301      	str	r3, [sp, #4]
 800b590:	3303      	adds	r3, #3
 800b592:	e7f3      	b.n	800b57c <_dtoa_r+0x9c>
 800b594:	2200      	movs	r2, #0
 800b596:	2300      	movs	r3, #0
 800b598:	4650      	mov	r0, sl
 800b59a:	4659      	mov	r1, fp
 800b59c:	f7f5 fab4 	bl	8000b08 <__aeabi_dcmpeq>
 800b5a0:	ec4b ab19 	vmov	d9, sl, fp
 800b5a4:	4680      	mov	r8, r0
 800b5a6:	b158      	cbz	r0, 800b5c0 <_dtoa_r+0xe0>
 800b5a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	6013      	str	r3, [r2, #0]
 800b5ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	f000 856b 	beq.w	800c08c <_dtoa_r+0xbac>
 800b5b6:	4883      	ldr	r0, [pc, #524]	; (800b7c4 <_dtoa_r+0x2e4>)
 800b5b8:	6018      	str	r0, [r3, #0]
 800b5ba:	1e43      	subs	r3, r0, #1
 800b5bc:	9301      	str	r3, [sp, #4]
 800b5be:	e7df      	b.n	800b580 <_dtoa_r+0xa0>
 800b5c0:	ec4b ab10 	vmov	d0, sl, fp
 800b5c4:	aa10      	add	r2, sp, #64	; 0x40
 800b5c6:	a911      	add	r1, sp, #68	; 0x44
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	f001 f8ab 	bl	800c724 <__d2b>
 800b5ce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b5d2:	ee08 0a10 	vmov	s16, r0
 800b5d6:	2d00      	cmp	r5, #0
 800b5d8:	f000 8084 	beq.w	800b6e4 <_dtoa_r+0x204>
 800b5dc:	ee19 3a90 	vmov	r3, s19
 800b5e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b5e4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b5e8:	4656      	mov	r6, sl
 800b5ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b5ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b5f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b5f6:	4b74      	ldr	r3, [pc, #464]	; (800b7c8 <_dtoa_r+0x2e8>)
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	4630      	mov	r0, r6
 800b5fc:	4639      	mov	r1, r7
 800b5fe:	f7f4 fe63 	bl	80002c8 <__aeabi_dsub>
 800b602:	a365      	add	r3, pc, #404	; (adr r3, 800b798 <_dtoa_r+0x2b8>)
 800b604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b608:	f7f5 f816 	bl	8000638 <__aeabi_dmul>
 800b60c:	a364      	add	r3, pc, #400	; (adr r3, 800b7a0 <_dtoa_r+0x2c0>)
 800b60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b612:	f7f4 fe5b 	bl	80002cc <__adddf3>
 800b616:	4606      	mov	r6, r0
 800b618:	4628      	mov	r0, r5
 800b61a:	460f      	mov	r7, r1
 800b61c:	f7f4 ffa2 	bl	8000564 <__aeabi_i2d>
 800b620:	a361      	add	r3, pc, #388	; (adr r3, 800b7a8 <_dtoa_r+0x2c8>)
 800b622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b626:	f7f5 f807 	bl	8000638 <__aeabi_dmul>
 800b62a:	4602      	mov	r2, r0
 800b62c:	460b      	mov	r3, r1
 800b62e:	4630      	mov	r0, r6
 800b630:	4639      	mov	r1, r7
 800b632:	f7f4 fe4b 	bl	80002cc <__adddf3>
 800b636:	4606      	mov	r6, r0
 800b638:	460f      	mov	r7, r1
 800b63a:	f7f5 faad 	bl	8000b98 <__aeabi_d2iz>
 800b63e:	2200      	movs	r2, #0
 800b640:	9000      	str	r0, [sp, #0]
 800b642:	2300      	movs	r3, #0
 800b644:	4630      	mov	r0, r6
 800b646:	4639      	mov	r1, r7
 800b648:	f7f5 fa68 	bl	8000b1c <__aeabi_dcmplt>
 800b64c:	b150      	cbz	r0, 800b664 <_dtoa_r+0x184>
 800b64e:	9800      	ldr	r0, [sp, #0]
 800b650:	f7f4 ff88 	bl	8000564 <__aeabi_i2d>
 800b654:	4632      	mov	r2, r6
 800b656:	463b      	mov	r3, r7
 800b658:	f7f5 fa56 	bl	8000b08 <__aeabi_dcmpeq>
 800b65c:	b910      	cbnz	r0, 800b664 <_dtoa_r+0x184>
 800b65e:	9b00      	ldr	r3, [sp, #0]
 800b660:	3b01      	subs	r3, #1
 800b662:	9300      	str	r3, [sp, #0]
 800b664:	9b00      	ldr	r3, [sp, #0]
 800b666:	2b16      	cmp	r3, #22
 800b668:	d85a      	bhi.n	800b720 <_dtoa_r+0x240>
 800b66a:	9a00      	ldr	r2, [sp, #0]
 800b66c:	4b57      	ldr	r3, [pc, #348]	; (800b7cc <_dtoa_r+0x2ec>)
 800b66e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b676:	ec51 0b19 	vmov	r0, r1, d9
 800b67a:	f7f5 fa4f 	bl	8000b1c <__aeabi_dcmplt>
 800b67e:	2800      	cmp	r0, #0
 800b680:	d050      	beq.n	800b724 <_dtoa_r+0x244>
 800b682:	9b00      	ldr	r3, [sp, #0]
 800b684:	3b01      	subs	r3, #1
 800b686:	9300      	str	r3, [sp, #0]
 800b688:	2300      	movs	r3, #0
 800b68a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b68c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b68e:	1b5d      	subs	r5, r3, r5
 800b690:	1e6b      	subs	r3, r5, #1
 800b692:	9305      	str	r3, [sp, #20]
 800b694:	bf45      	ittet	mi
 800b696:	f1c5 0301 	rsbmi	r3, r5, #1
 800b69a:	9304      	strmi	r3, [sp, #16]
 800b69c:	2300      	movpl	r3, #0
 800b69e:	2300      	movmi	r3, #0
 800b6a0:	bf4c      	ite	mi
 800b6a2:	9305      	strmi	r3, [sp, #20]
 800b6a4:	9304      	strpl	r3, [sp, #16]
 800b6a6:	9b00      	ldr	r3, [sp, #0]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	db3d      	blt.n	800b728 <_dtoa_r+0x248>
 800b6ac:	9b05      	ldr	r3, [sp, #20]
 800b6ae:	9a00      	ldr	r2, [sp, #0]
 800b6b0:	920a      	str	r2, [sp, #40]	; 0x28
 800b6b2:	4413      	add	r3, r2
 800b6b4:	9305      	str	r3, [sp, #20]
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	9307      	str	r3, [sp, #28]
 800b6ba:	9b06      	ldr	r3, [sp, #24]
 800b6bc:	2b09      	cmp	r3, #9
 800b6be:	f200 8089 	bhi.w	800b7d4 <_dtoa_r+0x2f4>
 800b6c2:	2b05      	cmp	r3, #5
 800b6c4:	bfc4      	itt	gt
 800b6c6:	3b04      	subgt	r3, #4
 800b6c8:	9306      	strgt	r3, [sp, #24]
 800b6ca:	9b06      	ldr	r3, [sp, #24]
 800b6cc:	f1a3 0302 	sub.w	r3, r3, #2
 800b6d0:	bfcc      	ite	gt
 800b6d2:	2500      	movgt	r5, #0
 800b6d4:	2501      	movle	r5, #1
 800b6d6:	2b03      	cmp	r3, #3
 800b6d8:	f200 8087 	bhi.w	800b7ea <_dtoa_r+0x30a>
 800b6dc:	e8df f003 	tbb	[pc, r3]
 800b6e0:	59383a2d 	.word	0x59383a2d
 800b6e4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b6e8:	441d      	add	r5, r3
 800b6ea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b6ee:	2b20      	cmp	r3, #32
 800b6f0:	bfc1      	itttt	gt
 800b6f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b6f6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b6fa:	fa0b f303 	lslgt.w	r3, fp, r3
 800b6fe:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b702:	bfda      	itte	le
 800b704:	f1c3 0320 	rsble	r3, r3, #32
 800b708:	fa06 f003 	lslle.w	r0, r6, r3
 800b70c:	4318      	orrgt	r0, r3
 800b70e:	f7f4 ff19 	bl	8000544 <__aeabi_ui2d>
 800b712:	2301      	movs	r3, #1
 800b714:	4606      	mov	r6, r0
 800b716:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b71a:	3d01      	subs	r5, #1
 800b71c:	930e      	str	r3, [sp, #56]	; 0x38
 800b71e:	e76a      	b.n	800b5f6 <_dtoa_r+0x116>
 800b720:	2301      	movs	r3, #1
 800b722:	e7b2      	b.n	800b68a <_dtoa_r+0x1aa>
 800b724:	900b      	str	r0, [sp, #44]	; 0x2c
 800b726:	e7b1      	b.n	800b68c <_dtoa_r+0x1ac>
 800b728:	9b04      	ldr	r3, [sp, #16]
 800b72a:	9a00      	ldr	r2, [sp, #0]
 800b72c:	1a9b      	subs	r3, r3, r2
 800b72e:	9304      	str	r3, [sp, #16]
 800b730:	4253      	negs	r3, r2
 800b732:	9307      	str	r3, [sp, #28]
 800b734:	2300      	movs	r3, #0
 800b736:	930a      	str	r3, [sp, #40]	; 0x28
 800b738:	e7bf      	b.n	800b6ba <_dtoa_r+0x1da>
 800b73a:	2300      	movs	r3, #0
 800b73c:	9308      	str	r3, [sp, #32]
 800b73e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b740:	2b00      	cmp	r3, #0
 800b742:	dc55      	bgt.n	800b7f0 <_dtoa_r+0x310>
 800b744:	2301      	movs	r3, #1
 800b746:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b74a:	461a      	mov	r2, r3
 800b74c:	9209      	str	r2, [sp, #36]	; 0x24
 800b74e:	e00c      	b.n	800b76a <_dtoa_r+0x28a>
 800b750:	2301      	movs	r3, #1
 800b752:	e7f3      	b.n	800b73c <_dtoa_r+0x25c>
 800b754:	2300      	movs	r3, #0
 800b756:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b758:	9308      	str	r3, [sp, #32]
 800b75a:	9b00      	ldr	r3, [sp, #0]
 800b75c:	4413      	add	r3, r2
 800b75e:	9302      	str	r3, [sp, #8]
 800b760:	3301      	adds	r3, #1
 800b762:	2b01      	cmp	r3, #1
 800b764:	9303      	str	r3, [sp, #12]
 800b766:	bfb8      	it	lt
 800b768:	2301      	movlt	r3, #1
 800b76a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b76c:	2200      	movs	r2, #0
 800b76e:	6042      	str	r2, [r0, #4]
 800b770:	2204      	movs	r2, #4
 800b772:	f102 0614 	add.w	r6, r2, #20
 800b776:	429e      	cmp	r6, r3
 800b778:	6841      	ldr	r1, [r0, #4]
 800b77a:	d93d      	bls.n	800b7f8 <_dtoa_r+0x318>
 800b77c:	4620      	mov	r0, r4
 800b77e:	f000 fca9 	bl	800c0d4 <_Balloc>
 800b782:	9001      	str	r0, [sp, #4]
 800b784:	2800      	cmp	r0, #0
 800b786:	d13b      	bne.n	800b800 <_dtoa_r+0x320>
 800b788:	4b11      	ldr	r3, [pc, #68]	; (800b7d0 <_dtoa_r+0x2f0>)
 800b78a:	4602      	mov	r2, r0
 800b78c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b790:	e6c0      	b.n	800b514 <_dtoa_r+0x34>
 800b792:	2301      	movs	r3, #1
 800b794:	e7df      	b.n	800b756 <_dtoa_r+0x276>
 800b796:	bf00      	nop
 800b798:	636f4361 	.word	0x636f4361
 800b79c:	3fd287a7 	.word	0x3fd287a7
 800b7a0:	8b60c8b3 	.word	0x8b60c8b3
 800b7a4:	3fc68a28 	.word	0x3fc68a28
 800b7a8:	509f79fb 	.word	0x509f79fb
 800b7ac:	3fd34413 	.word	0x3fd34413
 800b7b0:	0800e411 	.word	0x0800e411
 800b7b4:	0800e428 	.word	0x0800e428
 800b7b8:	7ff00000 	.word	0x7ff00000
 800b7bc:	0800e40d 	.word	0x0800e40d
 800b7c0:	0800e404 	.word	0x0800e404
 800b7c4:	0800e3e1 	.word	0x0800e3e1
 800b7c8:	3ff80000 	.word	0x3ff80000
 800b7cc:	0800e518 	.word	0x0800e518
 800b7d0:	0800e483 	.word	0x0800e483
 800b7d4:	2501      	movs	r5, #1
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	9306      	str	r3, [sp, #24]
 800b7da:	9508      	str	r5, [sp, #32]
 800b7dc:	f04f 33ff 	mov.w	r3, #4294967295
 800b7e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	2312      	movs	r3, #18
 800b7e8:	e7b0      	b.n	800b74c <_dtoa_r+0x26c>
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	9308      	str	r3, [sp, #32]
 800b7ee:	e7f5      	b.n	800b7dc <_dtoa_r+0x2fc>
 800b7f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b7f6:	e7b8      	b.n	800b76a <_dtoa_r+0x28a>
 800b7f8:	3101      	adds	r1, #1
 800b7fa:	6041      	str	r1, [r0, #4]
 800b7fc:	0052      	lsls	r2, r2, #1
 800b7fe:	e7b8      	b.n	800b772 <_dtoa_r+0x292>
 800b800:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b802:	9a01      	ldr	r2, [sp, #4]
 800b804:	601a      	str	r2, [r3, #0]
 800b806:	9b03      	ldr	r3, [sp, #12]
 800b808:	2b0e      	cmp	r3, #14
 800b80a:	f200 809d 	bhi.w	800b948 <_dtoa_r+0x468>
 800b80e:	2d00      	cmp	r5, #0
 800b810:	f000 809a 	beq.w	800b948 <_dtoa_r+0x468>
 800b814:	9b00      	ldr	r3, [sp, #0]
 800b816:	2b00      	cmp	r3, #0
 800b818:	dd32      	ble.n	800b880 <_dtoa_r+0x3a0>
 800b81a:	4ab7      	ldr	r2, [pc, #732]	; (800baf8 <_dtoa_r+0x618>)
 800b81c:	f003 030f 	and.w	r3, r3, #15
 800b820:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b824:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b828:	9b00      	ldr	r3, [sp, #0]
 800b82a:	05d8      	lsls	r0, r3, #23
 800b82c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b830:	d516      	bpl.n	800b860 <_dtoa_r+0x380>
 800b832:	4bb2      	ldr	r3, [pc, #712]	; (800bafc <_dtoa_r+0x61c>)
 800b834:	ec51 0b19 	vmov	r0, r1, d9
 800b838:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b83c:	f7f5 f826 	bl	800088c <__aeabi_ddiv>
 800b840:	f007 070f 	and.w	r7, r7, #15
 800b844:	4682      	mov	sl, r0
 800b846:	468b      	mov	fp, r1
 800b848:	2503      	movs	r5, #3
 800b84a:	4eac      	ldr	r6, [pc, #688]	; (800bafc <_dtoa_r+0x61c>)
 800b84c:	b957      	cbnz	r7, 800b864 <_dtoa_r+0x384>
 800b84e:	4642      	mov	r2, r8
 800b850:	464b      	mov	r3, r9
 800b852:	4650      	mov	r0, sl
 800b854:	4659      	mov	r1, fp
 800b856:	f7f5 f819 	bl	800088c <__aeabi_ddiv>
 800b85a:	4682      	mov	sl, r0
 800b85c:	468b      	mov	fp, r1
 800b85e:	e028      	b.n	800b8b2 <_dtoa_r+0x3d2>
 800b860:	2502      	movs	r5, #2
 800b862:	e7f2      	b.n	800b84a <_dtoa_r+0x36a>
 800b864:	07f9      	lsls	r1, r7, #31
 800b866:	d508      	bpl.n	800b87a <_dtoa_r+0x39a>
 800b868:	4640      	mov	r0, r8
 800b86a:	4649      	mov	r1, r9
 800b86c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b870:	f7f4 fee2 	bl	8000638 <__aeabi_dmul>
 800b874:	3501      	adds	r5, #1
 800b876:	4680      	mov	r8, r0
 800b878:	4689      	mov	r9, r1
 800b87a:	107f      	asrs	r7, r7, #1
 800b87c:	3608      	adds	r6, #8
 800b87e:	e7e5      	b.n	800b84c <_dtoa_r+0x36c>
 800b880:	f000 809b 	beq.w	800b9ba <_dtoa_r+0x4da>
 800b884:	9b00      	ldr	r3, [sp, #0]
 800b886:	4f9d      	ldr	r7, [pc, #628]	; (800bafc <_dtoa_r+0x61c>)
 800b888:	425e      	negs	r6, r3
 800b88a:	4b9b      	ldr	r3, [pc, #620]	; (800baf8 <_dtoa_r+0x618>)
 800b88c:	f006 020f 	and.w	r2, r6, #15
 800b890:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b898:	ec51 0b19 	vmov	r0, r1, d9
 800b89c:	f7f4 fecc 	bl	8000638 <__aeabi_dmul>
 800b8a0:	1136      	asrs	r6, r6, #4
 800b8a2:	4682      	mov	sl, r0
 800b8a4:	468b      	mov	fp, r1
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	2502      	movs	r5, #2
 800b8aa:	2e00      	cmp	r6, #0
 800b8ac:	d17a      	bne.n	800b9a4 <_dtoa_r+0x4c4>
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d1d3      	bne.n	800b85a <_dtoa_r+0x37a>
 800b8b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	f000 8082 	beq.w	800b9be <_dtoa_r+0x4de>
 800b8ba:	4b91      	ldr	r3, [pc, #580]	; (800bb00 <_dtoa_r+0x620>)
 800b8bc:	2200      	movs	r2, #0
 800b8be:	4650      	mov	r0, sl
 800b8c0:	4659      	mov	r1, fp
 800b8c2:	f7f5 f92b 	bl	8000b1c <__aeabi_dcmplt>
 800b8c6:	2800      	cmp	r0, #0
 800b8c8:	d079      	beq.n	800b9be <_dtoa_r+0x4de>
 800b8ca:	9b03      	ldr	r3, [sp, #12]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d076      	beq.n	800b9be <_dtoa_r+0x4de>
 800b8d0:	9b02      	ldr	r3, [sp, #8]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	dd36      	ble.n	800b944 <_dtoa_r+0x464>
 800b8d6:	9b00      	ldr	r3, [sp, #0]
 800b8d8:	4650      	mov	r0, sl
 800b8da:	4659      	mov	r1, fp
 800b8dc:	1e5f      	subs	r7, r3, #1
 800b8de:	2200      	movs	r2, #0
 800b8e0:	4b88      	ldr	r3, [pc, #544]	; (800bb04 <_dtoa_r+0x624>)
 800b8e2:	f7f4 fea9 	bl	8000638 <__aeabi_dmul>
 800b8e6:	9e02      	ldr	r6, [sp, #8]
 800b8e8:	4682      	mov	sl, r0
 800b8ea:	468b      	mov	fp, r1
 800b8ec:	3501      	adds	r5, #1
 800b8ee:	4628      	mov	r0, r5
 800b8f0:	f7f4 fe38 	bl	8000564 <__aeabi_i2d>
 800b8f4:	4652      	mov	r2, sl
 800b8f6:	465b      	mov	r3, fp
 800b8f8:	f7f4 fe9e 	bl	8000638 <__aeabi_dmul>
 800b8fc:	4b82      	ldr	r3, [pc, #520]	; (800bb08 <_dtoa_r+0x628>)
 800b8fe:	2200      	movs	r2, #0
 800b900:	f7f4 fce4 	bl	80002cc <__adddf3>
 800b904:	46d0      	mov	r8, sl
 800b906:	46d9      	mov	r9, fp
 800b908:	4682      	mov	sl, r0
 800b90a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b90e:	2e00      	cmp	r6, #0
 800b910:	d158      	bne.n	800b9c4 <_dtoa_r+0x4e4>
 800b912:	4b7e      	ldr	r3, [pc, #504]	; (800bb0c <_dtoa_r+0x62c>)
 800b914:	2200      	movs	r2, #0
 800b916:	4640      	mov	r0, r8
 800b918:	4649      	mov	r1, r9
 800b91a:	f7f4 fcd5 	bl	80002c8 <__aeabi_dsub>
 800b91e:	4652      	mov	r2, sl
 800b920:	465b      	mov	r3, fp
 800b922:	4680      	mov	r8, r0
 800b924:	4689      	mov	r9, r1
 800b926:	f7f5 f917 	bl	8000b58 <__aeabi_dcmpgt>
 800b92a:	2800      	cmp	r0, #0
 800b92c:	f040 8295 	bne.w	800be5a <_dtoa_r+0x97a>
 800b930:	4652      	mov	r2, sl
 800b932:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b936:	4640      	mov	r0, r8
 800b938:	4649      	mov	r1, r9
 800b93a:	f7f5 f8ef 	bl	8000b1c <__aeabi_dcmplt>
 800b93e:	2800      	cmp	r0, #0
 800b940:	f040 8289 	bne.w	800be56 <_dtoa_r+0x976>
 800b944:	ec5b ab19 	vmov	sl, fp, d9
 800b948:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	f2c0 8148 	blt.w	800bbe0 <_dtoa_r+0x700>
 800b950:	9a00      	ldr	r2, [sp, #0]
 800b952:	2a0e      	cmp	r2, #14
 800b954:	f300 8144 	bgt.w	800bbe0 <_dtoa_r+0x700>
 800b958:	4b67      	ldr	r3, [pc, #412]	; (800baf8 <_dtoa_r+0x618>)
 800b95a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b95e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b964:	2b00      	cmp	r3, #0
 800b966:	f280 80d5 	bge.w	800bb14 <_dtoa_r+0x634>
 800b96a:	9b03      	ldr	r3, [sp, #12]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	f300 80d1 	bgt.w	800bb14 <_dtoa_r+0x634>
 800b972:	f040 826f 	bne.w	800be54 <_dtoa_r+0x974>
 800b976:	4b65      	ldr	r3, [pc, #404]	; (800bb0c <_dtoa_r+0x62c>)
 800b978:	2200      	movs	r2, #0
 800b97a:	4640      	mov	r0, r8
 800b97c:	4649      	mov	r1, r9
 800b97e:	f7f4 fe5b 	bl	8000638 <__aeabi_dmul>
 800b982:	4652      	mov	r2, sl
 800b984:	465b      	mov	r3, fp
 800b986:	f7f5 f8dd 	bl	8000b44 <__aeabi_dcmpge>
 800b98a:	9e03      	ldr	r6, [sp, #12]
 800b98c:	4637      	mov	r7, r6
 800b98e:	2800      	cmp	r0, #0
 800b990:	f040 8245 	bne.w	800be1e <_dtoa_r+0x93e>
 800b994:	9d01      	ldr	r5, [sp, #4]
 800b996:	2331      	movs	r3, #49	; 0x31
 800b998:	f805 3b01 	strb.w	r3, [r5], #1
 800b99c:	9b00      	ldr	r3, [sp, #0]
 800b99e:	3301      	adds	r3, #1
 800b9a0:	9300      	str	r3, [sp, #0]
 800b9a2:	e240      	b.n	800be26 <_dtoa_r+0x946>
 800b9a4:	07f2      	lsls	r2, r6, #31
 800b9a6:	d505      	bpl.n	800b9b4 <_dtoa_r+0x4d4>
 800b9a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9ac:	f7f4 fe44 	bl	8000638 <__aeabi_dmul>
 800b9b0:	3501      	adds	r5, #1
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	1076      	asrs	r6, r6, #1
 800b9b6:	3708      	adds	r7, #8
 800b9b8:	e777      	b.n	800b8aa <_dtoa_r+0x3ca>
 800b9ba:	2502      	movs	r5, #2
 800b9bc:	e779      	b.n	800b8b2 <_dtoa_r+0x3d2>
 800b9be:	9f00      	ldr	r7, [sp, #0]
 800b9c0:	9e03      	ldr	r6, [sp, #12]
 800b9c2:	e794      	b.n	800b8ee <_dtoa_r+0x40e>
 800b9c4:	9901      	ldr	r1, [sp, #4]
 800b9c6:	4b4c      	ldr	r3, [pc, #304]	; (800baf8 <_dtoa_r+0x618>)
 800b9c8:	4431      	add	r1, r6
 800b9ca:	910d      	str	r1, [sp, #52]	; 0x34
 800b9cc:	9908      	ldr	r1, [sp, #32]
 800b9ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b9d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b9d6:	2900      	cmp	r1, #0
 800b9d8:	d043      	beq.n	800ba62 <_dtoa_r+0x582>
 800b9da:	494d      	ldr	r1, [pc, #308]	; (800bb10 <_dtoa_r+0x630>)
 800b9dc:	2000      	movs	r0, #0
 800b9de:	f7f4 ff55 	bl	800088c <__aeabi_ddiv>
 800b9e2:	4652      	mov	r2, sl
 800b9e4:	465b      	mov	r3, fp
 800b9e6:	f7f4 fc6f 	bl	80002c8 <__aeabi_dsub>
 800b9ea:	9d01      	ldr	r5, [sp, #4]
 800b9ec:	4682      	mov	sl, r0
 800b9ee:	468b      	mov	fp, r1
 800b9f0:	4649      	mov	r1, r9
 800b9f2:	4640      	mov	r0, r8
 800b9f4:	f7f5 f8d0 	bl	8000b98 <__aeabi_d2iz>
 800b9f8:	4606      	mov	r6, r0
 800b9fa:	f7f4 fdb3 	bl	8000564 <__aeabi_i2d>
 800b9fe:	4602      	mov	r2, r0
 800ba00:	460b      	mov	r3, r1
 800ba02:	4640      	mov	r0, r8
 800ba04:	4649      	mov	r1, r9
 800ba06:	f7f4 fc5f 	bl	80002c8 <__aeabi_dsub>
 800ba0a:	3630      	adds	r6, #48	; 0x30
 800ba0c:	f805 6b01 	strb.w	r6, [r5], #1
 800ba10:	4652      	mov	r2, sl
 800ba12:	465b      	mov	r3, fp
 800ba14:	4680      	mov	r8, r0
 800ba16:	4689      	mov	r9, r1
 800ba18:	f7f5 f880 	bl	8000b1c <__aeabi_dcmplt>
 800ba1c:	2800      	cmp	r0, #0
 800ba1e:	d163      	bne.n	800bae8 <_dtoa_r+0x608>
 800ba20:	4642      	mov	r2, r8
 800ba22:	464b      	mov	r3, r9
 800ba24:	4936      	ldr	r1, [pc, #216]	; (800bb00 <_dtoa_r+0x620>)
 800ba26:	2000      	movs	r0, #0
 800ba28:	f7f4 fc4e 	bl	80002c8 <__aeabi_dsub>
 800ba2c:	4652      	mov	r2, sl
 800ba2e:	465b      	mov	r3, fp
 800ba30:	f7f5 f874 	bl	8000b1c <__aeabi_dcmplt>
 800ba34:	2800      	cmp	r0, #0
 800ba36:	f040 80b5 	bne.w	800bba4 <_dtoa_r+0x6c4>
 800ba3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba3c:	429d      	cmp	r5, r3
 800ba3e:	d081      	beq.n	800b944 <_dtoa_r+0x464>
 800ba40:	4b30      	ldr	r3, [pc, #192]	; (800bb04 <_dtoa_r+0x624>)
 800ba42:	2200      	movs	r2, #0
 800ba44:	4650      	mov	r0, sl
 800ba46:	4659      	mov	r1, fp
 800ba48:	f7f4 fdf6 	bl	8000638 <__aeabi_dmul>
 800ba4c:	4b2d      	ldr	r3, [pc, #180]	; (800bb04 <_dtoa_r+0x624>)
 800ba4e:	4682      	mov	sl, r0
 800ba50:	468b      	mov	fp, r1
 800ba52:	4640      	mov	r0, r8
 800ba54:	4649      	mov	r1, r9
 800ba56:	2200      	movs	r2, #0
 800ba58:	f7f4 fdee 	bl	8000638 <__aeabi_dmul>
 800ba5c:	4680      	mov	r8, r0
 800ba5e:	4689      	mov	r9, r1
 800ba60:	e7c6      	b.n	800b9f0 <_dtoa_r+0x510>
 800ba62:	4650      	mov	r0, sl
 800ba64:	4659      	mov	r1, fp
 800ba66:	f7f4 fde7 	bl	8000638 <__aeabi_dmul>
 800ba6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba6c:	9d01      	ldr	r5, [sp, #4]
 800ba6e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba70:	4682      	mov	sl, r0
 800ba72:	468b      	mov	fp, r1
 800ba74:	4649      	mov	r1, r9
 800ba76:	4640      	mov	r0, r8
 800ba78:	f7f5 f88e 	bl	8000b98 <__aeabi_d2iz>
 800ba7c:	4606      	mov	r6, r0
 800ba7e:	f7f4 fd71 	bl	8000564 <__aeabi_i2d>
 800ba82:	3630      	adds	r6, #48	; 0x30
 800ba84:	4602      	mov	r2, r0
 800ba86:	460b      	mov	r3, r1
 800ba88:	4640      	mov	r0, r8
 800ba8a:	4649      	mov	r1, r9
 800ba8c:	f7f4 fc1c 	bl	80002c8 <__aeabi_dsub>
 800ba90:	f805 6b01 	strb.w	r6, [r5], #1
 800ba94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba96:	429d      	cmp	r5, r3
 800ba98:	4680      	mov	r8, r0
 800ba9a:	4689      	mov	r9, r1
 800ba9c:	f04f 0200 	mov.w	r2, #0
 800baa0:	d124      	bne.n	800baec <_dtoa_r+0x60c>
 800baa2:	4b1b      	ldr	r3, [pc, #108]	; (800bb10 <_dtoa_r+0x630>)
 800baa4:	4650      	mov	r0, sl
 800baa6:	4659      	mov	r1, fp
 800baa8:	f7f4 fc10 	bl	80002cc <__adddf3>
 800baac:	4602      	mov	r2, r0
 800baae:	460b      	mov	r3, r1
 800bab0:	4640      	mov	r0, r8
 800bab2:	4649      	mov	r1, r9
 800bab4:	f7f5 f850 	bl	8000b58 <__aeabi_dcmpgt>
 800bab8:	2800      	cmp	r0, #0
 800baba:	d173      	bne.n	800bba4 <_dtoa_r+0x6c4>
 800babc:	4652      	mov	r2, sl
 800babe:	465b      	mov	r3, fp
 800bac0:	4913      	ldr	r1, [pc, #76]	; (800bb10 <_dtoa_r+0x630>)
 800bac2:	2000      	movs	r0, #0
 800bac4:	f7f4 fc00 	bl	80002c8 <__aeabi_dsub>
 800bac8:	4602      	mov	r2, r0
 800baca:	460b      	mov	r3, r1
 800bacc:	4640      	mov	r0, r8
 800bace:	4649      	mov	r1, r9
 800bad0:	f7f5 f824 	bl	8000b1c <__aeabi_dcmplt>
 800bad4:	2800      	cmp	r0, #0
 800bad6:	f43f af35 	beq.w	800b944 <_dtoa_r+0x464>
 800bada:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800badc:	1e6b      	subs	r3, r5, #1
 800bade:	930f      	str	r3, [sp, #60]	; 0x3c
 800bae0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bae4:	2b30      	cmp	r3, #48	; 0x30
 800bae6:	d0f8      	beq.n	800bada <_dtoa_r+0x5fa>
 800bae8:	9700      	str	r7, [sp, #0]
 800baea:	e049      	b.n	800bb80 <_dtoa_r+0x6a0>
 800baec:	4b05      	ldr	r3, [pc, #20]	; (800bb04 <_dtoa_r+0x624>)
 800baee:	f7f4 fda3 	bl	8000638 <__aeabi_dmul>
 800baf2:	4680      	mov	r8, r0
 800baf4:	4689      	mov	r9, r1
 800baf6:	e7bd      	b.n	800ba74 <_dtoa_r+0x594>
 800baf8:	0800e518 	.word	0x0800e518
 800bafc:	0800e4f0 	.word	0x0800e4f0
 800bb00:	3ff00000 	.word	0x3ff00000
 800bb04:	40240000 	.word	0x40240000
 800bb08:	401c0000 	.word	0x401c0000
 800bb0c:	40140000 	.word	0x40140000
 800bb10:	3fe00000 	.word	0x3fe00000
 800bb14:	9d01      	ldr	r5, [sp, #4]
 800bb16:	4656      	mov	r6, sl
 800bb18:	465f      	mov	r7, fp
 800bb1a:	4642      	mov	r2, r8
 800bb1c:	464b      	mov	r3, r9
 800bb1e:	4630      	mov	r0, r6
 800bb20:	4639      	mov	r1, r7
 800bb22:	f7f4 feb3 	bl	800088c <__aeabi_ddiv>
 800bb26:	f7f5 f837 	bl	8000b98 <__aeabi_d2iz>
 800bb2a:	4682      	mov	sl, r0
 800bb2c:	f7f4 fd1a 	bl	8000564 <__aeabi_i2d>
 800bb30:	4642      	mov	r2, r8
 800bb32:	464b      	mov	r3, r9
 800bb34:	f7f4 fd80 	bl	8000638 <__aeabi_dmul>
 800bb38:	4602      	mov	r2, r0
 800bb3a:	460b      	mov	r3, r1
 800bb3c:	4630      	mov	r0, r6
 800bb3e:	4639      	mov	r1, r7
 800bb40:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bb44:	f7f4 fbc0 	bl	80002c8 <__aeabi_dsub>
 800bb48:	f805 6b01 	strb.w	r6, [r5], #1
 800bb4c:	9e01      	ldr	r6, [sp, #4]
 800bb4e:	9f03      	ldr	r7, [sp, #12]
 800bb50:	1bae      	subs	r6, r5, r6
 800bb52:	42b7      	cmp	r7, r6
 800bb54:	4602      	mov	r2, r0
 800bb56:	460b      	mov	r3, r1
 800bb58:	d135      	bne.n	800bbc6 <_dtoa_r+0x6e6>
 800bb5a:	f7f4 fbb7 	bl	80002cc <__adddf3>
 800bb5e:	4642      	mov	r2, r8
 800bb60:	464b      	mov	r3, r9
 800bb62:	4606      	mov	r6, r0
 800bb64:	460f      	mov	r7, r1
 800bb66:	f7f4 fff7 	bl	8000b58 <__aeabi_dcmpgt>
 800bb6a:	b9d0      	cbnz	r0, 800bba2 <_dtoa_r+0x6c2>
 800bb6c:	4642      	mov	r2, r8
 800bb6e:	464b      	mov	r3, r9
 800bb70:	4630      	mov	r0, r6
 800bb72:	4639      	mov	r1, r7
 800bb74:	f7f4 ffc8 	bl	8000b08 <__aeabi_dcmpeq>
 800bb78:	b110      	cbz	r0, 800bb80 <_dtoa_r+0x6a0>
 800bb7a:	f01a 0f01 	tst.w	sl, #1
 800bb7e:	d110      	bne.n	800bba2 <_dtoa_r+0x6c2>
 800bb80:	4620      	mov	r0, r4
 800bb82:	ee18 1a10 	vmov	r1, s16
 800bb86:	f000 fae5 	bl	800c154 <_Bfree>
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	9800      	ldr	r0, [sp, #0]
 800bb8e:	702b      	strb	r3, [r5, #0]
 800bb90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb92:	3001      	adds	r0, #1
 800bb94:	6018      	str	r0, [r3, #0]
 800bb96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	f43f acf1 	beq.w	800b580 <_dtoa_r+0xa0>
 800bb9e:	601d      	str	r5, [r3, #0]
 800bba0:	e4ee      	b.n	800b580 <_dtoa_r+0xa0>
 800bba2:	9f00      	ldr	r7, [sp, #0]
 800bba4:	462b      	mov	r3, r5
 800bba6:	461d      	mov	r5, r3
 800bba8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bbac:	2a39      	cmp	r2, #57	; 0x39
 800bbae:	d106      	bne.n	800bbbe <_dtoa_r+0x6de>
 800bbb0:	9a01      	ldr	r2, [sp, #4]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d1f7      	bne.n	800bba6 <_dtoa_r+0x6c6>
 800bbb6:	9901      	ldr	r1, [sp, #4]
 800bbb8:	2230      	movs	r2, #48	; 0x30
 800bbba:	3701      	adds	r7, #1
 800bbbc:	700a      	strb	r2, [r1, #0]
 800bbbe:	781a      	ldrb	r2, [r3, #0]
 800bbc0:	3201      	adds	r2, #1
 800bbc2:	701a      	strb	r2, [r3, #0]
 800bbc4:	e790      	b.n	800bae8 <_dtoa_r+0x608>
 800bbc6:	4ba6      	ldr	r3, [pc, #664]	; (800be60 <_dtoa_r+0x980>)
 800bbc8:	2200      	movs	r2, #0
 800bbca:	f7f4 fd35 	bl	8000638 <__aeabi_dmul>
 800bbce:	2200      	movs	r2, #0
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	4606      	mov	r6, r0
 800bbd4:	460f      	mov	r7, r1
 800bbd6:	f7f4 ff97 	bl	8000b08 <__aeabi_dcmpeq>
 800bbda:	2800      	cmp	r0, #0
 800bbdc:	d09d      	beq.n	800bb1a <_dtoa_r+0x63a>
 800bbde:	e7cf      	b.n	800bb80 <_dtoa_r+0x6a0>
 800bbe0:	9a08      	ldr	r2, [sp, #32]
 800bbe2:	2a00      	cmp	r2, #0
 800bbe4:	f000 80d7 	beq.w	800bd96 <_dtoa_r+0x8b6>
 800bbe8:	9a06      	ldr	r2, [sp, #24]
 800bbea:	2a01      	cmp	r2, #1
 800bbec:	f300 80ba 	bgt.w	800bd64 <_dtoa_r+0x884>
 800bbf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bbf2:	2a00      	cmp	r2, #0
 800bbf4:	f000 80b2 	beq.w	800bd5c <_dtoa_r+0x87c>
 800bbf8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bbfc:	9e07      	ldr	r6, [sp, #28]
 800bbfe:	9d04      	ldr	r5, [sp, #16]
 800bc00:	9a04      	ldr	r2, [sp, #16]
 800bc02:	441a      	add	r2, r3
 800bc04:	9204      	str	r2, [sp, #16]
 800bc06:	9a05      	ldr	r2, [sp, #20]
 800bc08:	2101      	movs	r1, #1
 800bc0a:	441a      	add	r2, r3
 800bc0c:	4620      	mov	r0, r4
 800bc0e:	9205      	str	r2, [sp, #20]
 800bc10:	f000 fb58 	bl	800c2c4 <__i2b>
 800bc14:	4607      	mov	r7, r0
 800bc16:	2d00      	cmp	r5, #0
 800bc18:	dd0c      	ble.n	800bc34 <_dtoa_r+0x754>
 800bc1a:	9b05      	ldr	r3, [sp, #20]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	dd09      	ble.n	800bc34 <_dtoa_r+0x754>
 800bc20:	42ab      	cmp	r3, r5
 800bc22:	9a04      	ldr	r2, [sp, #16]
 800bc24:	bfa8      	it	ge
 800bc26:	462b      	movge	r3, r5
 800bc28:	1ad2      	subs	r2, r2, r3
 800bc2a:	9204      	str	r2, [sp, #16]
 800bc2c:	9a05      	ldr	r2, [sp, #20]
 800bc2e:	1aed      	subs	r5, r5, r3
 800bc30:	1ad3      	subs	r3, r2, r3
 800bc32:	9305      	str	r3, [sp, #20]
 800bc34:	9b07      	ldr	r3, [sp, #28]
 800bc36:	b31b      	cbz	r3, 800bc80 <_dtoa_r+0x7a0>
 800bc38:	9b08      	ldr	r3, [sp, #32]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	f000 80af 	beq.w	800bd9e <_dtoa_r+0x8be>
 800bc40:	2e00      	cmp	r6, #0
 800bc42:	dd13      	ble.n	800bc6c <_dtoa_r+0x78c>
 800bc44:	4639      	mov	r1, r7
 800bc46:	4632      	mov	r2, r6
 800bc48:	4620      	mov	r0, r4
 800bc4a:	f000 fbfb 	bl	800c444 <__pow5mult>
 800bc4e:	ee18 2a10 	vmov	r2, s16
 800bc52:	4601      	mov	r1, r0
 800bc54:	4607      	mov	r7, r0
 800bc56:	4620      	mov	r0, r4
 800bc58:	f000 fb4a 	bl	800c2f0 <__multiply>
 800bc5c:	ee18 1a10 	vmov	r1, s16
 800bc60:	4680      	mov	r8, r0
 800bc62:	4620      	mov	r0, r4
 800bc64:	f000 fa76 	bl	800c154 <_Bfree>
 800bc68:	ee08 8a10 	vmov	s16, r8
 800bc6c:	9b07      	ldr	r3, [sp, #28]
 800bc6e:	1b9a      	subs	r2, r3, r6
 800bc70:	d006      	beq.n	800bc80 <_dtoa_r+0x7a0>
 800bc72:	ee18 1a10 	vmov	r1, s16
 800bc76:	4620      	mov	r0, r4
 800bc78:	f000 fbe4 	bl	800c444 <__pow5mult>
 800bc7c:	ee08 0a10 	vmov	s16, r0
 800bc80:	2101      	movs	r1, #1
 800bc82:	4620      	mov	r0, r4
 800bc84:	f000 fb1e 	bl	800c2c4 <__i2b>
 800bc88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	4606      	mov	r6, r0
 800bc8e:	f340 8088 	ble.w	800bda2 <_dtoa_r+0x8c2>
 800bc92:	461a      	mov	r2, r3
 800bc94:	4601      	mov	r1, r0
 800bc96:	4620      	mov	r0, r4
 800bc98:	f000 fbd4 	bl	800c444 <__pow5mult>
 800bc9c:	9b06      	ldr	r3, [sp, #24]
 800bc9e:	2b01      	cmp	r3, #1
 800bca0:	4606      	mov	r6, r0
 800bca2:	f340 8081 	ble.w	800bda8 <_dtoa_r+0x8c8>
 800bca6:	f04f 0800 	mov.w	r8, #0
 800bcaa:	6933      	ldr	r3, [r6, #16]
 800bcac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bcb0:	6918      	ldr	r0, [r3, #16]
 800bcb2:	f000 fab7 	bl	800c224 <__hi0bits>
 800bcb6:	f1c0 0020 	rsb	r0, r0, #32
 800bcba:	9b05      	ldr	r3, [sp, #20]
 800bcbc:	4418      	add	r0, r3
 800bcbe:	f010 001f 	ands.w	r0, r0, #31
 800bcc2:	f000 8092 	beq.w	800bdea <_dtoa_r+0x90a>
 800bcc6:	f1c0 0320 	rsb	r3, r0, #32
 800bcca:	2b04      	cmp	r3, #4
 800bccc:	f340 808a 	ble.w	800bde4 <_dtoa_r+0x904>
 800bcd0:	f1c0 001c 	rsb	r0, r0, #28
 800bcd4:	9b04      	ldr	r3, [sp, #16]
 800bcd6:	4403      	add	r3, r0
 800bcd8:	9304      	str	r3, [sp, #16]
 800bcda:	9b05      	ldr	r3, [sp, #20]
 800bcdc:	4403      	add	r3, r0
 800bcde:	4405      	add	r5, r0
 800bce0:	9305      	str	r3, [sp, #20]
 800bce2:	9b04      	ldr	r3, [sp, #16]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	dd07      	ble.n	800bcf8 <_dtoa_r+0x818>
 800bce8:	ee18 1a10 	vmov	r1, s16
 800bcec:	461a      	mov	r2, r3
 800bcee:	4620      	mov	r0, r4
 800bcf0:	f000 fc02 	bl	800c4f8 <__lshift>
 800bcf4:	ee08 0a10 	vmov	s16, r0
 800bcf8:	9b05      	ldr	r3, [sp, #20]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	dd05      	ble.n	800bd0a <_dtoa_r+0x82a>
 800bcfe:	4631      	mov	r1, r6
 800bd00:	461a      	mov	r2, r3
 800bd02:	4620      	mov	r0, r4
 800bd04:	f000 fbf8 	bl	800c4f8 <__lshift>
 800bd08:	4606      	mov	r6, r0
 800bd0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d06e      	beq.n	800bdee <_dtoa_r+0x90e>
 800bd10:	ee18 0a10 	vmov	r0, s16
 800bd14:	4631      	mov	r1, r6
 800bd16:	f000 fc5f 	bl	800c5d8 <__mcmp>
 800bd1a:	2800      	cmp	r0, #0
 800bd1c:	da67      	bge.n	800bdee <_dtoa_r+0x90e>
 800bd1e:	9b00      	ldr	r3, [sp, #0]
 800bd20:	3b01      	subs	r3, #1
 800bd22:	ee18 1a10 	vmov	r1, s16
 800bd26:	9300      	str	r3, [sp, #0]
 800bd28:	220a      	movs	r2, #10
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	4620      	mov	r0, r4
 800bd2e:	f000 fa33 	bl	800c198 <__multadd>
 800bd32:	9b08      	ldr	r3, [sp, #32]
 800bd34:	ee08 0a10 	vmov	s16, r0
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	f000 81b1 	beq.w	800c0a0 <_dtoa_r+0xbc0>
 800bd3e:	2300      	movs	r3, #0
 800bd40:	4639      	mov	r1, r7
 800bd42:	220a      	movs	r2, #10
 800bd44:	4620      	mov	r0, r4
 800bd46:	f000 fa27 	bl	800c198 <__multadd>
 800bd4a:	9b02      	ldr	r3, [sp, #8]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	4607      	mov	r7, r0
 800bd50:	f300 808e 	bgt.w	800be70 <_dtoa_r+0x990>
 800bd54:	9b06      	ldr	r3, [sp, #24]
 800bd56:	2b02      	cmp	r3, #2
 800bd58:	dc51      	bgt.n	800bdfe <_dtoa_r+0x91e>
 800bd5a:	e089      	b.n	800be70 <_dtoa_r+0x990>
 800bd5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bd5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bd62:	e74b      	b.n	800bbfc <_dtoa_r+0x71c>
 800bd64:	9b03      	ldr	r3, [sp, #12]
 800bd66:	1e5e      	subs	r6, r3, #1
 800bd68:	9b07      	ldr	r3, [sp, #28]
 800bd6a:	42b3      	cmp	r3, r6
 800bd6c:	bfbf      	itttt	lt
 800bd6e:	9b07      	ldrlt	r3, [sp, #28]
 800bd70:	9607      	strlt	r6, [sp, #28]
 800bd72:	1af2      	sublt	r2, r6, r3
 800bd74:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bd76:	bfb6      	itet	lt
 800bd78:	189b      	addlt	r3, r3, r2
 800bd7a:	1b9e      	subge	r6, r3, r6
 800bd7c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bd7e:	9b03      	ldr	r3, [sp, #12]
 800bd80:	bfb8      	it	lt
 800bd82:	2600      	movlt	r6, #0
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	bfb7      	itett	lt
 800bd88:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bd8c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bd90:	1a9d      	sublt	r5, r3, r2
 800bd92:	2300      	movlt	r3, #0
 800bd94:	e734      	b.n	800bc00 <_dtoa_r+0x720>
 800bd96:	9e07      	ldr	r6, [sp, #28]
 800bd98:	9d04      	ldr	r5, [sp, #16]
 800bd9a:	9f08      	ldr	r7, [sp, #32]
 800bd9c:	e73b      	b.n	800bc16 <_dtoa_r+0x736>
 800bd9e:	9a07      	ldr	r2, [sp, #28]
 800bda0:	e767      	b.n	800bc72 <_dtoa_r+0x792>
 800bda2:	9b06      	ldr	r3, [sp, #24]
 800bda4:	2b01      	cmp	r3, #1
 800bda6:	dc18      	bgt.n	800bdda <_dtoa_r+0x8fa>
 800bda8:	f1ba 0f00 	cmp.w	sl, #0
 800bdac:	d115      	bne.n	800bdda <_dtoa_r+0x8fa>
 800bdae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bdb2:	b993      	cbnz	r3, 800bdda <_dtoa_r+0x8fa>
 800bdb4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bdb8:	0d1b      	lsrs	r3, r3, #20
 800bdba:	051b      	lsls	r3, r3, #20
 800bdbc:	b183      	cbz	r3, 800bde0 <_dtoa_r+0x900>
 800bdbe:	9b04      	ldr	r3, [sp, #16]
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	9304      	str	r3, [sp, #16]
 800bdc4:	9b05      	ldr	r3, [sp, #20]
 800bdc6:	3301      	adds	r3, #1
 800bdc8:	9305      	str	r3, [sp, #20]
 800bdca:	f04f 0801 	mov.w	r8, #1
 800bdce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	f47f af6a 	bne.w	800bcaa <_dtoa_r+0x7ca>
 800bdd6:	2001      	movs	r0, #1
 800bdd8:	e76f      	b.n	800bcba <_dtoa_r+0x7da>
 800bdda:	f04f 0800 	mov.w	r8, #0
 800bdde:	e7f6      	b.n	800bdce <_dtoa_r+0x8ee>
 800bde0:	4698      	mov	r8, r3
 800bde2:	e7f4      	b.n	800bdce <_dtoa_r+0x8ee>
 800bde4:	f43f af7d 	beq.w	800bce2 <_dtoa_r+0x802>
 800bde8:	4618      	mov	r0, r3
 800bdea:	301c      	adds	r0, #28
 800bdec:	e772      	b.n	800bcd4 <_dtoa_r+0x7f4>
 800bdee:	9b03      	ldr	r3, [sp, #12]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	dc37      	bgt.n	800be64 <_dtoa_r+0x984>
 800bdf4:	9b06      	ldr	r3, [sp, #24]
 800bdf6:	2b02      	cmp	r3, #2
 800bdf8:	dd34      	ble.n	800be64 <_dtoa_r+0x984>
 800bdfa:	9b03      	ldr	r3, [sp, #12]
 800bdfc:	9302      	str	r3, [sp, #8]
 800bdfe:	9b02      	ldr	r3, [sp, #8]
 800be00:	b96b      	cbnz	r3, 800be1e <_dtoa_r+0x93e>
 800be02:	4631      	mov	r1, r6
 800be04:	2205      	movs	r2, #5
 800be06:	4620      	mov	r0, r4
 800be08:	f000 f9c6 	bl	800c198 <__multadd>
 800be0c:	4601      	mov	r1, r0
 800be0e:	4606      	mov	r6, r0
 800be10:	ee18 0a10 	vmov	r0, s16
 800be14:	f000 fbe0 	bl	800c5d8 <__mcmp>
 800be18:	2800      	cmp	r0, #0
 800be1a:	f73f adbb 	bgt.w	800b994 <_dtoa_r+0x4b4>
 800be1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be20:	9d01      	ldr	r5, [sp, #4]
 800be22:	43db      	mvns	r3, r3
 800be24:	9300      	str	r3, [sp, #0]
 800be26:	f04f 0800 	mov.w	r8, #0
 800be2a:	4631      	mov	r1, r6
 800be2c:	4620      	mov	r0, r4
 800be2e:	f000 f991 	bl	800c154 <_Bfree>
 800be32:	2f00      	cmp	r7, #0
 800be34:	f43f aea4 	beq.w	800bb80 <_dtoa_r+0x6a0>
 800be38:	f1b8 0f00 	cmp.w	r8, #0
 800be3c:	d005      	beq.n	800be4a <_dtoa_r+0x96a>
 800be3e:	45b8      	cmp	r8, r7
 800be40:	d003      	beq.n	800be4a <_dtoa_r+0x96a>
 800be42:	4641      	mov	r1, r8
 800be44:	4620      	mov	r0, r4
 800be46:	f000 f985 	bl	800c154 <_Bfree>
 800be4a:	4639      	mov	r1, r7
 800be4c:	4620      	mov	r0, r4
 800be4e:	f000 f981 	bl	800c154 <_Bfree>
 800be52:	e695      	b.n	800bb80 <_dtoa_r+0x6a0>
 800be54:	2600      	movs	r6, #0
 800be56:	4637      	mov	r7, r6
 800be58:	e7e1      	b.n	800be1e <_dtoa_r+0x93e>
 800be5a:	9700      	str	r7, [sp, #0]
 800be5c:	4637      	mov	r7, r6
 800be5e:	e599      	b.n	800b994 <_dtoa_r+0x4b4>
 800be60:	40240000 	.word	0x40240000
 800be64:	9b08      	ldr	r3, [sp, #32]
 800be66:	2b00      	cmp	r3, #0
 800be68:	f000 80ca 	beq.w	800c000 <_dtoa_r+0xb20>
 800be6c:	9b03      	ldr	r3, [sp, #12]
 800be6e:	9302      	str	r3, [sp, #8]
 800be70:	2d00      	cmp	r5, #0
 800be72:	dd05      	ble.n	800be80 <_dtoa_r+0x9a0>
 800be74:	4639      	mov	r1, r7
 800be76:	462a      	mov	r2, r5
 800be78:	4620      	mov	r0, r4
 800be7a:	f000 fb3d 	bl	800c4f8 <__lshift>
 800be7e:	4607      	mov	r7, r0
 800be80:	f1b8 0f00 	cmp.w	r8, #0
 800be84:	d05b      	beq.n	800bf3e <_dtoa_r+0xa5e>
 800be86:	6879      	ldr	r1, [r7, #4]
 800be88:	4620      	mov	r0, r4
 800be8a:	f000 f923 	bl	800c0d4 <_Balloc>
 800be8e:	4605      	mov	r5, r0
 800be90:	b928      	cbnz	r0, 800be9e <_dtoa_r+0x9be>
 800be92:	4b87      	ldr	r3, [pc, #540]	; (800c0b0 <_dtoa_r+0xbd0>)
 800be94:	4602      	mov	r2, r0
 800be96:	f240 21ea 	movw	r1, #746	; 0x2ea
 800be9a:	f7ff bb3b 	b.w	800b514 <_dtoa_r+0x34>
 800be9e:	693a      	ldr	r2, [r7, #16]
 800bea0:	3202      	adds	r2, #2
 800bea2:	0092      	lsls	r2, r2, #2
 800bea4:	f107 010c 	add.w	r1, r7, #12
 800bea8:	300c      	adds	r0, #12
 800beaa:	f7fe fded 	bl	800aa88 <memcpy>
 800beae:	2201      	movs	r2, #1
 800beb0:	4629      	mov	r1, r5
 800beb2:	4620      	mov	r0, r4
 800beb4:	f000 fb20 	bl	800c4f8 <__lshift>
 800beb8:	9b01      	ldr	r3, [sp, #4]
 800beba:	f103 0901 	add.w	r9, r3, #1
 800bebe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bec2:	4413      	add	r3, r2
 800bec4:	9305      	str	r3, [sp, #20]
 800bec6:	f00a 0301 	and.w	r3, sl, #1
 800beca:	46b8      	mov	r8, r7
 800becc:	9304      	str	r3, [sp, #16]
 800bece:	4607      	mov	r7, r0
 800bed0:	4631      	mov	r1, r6
 800bed2:	ee18 0a10 	vmov	r0, s16
 800bed6:	f7ff fa77 	bl	800b3c8 <quorem>
 800beda:	4641      	mov	r1, r8
 800bedc:	9002      	str	r0, [sp, #8]
 800bede:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bee2:	ee18 0a10 	vmov	r0, s16
 800bee6:	f000 fb77 	bl	800c5d8 <__mcmp>
 800beea:	463a      	mov	r2, r7
 800beec:	9003      	str	r0, [sp, #12]
 800beee:	4631      	mov	r1, r6
 800bef0:	4620      	mov	r0, r4
 800bef2:	f000 fb8d 	bl	800c610 <__mdiff>
 800bef6:	68c2      	ldr	r2, [r0, #12]
 800bef8:	f109 3bff 	add.w	fp, r9, #4294967295
 800befc:	4605      	mov	r5, r0
 800befe:	bb02      	cbnz	r2, 800bf42 <_dtoa_r+0xa62>
 800bf00:	4601      	mov	r1, r0
 800bf02:	ee18 0a10 	vmov	r0, s16
 800bf06:	f000 fb67 	bl	800c5d8 <__mcmp>
 800bf0a:	4602      	mov	r2, r0
 800bf0c:	4629      	mov	r1, r5
 800bf0e:	4620      	mov	r0, r4
 800bf10:	9207      	str	r2, [sp, #28]
 800bf12:	f000 f91f 	bl	800c154 <_Bfree>
 800bf16:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bf1a:	ea43 0102 	orr.w	r1, r3, r2
 800bf1e:	9b04      	ldr	r3, [sp, #16]
 800bf20:	430b      	orrs	r3, r1
 800bf22:	464d      	mov	r5, r9
 800bf24:	d10f      	bne.n	800bf46 <_dtoa_r+0xa66>
 800bf26:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bf2a:	d02a      	beq.n	800bf82 <_dtoa_r+0xaa2>
 800bf2c:	9b03      	ldr	r3, [sp, #12]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	dd02      	ble.n	800bf38 <_dtoa_r+0xa58>
 800bf32:	9b02      	ldr	r3, [sp, #8]
 800bf34:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bf38:	f88b a000 	strb.w	sl, [fp]
 800bf3c:	e775      	b.n	800be2a <_dtoa_r+0x94a>
 800bf3e:	4638      	mov	r0, r7
 800bf40:	e7ba      	b.n	800beb8 <_dtoa_r+0x9d8>
 800bf42:	2201      	movs	r2, #1
 800bf44:	e7e2      	b.n	800bf0c <_dtoa_r+0xa2c>
 800bf46:	9b03      	ldr	r3, [sp, #12]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	db04      	blt.n	800bf56 <_dtoa_r+0xa76>
 800bf4c:	9906      	ldr	r1, [sp, #24]
 800bf4e:	430b      	orrs	r3, r1
 800bf50:	9904      	ldr	r1, [sp, #16]
 800bf52:	430b      	orrs	r3, r1
 800bf54:	d122      	bne.n	800bf9c <_dtoa_r+0xabc>
 800bf56:	2a00      	cmp	r2, #0
 800bf58:	ddee      	ble.n	800bf38 <_dtoa_r+0xa58>
 800bf5a:	ee18 1a10 	vmov	r1, s16
 800bf5e:	2201      	movs	r2, #1
 800bf60:	4620      	mov	r0, r4
 800bf62:	f000 fac9 	bl	800c4f8 <__lshift>
 800bf66:	4631      	mov	r1, r6
 800bf68:	ee08 0a10 	vmov	s16, r0
 800bf6c:	f000 fb34 	bl	800c5d8 <__mcmp>
 800bf70:	2800      	cmp	r0, #0
 800bf72:	dc03      	bgt.n	800bf7c <_dtoa_r+0xa9c>
 800bf74:	d1e0      	bne.n	800bf38 <_dtoa_r+0xa58>
 800bf76:	f01a 0f01 	tst.w	sl, #1
 800bf7a:	d0dd      	beq.n	800bf38 <_dtoa_r+0xa58>
 800bf7c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bf80:	d1d7      	bne.n	800bf32 <_dtoa_r+0xa52>
 800bf82:	2339      	movs	r3, #57	; 0x39
 800bf84:	f88b 3000 	strb.w	r3, [fp]
 800bf88:	462b      	mov	r3, r5
 800bf8a:	461d      	mov	r5, r3
 800bf8c:	3b01      	subs	r3, #1
 800bf8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bf92:	2a39      	cmp	r2, #57	; 0x39
 800bf94:	d071      	beq.n	800c07a <_dtoa_r+0xb9a>
 800bf96:	3201      	adds	r2, #1
 800bf98:	701a      	strb	r2, [r3, #0]
 800bf9a:	e746      	b.n	800be2a <_dtoa_r+0x94a>
 800bf9c:	2a00      	cmp	r2, #0
 800bf9e:	dd07      	ble.n	800bfb0 <_dtoa_r+0xad0>
 800bfa0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bfa4:	d0ed      	beq.n	800bf82 <_dtoa_r+0xaa2>
 800bfa6:	f10a 0301 	add.w	r3, sl, #1
 800bfaa:	f88b 3000 	strb.w	r3, [fp]
 800bfae:	e73c      	b.n	800be2a <_dtoa_r+0x94a>
 800bfb0:	9b05      	ldr	r3, [sp, #20]
 800bfb2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bfb6:	4599      	cmp	r9, r3
 800bfb8:	d047      	beq.n	800c04a <_dtoa_r+0xb6a>
 800bfba:	ee18 1a10 	vmov	r1, s16
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	220a      	movs	r2, #10
 800bfc2:	4620      	mov	r0, r4
 800bfc4:	f000 f8e8 	bl	800c198 <__multadd>
 800bfc8:	45b8      	cmp	r8, r7
 800bfca:	ee08 0a10 	vmov	s16, r0
 800bfce:	f04f 0300 	mov.w	r3, #0
 800bfd2:	f04f 020a 	mov.w	r2, #10
 800bfd6:	4641      	mov	r1, r8
 800bfd8:	4620      	mov	r0, r4
 800bfda:	d106      	bne.n	800bfea <_dtoa_r+0xb0a>
 800bfdc:	f000 f8dc 	bl	800c198 <__multadd>
 800bfe0:	4680      	mov	r8, r0
 800bfe2:	4607      	mov	r7, r0
 800bfe4:	f109 0901 	add.w	r9, r9, #1
 800bfe8:	e772      	b.n	800bed0 <_dtoa_r+0x9f0>
 800bfea:	f000 f8d5 	bl	800c198 <__multadd>
 800bfee:	4639      	mov	r1, r7
 800bff0:	4680      	mov	r8, r0
 800bff2:	2300      	movs	r3, #0
 800bff4:	220a      	movs	r2, #10
 800bff6:	4620      	mov	r0, r4
 800bff8:	f000 f8ce 	bl	800c198 <__multadd>
 800bffc:	4607      	mov	r7, r0
 800bffe:	e7f1      	b.n	800bfe4 <_dtoa_r+0xb04>
 800c000:	9b03      	ldr	r3, [sp, #12]
 800c002:	9302      	str	r3, [sp, #8]
 800c004:	9d01      	ldr	r5, [sp, #4]
 800c006:	ee18 0a10 	vmov	r0, s16
 800c00a:	4631      	mov	r1, r6
 800c00c:	f7ff f9dc 	bl	800b3c8 <quorem>
 800c010:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c014:	9b01      	ldr	r3, [sp, #4]
 800c016:	f805 ab01 	strb.w	sl, [r5], #1
 800c01a:	1aea      	subs	r2, r5, r3
 800c01c:	9b02      	ldr	r3, [sp, #8]
 800c01e:	4293      	cmp	r3, r2
 800c020:	dd09      	ble.n	800c036 <_dtoa_r+0xb56>
 800c022:	ee18 1a10 	vmov	r1, s16
 800c026:	2300      	movs	r3, #0
 800c028:	220a      	movs	r2, #10
 800c02a:	4620      	mov	r0, r4
 800c02c:	f000 f8b4 	bl	800c198 <__multadd>
 800c030:	ee08 0a10 	vmov	s16, r0
 800c034:	e7e7      	b.n	800c006 <_dtoa_r+0xb26>
 800c036:	9b02      	ldr	r3, [sp, #8]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	bfc8      	it	gt
 800c03c:	461d      	movgt	r5, r3
 800c03e:	9b01      	ldr	r3, [sp, #4]
 800c040:	bfd8      	it	le
 800c042:	2501      	movle	r5, #1
 800c044:	441d      	add	r5, r3
 800c046:	f04f 0800 	mov.w	r8, #0
 800c04a:	ee18 1a10 	vmov	r1, s16
 800c04e:	2201      	movs	r2, #1
 800c050:	4620      	mov	r0, r4
 800c052:	f000 fa51 	bl	800c4f8 <__lshift>
 800c056:	4631      	mov	r1, r6
 800c058:	ee08 0a10 	vmov	s16, r0
 800c05c:	f000 fabc 	bl	800c5d8 <__mcmp>
 800c060:	2800      	cmp	r0, #0
 800c062:	dc91      	bgt.n	800bf88 <_dtoa_r+0xaa8>
 800c064:	d102      	bne.n	800c06c <_dtoa_r+0xb8c>
 800c066:	f01a 0f01 	tst.w	sl, #1
 800c06a:	d18d      	bne.n	800bf88 <_dtoa_r+0xaa8>
 800c06c:	462b      	mov	r3, r5
 800c06e:	461d      	mov	r5, r3
 800c070:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c074:	2a30      	cmp	r2, #48	; 0x30
 800c076:	d0fa      	beq.n	800c06e <_dtoa_r+0xb8e>
 800c078:	e6d7      	b.n	800be2a <_dtoa_r+0x94a>
 800c07a:	9a01      	ldr	r2, [sp, #4]
 800c07c:	429a      	cmp	r2, r3
 800c07e:	d184      	bne.n	800bf8a <_dtoa_r+0xaaa>
 800c080:	9b00      	ldr	r3, [sp, #0]
 800c082:	3301      	adds	r3, #1
 800c084:	9300      	str	r3, [sp, #0]
 800c086:	2331      	movs	r3, #49	; 0x31
 800c088:	7013      	strb	r3, [r2, #0]
 800c08a:	e6ce      	b.n	800be2a <_dtoa_r+0x94a>
 800c08c:	4b09      	ldr	r3, [pc, #36]	; (800c0b4 <_dtoa_r+0xbd4>)
 800c08e:	f7ff ba95 	b.w	800b5bc <_dtoa_r+0xdc>
 800c092:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c094:	2b00      	cmp	r3, #0
 800c096:	f47f aa6e 	bne.w	800b576 <_dtoa_r+0x96>
 800c09a:	4b07      	ldr	r3, [pc, #28]	; (800c0b8 <_dtoa_r+0xbd8>)
 800c09c:	f7ff ba8e 	b.w	800b5bc <_dtoa_r+0xdc>
 800c0a0:	9b02      	ldr	r3, [sp, #8]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	dcae      	bgt.n	800c004 <_dtoa_r+0xb24>
 800c0a6:	9b06      	ldr	r3, [sp, #24]
 800c0a8:	2b02      	cmp	r3, #2
 800c0aa:	f73f aea8 	bgt.w	800bdfe <_dtoa_r+0x91e>
 800c0ae:	e7a9      	b.n	800c004 <_dtoa_r+0xb24>
 800c0b0:	0800e483 	.word	0x0800e483
 800c0b4:	0800e3e0 	.word	0x0800e3e0
 800c0b8:	0800e404 	.word	0x0800e404

0800c0bc <_localeconv_r>:
 800c0bc:	4800      	ldr	r0, [pc, #0]	; (800c0c0 <_localeconv_r+0x4>)
 800c0be:	4770      	bx	lr
 800c0c0:	20000178 	.word	0x20000178

0800c0c4 <malloc>:
 800c0c4:	4b02      	ldr	r3, [pc, #8]	; (800c0d0 <malloc+0xc>)
 800c0c6:	4601      	mov	r1, r0
 800c0c8:	6818      	ldr	r0, [r3, #0]
 800c0ca:	f000 bc09 	b.w	800c8e0 <_malloc_r>
 800c0ce:	bf00      	nop
 800c0d0:	20000024 	.word	0x20000024

0800c0d4 <_Balloc>:
 800c0d4:	b570      	push	{r4, r5, r6, lr}
 800c0d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c0d8:	4604      	mov	r4, r0
 800c0da:	460d      	mov	r5, r1
 800c0dc:	b976      	cbnz	r6, 800c0fc <_Balloc+0x28>
 800c0de:	2010      	movs	r0, #16
 800c0e0:	f7ff fff0 	bl	800c0c4 <malloc>
 800c0e4:	4602      	mov	r2, r0
 800c0e6:	6260      	str	r0, [r4, #36]	; 0x24
 800c0e8:	b920      	cbnz	r0, 800c0f4 <_Balloc+0x20>
 800c0ea:	4b18      	ldr	r3, [pc, #96]	; (800c14c <_Balloc+0x78>)
 800c0ec:	4818      	ldr	r0, [pc, #96]	; (800c150 <_Balloc+0x7c>)
 800c0ee:	2166      	movs	r1, #102	; 0x66
 800c0f0:	f000 fdd6 	bl	800cca0 <__assert_func>
 800c0f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c0f8:	6006      	str	r6, [r0, #0]
 800c0fa:	60c6      	str	r6, [r0, #12]
 800c0fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c0fe:	68f3      	ldr	r3, [r6, #12]
 800c100:	b183      	cbz	r3, 800c124 <_Balloc+0x50>
 800c102:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c104:	68db      	ldr	r3, [r3, #12]
 800c106:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c10a:	b9b8      	cbnz	r0, 800c13c <_Balloc+0x68>
 800c10c:	2101      	movs	r1, #1
 800c10e:	fa01 f605 	lsl.w	r6, r1, r5
 800c112:	1d72      	adds	r2, r6, #5
 800c114:	0092      	lsls	r2, r2, #2
 800c116:	4620      	mov	r0, r4
 800c118:	f000 fb60 	bl	800c7dc <_calloc_r>
 800c11c:	b160      	cbz	r0, 800c138 <_Balloc+0x64>
 800c11e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c122:	e00e      	b.n	800c142 <_Balloc+0x6e>
 800c124:	2221      	movs	r2, #33	; 0x21
 800c126:	2104      	movs	r1, #4
 800c128:	4620      	mov	r0, r4
 800c12a:	f000 fb57 	bl	800c7dc <_calloc_r>
 800c12e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c130:	60f0      	str	r0, [r6, #12]
 800c132:	68db      	ldr	r3, [r3, #12]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d1e4      	bne.n	800c102 <_Balloc+0x2e>
 800c138:	2000      	movs	r0, #0
 800c13a:	bd70      	pop	{r4, r5, r6, pc}
 800c13c:	6802      	ldr	r2, [r0, #0]
 800c13e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c142:	2300      	movs	r3, #0
 800c144:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c148:	e7f7      	b.n	800c13a <_Balloc+0x66>
 800c14a:	bf00      	nop
 800c14c:	0800e411 	.word	0x0800e411
 800c150:	0800e494 	.word	0x0800e494

0800c154 <_Bfree>:
 800c154:	b570      	push	{r4, r5, r6, lr}
 800c156:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c158:	4605      	mov	r5, r0
 800c15a:	460c      	mov	r4, r1
 800c15c:	b976      	cbnz	r6, 800c17c <_Bfree+0x28>
 800c15e:	2010      	movs	r0, #16
 800c160:	f7ff ffb0 	bl	800c0c4 <malloc>
 800c164:	4602      	mov	r2, r0
 800c166:	6268      	str	r0, [r5, #36]	; 0x24
 800c168:	b920      	cbnz	r0, 800c174 <_Bfree+0x20>
 800c16a:	4b09      	ldr	r3, [pc, #36]	; (800c190 <_Bfree+0x3c>)
 800c16c:	4809      	ldr	r0, [pc, #36]	; (800c194 <_Bfree+0x40>)
 800c16e:	218a      	movs	r1, #138	; 0x8a
 800c170:	f000 fd96 	bl	800cca0 <__assert_func>
 800c174:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c178:	6006      	str	r6, [r0, #0]
 800c17a:	60c6      	str	r6, [r0, #12]
 800c17c:	b13c      	cbz	r4, 800c18e <_Bfree+0x3a>
 800c17e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c180:	6862      	ldr	r2, [r4, #4]
 800c182:	68db      	ldr	r3, [r3, #12]
 800c184:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c188:	6021      	str	r1, [r4, #0]
 800c18a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c18e:	bd70      	pop	{r4, r5, r6, pc}
 800c190:	0800e411 	.word	0x0800e411
 800c194:	0800e494 	.word	0x0800e494

0800c198 <__multadd>:
 800c198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c19c:	690d      	ldr	r5, [r1, #16]
 800c19e:	4607      	mov	r7, r0
 800c1a0:	460c      	mov	r4, r1
 800c1a2:	461e      	mov	r6, r3
 800c1a4:	f101 0c14 	add.w	ip, r1, #20
 800c1a8:	2000      	movs	r0, #0
 800c1aa:	f8dc 3000 	ldr.w	r3, [ip]
 800c1ae:	b299      	uxth	r1, r3
 800c1b0:	fb02 6101 	mla	r1, r2, r1, r6
 800c1b4:	0c1e      	lsrs	r6, r3, #16
 800c1b6:	0c0b      	lsrs	r3, r1, #16
 800c1b8:	fb02 3306 	mla	r3, r2, r6, r3
 800c1bc:	b289      	uxth	r1, r1
 800c1be:	3001      	adds	r0, #1
 800c1c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c1c4:	4285      	cmp	r5, r0
 800c1c6:	f84c 1b04 	str.w	r1, [ip], #4
 800c1ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c1ce:	dcec      	bgt.n	800c1aa <__multadd+0x12>
 800c1d0:	b30e      	cbz	r6, 800c216 <__multadd+0x7e>
 800c1d2:	68a3      	ldr	r3, [r4, #8]
 800c1d4:	42ab      	cmp	r3, r5
 800c1d6:	dc19      	bgt.n	800c20c <__multadd+0x74>
 800c1d8:	6861      	ldr	r1, [r4, #4]
 800c1da:	4638      	mov	r0, r7
 800c1dc:	3101      	adds	r1, #1
 800c1de:	f7ff ff79 	bl	800c0d4 <_Balloc>
 800c1e2:	4680      	mov	r8, r0
 800c1e4:	b928      	cbnz	r0, 800c1f2 <__multadd+0x5a>
 800c1e6:	4602      	mov	r2, r0
 800c1e8:	4b0c      	ldr	r3, [pc, #48]	; (800c21c <__multadd+0x84>)
 800c1ea:	480d      	ldr	r0, [pc, #52]	; (800c220 <__multadd+0x88>)
 800c1ec:	21b5      	movs	r1, #181	; 0xb5
 800c1ee:	f000 fd57 	bl	800cca0 <__assert_func>
 800c1f2:	6922      	ldr	r2, [r4, #16]
 800c1f4:	3202      	adds	r2, #2
 800c1f6:	f104 010c 	add.w	r1, r4, #12
 800c1fa:	0092      	lsls	r2, r2, #2
 800c1fc:	300c      	adds	r0, #12
 800c1fe:	f7fe fc43 	bl	800aa88 <memcpy>
 800c202:	4621      	mov	r1, r4
 800c204:	4638      	mov	r0, r7
 800c206:	f7ff ffa5 	bl	800c154 <_Bfree>
 800c20a:	4644      	mov	r4, r8
 800c20c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c210:	3501      	adds	r5, #1
 800c212:	615e      	str	r6, [r3, #20]
 800c214:	6125      	str	r5, [r4, #16]
 800c216:	4620      	mov	r0, r4
 800c218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c21c:	0800e483 	.word	0x0800e483
 800c220:	0800e494 	.word	0x0800e494

0800c224 <__hi0bits>:
 800c224:	0c03      	lsrs	r3, r0, #16
 800c226:	041b      	lsls	r3, r3, #16
 800c228:	b9d3      	cbnz	r3, 800c260 <__hi0bits+0x3c>
 800c22a:	0400      	lsls	r0, r0, #16
 800c22c:	2310      	movs	r3, #16
 800c22e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c232:	bf04      	itt	eq
 800c234:	0200      	lsleq	r0, r0, #8
 800c236:	3308      	addeq	r3, #8
 800c238:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c23c:	bf04      	itt	eq
 800c23e:	0100      	lsleq	r0, r0, #4
 800c240:	3304      	addeq	r3, #4
 800c242:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c246:	bf04      	itt	eq
 800c248:	0080      	lsleq	r0, r0, #2
 800c24a:	3302      	addeq	r3, #2
 800c24c:	2800      	cmp	r0, #0
 800c24e:	db05      	blt.n	800c25c <__hi0bits+0x38>
 800c250:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c254:	f103 0301 	add.w	r3, r3, #1
 800c258:	bf08      	it	eq
 800c25a:	2320      	moveq	r3, #32
 800c25c:	4618      	mov	r0, r3
 800c25e:	4770      	bx	lr
 800c260:	2300      	movs	r3, #0
 800c262:	e7e4      	b.n	800c22e <__hi0bits+0xa>

0800c264 <__lo0bits>:
 800c264:	6803      	ldr	r3, [r0, #0]
 800c266:	f013 0207 	ands.w	r2, r3, #7
 800c26a:	4601      	mov	r1, r0
 800c26c:	d00b      	beq.n	800c286 <__lo0bits+0x22>
 800c26e:	07da      	lsls	r2, r3, #31
 800c270:	d423      	bmi.n	800c2ba <__lo0bits+0x56>
 800c272:	0798      	lsls	r0, r3, #30
 800c274:	bf49      	itett	mi
 800c276:	085b      	lsrmi	r3, r3, #1
 800c278:	089b      	lsrpl	r3, r3, #2
 800c27a:	2001      	movmi	r0, #1
 800c27c:	600b      	strmi	r3, [r1, #0]
 800c27e:	bf5c      	itt	pl
 800c280:	600b      	strpl	r3, [r1, #0]
 800c282:	2002      	movpl	r0, #2
 800c284:	4770      	bx	lr
 800c286:	b298      	uxth	r0, r3
 800c288:	b9a8      	cbnz	r0, 800c2b6 <__lo0bits+0x52>
 800c28a:	0c1b      	lsrs	r3, r3, #16
 800c28c:	2010      	movs	r0, #16
 800c28e:	b2da      	uxtb	r2, r3
 800c290:	b90a      	cbnz	r2, 800c296 <__lo0bits+0x32>
 800c292:	3008      	adds	r0, #8
 800c294:	0a1b      	lsrs	r3, r3, #8
 800c296:	071a      	lsls	r2, r3, #28
 800c298:	bf04      	itt	eq
 800c29a:	091b      	lsreq	r3, r3, #4
 800c29c:	3004      	addeq	r0, #4
 800c29e:	079a      	lsls	r2, r3, #30
 800c2a0:	bf04      	itt	eq
 800c2a2:	089b      	lsreq	r3, r3, #2
 800c2a4:	3002      	addeq	r0, #2
 800c2a6:	07da      	lsls	r2, r3, #31
 800c2a8:	d403      	bmi.n	800c2b2 <__lo0bits+0x4e>
 800c2aa:	085b      	lsrs	r3, r3, #1
 800c2ac:	f100 0001 	add.w	r0, r0, #1
 800c2b0:	d005      	beq.n	800c2be <__lo0bits+0x5a>
 800c2b2:	600b      	str	r3, [r1, #0]
 800c2b4:	4770      	bx	lr
 800c2b6:	4610      	mov	r0, r2
 800c2b8:	e7e9      	b.n	800c28e <__lo0bits+0x2a>
 800c2ba:	2000      	movs	r0, #0
 800c2bc:	4770      	bx	lr
 800c2be:	2020      	movs	r0, #32
 800c2c0:	4770      	bx	lr
	...

0800c2c4 <__i2b>:
 800c2c4:	b510      	push	{r4, lr}
 800c2c6:	460c      	mov	r4, r1
 800c2c8:	2101      	movs	r1, #1
 800c2ca:	f7ff ff03 	bl	800c0d4 <_Balloc>
 800c2ce:	4602      	mov	r2, r0
 800c2d0:	b928      	cbnz	r0, 800c2de <__i2b+0x1a>
 800c2d2:	4b05      	ldr	r3, [pc, #20]	; (800c2e8 <__i2b+0x24>)
 800c2d4:	4805      	ldr	r0, [pc, #20]	; (800c2ec <__i2b+0x28>)
 800c2d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c2da:	f000 fce1 	bl	800cca0 <__assert_func>
 800c2de:	2301      	movs	r3, #1
 800c2e0:	6144      	str	r4, [r0, #20]
 800c2e2:	6103      	str	r3, [r0, #16]
 800c2e4:	bd10      	pop	{r4, pc}
 800c2e6:	bf00      	nop
 800c2e8:	0800e483 	.word	0x0800e483
 800c2ec:	0800e494 	.word	0x0800e494

0800c2f0 <__multiply>:
 800c2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2f4:	4691      	mov	r9, r2
 800c2f6:	690a      	ldr	r2, [r1, #16]
 800c2f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	bfb8      	it	lt
 800c300:	460b      	movlt	r3, r1
 800c302:	460c      	mov	r4, r1
 800c304:	bfbc      	itt	lt
 800c306:	464c      	movlt	r4, r9
 800c308:	4699      	movlt	r9, r3
 800c30a:	6927      	ldr	r7, [r4, #16]
 800c30c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c310:	68a3      	ldr	r3, [r4, #8]
 800c312:	6861      	ldr	r1, [r4, #4]
 800c314:	eb07 060a 	add.w	r6, r7, sl
 800c318:	42b3      	cmp	r3, r6
 800c31a:	b085      	sub	sp, #20
 800c31c:	bfb8      	it	lt
 800c31e:	3101      	addlt	r1, #1
 800c320:	f7ff fed8 	bl	800c0d4 <_Balloc>
 800c324:	b930      	cbnz	r0, 800c334 <__multiply+0x44>
 800c326:	4602      	mov	r2, r0
 800c328:	4b44      	ldr	r3, [pc, #272]	; (800c43c <__multiply+0x14c>)
 800c32a:	4845      	ldr	r0, [pc, #276]	; (800c440 <__multiply+0x150>)
 800c32c:	f240 115d 	movw	r1, #349	; 0x15d
 800c330:	f000 fcb6 	bl	800cca0 <__assert_func>
 800c334:	f100 0514 	add.w	r5, r0, #20
 800c338:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c33c:	462b      	mov	r3, r5
 800c33e:	2200      	movs	r2, #0
 800c340:	4543      	cmp	r3, r8
 800c342:	d321      	bcc.n	800c388 <__multiply+0x98>
 800c344:	f104 0314 	add.w	r3, r4, #20
 800c348:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c34c:	f109 0314 	add.w	r3, r9, #20
 800c350:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c354:	9202      	str	r2, [sp, #8]
 800c356:	1b3a      	subs	r2, r7, r4
 800c358:	3a15      	subs	r2, #21
 800c35a:	f022 0203 	bic.w	r2, r2, #3
 800c35e:	3204      	adds	r2, #4
 800c360:	f104 0115 	add.w	r1, r4, #21
 800c364:	428f      	cmp	r7, r1
 800c366:	bf38      	it	cc
 800c368:	2204      	movcc	r2, #4
 800c36a:	9201      	str	r2, [sp, #4]
 800c36c:	9a02      	ldr	r2, [sp, #8]
 800c36e:	9303      	str	r3, [sp, #12]
 800c370:	429a      	cmp	r2, r3
 800c372:	d80c      	bhi.n	800c38e <__multiply+0x9e>
 800c374:	2e00      	cmp	r6, #0
 800c376:	dd03      	ble.n	800c380 <__multiply+0x90>
 800c378:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d05a      	beq.n	800c436 <__multiply+0x146>
 800c380:	6106      	str	r6, [r0, #16]
 800c382:	b005      	add	sp, #20
 800c384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c388:	f843 2b04 	str.w	r2, [r3], #4
 800c38c:	e7d8      	b.n	800c340 <__multiply+0x50>
 800c38e:	f8b3 a000 	ldrh.w	sl, [r3]
 800c392:	f1ba 0f00 	cmp.w	sl, #0
 800c396:	d024      	beq.n	800c3e2 <__multiply+0xf2>
 800c398:	f104 0e14 	add.w	lr, r4, #20
 800c39c:	46a9      	mov	r9, r5
 800c39e:	f04f 0c00 	mov.w	ip, #0
 800c3a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c3a6:	f8d9 1000 	ldr.w	r1, [r9]
 800c3aa:	fa1f fb82 	uxth.w	fp, r2
 800c3ae:	b289      	uxth	r1, r1
 800c3b0:	fb0a 110b 	mla	r1, sl, fp, r1
 800c3b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c3b8:	f8d9 2000 	ldr.w	r2, [r9]
 800c3bc:	4461      	add	r1, ip
 800c3be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c3c2:	fb0a c20b 	mla	r2, sl, fp, ip
 800c3c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c3ca:	b289      	uxth	r1, r1
 800c3cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c3d0:	4577      	cmp	r7, lr
 800c3d2:	f849 1b04 	str.w	r1, [r9], #4
 800c3d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c3da:	d8e2      	bhi.n	800c3a2 <__multiply+0xb2>
 800c3dc:	9a01      	ldr	r2, [sp, #4]
 800c3de:	f845 c002 	str.w	ip, [r5, r2]
 800c3e2:	9a03      	ldr	r2, [sp, #12]
 800c3e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c3e8:	3304      	adds	r3, #4
 800c3ea:	f1b9 0f00 	cmp.w	r9, #0
 800c3ee:	d020      	beq.n	800c432 <__multiply+0x142>
 800c3f0:	6829      	ldr	r1, [r5, #0]
 800c3f2:	f104 0c14 	add.w	ip, r4, #20
 800c3f6:	46ae      	mov	lr, r5
 800c3f8:	f04f 0a00 	mov.w	sl, #0
 800c3fc:	f8bc b000 	ldrh.w	fp, [ip]
 800c400:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c404:	fb09 220b 	mla	r2, r9, fp, r2
 800c408:	4492      	add	sl, r2
 800c40a:	b289      	uxth	r1, r1
 800c40c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c410:	f84e 1b04 	str.w	r1, [lr], #4
 800c414:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c418:	f8be 1000 	ldrh.w	r1, [lr]
 800c41c:	0c12      	lsrs	r2, r2, #16
 800c41e:	fb09 1102 	mla	r1, r9, r2, r1
 800c422:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c426:	4567      	cmp	r7, ip
 800c428:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c42c:	d8e6      	bhi.n	800c3fc <__multiply+0x10c>
 800c42e:	9a01      	ldr	r2, [sp, #4]
 800c430:	50a9      	str	r1, [r5, r2]
 800c432:	3504      	adds	r5, #4
 800c434:	e79a      	b.n	800c36c <__multiply+0x7c>
 800c436:	3e01      	subs	r6, #1
 800c438:	e79c      	b.n	800c374 <__multiply+0x84>
 800c43a:	bf00      	nop
 800c43c:	0800e483 	.word	0x0800e483
 800c440:	0800e494 	.word	0x0800e494

0800c444 <__pow5mult>:
 800c444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c448:	4615      	mov	r5, r2
 800c44a:	f012 0203 	ands.w	r2, r2, #3
 800c44e:	4606      	mov	r6, r0
 800c450:	460f      	mov	r7, r1
 800c452:	d007      	beq.n	800c464 <__pow5mult+0x20>
 800c454:	4c25      	ldr	r4, [pc, #148]	; (800c4ec <__pow5mult+0xa8>)
 800c456:	3a01      	subs	r2, #1
 800c458:	2300      	movs	r3, #0
 800c45a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c45e:	f7ff fe9b 	bl	800c198 <__multadd>
 800c462:	4607      	mov	r7, r0
 800c464:	10ad      	asrs	r5, r5, #2
 800c466:	d03d      	beq.n	800c4e4 <__pow5mult+0xa0>
 800c468:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c46a:	b97c      	cbnz	r4, 800c48c <__pow5mult+0x48>
 800c46c:	2010      	movs	r0, #16
 800c46e:	f7ff fe29 	bl	800c0c4 <malloc>
 800c472:	4602      	mov	r2, r0
 800c474:	6270      	str	r0, [r6, #36]	; 0x24
 800c476:	b928      	cbnz	r0, 800c484 <__pow5mult+0x40>
 800c478:	4b1d      	ldr	r3, [pc, #116]	; (800c4f0 <__pow5mult+0xac>)
 800c47a:	481e      	ldr	r0, [pc, #120]	; (800c4f4 <__pow5mult+0xb0>)
 800c47c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c480:	f000 fc0e 	bl	800cca0 <__assert_func>
 800c484:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c488:	6004      	str	r4, [r0, #0]
 800c48a:	60c4      	str	r4, [r0, #12]
 800c48c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c490:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c494:	b94c      	cbnz	r4, 800c4aa <__pow5mult+0x66>
 800c496:	f240 2171 	movw	r1, #625	; 0x271
 800c49a:	4630      	mov	r0, r6
 800c49c:	f7ff ff12 	bl	800c2c4 <__i2b>
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c4a6:	4604      	mov	r4, r0
 800c4a8:	6003      	str	r3, [r0, #0]
 800c4aa:	f04f 0900 	mov.w	r9, #0
 800c4ae:	07eb      	lsls	r3, r5, #31
 800c4b0:	d50a      	bpl.n	800c4c8 <__pow5mult+0x84>
 800c4b2:	4639      	mov	r1, r7
 800c4b4:	4622      	mov	r2, r4
 800c4b6:	4630      	mov	r0, r6
 800c4b8:	f7ff ff1a 	bl	800c2f0 <__multiply>
 800c4bc:	4639      	mov	r1, r7
 800c4be:	4680      	mov	r8, r0
 800c4c0:	4630      	mov	r0, r6
 800c4c2:	f7ff fe47 	bl	800c154 <_Bfree>
 800c4c6:	4647      	mov	r7, r8
 800c4c8:	106d      	asrs	r5, r5, #1
 800c4ca:	d00b      	beq.n	800c4e4 <__pow5mult+0xa0>
 800c4cc:	6820      	ldr	r0, [r4, #0]
 800c4ce:	b938      	cbnz	r0, 800c4e0 <__pow5mult+0x9c>
 800c4d0:	4622      	mov	r2, r4
 800c4d2:	4621      	mov	r1, r4
 800c4d4:	4630      	mov	r0, r6
 800c4d6:	f7ff ff0b 	bl	800c2f0 <__multiply>
 800c4da:	6020      	str	r0, [r4, #0]
 800c4dc:	f8c0 9000 	str.w	r9, [r0]
 800c4e0:	4604      	mov	r4, r0
 800c4e2:	e7e4      	b.n	800c4ae <__pow5mult+0x6a>
 800c4e4:	4638      	mov	r0, r7
 800c4e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4ea:	bf00      	nop
 800c4ec:	0800e5e0 	.word	0x0800e5e0
 800c4f0:	0800e411 	.word	0x0800e411
 800c4f4:	0800e494 	.word	0x0800e494

0800c4f8 <__lshift>:
 800c4f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4fc:	460c      	mov	r4, r1
 800c4fe:	6849      	ldr	r1, [r1, #4]
 800c500:	6923      	ldr	r3, [r4, #16]
 800c502:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c506:	68a3      	ldr	r3, [r4, #8]
 800c508:	4607      	mov	r7, r0
 800c50a:	4691      	mov	r9, r2
 800c50c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c510:	f108 0601 	add.w	r6, r8, #1
 800c514:	42b3      	cmp	r3, r6
 800c516:	db0b      	blt.n	800c530 <__lshift+0x38>
 800c518:	4638      	mov	r0, r7
 800c51a:	f7ff fddb 	bl	800c0d4 <_Balloc>
 800c51e:	4605      	mov	r5, r0
 800c520:	b948      	cbnz	r0, 800c536 <__lshift+0x3e>
 800c522:	4602      	mov	r2, r0
 800c524:	4b2a      	ldr	r3, [pc, #168]	; (800c5d0 <__lshift+0xd8>)
 800c526:	482b      	ldr	r0, [pc, #172]	; (800c5d4 <__lshift+0xdc>)
 800c528:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c52c:	f000 fbb8 	bl	800cca0 <__assert_func>
 800c530:	3101      	adds	r1, #1
 800c532:	005b      	lsls	r3, r3, #1
 800c534:	e7ee      	b.n	800c514 <__lshift+0x1c>
 800c536:	2300      	movs	r3, #0
 800c538:	f100 0114 	add.w	r1, r0, #20
 800c53c:	f100 0210 	add.w	r2, r0, #16
 800c540:	4618      	mov	r0, r3
 800c542:	4553      	cmp	r3, sl
 800c544:	db37      	blt.n	800c5b6 <__lshift+0xbe>
 800c546:	6920      	ldr	r0, [r4, #16]
 800c548:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c54c:	f104 0314 	add.w	r3, r4, #20
 800c550:	f019 091f 	ands.w	r9, r9, #31
 800c554:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c558:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c55c:	d02f      	beq.n	800c5be <__lshift+0xc6>
 800c55e:	f1c9 0e20 	rsb	lr, r9, #32
 800c562:	468a      	mov	sl, r1
 800c564:	f04f 0c00 	mov.w	ip, #0
 800c568:	681a      	ldr	r2, [r3, #0]
 800c56a:	fa02 f209 	lsl.w	r2, r2, r9
 800c56e:	ea42 020c 	orr.w	r2, r2, ip
 800c572:	f84a 2b04 	str.w	r2, [sl], #4
 800c576:	f853 2b04 	ldr.w	r2, [r3], #4
 800c57a:	4298      	cmp	r0, r3
 800c57c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c580:	d8f2      	bhi.n	800c568 <__lshift+0x70>
 800c582:	1b03      	subs	r3, r0, r4
 800c584:	3b15      	subs	r3, #21
 800c586:	f023 0303 	bic.w	r3, r3, #3
 800c58a:	3304      	adds	r3, #4
 800c58c:	f104 0215 	add.w	r2, r4, #21
 800c590:	4290      	cmp	r0, r2
 800c592:	bf38      	it	cc
 800c594:	2304      	movcc	r3, #4
 800c596:	f841 c003 	str.w	ip, [r1, r3]
 800c59a:	f1bc 0f00 	cmp.w	ip, #0
 800c59e:	d001      	beq.n	800c5a4 <__lshift+0xac>
 800c5a0:	f108 0602 	add.w	r6, r8, #2
 800c5a4:	3e01      	subs	r6, #1
 800c5a6:	4638      	mov	r0, r7
 800c5a8:	612e      	str	r6, [r5, #16]
 800c5aa:	4621      	mov	r1, r4
 800c5ac:	f7ff fdd2 	bl	800c154 <_Bfree>
 800c5b0:	4628      	mov	r0, r5
 800c5b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c5ba:	3301      	adds	r3, #1
 800c5bc:	e7c1      	b.n	800c542 <__lshift+0x4a>
 800c5be:	3904      	subs	r1, #4
 800c5c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c5c8:	4298      	cmp	r0, r3
 800c5ca:	d8f9      	bhi.n	800c5c0 <__lshift+0xc8>
 800c5cc:	e7ea      	b.n	800c5a4 <__lshift+0xac>
 800c5ce:	bf00      	nop
 800c5d0:	0800e483 	.word	0x0800e483
 800c5d4:	0800e494 	.word	0x0800e494

0800c5d8 <__mcmp>:
 800c5d8:	b530      	push	{r4, r5, lr}
 800c5da:	6902      	ldr	r2, [r0, #16]
 800c5dc:	690c      	ldr	r4, [r1, #16]
 800c5de:	1b12      	subs	r2, r2, r4
 800c5e0:	d10e      	bne.n	800c600 <__mcmp+0x28>
 800c5e2:	f100 0314 	add.w	r3, r0, #20
 800c5e6:	3114      	adds	r1, #20
 800c5e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c5ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c5f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c5f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c5f8:	42a5      	cmp	r5, r4
 800c5fa:	d003      	beq.n	800c604 <__mcmp+0x2c>
 800c5fc:	d305      	bcc.n	800c60a <__mcmp+0x32>
 800c5fe:	2201      	movs	r2, #1
 800c600:	4610      	mov	r0, r2
 800c602:	bd30      	pop	{r4, r5, pc}
 800c604:	4283      	cmp	r3, r0
 800c606:	d3f3      	bcc.n	800c5f0 <__mcmp+0x18>
 800c608:	e7fa      	b.n	800c600 <__mcmp+0x28>
 800c60a:	f04f 32ff 	mov.w	r2, #4294967295
 800c60e:	e7f7      	b.n	800c600 <__mcmp+0x28>

0800c610 <__mdiff>:
 800c610:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c614:	460c      	mov	r4, r1
 800c616:	4606      	mov	r6, r0
 800c618:	4611      	mov	r1, r2
 800c61a:	4620      	mov	r0, r4
 800c61c:	4690      	mov	r8, r2
 800c61e:	f7ff ffdb 	bl	800c5d8 <__mcmp>
 800c622:	1e05      	subs	r5, r0, #0
 800c624:	d110      	bne.n	800c648 <__mdiff+0x38>
 800c626:	4629      	mov	r1, r5
 800c628:	4630      	mov	r0, r6
 800c62a:	f7ff fd53 	bl	800c0d4 <_Balloc>
 800c62e:	b930      	cbnz	r0, 800c63e <__mdiff+0x2e>
 800c630:	4b3a      	ldr	r3, [pc, #232]	; (800c71c <__mdiff+0x10c>)
 800c632:	4602      	mov	r2, r0
 800c634:	f240 2132 	movw	r1, #562	; 0x232
 800c638:	4839      	ldr	r0, [pc, #228]	; (800c720 <__mdiff+0x110>)
 800c63a:	f000 fb31 	bl	800cca0 <__assert_func>
 800c63e:	2301      	movs	r3, #1
 800c640:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c644:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c648:	bfa4      	itt	ge
 800c64a:	4643      	movge	r3, r8
 800c64c:	46a0      	movge	r8, r4
 800c64e:	4630      	mov	r0, r6
 800c650:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c654:	bfa6      	itte	ge
 800c656:	461c      	movge	r4, r3
 800c658:	2500      	movge	r5, #0
 800c65a:	2501      	movlt	r5, #1
 800c65c:	f7ff fd3a 	bl	800c0d4 <_Balloc>
 800c660:	b920      	cbnz	r0, 800c66c <__mdiff+0x5c>
 800c662:	4b2e      	ldr	r3, [pc, #184]	; (800c71c <__mdiff+0x10c>)
 800c664:	4602      	mov	r2, r0
 800c666:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c66a:	e7e5      	b.n	800c638 <__mdiff+0x28>
 800c66c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c670:	6926      	ldr	r6, [r4, #16]
 800c672:	60c5      	str	r5, [r0, #12]
 800c674:	f104 0914 	add.w	r9, r4, #20
 800c678:	f108 0514 	add.w	r5, r8, #20
 800c67c:	f100 0e14 	add.w	lr, r0, #20
 800c680:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c684:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c688:	f108 0210 	add.w	r2, r8, #16
 800c68c:	46f2      	mov	sl, lr
 800c68e:	2100      	movs	r1, #0
 800c690:	f859 3b04 	ldr.w	r3, [r9], #4
 800c694:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c698:	fa1f f883 	uxth.w	r8, r3
 800c69c:	fa11 f18b 	uxtah	r1, r1, fp
 800c6a0:	0c1b      	lsrs	r3, r3, #16
 800c6a2:	eba1 0808 	sub.w	r8, r1, r8
 800c6a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c6aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c6ae:	fa1f f888 	uxth.w	r8, r8
 800c6b2:	1419      	asrs	r1, r3, #16
 800c6b4:	454e      	cmp	r6, r9
 800c6b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c6ba:	f84a 3b04 	str.w	r3, [sl], #4
 800c6be:	d8e7      	bhi.n	800c690 <__mdiff+0x80>
 800c6c0:	1b33      	subs	r3, r6, r4
 800c6c2:	3b15      	subs	r3, #21
 800c6c4:	f023 0303 	bic.w	r3, r3, #3
 800c6c8:	3304      	adds	r3, #4
 800c6ca:	3415      	adds	r4, #21
 800c6cc:	42a6      	cmp	r6, r4
 800c6ce:	bf38      	it	cc
 800c6d0:	2304      	movcc	r3, #4
 800c6d2:	441d      	add	r5, r3
 800c6d4:	4473      	add	r3, lr
 800c6d6:	469e      	mov	lr, r3
 800c6d8:	462e      	mov	r6, r5
 800c6da:	4566      	cmp	r6, ip
 800c6dc:	d30e      	bcc.n	800c6fc <__mdiff+0xec>
 800c6de:	f10c 0203 	add.w	r2, ip, #3
 800c6e2:	1b52      	subs	r2, r2, r5
 800c6e4:	f022 0203 	bic.w	r2, r2, #3
 800c6e8:	3d03      	subs	r5, #3
 800c6ea:	45ac      	cmp	ip, r5
 800c6ec:	bf38      	it	cc
 800c6ee:	2200      	movcc	r2, #0
 800c6f0:	441a      	add	r2, r3
 800c6f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c6f6:	b17b      	cbz	r3, 800c718 <__mdiff+0x108>
 800c6f8:	6107      	str	r7, [r0, #16]
 800c6fa:	e7a3      	b.n	800c644 <__mdiff+0x34>
 800c6fc:	f856 8b04 	ldr.w	r8, [r6], #4
 800c700:	fa11 f288 	uxtah	r2, r1, r8
 800c704:	1414      	asrs	r4, r2, #16
 800c706:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c70a:	b292      	uxth	r2, r2
 800c70c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c710:	f84e 2b04 	str.w	r2, [lr], #4
 800c714:	1421      	asrs	r1, r4, #16
 800c716:	e7e0      	b.n	800c6da <__mdiff+0xca>
 800c718:	3f01      	subs	r7, #1
 800c71a:	e7ea      	b.n	800c6f2 <__mdiff+0xe2>
 800c71c:	0800e483 	.word	0x0800e483
 800c720:	0800e494 	.word	0x0800e494

0800c724 <__d2b>:
 800c724:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c728:	4689      	mov	r9, r1
 800c72a:	2101      	movs	r1, #1
 800c72c:	ec57 6b10 	vmov	r6, r7, d0
 800c730:	4690      	mov	r8, r2
 800c732:	f7ff fccf 	bl	800c0d4 <_Balloc>
 800c736:	4604      	mov	r4, r0
 800c738:	b930      	cbnz	r0, 800c748 <__d2b+0x24>
 800c73a:	4602      	mov	r2, r0
 800c73c:	4b25      	ldr	r3, [pc, #148]	; (800c7d4 <__d2b+0xb0>)
 800c73e:	4826      	ldr	r0, [pc, #152]	; (800c7d8 <__d2b+0xb4>)
 800c740:	f240 310a 	movw	r1, #778	; 0x30a
 800c744:	f000 faac 	bl	800cca0 <__assert_func>
 800c748:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c74c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c750:	bb35      	cbnz	r5, 800c7a0 <__d2b+0x7c>
 800c752:	2e00      	cmp	r6, #0
 800c754:	9301      	str	r3, [sp, #4]
 800c756:	d028      	beq.n	800c7aa <__d2b+0x86>
 800c758:	4668      	mov	r0, sp
 800c75a:	9600      	str	r6, [sp, #0]
 800c75c:	f7ff fd82 	bl	800c264 <__lo0bits>
 800c760:	9900      	ldr	r1, [sp, #0]
 800c762:	b300      	cbz	r0, 800c7a6 <__d2b+0x82>
 800c764:	9a01      	ldr	r2, [sp, #4]
 800c766:	f1c0 0320 	rsb	r3, r0, #32
 800c76a:	fa02 f303 	lsl.w	r3, r2, r3
 800c76e:	430b      	orrs	r3, r1
 800c770:	40c2      	lsrs	r2, r0
 800c772:	6163      	str	r3, [r4, #20]
 800c774:	9201      	str	r2, [sp, #4]
 800c776:	9b01      	ldr	r3, [sp, #4]
 800c778:	61a3      	str	r3, [r4, #24]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	bf14      	ite	ne
 800c77e:	2202      	movne	r2, #2
 800c780:	2201      	moveq	r2, #1
 800c782:	6122      	str	r2, [r4, #16]
 800c784:	b1d5      	cbz	r5, 800c7bc <__d2b+0x98>
 800c786:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c78a:	4405      	add	r5, r0
 800c78c:	f8c9 5000 	str.w	r5, [r9]
 800c790:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c794:	f8c8 0000 	str.w	r0, [r8]
 800c798:	4620      	mov	r0, r4
 800c79a:	b003      	add	sp, #12
 800c79c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c7a4:	e7d5      	b.n	800c752 <__d2b+0x2e>
 800c7a6:	6161      	str	r1, [r4, #20]
 800c7a8:	e7e5      	b.n	800c776 <__d2b+0x52>
 800c7aa:	a801      	add	r0, sp, #4
 800c7ac:	f7ff fd5a 	bl	800c264 <__lo0bits>
 800c7b0:	9b01      	ldr	r3, [sp, #4]
 800c7b2:	6163      	str	r3, [r4, #20]
 800c7b4:	2201      	movs	r2, #1
 800c7b6:	6122      	str	r2, [r4, #16]
 800c7b8:	3020      	adds	r0, #32
 800c7ba:	e7e3      	b.n	800c784 <__d2b+0x60>
 800c7bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c7c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c7c4:	f8c9 0000 	str.w	r0, [r9]
 800c7c8:	6918      	ldr	r0, [r3, #16]
 800c7ca:	f7ff fd2b 	bl	800c224 <__hi0bits>
 800c7ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c7d2:	e7df      	b.n	800c794 <__d2b+0x70>
 800c7d4:	0800e483 	.word	0x0800e483
 800c7d8:	0800e494 	.word	0x0800e494

0800c7dc <_calloc_r>:
 800c7dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c7de:	fba1 2402 	umull	r2, r4, r1, r2
 800c7e2:	b94c      	cbnz	r4, 800c7f8 <_calloc_r+0x1c>
 800c7e4:	4611      	mov	r1, r2
 800c7e6:	9201      	str	r2, [sp, #4]
 800c7e8:	f000 f87a 	bl	800c8e0 <_malloc_r>
 800c7ec:	9a01      	ldr	r2, [sp, #4]
 800c7ee:	4605      	mov	r5, r0
 800c7f0:	b930      	cbnz	r0, 800c800 <_calloc_r+0x24>
 800c7f2:	4628      	mov	r0, r5
 800c7f4:	b003      	add	sp, #12
 800c7f6:	bd30      	pop	{r4, r5, pc}
 800c7f8:	220c      	movs	r2, #12
 800c7fa:	6002      	str	r2, [r0, #0]
 800c7fc:	2500      	movs	r5, #0
 800c7fe:	e7f8      	b.n	800c7f2 <_calloc_r+0x16>
 800c800:	4621      	mov	r1, r4
 800c802:	f7fe f94f 	bl	800aaa4 <memset>
 800c806:	e7f4      	b.n	800c7f2 <_calloc_r+0x16>

0800c808 <_free_r>:
 800c808:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c80a:	2900      	cmp	r1, #0
 800c80c:	d044      	beq.n	800c898 <_free_r+0x90>
 800c80e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c812:	9001      	str	r0, [sp, #4]
 800c814:	2b00      	cmp	r3, #0
 800c816:	f1a1 0404 	sub.w	r4, r1, #4
 800c81a:	bfb8      	it	lt
 800c81c:	18e4      	addlt	r4, r4, r3
 800c81e:	f000 fa9b 	bl	800cd58 <__malloc_lock>
 800c822:	4a1e      	ldr	r2, [pc, #120]	; (800c89c <_free_r+0x94>)
 800c824:	9801      	ldr	r0, [sp, #4]
 800c826:	6813      	ldr	r3, [r2, #0]
 800c828:	b933      	cbnz	r3, 800c838 <_free_r+0x30>
 800c82a:	6063      	str	r3, [r4, #4]
 800c82c:	6014      	str	r4, [r2, #0]
 800c82e:	b003      	add	sp, #12
 800c830:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c834:	f000 ba96 	b.w	800cd64 <__malloc_unlock>
 800c838:	42a3      	cmp	r3, r4
 800c83a:	d908      	bls.n	800c84e <_free_r+0x46>
 800c83c:	6825      	ldr	r5, [r4, #0]
 800c83e:	1961      	adds	r1, r4, r5
 800c840:	428b      	cmp	r3, r1
 800c842:	bf01      	itttt	eq
 800c844:	6819      	ldreq	r1, [r3, #0]
 800c846:	685b      	ldreq	r3, [r3, #4]
 800c848:	1949      	addeq	r1, r1, r5
 800c84a:	6021      	streq	r1, [r4, #0]
 800c84c:	e7ed      	b.n	800c82a <_free_r+0x22>
 800c84e:	461a      	mov	r2, r3
 800c850:	685b      	ldr	r3, [r3, #4]
 800c852:	b10b      	cbz	r3, 800c858 <_free_r+0x50>
 800c854:	42a3      	cmp	r3, r4
 800c856:	d9fa      	bls.n	800c84e <_free_r+0x46>
 800c858:	6811      	ldr	r1, [r2, #0]
 800c85a:	1855      	adds	r5, r2, r1
 800c85c:	42a5      	cmp	r5, r4
 800c85e:	d10b      	bne.n	800c878 <_free_r+0x70>
 800c860:	6824      	ldr	r4, [r4, #0]
 800c862:	4421      	add	r1, r4
 800c864:	1854      	adds	r4, r2, r1
 800c866:	42a3      	cmp	r3, r4
 800c868:	6011      	str	r1, [r2, #0]
 800c86a:	d1e0      	bne.n	800c82e <_free_r+0x26>
 800c86c:	681c      	ldr	r4, [r3, #0]
 800c86e:	685b      	ldr	r3, [r3, #4]
 800c870:	6053      	str	r3, [r2, #4]
 800c872:	4421      	add	r1, r4
 800c874:	6011      	str	r1, [r2, #0]
 800c876:	e7da      	b.n	800c82e <_free_r+0x26>
 800c878:	d902      	bls.n	800c880 <_free_r+0x78>
 800c87a:	230c      	movs	r3, #12
 800c87c:	6003      	str	r3, [r0, #0]
 800c87e:	e7d6      	b.n	800c82e <_free_r+0x26>
 800c880:	6825      	ldr	r5, [r4, #0]
 800c882:	1961      	adds	r1, r4, r5
 800c884:	428b      	cmp	r3, r1
 800c886:	bf04      	itt	eq
 800c888:	6819      	ldreq	r1, [r3, #0]
 800c88a:	685b      	ldreq	r3, [r3, #4]
 800c88c:	6063      	str	r3, [r4, #4]
 800c88e:	bf04      	itt	eq
 800c890:	1949      	addeq	r1, r1, r5
 800c892:	6021      	streq	r1, [r4, #0]
 800c894:	6054      	str	r4, [r2, #4]
 800c896:	e7ca      	b.n	800c82e <_free_r+0x26>
 800c898:	b003      	add	sp, #12
 800c89a:	bd30      	pop	{r4, r5, pc}
 800c89c:	20003854 	.word	0x20003854

0800c8a0 <sbrk_aligned>:
 800c8a0:	b570      	push	{r4, r5, r6, lr}
 800c8a2:	4e0e      	ldr	r6, [pc, #56]	; (800c8dc <sbrk_aligned+0x3c>)
 800c8a4:	460c      	mov	r4, r1
 800c8a6:	6831      	ldr	r1, [r6, #0]
 800c8a8:	4605      	mov	r5, r0
 800c8aa:	b911      	cbnz	r1, 800c8b2 <sbrk_aligned+0x12>
 800c8ac:	f000 f9e8 	bl	800cc80 <_sbrk_r>
 800c8b0:	6030      	str	r0, [r6, #0]
 800c8b2:	4621      	mov	r1, r4
 800c8b4:	4628      	mov	r0, r5
 800c8b6:	f000 f9e3 	bl	800cc80 <_sbrk_r>
 800c8ba:	1c43      	adds	r3, r0, #1
 800c8bc:	d00a      	beq.n	800c8d4 <sbrk_aligned+0x34>
 800c8be:	1cc4      	adds	r4, r0, #3
 800c8c0:	f024 0403 	bic.w	r4, r4, #3
 800c8c4:	42a0      	cmp	r0, r4
 800c8c6:	d007      	beq.n	800c8d8 <sbrk_aligned+0x38>
 800c8c8:	1a21      	subs	r1, r4, r0
 800c8ca:	4628      	mov	r0, r5
 800c8cc:	f000 f9d8 	bl	800cc80 <_sbrk_r>
 800c8d0:	3001      	adds	r0, #1
 800c8d2:	d101      	bne.n	800c8d8 <sbrk_aligned+0x38>
 800c8d4:	f04f 34ff 	mov.w	r4, #4294967295
 800c8d8:	4620      	mov	r0, r4
 800c8da:	bd70      	pop	{r4, r5, r6, pc}
 800c8dc:	20003858 	.word	0x20003858

0800c8e0 <_malloc_r>:
 800c8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8e4:	1ccd      	adds	r5, r1, #3
 800c8e6:	f025 0503 	bic.w	r5, r5, #3
 800c8ea:	3508      	adds	r5, #8
 800c8ec:	2d0c      	cmp	r5, #12
 800c8ee:	bf38      	it	cc
 800c8f0:	250c      	movcc	r5, #12
 800c8f2:	2d00      	cmp	r5, #0
 800c8f4:	4607      	mov	r7, r0
 800c8f6:	db01      	blt.n	800c8fc <_malloc_r+0x1c>
 800c8f8:	42a9      	cmp	r1, r5
 800c8fa:	d905      	bls.n	800c908 <_malloc_r+0x28>
 800c8fc:	230c      	movs	r3, #12
 800c8fe:	603b      	str	r3, [r7, #0]
 800c900:	2600      	movs	r6, #0
 800c902:	4630      	mov	r0, r6
 800c904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c908:	4e2e      	ldr	r6, [pc, #184]	; (800c9c4 <_malloc_r+0xe4>)
 800c90a:	f000 fa25 	bl	800cd58 <__malloc_lock>
 800c90e:	6833      	ldr	r3, [r6, #0]
 800c910:	461c      	mov	r4, r3
 800c912:	bb34      	cbnz	r4, 800c962 <_malloc_r+0x82>
 800c914:	4629      	mov	r1, r5
 800c916:	4638      	mov	r0, r7
 800c918:	f7ff ffc2 	bl	800c8a0 <sbrk_aligned>
 800c91c:	1c43      	adds	r3, r0, #1
 800c91e:	4604      	mov	r4, r0
 800c920:	d14d      	bne.n	800c9be <_malloc_r+0xde>
 800c922:	6834      	ldr	r4, [r6, #0]
 800c924:	4626      	mov	r6, r4
 800c926:	2e00      	cmp	r6, #0
 800c928:	d140      	bne.n	800c9ac <_malloc_r+0xcc>
 800c92a:	6823      	ldr	r3, [r4, #0]
 800c92c:	4631      	mov	r1, r6
 800c92e:	4638      	mov	r0, r7
 800c930:	eb04 0803 	add.w	r8, r4, r3
 800c934:	f000 f9a4 	bl	800cc80 <_sbrk_r>
 800c938:	4580      	cmp	r8, r0
 800c93a:	d13a      	bne.n	800c9b2 <_malloc_r+0xd2>
 800c93c:	6821      	ldr	r1, [r4, #0]
 800c93e:	3503      	adds	r5, #3
 800c940:	1a6d      	subs	r5, r5, r1
 800c942:	f025 0503 	bic.w	r5, r5, #3
 800c946:	3508      	adds	r5, #8
 800c948:	2d0c      	cmp	r5, #12
 800c94a:	bf38      	it	cc
 800c94c:	250c      	movcc	r5, #12
 800c94e:	4629      	mov	r1, r5
 800c950:	4638      	mov	r0, r7
 800c952:	f7ff ffa5 	bl	800c8a0 <sbrk_aligned>
 800c956:	3001      	adds	r0, #1
 800c958:	d02b      	beq.n	800c9b2 <_malloc_r+0xd2>
 800c95a:	6823      	ldr	r3, [r4, #0]
 800c95c:	442b      	add	r3, r5
 800c95e:	6023      	str	r3, [r4, #0]
 800c960:	e00e      	b.n	800c980 <_malloc_r+0xa0>
 800c962:	6822      	ldr	r2, [r4, #0]
 800c964:	1b52      	subs	r2, r2, r5
 800c966:	d41e      	bmi.n	800c9a6 <_malloc_r+0xc6>
 800c968:	2a0b      	cmp	r2, #11
 800c96a:	d916      	bls.n	800c99a <_malloc_r+0xba>
 800c96c:	1961      	adds	r1, r4, r5
 800c96e:	42a3      	cmp	r3, r4
 800c970:	6025      	str	r5, [r4, #0]
 800c972:	bf18      	it	ne
 800c974:	6059      	strne	r1, [r3, #4]
 800c976:	6863      	ldr	r3, [r4, #4]
 800c978:	bf08      	it	eq
 800c97a:	6031      	streq	r1, [r6, #0]
 800c97c:	5162      	str	r2, [r4, r5]
 800c97e:	604b      	str	r3, [r1, #4]
 800c980:	4638      	mov	r0, r7
 800c982:	f104 060b 	add.w	r6, r4, #11
 800c986:	f000 f9ed 	bl	800cd64 <__malloc_unlock>
 800c98a:	f026 0607 	bic.w	r6, r6, #7
 800c98e:	1d23      	adds	r3, r4, #4
 800c990:	1af2      	subs	r2, r6, r3
 800c992:	d0b6      	beq.n	800c902 <_malloc_r+0x22>
 800c994:	1b9b      	subs	r3, r3, r6
 800c996:	50a3      	str	r3, [r4, r2]
 800c998:	e7b3      	b.n	800c902 <_malloc_r+0x22>
 800c99a:	6862      	ldr	r2, [r4, #4]
 800c99c:	42a3      	cmp	r3, r4
 800c99e:	bf0c      	ite	eq
 800c9a0:	6032      	streq	r2, [r6, #0]
 800c9a2:	605a      	strne	r2, [r3, #4]
 800c9a4:	e7ec      	b.n	800c980 <_malloc_r+0xa0>
 800c9a6:	4623      	mov	r3, r4
 800c9a8:	6864      	ldr	r4, [r4, #4]
 800c9aa:	e7b2      	b.n	800c912 <_malloc_r+0x32>
 800c9ac:	4634      	mov	r4, r6
 800c9ae:	6876      	ldr	r6, [r6, #4]
 800c9b0:	e7b9      	b.n	800c926 <_malloc_r+0x46>
 800c9b2:	230c      	movs	r3, #12
 800c9b4:	603b      	str	r3, [r7, #0]
 800c9b6:	4638      	mov	r0, r7
 800c9b8:	f000 f9d4 	bl	800cd64 <__malloc_unlock>
 800c9bc:	e7a1      	b.n	800c902 <_malloc_r+0x22>
 800c9be:	6025      	str	r5, [r4, #0]
 800c9c0:	e7de      	b.n	800c980 <_malloc_r+0xa0>
 800c9c2:	bf00      	nop
 800c9c4:	20003854 	.word	0x20003854

0800c9c8 <__ssputs_r>:
 800c9c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9cc:	688e      	ldr	r6, [r1, #8]
 800c9ce:	429e      	cmp	r6, r3
 800c9d0:	4682      	mov	sl, r0
 800c9d2:	460c      	mov	r4, r1
 800c9d4:	4690      	mov	r8, r2
 800c9d6:	461f      	mov	r7, r3
 800c9d8:	d838      	bhi.n	800ca4c <__ssputs_r+0x84>
 800c9da:	898a      	ldrh	r2, [r1, #12]
 800c9dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c9e0:	d032      	beq.n	800ca48 <__ssputs_r+0x80>
 800c9e2:	6825      	ldr	r5, [r4, #0]
 800c9e4:	6909      	ldr	r1, [r1, #16]
 800c9e6:	eba5 0901 	sub.w	r9, r5, r1
 800c9ea:	6965      	ldr	r5, [r4, #20]
 800c9ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c9f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c9f4:	3301      	adds	r3, #1
 800c9f6:	444b      	add	r3, r9
 800c9f8:	106d      	asrs	r5, r5, #1
 800c9fa:	429d      	cmp	r5, r3
 800c9fc:	bf38      	it	cc
 800c9fe:	461d      	movcc	r5, r3
 800ca00:	0553      	lsls	r3, r2, #21
 800ca02:	d531      	bpl.n	800ca68 <__ssputs_r+0xa0>
 800ca04:	4629      	mov	r1, r5
 800ca06:	f7ff ff6b 	bl	800c8e0 <_malloc_r>
 800ca0a:	4606      	mov	r6, r0
 800ca0c:	b950      	cbnz	r0, 800ca24 <__ssputs_r+0x5c>
 800ca0e:	230c      	movs	r3, #12
 800ca10:	f8ca 3000 	str.w	r3, [sl]
 800ca14:	89a3      	ldrh	r3, [r4, #12]
 800ca16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca1a:	81a3      	strh	r3, [r4, #12]
 800ca1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca24:	6921      	ldr	r1, [r4, #16]
 800ca26:	464a      	mov	r2, r9
 800ca28:	f7fe f82e 	bl	800aa88 <memcpy>
 800ca2c:	89a3      	ldrh	r3, [r4, #12]
 800ca2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ca32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca36:	81a3      	strh	r3, [r4, #12]
 800ca38:	6126      	str	r6, [r4, #16]
 800ca3a:	6165      	str	r5, [r4, #20]
 800ca3c:	444e      	add	r6, r9
 800ca3e:	eba5 0509 	sub.w	r5, r5, r9
 800ca42:	6026      	str	r6, [r4, #0]
 800ca44:	60a5      	str	r5, [r4, #8]
 800ca46:	463e      	mov	r6, r7
 800ca48:	42be      	cmp	r6, r7
 800ca4a:	d900      	bls.n	800ca4e <__ssputs_r+0x86>
 800ca4c:	463e      	mov	r6, r7
 800ca4e:	6820      	ldr	r0, [r4, #0]
 800ca50:	4632      	mov	r2, r6
 800ca52:	4641      	mov	r1, r8
 800ca54:	f000 f966 	bl	800cd24 <memmove>
 800ca58:	68a3      	ldr	r3, [r4, #8]
 800ca5a:	1b9b      	subs	r3, r3, r6
 800ca5c:	60a3      	str	r3, [r4, #8]
 800ca5e:	6823      	ldr	r3, [r4, #0]
 800ca60:	4433      	add	r3, r6
 800ca62:	6023      	str	r3, [r4, #0]
 800ca64:	2000      	movs	r0, #0
 800ca66:	e7db      	b.n	800ca20 <__ssputs_r+0x58>
 800ca68:	462a      	mov	r2, r5
 800ca6a:	f000 f981 	bl	800cd70 <_realloc_r>
 800ca6e:	4606      	mov	r6, r0
 800ca70:	2800      	cmp	r0, #0
 800ca72:	d1e1      	bne.n	800ca38 <__ssputs_r+0x70>
 800ca74:	6921      	ldr	r1, [r4, #16]
 800ca76:	4650      	mov	r0, sl
 800ca78:	f7ff fec6 	bl	800c808 <_free_r>
 800ca7c:	e7c7      	b.n	800ca0e <__ssputs_r+0x46>
	...

0800ca80 <_svfiprintf_r>:
 800ca80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca84:	4698      	mov	r8, r3
 800ca86:	898b      	ldrh	r3, [r1, #12]
 800ca88:	061b      	lsls	r3, r3, #24
 800ca8a:	b09d      	sub	sp, #116	; 0x74
 800ca8c:	4607      	mov	r7, r0
 800ca8e:	460d      	mov	r5, r1
 800ca90:	4614      	mov	r4, r2
 800ca92:	d50e      	bpl.n	800cab2 <_svfiprintf_r+0x32>
 800ca94:	690b      	ldr	r3, [r1, #16]
 800ca96:	b963      	cbnz	r3, 800cab2 <_svfiprintf_r+0x32>
 800ca98:	2140      	movs	r1, #64	; 0x40
 800ca9a:	f7ff ff21 	bl	800c8e0 <_malloc_r>
 800ca9e:	6028      	str	r0, [r5, #0]
 800caa0:	6128      	str	r0, [r5, #16]
 800caa2:	b920      	cbnz	r0, 800caae <_svfiprintf_r+0x2e>
 800caa4:	230c      	movs	r3, #12
 800caa6:	603b      	str	r3, [r7, #0]
 800caa8:	f04f 30ff 	mov.w	r0, #4294967295
 800caac:	e0d1      	b.n	800cc52 <_svfiprintf_r+0x1d2>
 800caae:	2340      	movs	r3, #64	; 0x40
 800cab0:	616b      	str	r3, [r5, #20]
 800cab2:	2300      	movs	r3, #0
 800cab4:	9309      	str	r3, [sp, #36]	; 0x24
 800cab6:	2320      	movs	r3, #32
 800cab8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cabc:	f8cd 800c 	str.w	r8, [sp, #12]
 800cac0:	2330      	movs	r3, #48	; 0x30
 800cac2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cc6c <_svfiprintf_r+0x1ec>
 800cac6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800caca:	f04f 0901 	mov.w	r9, #1
 800cace:	4623      	mov	r3, r4
 800cad0:	469a      	mov	sl, r3
 800cad2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cad6:	b10a      	cbz	r2, 800cadc <_svfiprintf_r+0x5c>
 800cad8:	2a25      	cmp	r2, #37	; 0x25
 800cada:	d1f9      	bne.n	800cad0 <_svfiprintf_r+0x50>
 800cadc:	ebba 0b04 	subs.w	fp, sl, r4
 800cae0:	d00b      	beq.n	800cafa <_svfiprintf_r+0x7a>
 800cae2:	465b      	mov	r3, fp
 800cae4:	4622      	mov	r2, r4
 800cae6:	4629      	mov	r1, r5
 800cae8:	4638      	mov	r0, r7
 800caea:	f7ff ff6d 	bl	800c9c8 <__ssputs_r>
 800caee:	3001      	adds	r0, #1
 800caf0:	f000 80aa 	beq.w	800cc48 <_svfiprintf_r+0x1c8>
 800caf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800caf6:	445a      	add	r2, fp
 800caf8:	9209      	str	r2, [sp, #36]	; 0x24
 800cafa:	f89a 3000 	ldrb.w	r3, [sl]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	f000 80a2 	beq.w	800cc48 <_svfiprintf_r+0x1c8>
 800cb04:	2300      	movs	r3, #0
 800cb06:	f04f 32ff 	mov.w	r2, #4294967295
 800cb0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb0e:	f10a 0a01 	add.w	sl, sl, #1
 800cb12:	9304      	str	r3, [sp, #16]
 800cb14:	9307      	str	r3, [sp, #28]
 800cb16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb1a:	931a      	str	r3, [sp, #104]	; 0x68
 800cb1c:	4654      	mov	r4, sl
 800cb1e:	2205      	movs	r2, #5
 800cb20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb24:	4851      	ldr	r0, [pc, #324]	; (800cc6c <_svfiprintf_r+0x1ec>)
 800cb26:	f7f3 fb7b 	bl	8000220 <memchr>
 800cb2a:	9a04      	ldr	r2, [sp, #16]
 800cb2c:	b9d8      	cbnz	r0, 800cb66 <_svfiprintf_r+0xe6>
 800cb2e:	06d0      	lsls	r0, r2, #27
 800cb30:	bf44      	itt	mi
 800cb32:	2320      	movmi	r3, #32
 800cb34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb38:	0711      	lsls	r1, r2, #28
 800cb3a:	bf44      	itt	mi
 800cb3c:	232b      	movmi	r3, #43	; 0x2b
 800cb3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb42:	f89a 3000 	ldrb.w	r3, [sl]
 800cb46:	2b2a      	cmp	r3, #42	; 0x2a
 800cb48:	d015      	beq.n	800cb76 <_svfiprintf_r+0xf6>
 800cb4a:	9a07      	ldr	r2, [sp, #28]
 800cb4c:	4654      	mov	r4, sl
 800cb4e:	2000      	movs	r0, #0
 800cb50:	f04f 0c0a 	mov.w	ip, #10
 800cb54:	4621      	mov	r1, r4
 800cb56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb5a:	3b30      	subs	r3, #48	; 0x30
 800cb5c:	2b09      	cmp	r3, #9
 800cb5e:	d94e      	bls.n	800cbfe <_svfiprintf_r+0x17e>
 800cb60:	b1b0      	cbz	r0, 800cb90 <_svfiprintf_r+0x110>
 800cb62:	9207      	str	r2, [sp, #28]
 800cb64:	e014      	b.n	800cb90 <_svfiprintf_r+0x110>
 800cb66:	eba0 0308 	sub.w	r3, r0, r8
 800cb6a:	fa09 f303 	lsl.w	r3, r9, r3
 800cb6e:	4313      	orrs	r3, r2
 800cb70:	9304      	str	r3, [sp, #16]
 800cb72:	46a2      	mov	sl, r4
 800cb74:	e7d2      	b.n	800cb1c <_svfiprintf_r+0x9c>
 800cb76:	9b03      	ldr	r3, [sp, #12]
 800cb78:	1d19      	adds	r1, r3, #4
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	9103      	str	r1, [sp, #12]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	bfbb      	ittet	lt
 800cb82:	425b      	neglt	r3, r3
 800cb84:	f042 0202 	orrlt.w	r2, r2, #2
 800cb88:	9307      	strge	r3, [sp, #28]
 800cb8a:	9307      	strlt	r3, [sp, #28]
 800cb8c:	bfb8      	it	lt
 800cb8e:	9204      	strlt	r2, [sp, #16]
 800cb90:	7823      	ldrb	r3, [r4, #0]
 800cb92:	2b2e      	cmp	r3, #46	; 0x2e
 800cb94:	d10c      	bne.n	800cbb0 <_svfiprintf_r+0x130>
 800cb96:	7863      	ldrb	r3, [r4, #1]
 800cb98:	2b2a      	cmp	r3, #42	; 0x2a
 800cb9a:	d135      	bne.n	800cc08 <_svfiprintf_r+0x188>
 800cb9c:	9b03      	ldr	r3, [sp, #12]
 800cb9e:	1d1a      	adds	r2, r3, #4
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	9203      	str	r2, [sp, #12]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	bfb8      	it	lt
 800cba8:	f04f 33ff 	movlt.w	r3, #4294967295
 800cbac:	3402      	adds	r4, #2
 800cbae:	9305      	str	r3, [sp, #20]
 800cbb0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cc7c <_svfiprintf_r+0x1fc>
 800cbb4:	7821      	ldrb	r1, [r4, #0]
 800cbb6:	2203      	movs	r2, #3
 800cbb8:	4650      	mov	r0, sl
 800cbba:	f7f3 fb31 	bl	8000220 <memchr>
 800cbbe:	b140      	cbz	r0, 800cbd2 <_svfiprintf_r+0x152>
 800cbc0:	2340      	movs	r3, #64	; 0x40
 800cbc2:	eba0 000a 	sub.w	r0, r0, sl
 800cbc6:	fa03 f000 	lsl.w	r0, r3, r0
 800cbca:	9b04      	ldr	r3, [sp, #16]
 800cbcc:	4303      	orrs	r3, r0
 800cbce:	3401      	adds	r4, #1
 800cbd0:	9304      	str	r3, [sp, #16]
 800cbd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbd6:	4826      	ldr	r0, [pc, #152]	; (800cc70 <_svfiprintf_r+0x1f0>)
 800cbd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cbdc:	2206      	movs	r2, #6
 800cbde:	f7f3 fb1f 	bl	8000220 <memchr>
 800cbe2:	2800      	cmp	r0, #0
 800cbe4:	d038      	beq.n	800cc58 <_svfiprintf_r+0x1d8>
 800cbe6:	4b23      	ldr	r3, [pc, #140]	; (800cc74 <_svfiprintf_r+0x1f4>)
 800cbe8:	bb1b      	cbnz	r3, 800cc32 <_svfiprintf_r+0x1b2>
 800cbea:	9b03      	ldr	r3, [sp, #12]
 800cbec:	3307      	adds	r3, #7
 800cbee:	f023 0307 	bic.w	r3, r3, #7
 800cbf2:	3308      	adds	r3, #8
 800cbf4:	9303      	str	r3, [sp, #12]
 800cbf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbf8:	4433      	add	r3, r6
 800cbfa:	9309      	str	r3, [sp, #36]	; 0x24
 800cbfc:	e767      	b.n	800cace <_svfiprintf_r+0x4e>
 800cbfe:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc02:	460c      	mov	r4, r1
 800cc04:	2001      	movs	r0, #1
 800cc06:	e7a5      	b.n	800cb54 <_svfiprintf_r+0xd4>
 800cc08:	2300      	movs	r3, #0
 800cc0a:	3401      	adds	r4, #1
 800cc0c:	9305      	str	r3, [sp, #20]
 800cc0e:	4619      	mov	r1, r3
 800cc10:	f04f 0c0a 	mov.w	ip, #10
 800cc14:	4620      	mov	r0, r4
 800cc16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc1a:	3a30      	subs	r2, #48	; 0x30
 800cc1c:	2a09      	cmp	r2, #9
 800cc1e:	d903      	bls.n	800cc28 <_svfiprintf_r+0x1a8>
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d0c5      	beq.n	800cbb0 <_svfiprintf_r+0x130>
 800cc24:	9105      	str	r1, [sp, #20]
 800cc26:	e7c3      	b.n	800cbb0 <_svfiprintf_r+0x130>
 800cc28:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc2c:	4604      	mov	r4, r0
 800cc2e:	2301      	movs	r3, #1
 800cc30:	e7f0      	b.n	800cc14 <_svfiprintf_r+0x194>
 800cc32:	ab03      	add	r3, sp, #12
 800cc34:	9300      	str	r3, [sp, #0]
 800cc36:	462a      	mov	r2, r5
 800cc38:	4b0f      	ldr	r3, [pc, #60]	; (800cc78 <_svfiprintf_r+0x1f8>)
 800cc3a:	a904      	add	r1, sp, #16
 800cc3c:	4638      	mov	r0, r7
 800cc3e:	f7fd ffd9 	bl	800abf4 <_printf_float>
 800cc42:	1c42      	adds	r2, r0, #1
 800cc44:	4606      	mov	r6, r0
 800cc46:	d1d6      	bne.n	800cbf6 <_svfiprintf_r+0x176>
 800cc48:	89ab      	ldrh	r3, [r5, #12]
 800cc4a:	065b      	lsls	r3, r3, #25
 800cc4c:	f53f af2c 	bmi.w	800caa8 <_svfiprintf_r+0x28>
 800cc50:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc52:	b01d      	add	sp, #116	; 0x74
 800cc54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc58:	ab03      	add	r3, sp, #12
 800cc5a:	9300      	str	r3, [sp, #0]
 800cc5c:	462a      	mov	r2, r5
 800cc5e:	4b06      	ldr	r3, [pc, #24]	; (800cc78 <_svfiprintf_r+0x1f8>)
 800cc60:	a904      	add	r1, sp, #16
 800cc62:	4638      	mov	r0, r7
 800cc64:	f7fe fa6a 	bl	800b13c <_printf_i>
 800cc68:	e7eb      	b.n	800cc42 <_svfiprintf_r+0x1c2>
 800cc6a:	bf00      	nop
 800cc6c:	0800e5ec 	.word	0x0800e5ec
 800cc70:	0800e5f6 	.word	0x0800e5f6
 800cc74:	0800abf5 	.word	0x0800abf5
 800cc78:	0800c9c9 	.word	0x0800c9c9
 800cc7c:	0800e5f2 	.word	0x0800e5f2

0800cc80 <_sbrk_r>:
 800cc80:	b538      	push	{r3, r4, r5, lr}
 800cc82:	4d06      	ldr	r5, [pc, #24]	; (800cc9c <_sbrk_r+0x1c>)
 800cc84:	2300      	movs	r3, #0
 800cc86:	4604      	mov	r4, r0
 800cc88:	4608      	mov	r0, r1
 800cc8a:	602b      	str	r3, [r5, #0]
 800cc8c:	f7f6 fe26 	bl	80038dc <_sbrk>
 800cc90:	1c43      	adds	r3, r0, #1
 800cc92:	d102      	bne.n	800cc9a <_sbrk_r+0x1a>
 800cc94:	682b      	ldr	r3, [r5, #0]
 800cc96:	b103      	cbz	r3, 800cc9a <_sbrk_r+0x1a>
 800cc98:	6023      	str	r3, [r4, #0]
 800cc9a:	bd38      	pop	{r3, r4, r5, pc}
 800cc9c:	2000385c 	.word	0x2000385c

0800cca0 <__assert_func>:
 800cca0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cca2:	4614      	mov	r4, r2
 800cca4:	461a      	mov	r2, r3
 800cca6:	4b09      	ldr	r3, [pc, #36]	; (800cccc <__assert_func+0x2c>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	4605      	mov	r5, r0
 800ccac:	68d8      	ldr	r0, [r3, #12]
 800ccae:	b14c      	cbz	r4, 800ccc4 <__assert_func+0x24>
 800ccb0:	4b07      	ldr	r3, [pc, #28]	; (800ccd0 <__assert_func+0x30>)
 800ccb2:	9100      	str	r1, [sp, #0]
 800ccb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ccb8:	4906      	ldr	r1, [pc, #24]	; (800ccd4 <__assert_func+0x34>)
 800ccba:	462b      	mov	r3, r5
 800ccbc:	f000 f80e 	bl	800ccdc <fiprintf>
 800ccc0:	f000 faac 	bl	800d21c <abort>
 800ccc4:	4b04      	ldr	r3, [pc, #16]	; (800ccd8 <__assert_func+0x38>)
 800ccc6:	461c      	mov	r4, r3
 800ccc8:	e7f3      	b.n	800ccb2 <__assert_func+0x12>
 800ccca:	bf00      	nop
 800cccc:	20000024 	.word	0x20000024
 800ccd0:	0800e5fd 	.word	0x0800e5fd
 800ccd4:	0800e60a 	.word	0x0800e60a
 800ccd8:	0800e638 	.word	0x0800e638

0800ccdc <fiprintf>:
 800ccdc:	b40e      	push	{r1, r2, r3}
 800ccde:	b503      	push	{r0, r1, lr}
 800cce0:	4601      	mov	r1, r0
 800cce2:	ab03      	add	r3, sp, #12
 800cce4:	4805      	ldr	r0, [pc, #20]	; (800ccfc <fiprintf+0x20>)
 800cce6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccea:	6800      	ldr	r0, [r0, #0]
 800ccec:	9301      	str	r3, [sp, #4]
 800ccee:	f000 f897 	bl	800ce20 <_vfiprintf_r>
 800ccf2:	b002      	add	sp, #8
 800ccf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ccf8:	b003      	add	sp, #12
 800ccfa:	4770      	bx	lr
 800ccfc:	20000024 	.word	0x20000024

0800cd00 <__ascii_mbtowc>:
 800cd00:	b082      	sub	sp, #8
 800cd02:	b901      	cbnz	r1, 800cd06 <__ascii_mbtowc+0x6>
 800cd04:	a901      	add	r1, sp, #4
 800cd06:	b142      	cbz	r2, 800cd1a <__ascii_mbtowc+0x1a>
 800cd08:	b14b      	cbz	r3, 800cd1e <__ascii_mbtowc+0x1e>
 800cd0a:	7813      	ldrb	r3, [r2, #0]
 800cd0c:	600b      	str	r3, [r1, #0]
 800cd0e:	7812      	ldrb	r2, [r2, #0]
 800cd10:	1e10      	subs	r0, r2, #0
 800cd12:	bf18      	it	ne
 800cd14:	2001      	movne	r0, #1
 800cd16:	b002      	add	sp, #8
 800cd18:	4770      	bx	lr
 800cd1a:	4610      	mov	r0, r2
 800cd1c:	e7fb      	b.n	800cd16 <__ascii_mbtowc+0x16>
 800cd1e:	f06f 0001 	mvn.w	r0, #1
 800cd22:	e7f8      	b.n	800cd16 <__ascii_mbtowc+0x16>

0800cd24 <memmove>:
 800cd24:	4288      	cmp	r0, r1
 800cd26:	b510      	push	{r4, lr}
 800cd28:	eb01 0402 	add.w	r4, r1, r2
 800cd2c:	d902      	bls.n	800cd34 <memmove+0x10>
 800cd2e:	4284      	cmp	r4, r0
 800cd30:	4623      	mov	r3, r4
 800cd32:	d807      	bhi.n	800cd44 <memmove+0x20>
 800cd34:	1e43      	subs	r3, r0, #1
 800cd36:	42a1      	cmp	r1, r4
 800cd38:	d008      	beq.n	800cd4c <memmove+0x28>
 800cd3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd42:	e7f8      	b.n	800cd36 <memmove+0x12>
 800cd44:	4402      	add	r2, r0
 800cd46:	4601      	mov	r1, r0
 800cd48:	428a      	cmp	r2, r1
 800cd4a:	d100      	bne.n	800cd4e <memmove+0x2a>
 800cd4c:	bd10      	pop	{r4, pc}
 800cd4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd56:	e7f7      	b.n	800cd48 <memmove+0x24>

0800cd58 <__malloc_lock>:
 800cd58:	4801      	ldr	r0, [pc, #4]	; (800cd60 <__malloc_lock+0x8>)
 800cd5a:	f000 bc1f 	b.w	800d59c <__retarget_lock_acquire_recursive>
 800cd5e:	bf00      	nop
 800cd60:	20003860 	.word	0x20003860

0800cd64 <__malloc_unlock>:
 800cd64:	4801      	ldr	r0, [pc, #4]	; (800cd6c <__malloc_unlock+0x8>)
 800cd66:	f000 bc1a 	b.w	800d59e <__retarget_lock_release_recursive>
 800cd6a:	bf00      	nop
 800cd6c:	20003860 	.word	0x20003860

0800cd70 <_realloc_r>:
 800cd70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd74:	4680      	mov	r8, r0
 800cd76:	4614      	mov	r4, r2
 800cd78:	460e      	mov	r6, r1
 800cd7a:	b921      	cbnz	r1, 800cd86 <_realloc_r+0x16>
 800cd7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd80:	4611      	mov	r1, r2
 800cd82:	f7ff bdad 	b.w	800c8e0 <_malloc_r>
 800cd86:	b92a      	cbnz	r2, 800cd94 <_realloc_r+0x24>
 800cd88:	f7ff fd3e 	bl	800c808 <_free_r>
 800cd8c:	4625      	mov	r5, r4
 800cd8e:	4628      	mov	r0, r5
 800cd90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd94:	f000 fc6a 	bl	800d66c <_malloc_usable_size_r>
 800cd98:	4284      	cmp	r4, r0
 800cd9a:	4607      	mov	r7, r0
 800cd9c:	d802      	bhi.n	800cda4 <_realloc_r+0x34>
 800cd9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cda2:	d812      	bhi.n	800cdca <_realloc_r+0x5a>
 800cda4:	4621      	mov	r1, r4
 800cda6:	4640      	mov	r0, r8
 800cda8:	f7ff fd9a 	bl	800c8e0 <_malloc_r>
 800cdac:	4605      	mov	r5, r0
 800cdae:	2800      	cmp	r0, #0
 800cdb0:	d0ed      	beq.n	800cd8e <_realloc_r+0x1e>
 800cdb2:	42bc      	cmp	r4, r7
 800cdb4:	4622      	mov	r2, r4
 800cdb6:	4631      	mov	r1, r6
 800cdb8:	bf28      	it	cs
 800cdba:	463a      	movcs	r2, r7
 800cdbc:	f7fd fe64 	bl	800aa88 <memcpy>
 800cdc0:	4631      	mov	r1, r6
 800cdc2:	4640      	mov	r0, r8
 800cdc4:	f7ff fd20 	bl	800c808 <_free_r>
 800cdc8:	e7e1      	b.n	800cd8e <_realloc_r+0x1e>
 800cdca:	4635      	mov	r5, r6
 800cdcc:	e7df      	b.n	800cd8e <_realloc_r+0x1e>

0800cdce <__sfputc_r>:
 800cdce:	6893      	ldr	r3, [r2, #8]
 800cdd0:	3b01      	subs	r3, #1
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	b410      	push	{r4}
 800cdd6:	6093      	str	r3, [r2, #8]
 800cdd8:	da08      	bge.n	800cdec <__sfputc_r+0x1e>
 800cdda:	6994      	ldr	r4, [r2, #24]
 800cddc:	42a3      	cmp	r3, r4
 800cdde:	db01      	blt.n	800cde4 <__sfputc_r+0x16>
 800cde0:	290a      	cmp	r1, #10
 800cde2:	d103      	bne.n	800cdec <__sfputc_r+0x1e>
 800cde4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cde8:	f000 b94a 	b.w	800d080 <__swbuf_r>
 800cdec:	6813      	ldr	r3, [r2, #0]
 800cdee:	1c58      	adds	r0, r3, #1
 800cdf0:	6010      	str	r0, [r2, #0]
 800cdf2:	7019      	strb	r1, [r3, #0]
 800cdf4:	4608      	mov	r0, r1
 800cdf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cdfa:	4770      	bx	lr

0800cdfc <__sfputs_r>:
 800cdfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdfe:	4606      	mov	r6, r0
 800ce00:	460f      	mov	r7, r1
 800ce02:	4614      	mov	r4, r2
 800ce04:	18d5      	adds	r5, r2, r3
 800ce06:	42ac      	cmp	r4, r5
 800ce08:	d101      	bne.n	800ce0e <__sfputs_r+0x12>
 800ce0a:	2000      	movs	r0, #0
 800ce0c:	e007      	b.n	800ce1e <__sfputs_r+0x22>
 800ce0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce12:	463a      	mov	r2, r7
 800ce14:	4630      	mov	r0, r6
 800ce16:	f7ff ffda 	bl	800cdce <__sfputc_r>
 800ce1a:	1c43      	adds	r3, r0, #1
 800ce1c:	d1f3      	bne.n	800ce06 <__sfputs_r+0xa>
 800ce1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ce20 <_vfiprintf_r>:
 800ce20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce24:	460d      	mov	r5, r1
 800ce26:	b09d      	sub	sp, #116	; 0x74
 800ce28:	4614      	mov	r4, r2
 800ce2a:	4698      	mov	r8, r3
 800ce2c:	4606      	mov	r6, r0
 800ce2e:	b118      	cbz	r0, 800ce38 <_vfiprintf_r+0x18>
 800ce30:	6983      	ldr	r3, [r0, #24]
 800ce32:	b90b      	cbnz	r3, 800ce38 <_vfiprintf_r+0x18>
 800ce34:	f000 fb14 	bl	800d460 <__sinit>
 800ce38:	4b89      	ldr	r3, [pc, #548]	; (800d060 <_vfiprintf_r+0x240>)
 800ce3a:	429d      	cmp	r5, r3
 800ce3c:	d11b      	bne.n	800ce76 <_vfiprintf_r+0x56>
 800ce3e:	6875      	ldr	r5, [r6, #4]
 800ce40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce42:	07d9      	lsls	r1, r3, #31
 800ce44:	d405      	bmi.n	800ce52 <_vfiprintf_r+0x32>
 800ce46:	89ab      	ldrh	r3, [r5, #12]
 800ce48:	059a      	lsls	r2, r3, #22
 800ce4a:	d402      	bmi.n	800ce52 <_vfiprintf_r+0x32>
 800ce4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce4e:	f000 fba5 	bl	800d59c <__retarget_lock_acquire_recursive>
 800ce52:	89ab      	ldrh	r3, [r5, #12]
 800ce54:	071b      	lsls	r3, r3, #28
 800ce56:	d501      	bpl.n	800ce5c <_vfiprintf_r+0x3c>
 800ce58:	692b      	ldr	r3, [r5, #16]
 800ce5a:	b9eb      	cbnz	r3, 800ce98 <_vfiprintf_r+0x78>
 800ce5c:	4629      	mov	r1, r5
 800ce5e:	4630      	mov	r0, r6
 800ce60:	f000 f96e 	bl	800d140 <__swsetup_r>
 800ce64:	b1c0      	cbz	r0, 800ce98 <_vfiprintf_r+0x78>
 800ce66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce68:	07dc      	lsls	r4, r3, #31
 800ce6a:	d50e      	bpl.n	800ce8a <_vfiprintf_r+0x6a>
 800ce6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce70:	b01d      	add	sp, #116	; 0x74
 800ce72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce76:	4b7b      	ldr	r3, [pc, #492]	; (800d064 <_vfiprintf_r+0x244>)
 800ce78:	429d      	cmp	r5, r3
 800ce7a:	d101      	bne.n	800ce80 <_vfiprintf_r+0x60>
 800ce7c:	68b5      	ldr	r5, [r6, #8]
 800ce7e:	e7df      	b.n	800ce40 <_vfiprintf_r+0x20>
 800ce80:	4b79      	ldr	r3, [pc, #484]	; (800d068 <_vfiprintf_r+0x248>)
 800ce82:	429d      	cmp	r5, r3
 800ce84:	bf08      	it	eq
 800ce86:	68f5      	ldreq	r5, [r6, #12]
 800ce88:	e7da      	b.n	800ce40 <_vfiprintf_r+0x20>
 800ce8a:	89ab      	ldrh	r3, [r5, #12]
 800ce8c:	0598      	lsls	r0, r3, #22
 800ce8e:	d4ed      	bmi.n	800ce6c <_vfiprintf_r+0x4c>
 800ce90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce92:	f000 fb84 	bl	800d59e <__retarget_lock_release_recursive>
 800ce96:	e7e9      	b.n	800ce6c <_vfiprintf_r+0x4c>
 800ce98:	2300      	movs	r3, #0
 800ce9a:	9309      	str	r3, [sp, #36]	; 0x24
 800ce9c:	2320      	movs	r3, #32
 800ce9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cea2:	f8cd 800c 	str.w	r8, [sp, #12]
 800cea6:	2330      	movs	r3, #48	; 0x30
 800cea8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d06c <_vfiprintf_r+0x24c>
 800ceac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ceb0:	f04f 0901 	mov.w	r9, #1
 800ceb4:	4623      	mov	r3, r4
 800ceb6:	469a      	mov	sl, r3
 800ceb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cebc:	b10a      	cbz	r2, 800cec2 <_vfiprintf_r+0xa2>
 800cebe:	2a25      	cmp	r2, #37	; 0x25
 800cec0:	d1f9      	bne.n	800ceb6 <_vfiprintf_r+0x96>
 800cec2:	ebba 0b04 	subs.w	fp, sl, r4
 800cec6:	d00b      	beq.n	800cee0 <_vfiprintf_r+0xc0>
 800cec8:	465b      	mov	r3, fp
 800ceca:	4622      	mov	r2, r4
 800cecc:	4629      	mov	r1, r5
 800cece:	4630      	mov	r0, r6
 800ced0:	f7ff ff94 	bl	800cdfc <__sfputs_r>
 800ced4:	3001      	adds	r0, #1
 800ced6:	f000 80aa 	beq.w	800d02e <_vfiprintf_r+0x20e>
 800ceda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cedc:	445a      	add	r2, fp
 800cede:	9209      	str	r2, [sp, #36]	; 0x24
 800cee0:	f89a 3000 	ldrb.w	r3, [sl]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	f000 80a2 	beq.w	800d02e <_vfiprintf_r+0x20e>
 800ceea:	2300      	movs	r3, #0
 800ceec:	f04f 32ff 	mov.w	r2, #4294967295
 800cef0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cef4:	f10a 0a01 	add.w	sl, sl, #1
 800cef8:	9304      	str	r3, [sp, #16]
 800cefa:	9307      	str	r3, [sp, #28]
 800cefc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf00:	931a      	str	r3, [sp, #104]	; 0x68
 800cf02:	4654      	mov	r4, sl
 800cf04:	2205      	movs	r2, #5
 800cf06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf0a:	4858      	ldr	r0, [pc, #352]	; (800d06c <_vfiprintf_r+0x24c>)
 800cf0c:	f7f3 f988 	bl	8000220 <memchr>
 800cf10:	9a04      	ldr	r2, [sp, #16]
 800cf12:	b9d8      	cbnz	r0, 800cf4c <_vfiprintf_r+0x12c>
 800cf14:	06d1      	lsls	r1, r2, #27
 800cf16:	bf44      	itt	mi
 800cf18:	2320      	movmi	r3, #32
 800cf1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf1e:	0713      	lsls	r3, r2, #28
 800cf20:	bf44      	itt	mi
 800cf22:	232b      	movmi	r3, #43	; 0x2b
 800cf24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf28:	f89a 3000 	ldrb.w	r3, [sl]
 800cf2c:	2b2a      	cmp	r3, #42	; 0x2a
 800cf2e:	d015      	beq.n	800cf5c <_vfiprintf_r+0x13c>
 800cf30:	9a07      	ldr	r2, [sp, #28]
 800cf32:	4654      	mov	r4, sl
 800cf34:	2000      	movs	r0, #0
 800cf36:	f04f 0c0a 	mov.w	ip, #10
 800cf3a:	4621      	mov	r1, r4
 800cf3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf40:	3b30      	subs	r3, #48	; 0x30
 800cf42:	2b09      	cmp	r3, #9
 800cf44:	d94e      	bls.n	800cfe4 <_vfiprintf_r+0x1c4>
 800cf46:	b1b0      	cbz	r0, 800cf76 <_vfiprintf_r+0x156>
 800cf48:	9207      	str	r2, [sp, #28]
 800cf4a:	e014      	b.n	800cf76 <_vfiprintf_r+0x156>
 800cf4c:	eba0 0308 	sub.w	r3, r0, r8
 800cf50:	fa09 f303 	lsl.w	r3, r9, r3
 800cf54:	4313      	orrs	r3, r2
 800cf56:	9304      	str	r3, [sp, #16]
 800cf58:	46a2      	mov	sl, r4
 800cf5a:	e7d2      	b.n	800cf02 <_vfiprintf_r+0xe2>
 800cf5c:	9b03      	ldr	r3, [sp, #12]
 800cf5e:	1d19      	adds	r1, r3, #4
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	9103      	str	r1, [sp, #12]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	bfbb      	ittet	lt
 800cf68:	425b      	neglt	r3, r3
 800cf6a:	f042 0202 	orrlt.w	r2, r2, #2
 800cf6e:	9307      	strge	r3, [sp, #28]
 800cf70:	9307      	strlt	r3, [sp, #28]
 800cf72:	bfb8      	it	lt
 800cf74:	9204      	strlt	r2, [sp, #16]
 800cf76:	7823      	ldrb	r3, [r4, #0]
 800cf78:	2b2e      	cmp	r3, #46	; 0x2e
 800cf7a:	d10c      	bne.n	800cf96 <_vfiprintf_r+0x176>
 800cf7c:	7863      	ldrb	r3, [r4, #1]
 800cf7e:	2b2a      	cmp	r3, #42	; 0x2a
 800cf80:	d135      	bne.n	800cfee <_vfiprintf_r+0x1ce>
 800cf82:	9b03      	ldr	r3, [sp, #12]
 800cf84:	1d1a      	adds	r2, r3, #4
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	9203      	str	r2, [sp, #12]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	bfb8      	it	lt
 800cf8e:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf92:	3402      	adds	r4, #2
 800cf94:	9305      	str	r3, [sp, #20]
 800cf96:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d07c <_vfiprintf_r+0x25c>
 800cf9a:	7821      	ldrb	r1, [r4, #0]
 800cf9c:	2203      	movs	r2, #3
 800cf9e:	4650      	mov	r0, sl
 800cfa0:	f7f3 f93e 	bl	8000220 <memchr>
 800cfa4:	b140      	cbz	r0, 800cfb8 <_vfiprintf_r+0x198>
 800cfa6:	2340      	movs	r3, #64	; 0x40
 800cfa8:	eba0 000a 	sub.w	r0, r0, sl
 800cfac:	fa03 f000 	lsl.w	r0, r3, r0
 800cfb0:	9b04      	ldr	r3, [sp, #16]
 800cfb2:	4303      	orrs	r3, r0
 800cfb4:	3401      	adds	r4, #1
 800cfb6:	9304      	str	r3, [sp, #16]
 800cfb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfbc:	482c      	ldr	r0, [pc, #176]	; (800d070 <_vfiprintf_r+0x250>)
 800cfbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cfc2:	2206      	movs	r2, #6
 800cfc4:	f7f3 f92c 	bl	8000220 <memchr>
 800cfc8:	2800      	cmp	r0, #0
 800cfca:	d03f      	beq.n	800d04c <_vfiprintf_r+0x22c>
 800cfcc:	4b29      	ldr	r3, [pc, #164]	; (800d074 <_vfiprintf_r+0x254>)
 800cfce:	bb1b      	cbnz	r3, 800d018 <_vfiprintf_r+0x1f8>
 800cfd0:	9b03      	ldr	r3, [sp, #12]
 800cfd2:	3307      	adds	r3, #7
 800cfd4:	f023 0307 	bic.w	r3, r3, #7
 800cfd8:	3308      	adds	r3, #8
 800cfda:	9303      	str	r3, [sp, #12]
 800cfdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfde:	443b      	add	r3, r7
 800cfe0:	9309      	str	r3, [sp, #36]	; 0x24
 800cfe2:	e767      	b.n	800ceb4 <_vfiprintf_r+0x94>
 800cfe4:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfe8:	460c      	mov	r4, r1
 800cfea:	2001      	movs	r0, #1
 800cfec:	e7a5      	b.n	800cf3a <_vfiprintf_r+0x11a>
 800cfee:	2300      	movs	r3, #0
 800cff0:	3401      	adds	r4, #1
 800cff2:	9305      	str	r3, [sp, #20]
 800cff4:	4619      	mov	r1, r3
 800cff6:	f04f 0c0a 	mov.w	ip, #10
 800cffa:	4620      	mov	r0, r4
 800cffc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d000:	3a30      	subs	r2, #48	; 0x30
 800d002:	2a09      	cmp	r2, #9
 800d004:	d903      	bls.n	800d00e <_vfiprintf_r+0x1ee>
 800d006:	2b00      	cmp	r3, #0
 800d008:	d0c5      	beq.n	800cf96 <_vfiprintf_r+0x176>
 800d00a:	9105      	str	r1, [sp, #20]
 800d00c:	e7c3      	b.n	800cf96 <_vfiprintf_r+0x176>
 800d00e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d012:	4604      	mov	r4, r0
 800d014:	2301      	movs	r3, #1
 800d016:	e7f0      	b.n	800cffa <_vfiprintf_r+0x1da>
 800d018:	ab03      	add	r3, sp, #12
 800d01a:	9300      	str	r3, [sp, #0]
 800d01c:	462a      	mov	r2, r5
 800d01e:	4b16      	ldr	r3, [pc, #88]	; (800d078 <_vfiprintf_r+0x258>)
 800d020:	a904      	add	r1, sp, #16
 800d022:	4630      	mov	r0, r6
 800d024:	f7fd fde6 	bl	800abf4 <_printf_float>
 800d028:	4607      	mov	r7, r0
 800d02a:	1c78      	adds	r0, r7, #1
 800d02c:	d1d6      	bne.n	800cfdc <_vfiprintf_r+0x1bc>
 800d02e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d030:	07d9      	lsls	r1, r3, #31
 800d032:	d405      	bmi.n	800d040 <_vfiprintf_r+0x220>
 800d034:	89ab      	ldrh	r3, [r5, #12]
 800d036:	059a      	lsls	r2, r3, #22
 800d038:	d402      	bmi.n	800d040 <_vfiprintf_r+0x220>
 800d03a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d03c:	f000 faaf 	bl	800d59e <__retarget_lock_release_recursive>
 800d040:	89ab      	ldrh	r3, [r5, #12]
 800d042:	065b      	lsls	r3, r3, #25
 800d044:	f53f af12 	bmi.w	800ce6c <_vfiprintf_r+0x4c>
 800d048:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d04a:	e711      	b.n	800ce70 <_vfiprintf_r+0x50>
 800d04c:	ab03      	add	r3, sp, #12
 800d04e:	9300      	str	r3, [sp, #0]
 800d050:	462a      	mov	r2, r5
 800d052:	4b09      	ldr	r3, [pc, #36]	; (800d078 <_vfiprintf_r+0x258>)
 800d054:	a904      	add	r1, sp, #16
 800d056:	4630      	mov	r0, r6
 800d058:	f7fe f870 	bl	800b13c <_printf_i>
 800d05c:	e7e4      	b.n	800d028 <_vfiprintf_r+0x208>
 800d05e:	bf00      	nop
 800d060:	0800e764 	.word	0x0800e764
 800d064:	0800e784 	.word	0x0800e784
 800d068:	0800e744 	.word	0x0800e744
 800d06c:	0800e5ec 	.word	0x0800e5ec
 800d070:	0800e5f6 	.word	0x0800e5f6
 800d074:	0800abf5 	.word	0x0800abf5
 800d078:	0800cdfd 	.word	0x0800cdfd
 800d07c:	0800e5f2 	.word	0x0800e5f2

0800d080 <__swbuf_r>:
 800d080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d082:	460e      	mov	r6, r1
 800d084:	4614      	mov	r4, r2
 800d086:	4605      	mov	r5, r0
 800d088:	b118      	cbz	r0, 800d092 <__swbuf_r+0x12>
 800d08a:	6983      	ldr	r3, [r0, #24]
 800d08c:	b90b      	cbnz	r3, 800d092 <__swbuf_r+0x12>
 800d08e:	f000 f9e7 	bl	800d460 <__sinit>
 800d092:	4b21      	ldr	r3, [pc, #132]	; (800d118 <__swbuf_r+0x98>)
 800d094:	429c      	cmp	r4, r3
 800d096:	d12b      	bne.n	800d0f0 <__swbuf_r+0x70>
 800d098:	686c      	ldr	r4, [r5, #4]
 800d09a:	69a3      	ldr	r3, [r4, #24]
 800d09c:	60a3      	str	r3, [r4, #8]
 800d09e:	89a3      	ldrh	r3, [r4, #12]
 800d0a0:	071a      	lsls	r2, r3, #28
 800d0a2:	d52f      	bpl.n	800d104 <__swbuf_r+0x84>
 800d0a4:	6923      	ldr	r3, [r4, #16]
 800d0a6:	b36b      	cbz	r3, 800d104 <__swbuf_r+0x84>
 800d0a8:	6923      	ldr	r3, [r4, #16]
 800d0aa:	6820      	ldr	r0, [r4, #0]
 800d0ac:	1ac0      	subs	r0, r0, r3
 800d0ae:	6963      	ldr	r3, [r4, #20]
 800d0b0:	b2f6      	uxtb	r6, r6
 800d0b2:	4283      	cmp	r3, r0
 800d0b4:	4637      	mov	r7, r6
 800d0b6:	dc04      	bgt.n	800d0c2 <__swbuf_r+0x42>
 800d0b8:	4621      	mov	r1, r4
 800d0ba:	4628      	mov	r0, r5
 800d0bc:	f000 f93c 	bl	800d338 <_fflush_r>
 800d0c0:	bb30      	cbnz	r0, 800d110 <__swbuf_r+0x90>
 800d0c2:	68a3      	ldr	r3, [r4, #8]
 800d0c4:	3b01      	subs	r3, #1
 800d0c6:	60a3      	str	r3, [r4, #8]
 800d0c8:	6823      	ldr	r3, [r4, #0]
 800d0ca:	1c5a      	adds	r2, r3, #1
 800d0cc:	6022      	str	r2, [r4, #0]
 800d0ce:	701e      	strb	r6, [r3, #0]
 800d0d0:	6963      	ldr	r3, [r4, #20]
 800d0d2:	3001      	adds	r0, #1
 800d0d4:	4283      	cmp	r3, r0
 800d0d6:	d004      	beq.n	800d0e2 <__swbuf_r+0x62>
 800d0d8:	89a3      	ldrh	r3, [r4, #12]
 800d0da:	07db      	lsls	r3, r3, #31
 800d0dc:	d506      	bpl.n	800d0ec <__swbuf_r+0x6c>
 800d0de:	2e0a      	cmp	r6, #10
 800d0e0:	d104      	bne.n	800d0ec <__swbuf_r+0x6c>
 800d0e2:	4621      	mov	r1, r4
 800d0e4:	4628      	mov	r0, r5
 800d0e6:	f000 f927 	bl	800d338 <_fflush_r>
 800d0ea:	b988      	cbnz	r0, 800d110 <__swbuf_r+0x90>
 800d0ec:	4638      	mov	r0, r7
 800d0ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0f0:	4b0a      	ldr	r3, [pc, #40]	; (800d11c <__swbuf_r+0x9c>)
 800d0f2:	429c      	cmp	r4, r3
 800d0f4:	d101      	bne.n	800d0fa <__swbuf_r+0x7a>
 800d0f6:	68ac      	ldr	r4, [r5, #8]
 800d0f8:	e7cf      	b.n	800d09a <__swbuf_r+0x1a>
 800d0fa:	4b09      	ldr	r3, [pc, #36]	; (800d120 <__swbuf_r+0xa0>)
 800d0fc:	429c      	cmp	r4, r3
 800d0fe:	bf08      	it	eq
 800d100:	68ec      	ldreq	r4, [r5, #12]
 800d102:	e7ca      	b.n	800d09a <__swbuf_r+0x1a>
 800d104:	4621      	mov	r1, r4
 800d106:	4628      	mov	r0, r5
 800d108:	f000 f81a 	bl	800d140 <__swsetup_r>
 800d10c:	2800      	cmp	r0, #0
 800d10e:	d0cb      	beq.n	800d0a8 <__swbuf_r+0x28>
 800d110:	f04f 37ff 	mov.w	r7, #4294967295
 800d114:	e7ea      	b.n	800d0ec <__swbuf_r+0x6c>
 800d116:	bf00      	nop
 800d118:	0800e764 	.word	0x0800e764
 800d11c:	0800e784 	.word	0x0800e784
 800d120:	0800e744 	.word	0x0800e744

0800d124 <__ascii_wctomb>:
 800d124:	b149      	cbz	r1, 800d13a <__ascii_wctomb+0x16>
 800d126:	2aff      	cmp	r2, #255	; 0xff
 800d128:	bf85      	ittet	hi
 800d12a:	238a      	movhi	r3, #138	; 0x8a
 800d12c:	6003      	strhi	r3, [r0, #0]
 800d12e:	700a      	strbls	r2, [r1, #0]
 800d130:	f04f 30ff 	movhi.w	r0, #4294967295
 800d134:	bf98      	it	ls
 800d136:	2001      	movls	r0, #1
 800d138:	4770      	bx	lr
 800d13a:	4608      	mov	r0, r1
 800d13c:	4770      	bx	lr
	...

0800d140 <__swsetup_r>:
 800d140:	4b32      	ldr	r3, [pc, #200]	; (800d20c <__swsetup_r+0xcc>)
 800d142:	b570      	push	{r4, r5, r6, lr}
 800d144:	681d      	ldr	r5, [r3, #0]
 800d146:	4606      	mov	r6, r0
 800d148:	460c      	mov	r4, r1
 800d14a:	b125      	cbz	r5, 800d156 <__swsetup_r+0x16>
 800d14c:	69ab      	ldr	r3, [r5, #24]
 800d14e:	b913      	cbnz	r3, 800d156 <__swsetup_r+0x16>
 800d150:	4628      	mov	r0, r5
 800d152:	f000 f985 	bl	800d460 <__sinit>
 800d156:	4b2e      	ldr	r3, [pc, #184]	; (800d210 <__swsetup_r+0xd0>)
 800d158:	429c      	cmp	r4, r3
 800d15a:	d10f      	bne.n	800d17c <__swsetup_r+0x3c>
 800d15c:	686c      	ldr	r4, [r5, #4]
 800d15e:	89a3      	ldrh	r3, [r4, #12]
 800d160:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d164:	0719      	lsls	r1, r3, #28
 800d166:	d42c      	bmi.n	800d1c2 <__swsetup_r+0x82>
 800d168:	06dd      	lsls	r5, r3, #27
 800d16a:	d411      	bmi.n	800d190 <__swsetup_r+0x50>
 800d16c:	2309      	movs	r3, #9
 800d16e:	6033      	str	r3, [r6, #0]
 800d170:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d174:	81a3      	strh	r3, [r4, #12]
 800d176:	f04f 30ff 	mov.w	r0, #4294967295
 800d17a:	e03e      	b.n	800d1fa <__swsetup_r+0xba>
 800d17c:	4b25      	ldr	r3, [pc, #148]	; (800d214 <__swsetup_r+0xd4>)
 800d17e:	429c      	cmp	r4, r3
 800d180:	d101      	bne.n	800d186 <__swsetup_r+0x46>
 800d182:	68ac      	ldr	r4, [r5, #8]
 800d184:	e7eb      	b.n	800d15e <__swsetup_r+0x1e>
 800d186:	4b24      	ldr	r3, [pc, #144]	; (800d218 <__swsetup_r+0xd8>)
 800d188:	429c      	cmp	r4, r3
 800d18a:	bf08      	it	eq
 800d18c:	68ec      	ldreq	r4, [r5, #12]
 800d18e:	e7e6      	b.n	800d15e <__swsetup_r+0x1e>
 800d190:	0758      	lsls	r0, r3, #29
 800d192:	d512      	bpl.n	800d1ba <__swsetup_r+0x7a>
 800d194:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d196:	b141      	cbz	r1, 800d1aa <__swsetup_r+0x6a>
 800d198:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d19c:	4299      	cmp	r1, r3
 800d19e:	d002      	beq.n	800d1a6 <__swsetup_r+0x66>
 800d1a0:	4630      	mov	r0, r6
 800d1a2:	f7ff fb31 	bl	800c808 <_free_r>
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	6363      	str	r3, [r4, #52]	; 0x34
 800d1aa:	89a3      	ldrh	r3, [r4, #12]
 800d1ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d1b0:	81a3      	strh	r3, [r4, #12]
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	6063      	str	r3, [r4, #4]
 800d1b6:	6923      	ldr	r3, [r4, #16]
 800d1b8:	6023      	str	r3, [r4, #0]
 800d1ba:	89a3      	ldrh	r3, [r4, #12]
 800d1bc:	f043 0308 	orr.w	r3, r3, #8
 800d1c0:	81a3      	strh	r3, [r4, #12]
 800d1c2:	6923      	ldr	r3, [r4, #16]
 800d1c4:	b94b      	cbnz	r3, 800d1da <__swsetup_r+0x9a>
 800d1c6:	89a3      	ldrh	r3, [r4, #12]
 800d1c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d1cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d1d0:	d003      	beq.n	800d1da <__swsetup_r+0x9a>
 800d1d2:	4621      	mov	r1, r4
 800d1d4:	4630      	mov	r0, r6
 800d1d6:	f000 fa09 	bl	800d5ec <__smakebuf_r>
 800d1da:	89a0      	ldrh	r0, [r4, #12]
 800d1dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d1e0:	f010 0301 	ands.w	r3, r0, #1
 800d1e4:	d00a      	beq.n	800d1fc <__swsetup_r+0xbc>
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	60a3      	str	r3, [r4, #8]
 800d1ea:	6963      	ldr	r3, [r4, #20]
 800d1ec:	425b      	negs	r3, r3
 800d1ee:	61a3      	str	r3, [r4, #24]
 800d1f0:	6923      	ldr	r3, [r4, #16]
 800d1f2:	b943      	cbnz	r3, 800d206 <__swsetup_r+0xc6>
 800d1f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d1f8:	d1ba      	bne.n	800d170 <__swsetup_r+0x30>
 800d1fa:	bd70      	pop	{r4, r5, r6, pc}
 800d1fc:	0781      	lsls	r1, r0, #30
 800d1fe:	bf58      	it	pl
 800d200:	6963      	ldrpl	r3, [r4, #20]
 800d202:	60a3      	str	r3, [r4, #8]
 800d204:	e7f4      	b.n	800d1f0 <__swsetup_r+0xb0>
 800d206:	2000      	movs	r0, #0
 800d208:	e7f7      	b.n	800d1fa <__swsetup_r+0xba>
 800d20a:	bf00      	nop
 800d20c:	20000024 	.word	0x20000024
 800d210:	0800e764 	.word	0x0800e764
 800d214:	0800e784 	.word	0x0800e784
 800d218:	0800e744 	.word	0x0800e744

0800d21c <abort>:
 800d21c:	b508      	push	{r3, lr}
 800d21e:	2006      	movs	r0, #6
 800d220:	f000 fa54 	bl	800d6cc <raise>
 800d224:	2001      	movs	r0, #1
 800d226:	f7f6 fae1 	bl	80037ec <_exit>
	...

0800d22c <__sflush_r>:
 800d22c:	898a      	ldrh	r2, [r1, #12]
 800d22e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d232:	4605      	mov	r5, r0
 800d234:	0710      	lsls	r0, r2, #28
 800d236:	460c      	mov	r4, r1
 800d238:	d458      	bmi.n	800d2ec <__sflush_r+0xc0>
 800d23a:	684b      	ldr	r3, [r1, #4]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	dc05      	bgt.n	800d24c <__sflush_r+0x20>
 800d240:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d242:	2b00      	cmp	r3, #0
 800d244:	dc02      	bgt.n	800d24c <__sflush_r+0x20>
 800d246:	2000      	movs	r0, #0
 800d248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d24c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d24e:	2e00      	cmp	r6, #0
 800d250:	d0f9      	beq.n	800d246 <__sflush_r+0x1a>
 800d252:	2300      	movs	r3, #0
 800d254:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d258:	682f      	ldr	r7, [r5, #0]
 800d25a:	602b      	str	r3, [r5, #0]
 800d25c:	d032      	beq.n	800d2c4 <__sflush_r+0x98>
 800d25e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d260:	89a3      	ldrh	r3, [r4, #12]
 800d262:	075a      	lsls	r2, r3, #29
 800d264:	d505      	bpl.n	800d272 <__sflush_r+0x46>
 800d266:	6863      	ldr	r3, [r4, #4]
 800d268:	1ac0      	subs	r0, r0, r3
 800d26a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d26c:	b10b      	cbz	r3, 800d272 <__sflush_r+0x46>
 800d26e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d270:	1ac0      	subs	r0, r0, r3
 800d272:	2300      	movs	r3, #0
 800d274:	4602      	mov	r2, r0
 800d276:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d278:	6a21      	ldr	r1, [r4, #32]
 800d27a:	4628      	mov	r0, r5
 800d27c:	47b0      	blx	r6
 800d27e:	1c43      	adds	r3, r0, #1
 800d280:	89a3      	ldrh	r3, [r4, #12]
 800d282:	d106      	bne.n	800d292 <__sflush_r+0x66>
 800d284:	6829      	ldr	r1, [r5, #0]
 800d286:	291d      	cmp	r1, #29
 800d288:	d82c      	bhi.n	800d2e4 <__sflush_r+0xb8>
 800d28a:	4a2a      	ldr	r2, [pc, #168]	; (800d334 <__sflush_r+0x108>)
 800d28c:	40ca      	lsrs	r2, r1
 800d28e:	07d6      	lsls	r6, r2, #31
 800d290:	d528      	bpl.n	800d2e4 <__sflush_r+0xb8>
 800d292:	2200      	movs	r2, #0
 800d294:	6062      	str	r2, [r4, #4]
 800d296:	04d9      	lsls	r1, r3, #19
 800d298:	6922      	ldr	r2, [r4, #16]
 800d29a:	6022      	str	r2, [r4, #0]
 800d29c:	d504      	bpl.n	800d2a8 <__sflush_r+0x7c>
 800d29e:	1c42      	adds	r2, r0, #1
 800d2a0:	d101      	bne.n	800d2a6 <__sflush_r+0x7a>
 800d2a2:	682b      	ldr	r3, [r5, #0]
 800d2a4:	b903      	cbnz	r3, 800d2a8 <__sflush_r+0x7c>
 800d2a6:	6560      	str	r0, [r4, #84]	; 0x54
 800d2a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d2aa:	602f      	str	r7, [r5, #0]
 800d2ac:	2900      	cmp	r1, #0
 800d2ae:	d0ca      	beq.n	800d246 <__sflush_r+0x1a>
 800d2b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d2b4:	4299      	cmp	r1, r3
 800d2b6:	d002      	beq.n	800d2be <__sflush_r+0x92>
 800d2b8:	4628      	mov	r0, r5
 800d2ba:	f7ff faa5 	bl	800c808 <_free_r>
 800d2be:	2000      	movs	r0, #0
 800d2c0:	6360      	str	r0, [r4, #52]	; 0x34
 800d2c2:	e7c1      	b.n	800d248 <__sflush_r+0x1c>
 800d2c4:	6a21      	ldr	r1, [r4, #32]
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	4628      	mov	r0, r5
 800d2ca:	47b0      	blx	r6
 800d2cc:	1c41      	adds	r1, r0, #1
 800d2ce:	d1c7      	bne.n	800d260 <__sflush_r+0x34>
 800d2d0:	682b      	ldr	r3, [r5, #0]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d0c4      	beq.n	800d260 <__sflush_r+0x34>
 800d2d6:	2b1d      	cmp	r3, #29
 800d2d8:	d001      	beq.n	800d2de <__sflush_r+0xb2>
 800d2da:	2b16      	cmp	r3, #22
 800d2dc:	d101      	bne.n	800d2e2 <__sflush_r+0xb6>
 800d2de:	602f      	str	r7, [r5, #0]
 800d2e0:	e7b1      	b.n	800d246 <__sflush_r+0x1a>
 800d2e2:	89a3      	ldrh	r3, [r4, #12]
 800d2e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2e8:	81a3      	strh	r3, [r4, #12]
 800d2ea:	e7ad      	b.n	800d248 <__sflush_r+0x1c>
 800d2ec:	690f      	ldr	r7, [r1, #16]
 800d2ee:	2f00      	cmp	r7, #0
 800d2f0:	d0a9      	beq.n	800d246 <__sflush_r+0x1a>
 800d2f2:	0793      	lsls	r3, r2, #30
 800d2f4:	680e      	ldr	r6, [r1, #0]
 800d2f6:	bf08      	it	eq
 800d2f8:	694b      	ldreq	r3, [r1, #20]
 800d2fa:	600f      	str	r7, [r1, #0]
 800d2fc:	bf18      	it	ne
 800d2fe:	2300      	movne	r3, #0
 800d300:	eba6 0807 	sub.w	r8, r6, r7
 800d304:	608b      	str	r3, [r1, #8]
 800d306:	f1b8 0f00 	cmp.w	r8, #0
 800d30a:	dd9c      	ble.n	800d246 <__sflush_r+0x1a>
 800d30c:	6a21      	ldr	r1, [r4, #32]
 800d30e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d310:	4643      	mov	r3, r8
 800d312:	463a      	mov	r2, r7
 800d314:	4628      	mov	r0, r5
 800d316:	47b0      	blx	r6
 800d318:	2800      	cmp	r0, #0
 800d31a:	dc06      	bgt.n	800d32a <__sflush_r+0xfe>
 800d31c:	89a3      	ldrh	r3, [r4, #12]
 800d31e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d322:	81a3      	strh	r3, [r4, #12]
 800d324:	f04f 30ff 	mov.w	r0, #4294967295
 800d328:	e78e      	b.n	800d248 <__sflush_r+0x1c>
 800d32a:	4407      	add	r7, r0
 800d32c:	eba8 0800 	sub.w	r8, r8, r0
 800d330:	e7e9      	b.n	800d306 <__sflush_r+0xda>
 800d332:	bf00      	nop
 800d334:	20400001 	.word	0x20400001

0800d338 <_fflush_r>:
 800d338:	b538      	push	{r3, r4, r5, lr}
 800d33a:	690b      	ldr	r3, [r1, #16]
 800d33c:	4605      	mov	r5, r0
 800d33e:	460c      	mov	r4, r1
 800d340:	b913      	cbnz	r3, 800d348 <_fflush_r+0x10>
 800d342:	2500      	movs	r5, #0
 800d344:	4628      	mov	r0, r5
 800d346:	bd38      	pop	{r3, r4, r5, pc}
 800d348:	b118      	cbz	r0, 800d352 <_fflush_r+0x1a>
 800d34a:	6983      	ldr	r3, [r0, #24]
 800d34c:	b90b      	cbnz	r3, 800d352 <_fflush_r+0x1a>
 800d34e:	f000 f887 	bl	800d460 <__sinit>
 800d352:	4b14      	ldr	r3, [pc, #80]	; (800d3a4 <_fflush_r+0x6c>)
 800d354:	429c      	cmp	r4, r3
 800d356:	d11b      	bne.n	800d390 <_fflush_r+0x58>
 800d358:	686c      	ldr	r4, [r5, #4]
 800d35a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d0ef      	beq.n	800d342 <_fflush_r+0xa>
 800d362:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d364:	07d0      	lsls	r0, r2, #31
 800d366:	d404      	bmi.n	800d372 <_fflush_r+0x3a>
 800d368:	0599      	lsls	r1, r3, #22
 800d36a:	d402      	bmi.n	800d372 <_fflush_r+0x3a>
 800d36c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d36e:	f000 f915 	bl	800d59c <__retarget_lock_acquire_recursive>
 800d372:	4628      	mov	r0, r5
 800d374:	4621      	mov	r1, r4
 800d376:	f7ff ff59 	bl	800d22c <__sflush_r>
 800d37a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d37c:	07da      	lsls	r2, r3, #31
 800d37e:	4605      	mov	r5, r0
 800d380:	d4e0      	bmi.n	800d344 <_fflush_r+0xc>
 800d382:	89a3      	ldrh	r3, [r4, #12]
 800d384:	059b      	lsls	r3, r3, #22
 800d386:	d4dd      	bmi.n	800d344 <_fflush_r+0xc>
 800d388:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d38a:	f000 f908 	bl	800d59e <__retarget_lock_release_recursive>
 800d38e:	e7d9      	b.n	800d344 <_fflush_r+0xc>
 800d390:	4b05      	ldr	r3, [pc, #20]	; (800d3a8 <_fflush_r+0x70>)
 800d392:	429c      	cmp	r4, r3
 800d394:	d101      	bne.n	800d39a <_fflush_r+0x62>
 800d396:	68ac      	ldr	r4, [r5, #8]
 800d398:	e7df      	b.n	800d35a <_fflush_r+0x22>
 800d39a:	4b04      	ldr	r3, [pc, #16]	; (800d3ac <_fflush_r+0x74>)
 800d39c:	429c      	cmp	r4, r3
 800d39e:	bf08      	it	eq
 800d3a0:	68ec      	ldreq	r4, [r5, #12]
 800d3a2:	e7da      	b.n	800d35a <_fflush_r+0x22>
 800d3a4:	0800e764 	.word	0x0800e764
 800d3a8:	0800e784 	.word	0x0800e784
 800d3ac:	0800e744 	.word	0x0800e744

0800d3b0 <std>:
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	b510      	push	{r4, lr}
 800d3b4:	4604      	mov	r4, r0
 800d3b6:	e9c0 3300 	strd	r3, r3, [r0]
 800d3ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d3be:	6083      	str	r3, [r0, #8]
 800d3c0:	8181      	strh	r1, [r0, #12]
 800d3c2:	6643      	str	r3, [r0, #100]	; 0x64
 800d3c4:	81c2      	strh	r2, [r0, #14]
 800d3c6:	6183      	str	r3, [r0, #24]
 800d3c8:	4619      	mov	r1, r3
 800d3ca:	2208      	movs	r2, #8
 800d3cc:	305c      	adds	r0, #92	; 0x5c
 800d3ce:	f7fd fb69 	bl	800aaa4 <memset>
 800d3d2:	4b05      	ldr	r3, [pc, #20]	; (800d3e8 <std+0x38>)
 800d3d4:	6263      	str	r3, [r4, #36]	; 0x24
 800d3d6:	4b05      	ldr	r3, [pc, #20]	; (800d3ec <std+0x3c>)
 800d3d8:	62a3      	str	r3, [r4, #40]	; 0x28
 800d3da:	4b05      	ldr	r3, [pc, #20]	; (800d3f0 <std+0x40>)
 800d3dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d3de:	4b05      	ldr	r3, [pc, #20]	; (800d3f4 <std+0x44>)
 800d3e0:	6224      	str	r4, [r4, #32]
 800d3e2:	6323      	str	r3, [r4, #48]	; 0x30
 800d3e4:	bd10      	pop	{r4, pc}
 800d3e6:	bf00      	nop
 800d3e8:	0800d705 	.word	0x0800d705
 800d3ec:	0800d727 	.word	0x0800d727
 800d3f0:	0800d75f 	.word	0x0800d75f
 800d3f4:	0800d783 	.word	0x0800d783

0800d3f8 <_cleanup_r>:
 800d3f8:	4901      	ldr	r1, [pc, #4]	; (800d400 <_cleanup_r+0x8>)
 800d3fa:	f000 b8af 	b.w	800d55c <_fwalk_reent>
 800d3fe:	bf00      	nop
 800d400:	0800d339 	.word	0x0800d339

0800d404 <__sfmoreglue>:
 800d404:	b570      	push	{r4, r5, r6, lr}
 800d406:	2268      	movs	r2, #104	; 0x68
 800d408:	1e4d      	subs	r5, r1, #1
 800d40a:	4355      	muls	r5, r2
 800d40c:	460e      	mov	r6, r1
 800d40e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d412:	f7ff fa65 	bl	800c8e0 <_malloc_r>
 800d416:	4604      	mov	r4, r0
 800d418:	b140      	cbz	r0, 800d42c <__sfmoreglue+0x28>
 800d41a:	2100      	movs	r1, #0
 800d41c:	e9c0 1600 	strd	r1, r6, [r0]
 800d420:	300c      	adds	r0, #12
 800d422:	60a0      	str	r0, [r4, #8]
 800d424:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d428:	f7fd fb3c 	bl	800aaa4 <memset>
 800d42c:	4620      	mov	r0, r4
 800d42e:	bd70      	pop	{r4, r5, r6, pc}

0800d430 <__sfp_lock_acquire>:
 800d430:	4801      	ldr	r0, [pc, #4]	; (800d438 <__sfp_lock_acquire+0x8>)
 800d432:	f000 b8b3 	b.w	800d59c <__retarget_lock_acquire_recursive>
 800d436:	bf00      	nop
 800d438:	20003861 	.word	0x20003861

0800d43c <__sfp_lock_release>:
 800d43c:	4801      	ldr	r0, [pc, #4]	; (800d444 <__sfp_lock_release+0x8>)
 800d43e:	f000 b8ae 	b.w	800d59e <__retarget_lock_release_recursive>
 800d442:	bf00      	nop
 800d444:	20003861 	.word	0x20003861

0800d448 <__sinit_lock_acquire>:
 800d448:	4801      	ldr	r0, [pc, #4]	; (800d450 <__sinit_lock_acquire+0x8>)
 800d44a:	f000 b8a7 	b.w	800d59c <__retarget_lock_acquire_recursive>
 800d44e:	bf00      	nop
 800d450:	20003862 	.word	0x20003862

0800d454 <__sinit_lock_release>:
 800d454:	4801      	ldr	r0, [pc, #4]	; (800d45c <__sinit_lock_release+0x8>)
 800d456:	f000 b8a2 	b.w	800d59e <__retarget_lock_release_recursive>
 800d45a:	bf00      	nop
 800d45c:	20003862 	.word	0x20003862

0800d460 <__sinit>:
 800d460:	b510      	push	{r4, lr}
 800d462:	4604      	mov	r4, r0
 800d464:	f7ff fff0 	bl	800d448 <__sinit_lock_acquire>
 800d468:	69a3      	ldr	r3, [r4, #24]
 800d46a:	b11b      	cbz	r3, 800d474 <__sinit+0x14>
 800d46c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d470:	f7ff bff0 	b.w	800d454 <__sinit_lock_release>
 800d474:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d478:	6523      	str	r3, [r4, #80]	; 0x50
 800d47a:	4b13      	ldr	r3, [pc, #76]	; (800d4c8 <__sinit+0x68>)
 800d47c:	4a13      	ldr	r2, [pc, #76]	; (800d4cc <__sinit+0x6c>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	62a2      	str	r2, [r4, #40]	; 0x28
 800d482:	42a3      	cmp	r3, r4
 800d484:	bf04      	itt	eq
 800d486:	2301      	moveq	r3, #1
 800d488:	61a3      	streq	r3, [r4, #24]
 800d48a:	4620      	mov	r0, r4
 800d48c:	f000 f820 	bl	800d4d0 <__sfp>
 800d490:	6060      	str	r0, [r4, #4]
 800d492:	4620      	mov	r0, r4
 800d494:	f000 f81c 	bl	800d4d0 <__sfp>
 800d498:	60a0      	str	r0, [r4, #8]
 800d49a:	4620      	mov	r0, r4
 800d49c:	f000 f818 	bl	800d4d0 <__sfp>
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	60e0      	str	r0, [r4, #12]
 800d4a4:	2104      	movs	r1, #4
 800d4a6:	6860      	ldr	r0, [r4, #4]
 800d4a8:	f7ff ff82 	bl	800d3b0 <std>
 800d4ac:	68a0      	ldr	r0, [r4, #8]
 800d4ae:	2201      	movs	r2, #1
 800d4b0:	2109      	movs	r1, #9
 800d4b2:	f7ff ff7d 	bl	800d3b0 <std>
 800d4b6:	68e0      	ldr	r0, [r4, #12]
 800d4b8:	2202      	movs	r2, #2
 800d4ba:	2112      	movs	r1, #18
 800d4bc:	f7ff ff78 	bl	800d3b0 <std>
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	61a3      	str	r3, [r4, #24]
 800d4c4:	e7d2      	b.n	800d46c <__sinit+0xc>
 800d4c6:	bf00      	nop
 800d4c8:	0800e3cc 	.word	0x0800e3cc
 800d4cc:	0800d3f9 	.word	0x0800d3f9

0800d4d0 <__sfp>:
 800d4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4d2:	4607      	mov	r7, r0
 800d4d4:	f7ff ffac 	bl	800d430 <__sfp_lock_acquire>
 800d4d8:	4b1e      	ldr	r3, [pc, #120]	; (800d554 <__sfp+0x84>)
 800d4da:	681e      	ldr	r6, [r3, #0]
 800d4dc:	69b3      	ldr	r3, [r6, #24]
 800d4de:	b913      	cbnz	r3, 800d4e6 <__sfp+0x16>
 800d4e0:	4630      	mov	r0, r6
 800d4e2:	f7ff ffbd 	bl	800d460 <__sinit>
 800d4e6:	3648      	adds	r6, #72	; 0x48
 800d4e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d4ec:	3b01      	subs	r3, #1
 800d4ee:	d503      	bpl.n	800d4f8 <__sfp+0x28>
 800d4f0:	6833      	ldr	r3, [r6, #0]
 800d4f2:	b30b      	cbz	r3, 800d538 <__sfp+0x68>
 800d4f4:	6836      	ldr	r6, [r6, #0]
 800d4f6:	e7f7      	b.n	800d4e8 <__sfp+0x18>
 800d4f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d4fc:	b9d5      	cbnz	r5, 800d534 <__sfp+0x64>
 800d4fe:	4b16      	ldr	r3, [pc, #88]	; (800d558 <__sfp+0x88>)
 800d500:	60e3      	str	r3, [r4, #12]
 800d502:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d506:	6665      	str	r5, [r4, #100]	; 0x64
 800d508:	f000 f847 	bl	800d59a <__retarget_lock_init_recursive>
 800d50c:	f7ff ff96 	bl	800d43c <__sfp_lock_release>
 800d510:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d514:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d518:	6025      	str	r5, [r4, #0]
 800d51a:	61a5      	str	r5, [r4, #24]
 800d51c:	2208      	movs	r2, #8
 800d51e:	4629      	mov	r1, r5
 800d520:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d524:	f7fd fabe 	bl	800aaa4 <memset>
 800d528:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d52c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d530:	4620      	mov	r0, r4
 800d532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d534:	3468      	adds	r4, #104	; 0x68
 800d536:	e7d9      	b.n	800d4ec <__sfp+0x1c>
 800d538:	2104      	movs	r1, #4
 800d53a:	4638      	mov	r0, r7
 800d53c:	f7ff ff62 	bl	800d404 <__sfmoreglue>
 800d540:	4604      	mov	r4, r0
 800d542:	6030      	str	r0, [r6, #0]
 800d544:	2800      	cmp	r0, #0
 800d546:	d1d5      	bne.n	800d4f4 <__sfp+0x24>
 800d548:	f7ff ff78 	bl	800d43c <__sfp_lock_release>
 800d54c:	230c      	movs	r3, #12
 800d54e:	603b      	str	r3, [r7, #0]
 800d550:	e7ee      	b.n	800d530 <__sfp+0x60>
 800d552:	bf00      	nop
 800d554:	0800e3cc 	.word	0x0800e3cc
 800d558:	ffff0001 	.word	0xffff0001

0800d55c <_fwalk_reent>:
 800d55c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d560:	4606      	mov	r6, r0
 800d562:	4688      	mov	r8, r1
 800d564:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d568:	2700      	movs	r7, #0
 800d56a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d56e:	f1b9 0901 	subs.w	r9, r9, #1
 800d572:	d505      	bpl.n	800d580 <_fwalk_reent+0x24>
 800d574:	6824      	ldr	r4, [r4, #0]
 800d576:	2c00      	cmp	r4, #0
 800d578:	d1f7      	bne.n	800d56a <_fwalk_reent+0xe>
 800d57a:	4638      	mov	r0, r7
 800d57c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d580:	89ab      	ldrh	r3, [r5, #12]
 800d582:	2b01      	cmp	r3, #1
 800d584:	d907      	bls.n	800d596 <_fwalk_reent+0x3a>
 800d586:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d58a:	3301      	adds	r3, #1
 800d58c:	d003      	beq.n	800d596 <_fwalk_reent+0x3a>
 800d58e:	4629      	mov	r1, r5
 800d590:	4630      	mov	r0, r6
 800d592:	47c0      	blx	r8
 800d594:	4307      	orrs	r7, r0
 800d596:	3568      	adds	r5, #104	; 0x68
 800d598:	e7e9      	b.n	800d56e <_fwalk_reent+0x12>

0800d59a <__retarget_lock_init_recursive>:
 800d59a:	4770      	bx	lr

0800d59c <__retarget_lock_acquire_recursive>:
 800d59c:	4770      	bx	lr

0800d59e <__retarget_lock_release_recursive>:
 800d59e:	4770      	bx	lr

0800d5a0 <__swhatbuf_r>:
 800d5a0:	b570      	push	{r4, r5, r6, lr}
 800d5a2:	460e      	mov	r6, r1
 800d5a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5a8:	2900      	cmp	r1, #0
 800d5aa:	b096      	sub	sp, #88	; 0x58
 800d5ac:	4614      	mov	r4, r2
 800d5ae:	461d      	mov	r5, r3
 800d5b0:	da08      	bge.n	800d5c4 <__swhatbuf_r+0x24>
 800d5b2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	602a      	str	r2, [r5, #0]
 800d5ba:	061a      	lsls	r2, r3, #24
 800d5bc:	d410      	bmi.n	800d5e0 <__swhatbuf_r+0x40>
 800d5be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5c2:	e00e      	b.n	800d5e2 <__swhatbuf_r+0x42>
 800d5c4:	466a      	mov	r2, sp
 800d5c6:	f000 f903 	bl	800d7d0 <_fstat_r>
 800d5ca:	2800      	cmp	r0, #0
 800d5cc:	dbf1      	blt.n	800d5b2 <__swhatbuf_r+0x12>
 800d5ce:	9a01      	ldr	r2, [sp, #4]
 800d5d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d5d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d5d8:	425a      	negs	r2, r3
 800d5da:	415a      	adcs	r2, r3
 800d5dc:	602a      	str	r2, [r5, #0]
 800d5de:	e7ee      	b.n	800d5be <__swhatbuf_r+0x1e>
 800d5e0:	2340      	movs	r3, #64	; 0x40
 800d5e2:	2000      	movs	r0, #0
 800d5e4:	6023      	str	r3, [r4, #0]
 800d5e6:	b016      	add	sp, #88	; 0x58
 800d5e8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d5ec <__smakebuf_r>:
 800d5ec:	898b      	ldrh	r3, [r1, #12]
 800d5ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d5f0:	079d      	lsls	r5, r3, #30
 800d5f2:	4606      	mov	r6, r0
 800d5f4:	460c      	mov	r4, r1
 800d5f6:	d507      	bpl.n	800d608 <__smakebuf_r+0x1c>
 800d5f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d5fc:	6023      	str	r3, [r4, #0]
 800d5fe:	6123      	str	r3, [r4, #16]
 800d600:	2301      	movs	r3, #1
 800d602:	6163      	str	r3, [r4, #20]
 800d604:	b002      	add	sp, #8
 800d606:	bd70      	pop	{r4, r5, r6, pc}
 800d608:	ab01      	add	r3, sp, #4
 800d60a:	466a      	mov	r2, sp
 800d60c:	f7ff ffc8 	bl	800d5a0 <__swhatbuf_r>
 800d610:	9900      	ldr	r1, [sp, #0]
 800d612:	4605      	mov	r5, r0
 800d614:	4630      	mov	r0, r6
 800d616:	f7ff f963 	bl	800c8e0 <_malloc_r>
 800d61a:	b948      	cbnz	r0, 800d630 <__smakebuf_r+0x44>
 800d61c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d620:	059a      	lsls	r2, r3, #22
 800d622:	d4ef      	bmi.n	800d604 <__smakebuf_r+0x18>
 800d624:	f023 0303 	bic.w	r3, r3, #3
 800d628:	f043 0302 	orr.w	r3, r3, #2
 800d62c:	81a3      	strh	r3, [r4, #12]
 800d62e:	e7e3      	b.n	800d5f8 <__smakebuf_r+0xc>
 800d630:	4b0d      	ldr	r3, [pc, #52]	; (800d668 <__smakebuf_r+0x7c>)
 800d632:	62b3      	str	r3, [r6, #40]	; 0x28
 800d634:	89a3      	ldrh	r3, [r4, #12]
 800d636:	6020      	str	r0, [r4, #0]
 800d638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d63c:	81a3      	strh	r3, [r4, #12]
 800d63e:	9b00      	ldr	r3, [sp, #0]
 800d640:	6163      	str	r3, [r4, #20]
 800d642:	9b01      	ldr	r3, [sp, #4]
 800d644:	6120      	str	r0, [r4, #16]
 800d646:	b15b      	cbz	r3, 800d660 <__smakebuf_r+0x74>
 800d648:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d64c:	4630      	mov	r0, r6
 800d64e:	f000 f8d1 	bl	800d7f4 <_isatty_r>
 800d652:	b128      	cbz	r0, 800d660 <__smakebuf_r+0x74>
 800d654:	89a3      	ldrh	r3, [r4, #12]
 800d656:	f023 0303 	bic.w	r3, r3, #3
 800d65a:	f043 0301 	orr.w	r3, r3, #1
 800d65e:	81a3      	strh	r3, [r4, #12]
 800d660:	89a0      	ldrh	r0, [r4, #12]
 800d662:	4305      	orrs	r5, r0
 800d664:	81a5      	strh	r5, [r4, #12]
 800d666:	e7cd      	b.n	800d604 <__smakebuf_r+0x18>
 800d668:	0800d3f9 	.word	0x0800d3f9

0800d66c <_malloc_usable_size_r>:
 800d66c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d670:	1f18      	subs	r0, r3, #4
 800d672:	2b00      	cmp	r3, #0
 800d674:	bfbc      	itt	lt
 800d676:	580b      	ldrlt	r3, [r1, r0]
 800d678:	18c0      	addlt	r0, r0, r3
 800d67a:	4770      	bx	lr

0800d67c <_raise_r>:
 800d67c:	291f      	cmp	r1, #31
 800d67e:	b538      	push	{r3, r4, r5, lr}
 800d680:	4604      	mov	r4, r0
 800d682:	460d      	mov	r5, r1
 800d684:	d904      	bls.n	800d690 <_raise_r+0x14>
 800d686:	2316      	movs	r3, #22
 800d688:	6003      	str	r3, [r0, #0]
 800d68a:	f04f 30ff 	mov.w	r0, #4294967295
 800d68e:	bd38      	pop	{r3, r4, r5, pc}
 800d690:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d692:	b112      	cbz	r2, 800d69a <_raise_r+0x1e>
 800d694:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d698:	b94b      	cbnz	r3, 800d6ae <_raise_r+0x32>
 800d69a:	4620      	mov	r0, r4
 800d69c:	f000 f830 	bl	800d700 <_getpid_r>
 800d6a0:	462a      	mov	r2, r5
 800d6a2:	4601      	mov	r1, r0
 800d6a4:	4620      	mov	r0, r4
 800d6a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6aa:	f000 b817 	b.w	800d6dc <_kill_r>
 800d6ae:	2b01      	cmp	r3, #1
 800d6b0:	d00a      	beq.n	800d6c8 <_raise_r+0x4c>
 800d6b2:	1c59      	adds	r1, r3, #1
 800d6b4:	d103      	bne.n	800d6be <_raise_r+0x42>
 800d6b6:	2316      	movs	r3, #22
 800d6b8:	6003      	str	r3, [r0, #0]
 800d6ba:	2001      	movs	r0, #1
 800d6bc:	e7e7      	b.n	800d68e <_raise_r+0x12>
 800d6be:	2400      	movs	r4, #0
 800d6c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d6c4:	4628      	mov	r0, r5
 800d6c6:	4798      	blx	r3
 800d6c8:	2000      	movs	r0, #0
 800d6ca:	e7e0      	b.n	800d68e <_raise_r+0x12>

0800d6cc <raise>:
 800d6cc:	4b02      	ldr	r3, [pc, #8]	; (800d6d8 <raise+0xc>)
 800d6ce:	4601      	mov	r1, r0
 800d6d0:	6818      	ldr	r0, [r3, #0]
 800d6d2:	f7ff bfd3 	b.w	800d67c <_raise_r>
 800d6d6:	bf00      	nop
 800d6d8:	20000024 	.word	0x20000024

0800d6dc <_kill_r>:
 800d6dc:	b538      	push	{r3, r4, r5, lr}
 800d6de:	4d07      	ldr	r5, [pc, #28]	; (800d6fc <_kill_r+0x20>)
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	4604      	mov	r4, r0
 800d6e4:	4608      	mov	r0, r1
 800d6e6:	4611      	mov	r1, r2
 800d6e8:	602b      	str	r3, [r5, #0]
 800d6ea:	f7f6 f86f 	bl	80037cc <_kill>
 800d6ee:	1c43      	adds	r3, r0, #1
 800d6f0:	d102      	bne.n	800d6f8 <_kill_r+0x1c>
 800d6f2:	682b      	ldr	r3, [r5, #0]
 800d6f4:	b103      	cbz	r3, 800d6f8 <_kill_r+0x1c>
 800d6f6:	6023      	str	r3, [r4, #0]
 800d6f8:	bd38      	pop	{r3, r4, r5, pc}
 800d6fa:	bf00      	nop
 800d6fc:	2000385c 	.word	0x2000385c

0800d700 <_getpid_r>:
 800d700:	f7f6 b85c 	b.w	80037bc <_getpid>

0800d704 <__sread>:
 800d704:	b510      	push	{r4, lr}
 800d706:	460c      	mov	r4, r1
 800d708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d70c:	f000 f894 	bl	800d838 <_read_r>
 800d710:	2800      	cmp	r0, #0
 800d712:	bfab      	itete	ge
 800d714:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d716:	89a3      	ldrhlt	r3, [r4, #12]
 800d718:	181b      	addge	r3, r3, r0
 800d71a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d71e:	bfac      	ite	ge
 800d720:	6563      	strge	r3, [r4, #84]	; 0x54
 800d722:	81a3      	strhlt	r3, [r4, #12]
 800d724:	bd10      	pop	{r4, pc}

0800d726 <__swrite>:
 800d726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d72a:	461f      	mov	r7, r3
 800d72c:	898b      	ldrh	r3, [r1, #12]
 800d72e:	05db      	lsls	r3, r3, #23
 800d730:	4605      	mov	r5, r0
 800d732:	460c      	mov	r4, r1
 800d734:	4616      	mov	r6, r2
 800d736:	d505      	bpl.n	800d744 <__swrite+0x1e>
 800d738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d73c:	2302      	movs	r3, #2
 800d73e:	2200      	movs	r2, #0
 800d740:	f000 f868 	bl	800d814 <_lseek_r>
 800d744:	89a3      	ldrh	r3, [r4, #12]
 800d746:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d74a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d74e:	81a3      	strh	r3, [r4, #12]
 800d750:	4632      	mov	r2, r6
 800d752:	463b      	mov	r3, r7
 800d754:	4628      	mov	r0, r5
 800d756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d75a:	f000 b817 	b.w	800d78c <_write_r>

0800d75e <__sseek>:
 800d75e:	b510      	push	{r4, lr}
 800d760:	460c      	mov	r4, r1
 800d762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d766:	f000 f855 	bl	800d814 <_lseek_r>
 800d76a:	1c43      	adds	r3, r0, #1
 800d76c:	89a3      	ldrh	r3, [r4, #12]
 800d76e:	bf15      	itete	ne
 800d770:	6560      	strne	r0, [r4, #84]	; 0x54
 800d772:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d776:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d77a:	81a3      	strheq	r3, [r4, #12]
 800d77c:	bf18      	it	ne
 800d77e:	81a3      	strhne	r3, [r4, #12]
 800d780:	bd10      	pop	{r4, pc}

0800d782 <__sclose>:
 800d782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d786:	f000 b813 	b.w	800d7b0 <_close_r>
	...

0800d78c <_write_r>:
 800d78c:	b538      	push	{r3, r4, r5, lr}
 800d78e:	4d07      	ldr	r5, [pc, #28]	; (800d7ac <_write_r+0x20>)
 800d790:	4604      	mov	r4, r0
 800d792:	4608      	mov	r0, r1
 800d794:	4611      	mov	r1, r2
 800d796:	2200      	movs	r2, #0
 800d798:	602a      	str	r2, [r5, #0]
 800d79a:	461a      	mov	r2, r3
 800d79c:	f7f6 f84d 	bl	800383a <_write>
 800d7a0:	1c43      	adds	r3, r0, #1
 800d7a2:	d102      	bne.n	800d7aa <_write_r+0x1e>
 800d7a4:	682b      	ldr	r3, [r5, #0]
 800d7a6:	b103      	cbz	r3, 800d7aa <_write_r+0x1e>
 800d7a8:	6023      	str	r3, [r4, #0]
 800d7aa:	bd38      	pop	{r3, r4, r5, pc}
 800d7ac:	2000385c 	.word	0x2000385c

0800d7b0 <_close_r>:
 800d7b0:	b538      	push	{r3, r4, r5, lr}
 800d7b2:	4d06      	ldr	r5, [pc, #24]	; (800d7cc <_close_r+0x1c>)
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	4604      	mov	r4, r0
 800d7b8:	4608      	mov	r0, r1
 800d7ba:	602b      	str	r3, [r5, #0]
 800d7bc:	f7f6 f859 	bl	8003872 <_close>
 800d7c0:	1c43      	adds	r3, r0, #1
 800d7c2:	d102      	bne.n	800d7ca <_close_r+0x1a>
 800d7c4:	682b      	ldr	r3, [r5, #0]
 800d7c6:	b103      	cbz	r3, 800d7ca <_close_r+0x1a>
 800d7c8:	6023      	str	r3, [r4, #0]
 800d7ca:	bd38      	pop	{r3, r4, r5, pc}
 800d7cc:	2000385c 	.word	0x2000385c

0800d7d0 <_fstat_r>:
 800d7d0:	b538      	push	{r3, r4, r5, lr}
 800d7d2:	4d07      	ldr	r5, [pc, #28]	; (800d7f0 <_fstat_r+0x20>)
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	4604      	mov	r4, r0
 800d7d8:	4608      	mov	r0, r1
 800d7da:	4611      	mov	r1, r2
 800d7dc:	602b      	str	r3, [r5, #0]
 800d7de:	f7f6 f854 	bl	800388a <_fstat>
 800d7e2:	1c43      	adds	r3, r0, #1
 800d7e4:	d102      	bne.n	800d7ec <_fstat_r+0x1c>
 800d7e6:	682b      	ldr	r3, [r5, #0]
 800d7e8:	b103      	cbz	r3, 800d7ec <_fstat_r+0x1c>
 800d7ea:	6023      	str	r3, [r4, #0]
 800d7ec:	bd38      	pop	{r3, r4, r5, pc}
 800d7ee:	bf00      	nop
 800d7f0:	2000385c 	.word	0x2000385c

0800d7f4 <_isatty_r>:
 800d7f4:	b538      	push	{r3, r4, r5, lr}
 800d7f6:	4d06      	ldr	r5, [pc, #24]	; (800d810 <_isatty_r+0x1c>)
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	4604      	mov	r4, r0
 800d7fc:	4608      	mov	r0, r1
 800d7fe:	602b      	str	r3, [r5, #0]
 800d800:	f7f6 f853 	bl	80038aa <_isatty>
 800d804:	1c43      	adds	r3, r0, #1
 800d806:	d102      	bne.n	800d80e <_isatty_r+0x1a>
 800d808:	682b      	ldr	r3, [r5, #0]
 800d80a:	b103      	cbz	r3, 800d80e <_isatty_r+0x1a>
 800d80c:	6023      	str	r3, [r4, #0]
 800d80e:	bd38      	pop	{r3, r4, r5, pc}
 800d810:	2000385c 	.word	0x2000385c

0800d814 <_lseek_r>:
 800d814:	b538      	push	{r3, r4, r5, lr}
 800d816:	4d07      	ldr	r5, [pc, #28]	; (800d834 <_lseek_r+0x20>)
 800d818:	4604      	mov	r4, r0
 800d81a:	4608      	mov	r0, r1
 800d81c:	4611      	mov	r1, r2
 800d81e:	2200      	movs	r2, #0
 800d820:	602a      	str	r2, [r5, #0]
 800d822:	461a      	mov	r2, r3
 800d824:	f7f6 f84c 	bl	80038c0 <_lseek>
 800d828:	1c43      	adds	r3, r0, #1
 800d82a:	d102      	bne.n	800d832 <_lseek_r+0x1e>
 800d82c:	682b      	ldr	r3, [r5, #0]
 800d82e:	b103      	cbz	r3, 800d832 <_lseek_r+0x1e>
 800d830:	6023      	str	r3, [r4, #0]
 800d832:	bd38      	pop	{r3, r4, r5, pc}
 800d834:	2000385c 	.word	0x2000385c

0800d838 <_read_r>:
 800d838:	b538      	push	{r3, r4, r5, lr}
 800d83a:	4d07      	ldr	r5, [pc, #28]	; (800d858 <_read_r+0x20>)
 800d83c:	4604      	mov	r4, r0
 800d83e:	4608      	mov	r0, r1
 800d840:	4611      	mov	r1, r2
 800d842:	2200      	movs	r2, #0
 800d844:	602a      	str	r2, [r5, #0]
 800d846:	461a      	mov	r2, r3
 800d848:	f7f5 ffda 	bl	8003800 <_read>
 800d84c:	1c43      	adds	r3, r0, #1
 800d84e:	d102      	bne.n	800d856 <_read_r+0x1e>
 800d850:	682b      	ldr	r3, [r5, #0]
 800d852:	b103      	cbz	r3, 800d856 <_read_r+0x1e>
 800d854:	6023      	str	r3, [r4, #0]
 800d856:	bd38      	pop	{r3, r4, r5, pc}
 800d858:	2000385c 	.word	0x2000385c

0800d85c <atan2>:
 800d85c:	f000 b800 	b.w	800d860 <__ieee754_atan2>

0800d860 <__ieee754_atan2>:
 800d860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d864:	ec57 6b11 	vmov	r6, r7, d1
 800d868:	4273      	negs	r3, r6
 800d86a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800d9f0 <__ieee754_atan2+0x190>
 800d86e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800d872:	4333      	orrs	r3, r6
 800d874:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d878:	4573      	cmp	r3, lr
 800d87a:	ec51 0b10 	vmov	r0, r1, d0
 800d87e:	ee11 8a10 	vmov	r8, s2
 800d882:	d80a      	bhi.n	800d89a <__ieee754_atan2+0x3a>
 800d884:	4244      	negs	r4, r0
 800d886:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d88a:	4304      	orrs	r4, r0
 800d88c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800d890:	4574      	cmp	r4, lr
 800d892:	ee10 9a10 	vmov	r9, s0
 800d896:	468c      	mov	ip, r1
 800d898:	d907      	bls.n	800d8aa <__ieee754_atan2+0x4a>
 800d89a:	4632      	mov	r2, r6
 800d89c:	463b      	mov	r3, r7
 800d89e:	f7f2 fd15 	bl	80002cc <__adddf3>
 800d8a2:	ec41 0b10 	vmov	d0, r0, r1
 800d8a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8aa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800d8ae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d8b2:	4334      	orrs	r4, r6
 800d8b4:	d103      	bne.n	800d8be <__ieee754_atan2+0x5e>
 800d8b6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8ba:	f000 b89d 	b.w	800d9f8 <atan>
 800d8be:	17bc      	asrs	r4, r7, #30
 800d8c0:	f004 0402 	and.w	r4, r4, #2
 800d8c4:	ea53 0909 	orrs.w	r9, r3, r9
 800d8c8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800d8cc:	d107      	bne.n	800d8de <__ieee754_atan2+0x7e>
 800d8ce:	2c02      	cmp	r4, #2
 800d8d0:	d060      	beq.n	800d994 <__ieee754_atan2+0x134>
 800d8d2:	2c03      	cmp	r4, #3
 800d8d4:	d1e5      	bne.n	800d8a2 <__ieee754_atan2+0x42>
 800d8d6:	a142      	add	r1, pc, #264	; (adr r1, 800d9e0 <__ieee754_atan2+0x180>)
 800d8d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8dc:	e7e1      	b.n	800d8a2 <__ieee754_atan2+0x42>
 800d8de:	ea52 0808 	orrs.w	r8, r2, r8
 800d8e2:	d106      	bne.n	800d8f2 <__ieee754_atan2+0x92>
 800d8e4:	f1bc 0f00 	cmp.w	ip, #0
 800d8e8:	da5f      	bge.n	800d9aa <__ieee754_atan2+0x14a>
 800d8ea:	a13f      	add	r1, pc, #252	; (adr r1, 800d9e8 <__ieee754_atan2+0x188>)
 800d8ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8f0:	e7d7      	b.n	800d8a2 <__ieee754_atan2+0x42>
 800d8f2:	4572      	cmp	r2, lr
 800d8f4:	d10f      	bne.n	800d916 <__ieee754_atan2+0xb6>
 800d8f6:	4293      	cmp	r3, r2
 800d8f8:	f104 34ff 	add.w	r4, r4, #4294967295
 800d8fc:	d107      	bne.n	800d90e <__ieee754_atan2+0xae>
 800d8fe:	2c02      	cmp	r4, #2
 800d900:	d84c      	bhi.n	800d99c <__ieee754_atan2+0x13c>
 800d902:	4b35      	ldr	r3, [pc, #212]	; (800d9d8 <__ieee754_atan2+0x178>)
 800d904:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800d908:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d90c:	e7c9      	b.n	800d8a2 <__ieee754_atan2+0x42>
 800d90e:	2c02      	cmp	r4, #2
 800d910:	d848      	bhi.n	800d9a4 <__ieee754_atan2+0x144>
 800d912:	4b32      	ldr	r3, [pc, #200]	; (800d9dc <__ieee754_atan2+0x17c>)
 800d914:	e7f6      	b.n	800d904 <__ieee754_atan2+0xa4>
 800d916:	4573      	cmp	r3, lr
 800d918:	d0e4      	beq.n	800d8e4 <__ieee754_atan2+0x84>
 800d91a:	1a9b      	subs	r3, r3, r2
 800d91c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800d920:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d924:	da1e      	bge.n	800d964 <__ieee754_atan2+0x104>
 800d926:	2f00      	cmp	r7, #0
 800d928:	da01      	bge.n	800d92e <__ieee754_atan2+0xce>
 800d92a:	323c      	adds	r2, #60	; 0x3c
 800d92c:	db1e      	blt.n	800d96c <__ieee754_atan2+0x10c>
 800d92e:	4632      	mov	r2, r6
 800d930:	463b      	mov	r3, r7
 800d932:	f7f2 ffab 	bl	800088c <__aeabi_ddiv>
 800d936:	ec41 0b10 	vmov	d0, r0, r1
 800d93a:	f000 f9fd 	bl	800dd38 <fabs>
 800d93e:	f000 f85b 	bl	800d9f8 <atan>
 800d942:	ec51 0b10 	vmov	r0, r1, d0
 800d946:	2c01      	cmp	r4, #1
 800d948:	d013      	beq.n	800d972 <__ieee754_atan2+0x112>
 800d94a:	2c02      	cmp	r4, #2
 800d94c:	d015      	beq.n	800d97a <__ieee754_atan2+0x11a>
 800d94e:	2c00      	cmp	r4, #0
 800d950:	d0a7      	beq.n	800d8a2 <__ieee754_atan2+0x42>
 800d952:	a319      	add	r3, pc, #100	; (adr r3, 800d9b8 <__ieee754_atan2+0x158>)
 800d954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d958:	f7f2 fcb6 	bl	80002c8 <__aeabi_dsub>
 800d95c:	a318      	add	r3, pc, #96	; (adr r3, 800d9c0 <__ieee754_atan2+0x160>)
 800d95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d962:	e014      	b.n	800d98e <__ieee754_atan2+0x12e>
 800d964:	a118      	add	r1, pc, #96	; (adr r1, 800d9c8 <__ieee754_atan2+0x168>)
 800d966:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d96a:	e7ec      	b.n	800d946 <__ieee754_atan2+0xe6>
 800d96c:	2000      	movs	r0, #0
 800d96e:	2100      	movs	r1, #0
 800d970:	e7e9      	b.n	800d946 <__ieee754_atan2+0xe6>
 800d972:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d976:	4619      	mov	r1, r3
 800d978:	e793      	b.n	800d8a2 <__ieee754_atan2+0x42>
 800d97a:	a30f      	add	r3, pc, #60	; (adr r3, 800d9b8 <__ieee754_atan2+0x158>)
 800d97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d980:	f7f2 fca2 	bl	80002c8 <__aeabi_dsub>
 800d984:	4602      	mov	r2, r0
 800d986:	460b      	mov	r3, r1
 800d988:	a10d      	add	r1, pc, #52	; (adr r1, 800d9c0 <__ieee754_atan2+0x160>)
 800d98a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d98e:	f7f2 fc9b 	bl	80002c8 <__aeabi_dsub>
 800d992:	e786      	b.n	800d8a2 <__ieee754_atan2+0x42>
 800d994:	a10a      	add	r1, pc, #40	; (adr r1, 800d9c0 <__ieee754_atan2+0x160>)
 800d996:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d99a:	e782      	b.n	800d8a2 <__ieee754_atan2+0x42>
 800d99c:	a10c      	add	r1, pc, #48	; (adr r1, 800d9d0 <__ieee754_atan2+0x170>)
 800d99e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9a2:	e77e      	b.n	800d8a2 <__ieee754_atan2+0x42>
 800d9a4:	2000      	movs	r0, #0
 800d9a6:	2100      	movs	r1, #0
 800d9a8:	e77b      	b.n	800d8a2 <__ieee754_atan2+0x42>
 800d9aa:	a107      	add	r1, pc, #28	; (adr r1, 800d9c8 <__ieee754_atan2+0x168>)
 800d9ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9b0:	e777      	b.n	800d8a2 <__ieee754_atan2+0x42>
 800d9b2:	bf00      	nop
 800d9b4:	f3af 8000 	nop.w
 800d9b8:	33145c07 	.word	0x33145c07
 800d9bc:	3ca1a626 	.word	0x3ca1a626
 800d9c0:	54442d18 	.word	0x54442d18
 800d9c4:	400921fb 	.word	0x400921fb
 800d9c8:	54442d18 	.word	0x54442d18
 800d9cc:	3ff921fb 	.word	0x3ff921fb
 800d9d0:	54442d18 	.word	0x54442d18
 800d9d4:	3fe921fb 	.word	0x3fe921fb
 800d9d8:	0800e7a8 	.word	0x0800e7a8
 800d9dc:	0800e7c0 	.word	0x0800e7c0
 800d9e0:	54442d18 	.word	0x54442d18
 800d9e4:	c00921fb 	.word	0xc00921fb
 800d9e8:	54442d18 	.word	0x54442d18
 800d9ec:	bff921fb 	.word	0xbff921fb
 800d9f0:	7ff00000 	.word	0x7ff00000
 800d9f4:	00000000 	.word	0x00000000

0800d9f8 <atan>:
 800d9f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9fc:	ec55 4b10 	vmov	r4, r5, d0
 800da00:	4bc3      	ldr	r3, [pc, #780]	; (800dd10 <atan+0x318>)
 800da02:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800da06:	429e      	cmp	r6, r3
 800da08:	46ab      	mov	fp, r5
 800da0a:	dd18      	ble.n	800da3e <atan+0x46>
 800da0c:	4bc1      	ldr	r3, [pc, #772]	; (800dd14 <atan+0x31c>)
 800da0e:	429e      	cmp	r6, r3
 800da10:	dc01      	bgt.n	800da16 <atan+0x1e>
 800da12:	d109      	bne.n	800da28 <atan+0x30>
 800da14:	b144      	cbz	r4, 800da28 <atan+0x30>
 800da16:	4622      	mov	r2, r4
 800da18:	462b      	mov	r3, r5
 800da1a:	4620      	mov	r0, r4
 800da1c:	4629      	mov	r1, r5
 800da1e:	f7f2 fc55 	bl	80002cc <__adddf3>
 800da22:	4604      	mov	r4, r0
 800da24:	460d      	mov	r5, r1
 800da26:	e006      	b.n	800da36 <atan+0x3e>
 800da28:	f1bb 0f00 	cmp.w	fp, #0
 800da2c:	f300 8131 	bgt.w	800dc92 <atan+0x29a>
 800da30:	a59b      	add	r5, pc, #620	; (adr r5, 800dca0 <atan+0x2a8>)
 800da32:	e9d5 4500 	ldrd	r4, r5, [r5]
 800da36:	ec45 4b10 	vmov	d0, r4, r5
 800da3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da3e:	4bb6      	ldr	r3, [pc, #728]	; (800dd18 <atan+0x320>)
 800da40:	429e      	cmp	r6, r3
 800da42:	dc14      	bgt.n	800da6e <atan+0x76>
 800da44:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800da48:	429e      	cmp	r6, r3
 800da4a:	dc0d      	bgt.n	800da68 <atan+0x70>
 800da4c:	a396      	add	r3, pc, #600	; (adr r3, 800dca8 <atan+0x2b0>)
 800da4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da52:	ee10 0a10 	vmov	r0, s0
 800da56:	4629      	mov	r1, r5
 800da58:	f7f2 fc38 	bl	80002cc <__adddf3>
 800da5c:	4baf      	ldr	r3, [pc, #700]	; (800dd1c <atan+0x324>)
 800da5e:	2200      	movs	r2, #0
 800da60:	f7f3 f87a 	bl	8000b58 <__aeabi_dcmpgt>
 800da64:	2800      	cmp	r0, #0
 800da66:	d1e6      	bne.n	800da36 <atan+0x3e>
 800da68:	f04f 3aff 	mov.w	sl, #4294967295
 800da6c:	e02b      	b.n	800dac6 <atan+0xce>
 800da6e:	f000 f963 	bl	800dd38 <fabs>
 800da72:	4bab      	ldr	r3, [pc, #684]	; (800dd20 <atan+0x328>)
 800da74:	429e      	cmp	r6, r3
 800da76:	ec55 4b10 	vmov	r4, r5, d0
 800da7a:	f300 80bf 	bgt.w	800dbfc <atan+0x204>
 800da7e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800da82:	429e      	cmp	r6, r3
 800da84:	f300 80a0 	bgt.w	800dbc8 <atan+0x1d0>
 800da88:	ee10 2a10 	vmov	r2, s0
 800da8c:	ee10 0a10 	vmov	r0, s0
 800da90:	462b      	mov	r3, r5
 800da92:	4629      	mov	r1, r5
 800da94:	f7f2 fc1a 	bl	80002cc <__adddf3>
 800da98:	4ba0      	ldr	r3, [pc, #640]	; (800dd1c <atan+0x324>)
 800da9a:	2200      	movs	r2, #0
 800da9c:	f7f2 fc14 	bl	80002c8 <__aeabi_dsub>
 800daa0:	2200      	movs	r2, #0
 800daa2:	4606      	mov	r6, r0
 800daa4:	460f      	mov	r7, r1
 800daa6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800daaa:	4620      	mov	r0, r4
 800daac:	4629      	mov	r1, r5
 800daae:	f7f2 fc0d 	bl	80002cc <__adddf3>
 800dab2:	4602      	mov	r2, r0
 800dab4:	460b      	mov	r3, r1
 800dab6:	4630      	mov	r0, r6
 800dab8:	4639      	mov	r1, r7
 800daba:	f7f2 fee7 	bl	800088c <__aeabi_ddiv>
 800dabe:	f04f 0a00 	mov.w	sl, #0
 800dac2:	4604      	mov	r4, r0
 800dac4:	460d      	mov	r5, r1
 800dac6:	4622      	mov	r2, r4
 800dac8:	462b      	mov	r3, r5
 800daca:	4620      	mov	r0, r4
 800dacc:	4629      	mov	r1, r5
 800dace:	f7f2 fdb3 	bl	8000638 <__aeabi_dmul>
 800dad2:	4602      	mov	r2, r0
 800dad4:	460b      	mov	r3, r1
 800dad6:	4680      	mov	r8, r0
 800dad8:	4689      	mov	r9, r1
 800dada:	f7f2 fdad 	bl	8000638 <__aeabi_dmul>
 800dade:	a374      	add	r3, pc, #464	; (adr r3, 800dcb0 <atan+0x2b8>)
 800dae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dae4:	4606      	mov	r6, r0
 800dae6:	460f      	mov	r7, r1
 800dae8:	f7f2 fda6 	bl	8000638 <__aeabi_dmul>
 800daec:	a372      	add	r3, pc, #456	; (adr r3, 800dcb8 <atan+0x2c0>)
 800daee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf2:	f7f2 fbeb 	bl	80002cc <__adddf3>
 800daf6:	4632      	mov	r2, r6
 800daf8:	463b      	mov	r3, r7
 800dafa:	f7f2 fd9d 	bl	8000638 <__aeabi_dmul>
 800dafe:	a370      	add	r3, pc, #448	; (adr r3, 800dcc0 <atan+0x2c8>)
 800db00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db04:	f7f2 fbe2 	bl	80002cc <__adddf3>
 800db08:	4632      	mov	r2, r6
 800db0a:	463b      	mov	r3, r7
 800db0c:	f7f2 fd94 	bl	8000638 <__aeabi_dmul>
 800db10:	a36d      	add	r3, pc, #436	; (adr r3, 800dcc8 <atan+0x2d0>)
 800db12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db16:	f7f2 fbd9 	bl	80002cc <__adddf3>
 800db1a:	4632      	mov	r2, r6
 800db1c:	463b      	mov	r3, r7
 800db1e:	f7f2 fd8b 	bl	8000638 <__aeabi_dmul>
 800db22:	a36b      	add	r3, pc, #428	; (adr r3, 800dcd0 <atan+0x2d8>)
 800db24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db28:	f7f2 fbd0 	bl	80002cc <__adddf3>
 800db2c:	4632      	mov	r2, r6
 800db2e:	463b      	mov	r3, r7
 800db30:	f7f2 fd82 	bl	8000638 <__aeabi_dmul>
 800db34:	a368      	add	r3, pc, #416	; (adr r3, 800dcd8 <atan+0x2e0>)
 800db36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db3a:	f7f2 fbc7 	bl	80002cc <__adddf3>
 800db3e:	4642      	mov	r2, r8
 800db40:	464b      	mov	r3, r9
 800db42:	f7f2 fd79 	bl	8000638 <__aeabi_dmul>
 800db46:	a366      	add	r3, pc, #408	; (adr r3, 800dce0 <atan+0x2e8>)
 800db48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db4c:	4680      	mov	r8, r0
 800db4e:	4689      	mov	r9, r1
 800db50:	4630      	mov	r0, r6
 800db52:	4639      	mov	r1, r7
 800db54:	f7f2 fd70 	bl	8000638 <__aeabi_dmul>
 800db58:	a363      	add	r3, pc, #396	; (adr r3, 800dce8 <atan+0x2f0>)
 800db5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db5e:	f7f2 fbb3 	bl	80002c8 <__aeabi_dsub>
 800db62:	4632      	mov	r2, r6
 800db64:	463b      	mov	r3, r7
 800db66:	f7f2 fd67 	bl	8000638 <__aeabi_dmul>
 800db6a:	a361      	add	r3, pc, #388	; (adr r3, 800dcf0 <atan+0x2f8>)
 800db6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db70:	f7f2 fbaa 	bl	80002c8 <__aeabi_dsub>
 800db74:	4632      	mov	r2, r6
 800db76:	463b      	mov	r3, r7
 800db78:	f7f2 fd5e 	bl	8000638 <__aeabi_dmul>
 800db7c:	a35e      	add	r3, pc, #376	; (adr r3, 800dcf8 <atan+0x300>)
 800db7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db82:	f7f2 fba1 	bl	80002c8 <__aeabi_dsub>
 800db86:	4632      	mov	r2, r6
 800db88:	463b      	mov	r3, r7
 800db8a:	f7f2 fd55 	bl	8000638 <__aeabi_dmul>
 800db8e:	a35c      	add	r3, pc, #368	; (adr r3, 800dd00 <atan+0x308>)
 800db90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db94:	f7f2 fb98 	bl	80002c8 <__aeabi_dsub>
 800db98:	4632      	mov	r2, r6
 800db9a:	463b      	mov	r3, r7
 800db9c:	f7f2 fd4c 	bl	8000638 <__aeabi_dmul>
 800dba0:	4602      	mov	r2, r0
 800dba2:	460b      	mov	r3, r1
 800dba4:	4640      	mov	r0, r8
 800dba6:	4649      	mov	r1, r9
 800dba8:	f7f2 fb90 	bl	80002cc <__adddf3>
 800dbac:	4622      	mov	r2, r4
 800dbae:	462b      	mov	r3, r5
 800dbb0:	f7f2 fd42 	bl	8000638 <__aeabi_dmul>
 800dbb4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800dbb8:	4602      	mov	r2, r0
 800dbba:	460b      	mov	r3, r1
 800dbbc:	d14b      	bne.n	800dc56 <atan+0x25e>
 800dbbe:	4620      	mov	r0, r4
 800dbc0:	4629      	mov	r1, r5
 800dbc2:	f7f2 fb81 	bl	80002c8 <__aeabi_dsub>
 800dbc6:	e72c      	b.n	800da22 <atan+0x2a>
 800dbc8:	ee10 0a10 	vmov	r0, s0
 800dbcc:	4b53      	ldr	r3, [pc, #332]	; (800dd1c <atan+0x324>)
 800dbce:	2200      	movs	r2, #0
 800dbd0:	4629      	mov	r1, r5
 800dbd2:	f7f2 fb79 	bl	80002c8 <__aeabi_dsub>
 800dbd6:	4b51      	ldr	r3, [pc, #324]	; (800dd1c <atan+0x324>)
 800dbd8:	4606      	mov	r6, r0
 800dbda:	460f      	mov	r7, r1
 800dbdc:	2200      	movs	r2, #0
 800dbde:	4620      	mov	r0, r4
 800dbe0:	4629      	mov	r1, r5
 800dbe2:	f7f2 fb73 	bl	80002cc <__adddf3>
 800dbe6:	4602      	mov	r2, r0
 800dbe8:	460b      	mov	r3, r1
 800dbea:	4630      	mov	r0, r6
 800dbec:	4639      	mov	r1, r7
 800dbee:	f7f2 fe4d 	bl	800088c <__aeabi_ddiv>
 800dbf2:	f04f 0a01 	mov.w	sl, #1
 800dbf6:	4604      	mov	r4, r0
 800dbf8:	460d      	mov	r5, r1
 800dbfa:	e764      	b.n	800dac6 <atan+0xce>
 800dbfc:	4b49      	ldr	r3, [pc, #292]	; (800dd24 <atan+0x32c>)
 800dbfe:	429e      	cmp	r6, r3
 800dc00:	da1d      	bge.n	800dc3e <atan+0x246>
 800dc02:	ee10 0a10 	vmov	r0, s0
 800dc06:	4b48      	ldr	r3, [pc, #288]	; (800dd28 <atan+0x330>)
 800dc08:	2200      	movs	r2, #0
 800dc0a:	4629      	mov	r1, r5
 800dc0c:	f7f2 fb5c 	bl	80002c8 <__aeabi_dsub>
 800dc10:	4b45      	ldr	r3, [pc, #276]	; (800dd28 <atan+0x330>)
 800dc12:	4606      	mov	r6, r0
 800dc14:	460f      	mov	r7, r1
 800dc16:	2200      	movs	r2, #0
 800dc18:	4620      	mov	r0, r4
 800dc1a:	4629      	mov	r1, r5
 800dc1c:	f7f2 fd0c 	bl	8000638 <__aeabi_dmul>
 800dc20:	4b3e      	ldr	r3, [pc, #248]	; (800dd1c <atan+0x324>)
 800dc22:	2200      	movs	r2, #0
 800dc24:	f7f2 fb52 	bl	80002cc <__adddf3>
 800dc28:	4602      	mov	r2, r0
 800dc2a:	460b      	mov	r3, r1
 800dc2c:	4630      	mov	r0, r6
 800dc2e:	4639      	mov	r1, r7
 800dc30:	f7f2 fe2c 	bl	800088c <__aeabi_ddiv>
 800dc34:	f04f 0a02 	mov.w	sl, #2
 800dc38:	4604      	mov	r4, r0
 800dc3a:	460d      	mov	r5, r1
 800dc3c:	e743      	b.n	800dac6 <atan+0xce>
 800dc3e:	462b      	mov	r3, r5
 800dc40:	ee10 2a10 	vmov	r2, s0
 800dc44:	4939      	ldr	r1, [pc, #228]	; (800dd2c <atan+0x334>)
 800dc46:	2000      	movs	r0, #0
 800dc48:	f7f2 fe20 	bl	800088c <__aeabi_ddiv>
 800dc4c:	f04f 0a03 	mov.w	sl, #3
 800dc50:	4604      	mov	r4, r0
 800dc52:	460d      	mov	r5, r1
 800dc54:	e737      	b.n	800dac6 <atan+0xce>
 800dc56:	4b36      	ldr	r3, [pc, #216]	; (800dd30 <atan+0x338>)
 800dc58:	4e36      	ldr	r6, [pc, #216]	; (800dd34 <atan+0x33c>)
 800dc5a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800dc5e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800dc62:	e9da 2300 	ldrd	r2, r3, [sl]
 800dc66:	f7f2 fb2f 	bl	80002c8 <__aeabi_dsub>
 800dc6a:	4622      	mov	r2, r4
 800dc6c:	462b      	mov	r3, r5
 800dc6e:	f7f2 fb2b 	bl	80002c8 <__aeabi_dsub>
 800dc72:	4602      	mov	r2, r0
 800dc74:	460b      	mov	r3, r1
 800dc76:	e9d6 0100 	ldrd	r0, r1, [r6]
 800dc7a:	f7f2 fb25 	bl	80002c8 <__aeabi_dsub>
 800dc7e:	f1bb 0f00 	cmp.w	fp, #0
 800dc82:	4604      	mov	r4, r0
 800dc84:	460d      	mov	r5, r1
 800dc86:	f6bf aed6 	bge.w	800da36 <atan+0x3e>
 800dc8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dc8e:	461d      	mov	r5, r3
 800dc90:	e6d1      	b.n	800da36 <atan+0x3e>
 800dc92:	a51d      	add	r5, pc, #116	; (adr r5, 800dd08 <atan+0x310>)
 800dc94:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dc98:	e6cd      	b.n	800da36 <atan+0x3e>
 800dc9a:	bf00      	nop
 800dc9c:	f3af 8000 	nop.w
 800dca0:	54442d18 	.word	0x54442d18
 800dca4:	bff921fb 	.word	0xbff921fb
 800dca8:	8800759c 	.word	0x8800759c
 800dcac:	7e37e43c 	.word	0x7e37e43c
 800dcb0:	e322da11 	.word	0xe322da11
 800dcb4:	3f90ad3a 	.word	0x3f90ad3a
 800dcb8:	24760deb 	.word	0x24760deb
 800dcbc:	3fa97b4b 	.word	0x3fa97b4b
 800dcc0:	a0d03d51 	.word	0xa0d03d51
 800dcc4:	3fb10d66 	.word	0x3fb10d66
 800dcc8:	c54c206e 	.word	0xc54c206e
 800dccc:	3fb745cd 	.word	0x3fb745cd
 800dcd0:	920083ff 	.word	0x920083ff
 800dcd4:	3fc24924 	.word	0x3fc24924
 800dcd8:	5555550d 	.word	0x5555550d
 800dcdc:	3fd55555 	.word	0x3fd55555
 800dce0:	2c6a6c2f 	.word	0x2c6a6c2f
 800dce4:	bfa2b444 	.word	0xbfa2b444
 800dce8:	52defd9a 	.word	0x52defd9a
 800dcec:	3fadde2d 	.word	0x3fadde2d
 800dcf0:	af749a6d 	.word	0xaf749a6d
 800dcf4:	3fb3b0f2 	.word	0x3fb3b0f2
 800dcf8:	fe231671 	.word	0xfe231671
 800dcfc:	3fbc71c6 	.word	0x3fbc71c6
 800dd00:	9998ebc4 	.word	0x9998ebc4
 800dd04:	3fc99999 	.word	0x3fc99999
 800dd08:	54442d18 	.word	0x54442d18
 800dd0c:	3ff921fb 	.word	0x3ff921fb
 800dd10:	440fffff 	.word	0x440fffff
 800dd14:	7ff00000 	.word	0x7ff00000
 800dd18:	3fdbffff 	.word	0x3fdbffff
 800dd1c:	3ff00000 	.word	0x3ff00000
 800dd20:	3ff2ffff 	.word	0x3ff2ffff
 800dd24:	40038000 	.word	0x40038000
 800dd28:	3ff80000 	.word	0x3ff80000
 800dd2c:	bff00000 	.word	0xbff00000
 800dd30:	0800e7f8 	.word	0x0800e7f8
 800dd34:	0800e7d8 	.word	0x0800e7d8

0800dd38 <fabs>:
 800dd38:	ec51 0b10 	vmov	r0, r1, d0
 800dd3c:	ee10 2a10 	vmov	r2, s0
 800dd40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dd44:	ec43 2b10 	vmov	d0, r2, r3
 800dd48:	4770      	bx	lr
	...

0800dd4c <_init>:
 800dd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd4e:	bf00      	nop
 800dd50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd52:	bc08      	pop	{r3}
 800dd54:	469e      	mov	lr, r3
 800dd56:	4770      	bx	lr

0800dd58 <_fini>:
 800dd58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd5a:	bf00      	nop
 800dd5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd5e:	bc08      	pop	{r3}
 800dd60:	469e      	mov	lr, r3
 800dd62:	4770      	bx	lr
