
L432_GSV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c18  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003da4  08003da4  00013da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e2c  08003e2c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003e2c  08003e2c  00013e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e34  08003e34  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e34  08003e34  00013e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e38  08003e38  00013e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  2000000c  08003e48  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  08003e48  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7b6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002047  00000000  00000000  0002d7f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  0002f840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c0  00000000  00000000  000302c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f793  00000000  00000000  00030c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c9b5  00000000  00000000  0005041b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd53b  00000000  00000000  0005cdd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011a30b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029b8  00000000  00000000  0011a35c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003d8c 	.word	0x08003d8c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003d8c 	.word	0x08003d8c

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HX1_Initialise>:
/*
 * INITIALISATION
 */

void HX1_Initialise( HX1 *dev, UART_HandleTypeDef *uartHandleRF, UART_HandleTypeDef *uartHandleGS, GPIO_TypeDef *EN_GPIO, uint16_t EN_Pin )
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
 80004dc:	603b      	str	r3, [r7, #0]
	// Set UART handle that will be used to transmit messages
	dev->uartHandleRF	=	uartHandleRF;
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	68ba      	ldr	r2, [r7, #8]
 80004e2:	601a      	str	r2, [r3, #0]

	// Set UART handle to communicate with GS
	dev->uartHandleGS	= 	uartHandleGS;
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	605a      	str	r2, [r3, #4]

	// Set up Enable pin for the transmitter
	dev->EN_GPIO	=	EN_GPIO;
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	683a      	ldr	r2, [r7, #0]
 80004ee:	60da      	str	r2, [r3, #12]

	dev->EN_Pin		=	EN_Pin;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	8b3a      	ldrh	r2, [r7, #24]
 80004f4:	811a      	strh	r2, [r3, #8]

//	HAL_UART_Receive_IT( dev->uartHandleGS, dev->rx_gs, GS_MSG_SIZE);

	HAL_UART_Receive_IT( dev->uartHandleGS, dev->rx_gs, 2);
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	6858      	ldr	r0, [r3, #4]
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	3391      	adds	r3, #145	; 0x91
 80004fe:	2202      	movs	r2, #2
 8000500:	4619      	mov	r1, r3
 8000502:	f002 fa0b 	bl	800291c <HAL_UART_Receive_IT>

}
 8000506:	bf00      	nop
 8000508:	3710      	adds	r7, #16
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
	...

08000510 <HX1_UARTGS>:
/*
 * HIGH LEVEL FUNCTIONS
 */

void HX1_UARTGS( HX1 *dev)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	// Check for start CHAR
	if ( dev->rx_gs[0] == 0x55 )
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800051e:	2b55      	cmp	r3, #85	; 0x55
 8000520:	d116      	bne.n	8000550 <HX1_UARTGS+0x40>
	{
		// Increase start CHAR to show message rx
		dev->rx_gs[0]++;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8000528:	3301      	adds	r3, #1
 800052a:	b2da      	uxtb	r2, r3
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
		// Set Interrupt to RX rest of message
		HAL_UART_Receive_IT( dev->uartHandleGS, &dev->rx_gs[2], dev->rx_gs[1]+1);
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	6858      	ldr	r0, [r3, #4]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	f103 0193 	add.w	r1, r3, #147	; 0x93
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8000542:	b29b      	uxth	r3, r3
 8000544:	3301      	adds	r3, #1
 8000546:	b29b      	uxth	r3, r3
 8000548:	461a      	mov	r2, r3
 800054a:	f002 f9e7 	bl	800291c <HAL_UART_Receive_IT>
	{
		// For handshake, no time pressure here so can take time in interrupt
		HAL_UART_Receive_IT( dev->uartHandleGS, dev->rx_gs, 2);
		HAL_UART_Transmit( dev->uartHandleGS, (uint8_t*) "$\n", 2, HAL_MAX_DELAY );
	}
}
 800054e:	e035      	b.n	80005bc <HX1_UARTGS+0xac>
	else if (dev->rx_gs[0] == 0x56)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8000556:	2b56      	cmp	r3, #86	; 0x56
 8000558:	d116      	bne.n	8000588 <HX1_UARTGS+0x78>
		if (dev->rx_gs[dev->rx_gs[1]+2] == 0xAA)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8000560:	3302      	adds	r3, #2
 8000562:	687a      	ldr	r2, [r7, #4]
 8000564:	4413      	add	r3, r2
 8000566:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800056a:	2baa      	cmp	r3, #170	; 0xaa
 800056c:	d103      	bne.n	8000576 <HX1_UARTGS+0x66>
			dev->rx_flag = 1;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2201      	movs	r2, #1
 8000572:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
		HAL_UART_Receive_IT( dev->uartHandleGS, dev->rx_gs, 2);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	6858      	ldr	r0, [r3, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	3391      	adds	r3, #145	; 0x91
 800057e:	2202      	movs	r2, #2
 8000580:	4619      	mov	r1, r3
 8000582:	f002 f9cb 	bl	800291c <HAL_UART_Receive_IT>
}
 8000586:	e019      	b.n	80005bc <HX1_UARTGS+0xac>
	else if (dev->rx_gs[0] == 0x80 && dev->rx_gs[1] == 0x80)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800058e:	2b80      	cmp	r3, #128	; 0x80
 8000590:	d114      	bne.n	80005bc <HX1_UARTGS+0xac>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8000598:	2b80      	cmp	r3, #128	; 0x80
 800059a:	d10f      	bne.n	80005bc <HX1_UARTGS+0xac>
		HAL_UART_Receive_IT( dev->uartHandleGS, dev->rx_gs, 2);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	6858      	ldr	r0, [r3, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	3391      	adds	r3, #145	; 0x91
 80005a4:	2202      	movs	r2, #2
 80005a6:	4619      	mov	r1, r3
 80005a8:	f002 f9b8 	bl	800291c <HAL_UART_Receive_IT>
		HAL_UART_Transmit( dev->uartHandleGS, (uint8_t*) "$\n", 2, HAL_MAX_DELAY );
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	6858      	ldr	r0, [r3, #4]
 80005b0:	f04f 33ff 	mov.w	r3, #4294967295
 80005b4:	2202      	movs	r2, #2
 80005b6:	4903      	ldr	r1, [pc, #12]	; (80005c4 <HX1_UARTGS+0xb4>)
 80005b8:	f002 f91c 	bl	80027f4 <HAL_UART_Transmit>
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	08003da4 	.word	0x08003da4

080005c8 <HX1_PROCESS>:

HAL_StatusTypeDef HX1_PROCESS( HX1 *dev )
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	if ( dev->rx_flag )
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d036      	beq.n	8000648 <HX1_PROCESS+0x80>
	{
		HX1_SendMessage( dev, &dev->rx_gs[2], dev->rx_gs[1] );
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	f103 0193 	add.w	r1, r3, #147	; 0x93
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80005e6:	461a      	mov	r2, r3
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f000 f839 	bl	8000660 <HX1_SendMessage>
		if (dev->rx_gs[2] == 0)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d108      	bne.n	800060a <HX1_PROCESS+0x42>
			HAL_UART_Transmit( dev->uartHandleGS, (uint8_t*) "TEL\r\n", 5, HAL_MAX_DELAY );
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6858      	ldr	r0, [r3, #4]
 80005fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000600:	2205      	movs	r2, #5
 8000602:	4914      	ldr	r1, [pc, #80]	; (8000654 <HX1_PROCESS+0x8c>)
 8000604:	f002 f8f6 	bl	80027f4 <HAL_UART_Transmit>
 8000608:	e01a      	b.n	8000640 <HX1_PROCESS+0x78>
		else if (dev->rx_gs[2] == 1)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000610:	2b01      	cmp	r3, #1
 8000612:	d108      	bne.n	8000626 <HX1_PROCESS+0x5e>
			HAL_UART_Transmit( dev->uartHandleGS, (uint8_t*) "CMD\r\n", 5, HAL_MAX_DELAY );
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	6858      	ldr	r0, [r3, #4]
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	2205      	movs	r2, #5
 800061e:	490e      	ldr	r1, [pc, #56]	; (8000658 <HX1_PROCESS+0x90>)
 8000620:	f002 f8e8 	bl	80027f4 <HAL_UART_Transmit>
 8000624:	e00c      	b.n	8000640 <HX1_PROCESS+0x78>
		else if (dev->rx_gs[2] == 2)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800062c:	2b02      	cmp	r3, #2
 800062e:	d107      	bne.n	8000640 <HX1_PROCESS+0x78>
			HAL_UART_Transmit( dev->uartHandleGS, (uint8_t*) "DIR\r\n", 5, HAL_MAX_DELAY );
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	6858      	ldr	r0, [r3, #4]
 8000634:	f04f 33ff 	mov.w	r3, #4294967295
 8000638:	2205      	movs	r2, #5
 800063a:	4908      	ldr	r1, [pc, #32]	; (800065c <HX1_PROCESS+0x94>)
 800063c:	f002 f8da 	bl	80027f4 <HAL_UART_Transmit>
		dev->rx_flag = 0;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2200      	movs	r2, #0
 8000644:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	}
	return HAL_OK;
 8000648:	2300      	movs	r3, #0
}
 800064a:	4618      	mov	r0, r3
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	08003da8 	.word	0x08003da8
 8000658:	08003db0 	.word	0x08003db0
 800065c:	08003db8 	.word	0x08003db8

08000660 <HX1_SendMessage>:
/*
 * LOW LEVEL FUNCTIONS
 */

HAL_StatusTypeDef HX1_SendMessage( HX1 *dev, uint8_t *dataString, uint8_t dataLength )
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	60f8      	str	r0, [r7, #12]
 8000668:	60b9      	str	r1, [r7, #8]
 800066a:	4613      	mov	r3, r2
 800066c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin( dev->EN_GPIO, dev->EN_Pin, GPIO_PIN_SET );
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	68d8      	ldr	r0, [r3, #12]
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	891b      	ldrh	r3, [r3, #8]
 8000676:	2201      	movs	r2, #1
 8000678:	4619      	mov	r1, r3
 800067a:	f000 feb1 	bl	80013e0 <HAL_GPIO_WritePin>
	startMessage( dev );
 800067e:	68f8      	ldr	r0, [r7, #12]
 8000680:	f000 f822 	bl	80006c8 <startMessage>
	addString( dev, dataString, dataLength);
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	461a      	mov	r2, r3
 8000688:	68b9      	ldr	r1, [r7, #8]
 800068a:	68f8      	ldr	r0, [r7, #12]
 800068c:	f000 f883 	bl	8000796 <addString>
	endMessage( dev );
 8000690:	68f8      	ldr	r0, [r7, #12]
 8000692:	f000 f85f 	bl	8000754 <endMessage>
	HAL_UART_Transmit(dev->uartHandleRF, dev->message, dev->messageLength, HAL_MAX_DELAY);
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	6818      	ldr	r0, [r3, #0]
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	f103 0111 	add.w	r1, r3, #17
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	7c1b      	ldrb	r3, [r3, #16]
 80006a4:	b29a      	uxth	r2, r3
 80006a6:	f04f 33ff 	mov.w	r3, #4294967295
 80006aa:	f002 f8a3 	bl	80027f4 <HAL_UART_Transmit>
	HAL_GPIO_WritePin( dev->EN_GPIO, dev->EN_Pin, GPIO_PIN_RESET );
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	68d8      	ldr	r0, [r3, #12]
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	891b      	ldrh	r3, [r3, #8]
 80006b6:	2200      	movs	r2, #0
 80006b8:	4619      	mov	r1, r3
 80006ba:	f000 fe91 	bl	80013e0 <HAL_GPIO_WritePin>
	return HAL_OK;
 80006be:	2300      	movs	r3, #0
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3710      	adds	r7, #16
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <startMessage>:

void startMessage( HX1 *dev )
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	// Send PREAMBLE
	dev->messageLength = 0;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2200      	movs	r2, #0
 80006d4:	741a      	strb	r2, [r3, #16]
	for (; dev->messageLength < PREAMBLE_LEN; dev->messageLength++)
 80006d6:	e00c      	b.n	80006f2 <startMessage+0x2a>
	{
		dev->message[dev->messageLength] = FLAG_TYPE;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	7c1b      	ldrb	r3, [r3, #16]
 80006dc:	461a      	mov	r2, r3
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4413      	add	r3, r2
 80006e2:	227e      	movs	r2, #126	; 0x7e
 80006e4:	745a      	strb	r2, [r3, #17]
	for (; dev->messageLength < PREAMBLE_LEN; dev->messageLength++)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	7c1b      	ldrb	r3, [r3, #16]
 80006ea:	3301      	adds	r3, #1
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	741a      	strb	r2, [r3, #16]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	7c1b      	ldrb	r3, [r3, #16]
 80006f6:	2b17      	cmp	r3, #23
 80006f8:	d9ee      	bls.n	80006d8 <startMessage+0x10>
	}

	// Send SYNC
	for (; dev->messageLength < SYNC_LEN + PREAMBLE_LEN; dev->messageLength++)
 80006fa:	e01b      	b.n	8000734 <startMessage+0x6c>
	{
		if ((dev->messageLength-PREAMBLE_LEN)%2 == 0)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	7c1b      	ldrb	r3, [r3, #16]
 8000700:	3b18      	subs	r3, #24
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	2b00      	cmp	r3, #0
 8000708:	d107      	bne.n	800071a <startMessage+0x52>
		{
			dev->message[dev->messageLength] = SYNC1;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	7c1b      	ldrb	r3, [r3, #16]
 800070e:	461a      	mov	r2, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4413      	add	r3, r2
 8000714:	222a      	movs	r2, #42	; 0x2a
 8000716:	745a      	strb	r2, [r3, #17]
 8000718:	e006      	b.n	8000728 <startMessage+0x60>
		}
		else
		{
			dev->message[dev->messageLength] = SYNC2;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	7c1b      	ldrb	r3, [r3, #16]
 800071e:	461a      	mov	r2, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4413      	add	r3, r2
 8000724:	2255      	movs	r2, #85	; 0x55
 8000726:	745a      	strb	r2, [r3, #17]
	for (; dev->messageLength < SYNC_LEN + PREAMBLE_LEN; dev->messageLength++)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	7c1b      	ldrb	r3, [r3, #16]
 800072c:	3301      	adds	r3, #1
 800072e:	b2da      	uxtb	r2, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	741a      	strb	r2, [r3, #16]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	7c1b      	ldrb	r3, [r3, #16]
 8000738:	2b20      	cmp	r3, #32
 800073a:	d9df      	bls.n	80006fc <startMessage+0x34>
		}
	}

	// Send ID
	addString(dev, (uint8_t *) "SAT", 3);
 800073c:	2203      	movs	r2, #3
 800073e:	4904      	ldr	r1, [pc, #16]	; (8000750 <startMessage+0x88>)
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f000 f828 	bl	8000796 <addString>

}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	08003dc0 	.word	0x08003dc0

08000754 <endMessage>:

void endMessage( HX1 *dev )
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	// ADD Checksum

	// Send Postamble
	for (uint8_t i = 0; i < POSTAMBLE_LEN; i++)
 800075c:	2300      	movs	r3, #0
 800075e:	73fb      	strb	r3, [r7, #15]
 8000760:	e00f      	b.n	8000782 <endMessage+0x2e>
	{
		dev->message[dev->messageLength] = FLAG_TYPE;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	7c1b      	ldrb	r3, [r3, #16]
 8000766:	461a      	mov	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4413      	add	r3, r2
 800076c:	227e      	movs	r2, #126	; 0x7e
 800076e:	745a      	strb	r2, [r3, #17]
		dev->messageLength++;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	7c1b      	ldrb	r3, [r3, #16]
 8000774:	3301      	adds	r3, #1
 8000776:	b2da      	uxtb	r2, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	741a      	strb	r2, [r3, #16]
	for (uint8_t i = 0; i < POSTAMBLE_LEN; i++)
 800077c:	7bfb      	ldrb	r3, [r7, #15]
 800077e:	3301      	adds	r3, #1
 8000780:	73fb      	strb	r3, [r7, #15]
 8000782:	7bfb      	ldrb	r3, [r7, #15]
 8000784:	2b04      	cmp	r3, #4
 8000786:	d9ec      	bls.n	8000762 <endMessage+0xe>
	}
}
 8000788:	bf00      	nop
 800078a:	bf00      	nop
 800078c:	3714      	adds	r7, #20
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <addString>:

void addString( HX1 *dev, uint8_t *string, uint8_t length )
{
 8000796:	b480      	push	{r7}
 8000798:	b087      	sub	sp, #28
 800079a:	af00      	add	r7, sp, #0
 800079c:	60f8      	str	r0, [r7, #12]
 800079e:	60b9      	str	r1, [r7, #8]
 80007a0:	4613      	mov	r3, r2
 80007a2:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < length; i++)
 80007a4:	2300      	movs	r3, #0
 80007a6:	75fb      	strb	r3, [r7, #23]
 80007a8:	e012      	b.n	80007d0 <addString+0x3a>
	{
		dev->message[dev->messageLength] = string[i];
 80007aa:	7dfb      	ldrb	r3, [r7, #23]
 80007ac:	68ba      	ldr	r2, [r7, #8]
 80007ae:	4413      	add	r3, r2
 80007b0:	68fa      	ldr	r2, [r7, #12]
 80007b2:	7c12      	ldrb	r2, [r2, #16]
 80007b4:	4611      	mov	r1, r2
 80007b6:	781a      	ldrb	r2, [r3, #0]
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	440b      	add	r3, r1
 80007bc:	745a      	strb	r2, [r3, #17]
		dev->messageLength++;
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	7c1b      	ldrb	r3, [r3, #16]
 80007c2:	3301      	adds	r3, #1
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	741a      	strb	r2, [r3, #16]
	for (uint8_t i = 0; i < length; i++)
 80007ca:	7dfb      	ldrb	r3, [r7, #23]
 80007cc:	3301      	adds	r3, #1
 80007ce:	75fb      	strb	r3, [r7, #23]
 80007d0:	7dfa      	ldrb	r2, [r7, #23]
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d3e8      	bcc.n	80007aa <addString+0x14>
	}
}
 80007d8:	bf00      	nop
 80007da:	bf00      	nop
 80007dc:	371c      	adds	r7, #28
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
	...

080007e8 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback( UART_HandleTypeDef *huart )
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
//	HX1_UARTRX( &transmitter );
	HX1_UARTGS( &transmitter );
 80007f0:	4803      	ldr	r0, [pc, #12]	; (8000800 <HAL_UART_RxCpltCallback+0x18>)
 80007f2:	f7ff fe8d 	bl	8000510 <HX1_UARTGS>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000130 	.word	0x20000130

08000804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080a:	f000 fa7a 	bl	8000d02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080e:	f000 f81b 	bl	8000848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000812:	f000 f8e1 	bl	80009d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000816:	f000 f8af 	bl	8000978 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800081a:	f000 f87d 	bl	8000918 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HX1_Initialise( &transmitter, &huart1, &huart2, LD3_GPIO_Port, LD3_Pin );
 800081e:	2308      	movs	r3, #8
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	4b05      	ldr	r3, [pc, #20]	; (8000838 <main+0x34>)
 8000824:	4a05      	ldr	r2, [pc, #20]	; (800083c <main+0x38>)
 8000826:	4906      	ldr	r1, [pc, #24]	; (8000840 <main+0x3c>)
 8000828:	4806      	ldr	r0, [pc, #24]	; (8000844 <main+0x40>)
 800082a:	f7ff fe51 	bl	80004d0 <HX1_Initialise>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  HX1_PROCESS( &transmitter );
 800082e:	4805      	ldr	r0, [pc, #20]	; (8000844 <main+0x40>)
 8000830:	f7ff feca 	bl	80005c8 <HX1_PROCESS>
 8000834:	e7fb      	b.n	800082e <main+0x2a>
 8000836:	bf00      	nop
 8000838:	48000400 	.word	0x48000400
 800083c:	200000ac 	.word	0x200000ac
 8000840:	20000028 	.word	0x20000028
 8000844:	20000130 	.word	0x20000130

08000848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b096      	sub	sp, #88	; 0x58
 800084c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	2244      	movs	r2, #68	; 0x44
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f003 fa90 	bl	8003d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	463b      	mov	r3, r7
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800086a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800086e:	f000 fded 	bl	800144c <HAL_PWREx_ControlVoltageScaling>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000878:	f000 f8f8 	bl	8000a6c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800087c:	f000 fdc8 	bl	8001410 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000880:	4b24      	ldr	r3, [pc, #144]	; (8000914 <SystemClock_Config+0xcc>)
 8000882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000886:	4a23      	ldr	r2, [pc, #140]	; (8000914 <SystemClock_Config+0xcc>)
 8000888:	f023 0318 	bic.w	r3, r3, #24
 800088c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8000890:	2316      	movs	r3, #22
 8000892:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000894:	2301      	movs	r3, #1
 8000896:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000898:	f44f 7380 	mov.w	r3, #256	; 0x100
 800089c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800089e:	2310      	movs	r3, #16
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008a2:	2301      	movs	r3, #1
 80008a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008aa:	2360      	movs	r3, #96	; 0x60
 80008ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ae:	2302      	movs	r3, #2
 80008b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80008b2:	2301      	movs	r3, #1
 80008b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008b6:	2301      	movs	r3, #1
 80008b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80008ba:	2310      	movs	r3, #16
 80008bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008be:	2307      	movs	r3, #7
 80008c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008c2:	2302      	movs	r3, #2
 80008c4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008c6:	2302      	movs	r3, #2
 80008c8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 fe12 	bl	80014f8 <HAL_RCC_OscConfig>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008da:	f000 f8c7 	bl	8000a6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008de:	230f      	movs	r3, #15
 80008e0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e2:	2303      	movs	r3, #3
 80008e4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008f2:	463b      	mov	r3, r7
 80008f4:	2101      	movs	r1, #1
 80008f6:	4618      	mov	r0, r3
 80008f8:	f001 fa12 	bl	8001d20 <HAL_RCC_ClockConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000902:	f000 f8b3 	bl	8000a6c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000906:	f001 fe25 	bl	8002554 <HAL_RCCEx_EnableMSIPLLMode>
}
 800090a:	bf00      	nop
 800090c:	3758      	adds	r7, #88	; 0x58
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40021000 	.word	0x40021000

08000918 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <MX_USART1_UART_Init+0x58>)
 800091e:	4a15      	ldr	r2, [pc, #84]	; (8000974 <MX_USART1_UART_Init+0x5c>)
 8000920:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 300;
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <MX_USART1_UART_Init+0x58>)
 8000924:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000928:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_USART1_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000930:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <MX_USART1_UART_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_USART1_UART_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_USART1_UART_Init+0x58>)
 800093e:	2208      	movs	r2, #8
 8000940:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <MX_USART1_UART_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_USART1_UART_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <MX_USART1_UART_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_USART1_UART_Init+0x58>)
 8000956:	2200      	movs	r2, #0
 8000958:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_USART1_UART_Init+0x58>)
 800095c:	f001 fefc 	bl	8002758 <HAL_UART_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000966:	f000 f881 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000028 	.word	0x20000028
 8000974:	40013800 	.word	0x40013800

08000978 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800097c:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_USART2_UART_Init+0x58>)
 800097e:	4a15      	ldr	r2, [pc, #84]	; (80009d4 <MX_USART2_UART_Init+0x5c>)
 8000980:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000982:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <MX_USART2_UART_Init+0x58>)
 8000984:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000988:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_USART2_UART_Init+0x58>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_USART2_UART_Init+0x58>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_USART2_UART_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_USART2_UART_Init+0x58>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <MX_USART2_UART_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_USART2_UART_Init+0x58>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <MX_USART2_UART_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_USART2_UART_Init+0x58>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ba:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_USART2_UART_Init+0x58>)
 80009bc:	f001 fecc 	bl	8002758 <HAL_UART_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009c6:	f000 f851 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200000ac 	.word	0x200000ac
 80009d4:	40004400 	.word	0x40004400

080009d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b088      	sub	sp, #32
 80009dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009de:	f107 030c 	add.w	r3, r7, #12
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
 80009ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ee:	4b1d      	ldr	r3, [pc, #116]	; (8000a64 <MX_GPIO_Init+0x8c>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	4a1c      	ldr	r2, [pc, #112]	; (8000a64 <MX_GPIO_Init+0x8c>)
 80009f4:	f043 0304 	orr.w	r3, r3, #4
 80009f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fa:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <MX_GPIO_Init+0x8c>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	f003 0304 	and.w	r3, r3, #4
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <MX_GPIO_Init+0x8c>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	4a16      	ldr	r2, [pc, #88]	; (8000a64 <MX_GPIO_Init+0x8c>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_GPIO_Init+0x8c>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_GPIO_Init+0x8c>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	4a10      	ldr	r2, [pc, #64]	; (8000a64 <MX_GPIO_Init+0x8c>)
 8000a24:	f043 0302 	orr.w	r3, r3, #2
 8000a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <MX_GPIO_Init+0x8c>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	f003 0302 	and.w	r3, r3, #2
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2108      	movs	r1, #8
 8000a3a:	480b      	ldr	r0, [pc, #44]	; (8000a68 <MX_GPIO_Init+0x90>)
 8000a3c:	f000 fcd0 	bl	80013e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000a40:	2308      	movs	r3, #8
 8000a42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 030c 	add.w	r3, r7, #12
 8000a54:	4619      	mov	r1, r3
 8000a56:	4804      	ldr	r0, [pc, #16]	; (8000a68 <MX_GPIO_Init+0x90>)
 8000a58:	f000 fb58 	bl	800110c <HAL_GPIO_Init>

}
 8000a5c:	bf00      	nop
 8000a5e:	3720      	adds	r7, #32
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40021000 	.word	0x40021000
 8000a68:	48000400 	.word	0x48000400

08000a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a70:	b672      	cpsid	i
}
 8000a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <Error_Handler+0x8>
	...

08000a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <HAL_MspInit+0x44>)
 8000a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a82:	4a0e      	ldr	r2, [pc, #56]	; (8000abc <HAL_MspInit+0x44>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6613      	str	r3, [r2, #96]	; 0x60
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <HAL_MspInit+0x44>)
 8000a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <HAL_MspInit+0x44>)
 8000a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9a:	4a08      	ldr	r2, [pc, #32]	; (8000abc <HAL_MspInit+0x44>)
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa0:	6593      	str	r3, [r2, #88]	; 0x58
 8000aa2:	4b06      	ldr	r3, [pc, #24]	; (8000abc <HAL_MspInit+0x44>)
 8000aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	40021000 	.word	0x40021000

08000ac0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b0a0      	sub	sp, #128	; 0x80
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ad8:	f107 0318 	add.w	r3, r7, #24
 8000adc:	2254      	movs	r2, #84	; 0x54
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f003 f94b 	bl	8003d7c <memset>
  if(huart->Instance==USART1)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a4b      	ldr	r2, [pc, #300]	; (8000c18 <HAL_UART_MspInit+0x158>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d138      	bne.n	8000b62 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000af0:	2301      	movs	r3, #1
 8000af2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8000af4:	2302      	movs	r3, #2
 8000af6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000af8:	f107 0318 	add.w	r3, r7, #24
 8000afc:	4618      	mov	r0, r3
 8000afe:	f001 fb33 	bl	8002168 <HAL_RCCEx_PeriphCLKConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b08:	f7ff ffb0 	bl	8000a6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b0c:	4b43      	ldr	r3, [pc, #268]	; (8000c1c <HAL_UART_MspInit+0x15c>)
 8000b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b10:	4a42      	ldr	r2, [pc, #264]	; (8000c1c <HAL_UART_MspInit+0x15c>)
 8000b12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b16:	6613      	str	r3, [r2, #96]	; 0x60
 8000b18:	4b40      	ldr	r3, [pc, #256]	; (8000c1c <HAL_UART_MspInit+0x15c>)
 8000b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b20:	617b      	str	r3, [r7, #20]
 8000b22:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b24:	4b3d      	ldr	r3, [pc, #244]	; (8000c1c <HAL_UART_MspInit+0x15c>)
 8000b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b28:	4a3c      	ldr	r2, [pc, #240]	; (8000c1c <HAL_UART_MspInit+0x15c>)
 8000b2a:	f043 0301 	orr.w	r3, r3, #1
 8000b2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b30:	4b3a      	ldr	r3, [pc, #232]	; (8000c1c <HAL_UART_MspInit+0x15c>)
 8000b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b34:	f003 0301 	and.w	r3, r3, #1
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b3c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b40:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b42:	2302      	movs	r3, #2
 8000b44:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b4e:	2307      	movs	r3, #7
 8000b50:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b52:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b56:	4619      	mov	r1, r3
 8000b58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b5c:	f000 fad6 	bl	800110c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b60:	e055      	b.n	8000c0e <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a2e      	ldr	r2, [pc, #184]	; (8000c20 <HAL_UART_MspInit+0x160>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d150      	bne.n	8000c0e <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b70:	2300      	movs	r3, #0
 8000b72:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b74:	f107 0318 	add.w	r3, r7, #24
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f001 faf5 	bl	8002168 <HAL_RCCEx_PeriphCLKConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8000b84:	f7ff ff72 	bl	8000a6c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b88:	4b24      	ldr	r3, [pc, #144]	; (8000c1c <HAL_UART_MspInit+0x15c>)
 8000b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b8c:	4a23      	ldr	r2, [pc, #140]	; (8000c1c <HAL_UART_MspInit+0x15c>)
 8000b8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b92:	6593      	str	r3, [r2, #88]	; 0x58
 8000b94:	4b21      	ldr	r3, [pc, #132]	; (8000c1c <HAL_UART_MspInit+0x15c>)
 8000b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba0:	4b1e      	ldr	r3, [pc, #120]	; (8000c1c <HAL_UART_MspInit+0x15c>)
 8000ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba4:	4a1d      	ldr	r2, [pc, #116]	; (8000c1c <HAL_UART_MspInit+0x15c>)
 8000ba6:	f043 0301 	orr.w	r3, r3, #1
 8000baa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bac:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <HAL_UART_MspInit+0x15c>)
 8000bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb0:	f003 0301 	and.w	r3, r3, #1
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000bb8:	2304      	movs	r3, #4
 8000bba:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bc8:	2307      	movs	r3, #7
 8000bca:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd6:	f000 fa99 	bl	800110c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bde:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be0:	2302      	movs	r3, #2
 8000be2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be8:	2303      	movs	r3, #3
 8000bea:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000bec:	2303      	movs	r3, #3
 8000bee:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfa:	f000 fa87 	bl	800110c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2100      	movs	r1, #0
 8000c02:	2026      	movs	r0, #38	; 0x26
 8000c04:	f000 f9cd 	bl	8000fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c08:	2026      	movs	r0, #38	; 0x26
 8000c0a:	f000 f9e6 	bl	8000fda <HAL_NVIC_EnableIRQ>
}
 8000c0e:	bf00      	nop
 8000c10:	3780      	adds	r7, #128	; 0x80
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40013800 	.word	0x40013800
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	40004400 	.word	0x40004400

08000c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <NMI_Handler+0x4>

08000c2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <HardFault_Handler+0x4>

08000c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <MemManage_Handler+0x4>

08000c36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3a:	e7fe      	b.n	8000c3a <BusFault_Handler+0x4>

08000c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <UsageFault_Handler+0x4>

08000c42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c70:	f000 f89c 	bl	8000dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c7c:	4802      	ldr	r0, [pc, #8]	; (8000c88 <USART2_IRQHandler+0x10>)
 8000c7e:	f001 fea3 	bl	80029c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200000ac 	.word	0x200000ac

08000c8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <SystemInit+0x20>)
 8000c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c96:	4a05      	ldr	r2, [pc, #20]	; (8000cac <SystemInit+0x20>)
 8000c98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cb4:	f7ff ffea 	bl	8000c8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb8:	480c      	ldr	r0, [pc, #48]	; (8000cec <LoopForever+0x6>)
  ldr r1, =_edata
 8000cba:	490d      	ldr	r1, [pc, #52]	; (8000cf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cbc:	4a0d      	ldr	r2, [pc, #52]	; (8000cf4 <LoopForever+0xe>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc0:	e002      	b.n	8000cc8 <LoopCopyDataInit>

08000cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc6:	3304      	adds	r3, #4

08000cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ccc:	d3f9      	bcc.n	8000cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cce:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd0:	4c0a      	ldr	r4, [pc, #40]	; (8000cfc <LoopForever+0x16>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd4:	e001      	b.n	8000cda <LoopFillZerobss>

08000cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd8:	3204      	adds	r2, #4

08000cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cdc:	d3fb      	bcc.n	8000cd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cde:	f003 f829 	bl	8003d34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ce2:	f7ff fd8f 	bl	8000804 <main>

08000ce6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ce6:	e7fe      	b.n	8000ce6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ce8:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cf4:	08003e3c 	.word	0x08003e3c
  ldr r2, =_sbss
 8000cf8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cfc:	200001e8 	.word	0x200001e8

08000d00 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d00:	e7fe      	b.n	8000d00 <ADC1_IRQHandler>

08000d02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d0c:	2003      	movs	r0, #3
 8000d0e:	f000 f93d 	bl	8000f8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d12:	2000      	movs	r0, #0
 8000d14:	f000 f80e 	bl	8000d34 <HAL_InitTick>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d002      	beq.n	8000d24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	71fb      	strb	r3, [r7, #7]
 8000d22:	e001      	b.n	8000d28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d24:	f7ff fea8 	bl	8000a78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d28:	79fb      	ldrb	r3, [r7, #7]
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d40:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <HAL_InitTick+0x6c>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d023      	beq.n	8000d90 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d48:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <HAL_InitTick+0x70>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <HAL_InitTick+0x6c>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 f949 	bl	8000ff6 <HAL_SYSTICK_Config>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d10f      	bne.n	8000d8a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b0f      	cmp	r3, #15
 8000d6e:	d809      	bhi.n	8000d84 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d70:	2200      	movs	r2, #0
 8000d72:	6879      	ldr	r1, [r7, #4]
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295
 8000d78:	f000 f913 	bl	8000fa2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d7c:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <HAL_InitTick+0x74>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6013      	str	r3, [r2, #0]
 8000d82:	e007      	b.n	8000d94 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	73fb      	strb	r3, [r7, #15]
 8000d88:	e004      	b.n	8000d94 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	73fb      	strb	r3, [r7, #15]
 8000d8e:	e001      	b.n	8000d94 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d90:	2301      	movs	r3, #1
 8000d92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000008 	.word	0x20000008
 8000da4:	20000000 	.word	0x20000000
 8000da8:	20000004 	.word	0x20000004

08000dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_IncTick+0x20>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_IncTick+0x24>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4413      	add	r3, r2
 8000dbc:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <HAL_IncTick+0x24>)
 8000dbe:	6013      	str	r3, [r2, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	200001e4 	.word	0x200001e4

08000dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <HAL_GetTick+0x14>)
 8000dda:	681b      	ldr	r3, [r3, #0]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	200001e4 	.word	0x200001e4

08000dec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <__NVIC_SetPriorityGrouping+0x44>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e02:	68ba      	ldr	r2, [r7, #8]
 8000e04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e08:	4013      	ands	r3, r2
 8000e0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e1e:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <__NVIC_SetPriorityGrouping+0x44>)
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	60d3      	str	r3, [r2, #12]
}
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e38:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <__NVIC_GetPriorityGrouping+0x18>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	0a1b      	lsrs	r3, r3, #8
 8000e3e:	f003 0307 	and.w	r3, r3, #7
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	db0b      	blt.n	8000e7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	f003 021f 	and.w	r2, r3, #31
 8000e68:	4907      	ldr	r1, [pc, #28]	; (8000e88 <__NVIC_EnableIRQ+0x38>)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	095b      	lsrs	r3, r3, #5
 8000e70:	2001      	movs	r0, #1
 8000e72:	fa00 f202 	lsl.w	r2, r0, r2
 8000e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000e100 	.word	0xe000e100

08000e8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	6039      	str	r1, [r7, #0]
 8000e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	db0a      	blt.n	8000eb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	490c      	ldr	r1, [pc, #48]	; (8000ed8 <__NVIC_SetPriority+0x4c>)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	0112      	lsls	r2, r2, #4
 8000eac:	b2d2      	uxtb	r2, r2
 8000eae:	440b      	add	r3, r1
 8000eb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb4:	e00a      	b.n	8000ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	4908      	ldr	r1, [pc, #32]	; (8000edc <__NVIC_SetPriority+0x50>)
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	f003 030f 	and.w	r3, r3, #15
 8000ec2:	3b04      	subs	r3, #4
 8000ec4:	0112      	lsls	r2, r2, #4
 8000ec6:	b2d2      	uxtb	r2, r2
 8000ec8:	440b      	add	r3, r1
 8000eca:	761a      	strb	r2, [r3, #24]
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000e100 	.word	0xe000e100
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b089      	sub	sp, #36	; 0x24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	f1c3 0307 	rsb	r3, r3, #7
 8000efa:	2b04      	cmp	r3, #4
 8000efc:	bf28      	it	cs
 8000efe:	2304      	movcs	r3, #4
 8000f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3304      	adds	r3, #4
 8000f06:	2b06      	cmp	r3, #6
 8000f08:	d902      	bls.n	8000f10 <NVIC_EncodePriority+0x30>
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3b03      	subs	r3, #3
 8000f0e:	e000      	b.n	8000f12 <NVIC_EncodePriority+0x32>
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f14:	f04f 32ff 	mov.w	r2, #4294967295
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43da      	mvns	r2, r3
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	401a      	ands	r2, r3
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f28:	f04f 31ff 	mov.w	r1, #4294967295
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f32:	43d9      	mvns	r1, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	4313      	orrs	r3, r2
         );
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3724      	adds	r7, #36	; 0x24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
	...

08000f48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f58:	d301      	bcc.n	8000f5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e00f      	b.n	8000f7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <SysTick_Config+0x40>)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f66:	210f      	movs	r1, #15
 8000f68:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6c:	f7ff ff8e 	bl	8000e8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f70:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <SysTick_Config+0x40>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f76:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <SysTick_Config+0x40>)
 8000f78:	2207      	movs	r2, #7
 8000f7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	e000e010 	.word	0xe000e010

08000f8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff ff29 	bl	8000dec <__NVIC_SetPriorityGrouping>
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b086      	sub	sp, #24
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	4603      	mov	r3, r0
 8000faa:	60b9      	str	r1, [r7, #8]
 8000fac:	607a      	str	r2, [r7, #4]
 8000fae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb4:	f7ff ff3e 	bl	8000e34 <__NVIC_GetPriorityGrouping>
 8000fb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	68b9      	ldr	r1, [r7, #8]
 8000fbe:	6978      	ldr	r0, [r7, #20]
 8000fc0:	f7ff ff8e 	bl	8000ee0 <NVIC_EncodePriority>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fca:	4611      	mov	r1, r2
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff ff5d 	bl	8000e8c <__NVIC_SetPriority>
}
 8000fd2:	bf00      	nop
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ff31 	bl	8000e50 <__NVIC_EnableIRQ>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff ffa2 	bl	8000f48 <SysTick_Config>
 8001004:	4603      	mov	r3, r0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800100e:	b480      	push	{r7}
 8001010:	b085      	sub	sp, #20
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001016:	2300      	movs	r3, #0
 8001018:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b02      	cmp	r3, #2
 8001024:	d008      	beq.n	8001038 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2204      	movs	r2, #4
 800102a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e022      	b.n	800107e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f022 020e 	bic.w	r2, r2, #14
 8001046:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f022 0201 	bic.w	r2, r2, #1
 8001056:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105c:	f003 021c 	and.w	r2, r3, #28
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001064:	2101      	movs	r1, #1
 8001066:	fa01 f202 	lsl.w	r2, r1, r2
 800106a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2201      	movs	r2, #1
 8001070:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800107c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800107e:	4618      	mov	r0, r3
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b084      	sub	sp, #16
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001092:	2300      	movs	r3, #0
 8001094:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d005      	beq.n	80010ae <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2204      	movs	r2, #4
 80010a6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	73fb      	strb	r3, [r7, #15]
 80010ac:	e029      	b.n	8001102 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f022 020e 	bic.w	r2, r2, #14
 80010bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f022 0201 	bic.w	r2, r2, #1
 80010cc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f003 021c 	and.w	r2, r3, #28
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	2101      	movs	r1, #1
 80010dc:	fa01 f202 	lsl.w	r2, r1, r2
 80010e0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2201      	movs	r2, #1
 80010e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	4798      	blx	r3
    }
  }
  return status;
 8001102:	7bfb      	ldrb	r3, [r7, #15]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800110c:	b480      	push	{r7}
 800110e:	b087      	sub	sp, #28
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800111a:	e148      	b.n	80013ae <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	2101      	movs	r1, #1
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	fa01 f303 	lsl.w	r3, r1, r3
 8001128:	4013      	ands	r3, r2
 800112a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b00      	cmp	r3, #0
 8001130:	f000 813a 	beq.w	80013a8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	2b01      	cmp	r3, #1
 800113e:	d005      	beq.n	800114c <HAL_GPIO_Init+0x40>
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d130      	bne.n	80011ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	2203      	movs	r2, #3
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001182:	2201      	movs	r2, #1
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	091b      	lsrs	r3, r3, #4
 8001198:	f003 0201 	and.w	r2, r3, #1
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 0303 	and.w	r3, r3, #3
 80011b6:	2b03      	cmp	r3, #3
 80011b8:	d017      	beq.n	80011ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	2203      	movs	r2, #3
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	689a      	ldr	r2, [r3, #8]
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d123      	bne.n	800123e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	08da      	lsrs	r2, r3, #3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3208      	adds	r2, #8
 80011fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001202:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	220f      	movs	r2, #15
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	691a      	ldr	r2, [r3, #16]
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	f003 0307 	and.w	r3, r3, #7
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	08da      	lsrs	r2, r3, #3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3208      	adds	r2, #8
 8001238:	6939      	ldr	r1, [r7, #16]
 800123a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	2203      	movs	r2, #3
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	4013      	ands	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f003 0203 	and.w	r2, r3, #3
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800127a:	2b00      	cmp	r3, #0
 800127c:	f000 8094 	beq.w	80013a8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001280:	4b52      	ldr	r3, [pc, #328]	; (80013cc <HAL_GPIO_Init+0x2c0>)
 8001282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001284:	4a51      	ldr	r2, [pc, #324]	; (80013cc <HAL_GPIO_Init+0x2c0>)
 8001286:	f043 0301 	orr.w	r3, r3, #1
 800128a:	6613      	str	r3, [r2, #96]	; 0x60
 800128c:	4b4f      	ldr	r3, [pc, #316]	; (80013cc <HAL_GPIO_Init+0x2c0>)
 800128e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001298:	4a4d      	ldr	r2, [pc, #308]	; (80013d0 <HAL_GPIO_Init+0x2c4>)
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	089b      	lsrs	r3, r3, #2
 800129e:	3302      	adds	r3, #2
 80012a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	f003 0303 	and.w	r3, r3, #3
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	220f      	movs	r2, #15
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012c2:	d00d      	beq.n	80012e0 <HAL_GPIO_Init+0x1d4>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a43      	ldr	r2, [pc, #268]	; (80013d4 <HAL_GPIO_Init+0x2c8>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d007      	beq.n	80012dc <HAL_GPIO_Init+0x1d0>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a42      	ldr	r2, [pc, #264]	; (80013d8 <HAL_GPIO_Init+0x2cc>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d101      	bne.n	80012d8 <HAL_GPIO_Init+0x1cc>
 80012d4:	2302      	movs	r3, #2
 80012d6:	e004      	b.n	80012e2 <HAL_GPIO_Init+0x1d6>
 80012d8:	2307      	movs	r3, #7
 80012da:	e002      	b.n	80012e2 <HAL_GPIO_Init+0x1d6>
 80012dc:	2301      	movs	r3, #1
 80012de:	e000      	b.n	80012e2 <HAL_GPIO_Init+0x1d6>
 80012e0:	2300      	movs	r3, #0
 80012e2:	697a      	ldr	r2, [r7, #20]
 80012e4:	f002 0203 	and.w	r2, r2, #3
 80012e8:	0092      	lsls	r2, r2, #2
 80012ea:	4093      	lsls	r3, r2
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012f2:	4937      	ldr	r1, [pc, #220]	; (80013d0 <HAL_GPIO_Init+0x2c4>)
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	089b      	lsrs	r3, r3, #2
 80012f8:	3302      	adds	r3, #2
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001300:	4b36      	ldr	r3, [pc, #216]	; (80013dc <HAL_GPIO_Init+0x2d0>)
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	43db      	mvns	r3, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001324:	4a2d      	ldr	r2, [pc, #180]	; (80013dc <HAL_GPIO_Init+0x2d0>)
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800132a:	4b2c      	ldr	r3, [pc, #176]	; (80013dc <HAL_GPIO_Init+0x2d0>)
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	43db      	mvns	r3, r3
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4013      	ands	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4313      	orrs	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800134e:	4a23      	ldr	r2, [pc, #140]	; (80013dc <HAL_GPIO_Init+0x2d0>)
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001354:	4b21      	ldr	r3, [pc, #132]	; (80013dc <HAL_GPIO_Init+0x2d0>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	43db      	mvns	r3, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4013      	ands	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001378:	4a18      	ldr	r2, [pc, #96]	; (80013dc <HAL_GPIO_Init+0x2d0>)
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800137e:	4b17      	ldr	r3, [pc, #92]	; (80013dc <HAL_GPIO_Init+0x2d0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	43db      	mvns	r3, r3
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4013      	ands	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4313      	orrs	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013a2:	4a0e      	ldr	r2, [pc, #56]	; (80013dc <HAL_GPIO_Init+0x2d0>)
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	3301      	adds	r3, #1
 80013ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	fa22 f303 	lsr.w	r3, r2, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f47f aeaf 	bne.w	800111c <HAL_GPIO_Init+0x10>
  }
}
 80013be:	bf00      	nop
 80013c0:	bf00      	nop
 80013c2:	371c      	adds	r7, #28
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40010000 	.word	0x40010000
 80013d4:	48000400 	.word	0x48000400
 80013d8:	48000800 	.word	0x48000800
 80013dc:	40010400 	.word	0x40010400

080013e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	807b      	strh	r3, [r7, #2]
 80013ec:	4613      	mov	r3, r2
 80013ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013f0:	787b      	ldrb	r3, [r7, #1]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013f6:	887a      	ldrh	r2, [r7, #2]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013fc:	e002      	b.n	8001404 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013fe:	887a      	ldrh	r2, [r7, #2]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001414:	4b05      	ldr	r3, [pc, #20]	; (800142c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a04      	ldr	r2, [pc, #16]	; (800142c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800141a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800141e:	6013      	str	r3, [r2, #0]
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	40007000 	.word	0x40007000

08001430 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001434:	4b04      	ldr	r3, [pc, #16]	; (8001448 <HAL_PWREx_GetVoltageRange+0x18>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800143c:	4618      	mov	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	40007000 	.word	0x40007000

0800144c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800145a:	d130      	bne.n	80014be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800145c:	4b23      	ldr	r3, [pc, #140]	; (80014ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001468:	d038      	beq.n	80014dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800146a:	4b20      	ldr	r3, [pc, #128]	; (80014ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001472:	4a1e      	ldr	r2, [pc, #120]	; (80014ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001474:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001478:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800147a:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2232      	movs	r2, #50	; 0x32
 8001480:	fb02 f303 	mul.w	r3, r2, r3
 8001484:	4a1b      	ldr	r2, [pc, #108]	; (80014f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001486:	fba2 2303 	umull	r2, r3, r2, r3
 800148a:	0c9b      	lsrs	r3, r3, #18
 800148c:	3301      	adds	r3, #1
 800148e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001490:	e002      	b.n	8001498 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	3b01      	subs	r3, #1
 8001496:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001498:	4b14      	ldr	r3, [pc, #80]	; (80014ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800149a:	695b      	ldr	r3, [r3, #20]
 800149c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014a4:	d102      	bne.n	80014ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1f2      	bne.n	8001492 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014b8:	d110      	bne.n	80014dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e00f      	b.n	80014de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014be:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ca:	d007      	beq.n	80014dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014cc:	4b07      	ldr	r3, [pc, #28]	; (80014ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014d4:	4a05      	ldr	r2, [pc, #20]	; (80014ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40007000 	.word	0x40007000
 80014f0:	20000000 	.word	0x20000000
 80014f4:	431bde83 	.word	0x431bde83

080014f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d102      	bne.n	800150c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	f000 bc02 	b.w	8001d10 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800150c:	4b96      	ldr	r3, [pc, #600]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f003 030c 	and.w	r3, r3, #12
 8001514:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001516:	4b94      	ldr	r3, [pc, #592]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	f003 0303 	and.w	r3, r3, #3
 800151e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0310 	and.w	r3, r3, #16
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 80e4 	beq.w	80016f6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d007      	beq.n	8001544 <HAL_RCC_OscConfig+0x4c>
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	2b0c      	cmp	r3, #12
 8001538:	f040 808b 	bne.w	8001652 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	2b01      	cmp	r3, #1
 8001540:	f040 8087 	bne.w	8001652 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001544:	4b88      	ldr	r3, [pc, #544]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d005      	beq.n	800155c <HAL_RCC_OscConfig+0x64>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d101      	bne.n	800155c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e3d9      	b.n	8001d10 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a1a      	ldr	r2, [r3, #32]
 8001560:	4b81      	ldr	r3, [pc, #516]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0308 	and.w	r3, r3, #8
 8001568:	2b00      	cmp	r3, #0
 800156a:	d004      	beq.n	8001576 <HAL_RCC_OscConfig+0x7e>
 800156c:	4b7e      	ldr	r3, [pc, #504]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001574:	e005      	b.n	8001582 <HAL_RCC_OscConfig+0x8a>
 8001576:	4b7c      	ldr	r3, [pc, #496]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 8001578:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800157c:	091b      	lsrs	r3, r3, #4
 800157e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001582:	4293      	cmp	r3, r2
 8001584:	d223      	bcs.n	80015ce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a1b      	ldr	r3, [r3, #32]
 800158a:	4618      	mov	r0, r3
 800158c:	f000 fd8c 	bl	80020a8 <RCC_SetFlashLatencyFromMSIRange>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e3ba      	b.n	8001d10 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800159a:	4b73      	ldr	r3, [pc, #460]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a72      	ldr	r2, [pc, #456]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 80015a0:	f043 0308 	orr.w	r3, r3, #8
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	4b70      	ldr	r3, [pc, #448]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a1b      	ldr	r3, [r3, #32]
 80015b2:	496d      	ldr	r1, [pc, #436]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015b8:	4b6b      	ldr	r3, [pc, #428]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	69db      	ldr	r3, [r3, #28]
 80015c4:	021b      	lsls	r3, r3, #8
 80015c6:	4968      	ldr	r1, [pc, #416]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	604b      	str	r3, [r1, #4]
 80015cc:	e025      	b.n	800161a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015ce:	4b66      	ldr	r3, [pc, #408]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a65      	ldr	r2, [pc, #404]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 80015d4:	f043 0308 	orr.w	r3, r3, #8
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	4b63      	ldr	r3, [pc, #396]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	4960      	ldr	r1, [pc, #384]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015ec:	4b5e      	ldr	r3, [pc, #376]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	69db      	ldr	r3, [r3, #28]
 80015f8:	021b      	lsls	r3, r3, #8
 80015fa:	495b      	ldr	r1, [pc, #364]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 80015fc:	4313      	orrs	r3, r2
 80015fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d109      	bne.n	800161a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	4618      	mov	r0, r3
 800160c:	f000 fd4c 	bl	80020a8 <RCC_SetFlashLatencyFromMSIRange>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e37a      	b.n	8001d10 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800161a:	f000 fc81 	bl	8001f20 <HAL_RCC_GetSysClockFreq>
 800161e:	4602      	mov	r2, r0
 8001620:	4b51      	ldr	r3, [pc, #324]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	091b      	lsrs	r3, r3, #4
 8001626:	f003 030f 	and.w	r3, r3, #15
 800162a:	4950      	ldr	r1, [pc, #320]	; (800176c <HAL_RCC_OscConfig+0x274>)
 800162c:	5ccb      	ldrb	r3, [r1, r3]
 800162e:	f003 031f 	and.w	r3, r3, #31
 8001632:	fa22 f303 	lsr.w	r3, r2, r3
 8001636:	4a4e      	ldr	r2, [pc, #312]	; (8001770 <HAL_RCC_OscConfig+0x278>)
 8001638:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800163a:	4b4e      	ldr	r3, [pc, #312]	; (8001774 <HAL_RCC_OscConfig+0x27c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fb78 	bl	8000d34 <HAL_InitTick>
 8001644:	4603      	mov	r3, r0
 8001646:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d052      	beq.n	80016f4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	e35e      	b.n	8001d10 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d032      	beq.n	80016c0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800165a:	4b43      	ldr	r3, [pc, #268]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a42      	ldr	r2, [pc, #264]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001666:	f7ff fbb5 	bl	8000dd4 <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800166e:	f7ff fbb1 	bl	8000dd4 <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e347      	b.n	8001d10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001680:	4b39      	ldr	r3, [pc, #228]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0f0      	beq.n	800166e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800168c:	4b36      	ldr	r3, [pc, #216]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a35      	ldr	r2, [pc, #212]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 8001692:	f043 0308 	orr.w	r3, r3, #8
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	4b33      	ldr	r3, [pc, #204]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	4930      	ldr	r1, [pc, #192]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016aa:	4b2f      	ldr	r3, [pc, #188]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	021b      	lsls	r3, r3, #8
 80016b8:	492b      	ldr	r1, [pc, #172]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	604b      	str	r3, [r1, #4]
 80016be:	e01a      	b.n	80016f6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016c0:	4b29      	ldr	r3, [pc, #164]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a28      	ldr	r2, [pc, #160]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 80016c6:	f023 0301 	bic.w	r3, r3, #1
 80016ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016cc:	f7ff fb82 	bl	8000dd4 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016d4:	f7ff fb7e 	bl	8000dd4 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e314      	b.n	8001d10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016e6:	4b20      	ldr	r3, [pc, #128]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f0      	bne.n	80016d4 <HAL_RCC_OscConfig+0x1dc>
 80016f2:	e000      	b.n	80016f6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d073      	beq.n	80017ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	2b08      	cmp	r3, #8
 8001706:	d005      	beq.n	8001714 <HAL_RCC_OscConfig+0x21c>
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	2b0c      	cmp	r3, #12
 800170c:	d10e      	bne.n	800172c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	2b03      	cmp	r3, #3
 8001712:	d10b      	bne.n	800172c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001714:	4b14      	ldr	r3, [pc, #80]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d063      	beq.n	80017e8 <HAL_RCC_OscConfig+0x2f0>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d15f      	bne.n	80017e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e2f1      	b.n	8001d10 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001734:	d106      	bne.n	8001744 <HAL_RCC_OscConfig+0x24c>
 8001736:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a0b      	ldr	r2, [pc, #44]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 800173c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	e025      	b.n	8001790 <HAL_RCC_OscConfig+0x298>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800174c:	d114      	bne.n	8001778 <HAL_RCC_OscConfig+0x280>
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a05      	ldr	r2, [pc, #20]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 8001754:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	4b03      	ldr	r3, [pc, #12]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a02      	ldr	r2, [pc, #8]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 8001760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	e013      	b.n	8001790 <HAL_RCC_OscConfig+0x298>
 8001768:	40021000 	.word	0x40021000
 800176c:	08003de4 	.word	0x08003de4
 8001770:	20000000 	.word	0x20000000
 8001774:	20000004 	.word	0x20000004
 8001778:	4ba0      	ldr	r3, [pc, #640]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a9f      	ldr	r2, [pc, #636]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 800177e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001782:	6013      	str	r3, [r2, #0]
 8001784:	4b9d      	ldr	r3, [pc, #628]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a9c      	ldr	r2, [pc, #624]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 800178a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800178e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d013      	beq.n	80017c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001798:	f7ff fb1c 	bl	8000dd4 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a0:	f7ff fb18 	bl	8000dd4 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b64      	cmp	r3, #100	; 0x64
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e2ae      	b.n	8001d10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017b2:	4b92      	ldr	r3, [pc, #584]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0f0      	beq.n	80017a0 <HAL_RCC_OscConfig+0x2a8>
 80017be:	e014      	b.n	80017ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c0:	f7ff fb08 	bl	8000dd4 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c8:	f7ff fb04 	bl	8000dd4 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b64      	cmp	r3, #100	; 0x64
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e29a      	b.n	8001d10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017da:	4b88      	ldr	r3, [pc, #544]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f0      	bne.n	80017c8 <HAL_RCC_OscConfig+0x2d0>
 80017e6:	e000      	b.n	80017ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d060      	beq.n	80018b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	2b04      	cmp	r3, #4
 80017fa:	d005      	beq.n	8001808 <HAL_RCC_OscConfig+0x310>
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	2b0c      	cmp	r3, #12
 8001800:	d119      	bne.n	8001836 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	2b02      	cmp	r3, #2
 8001806:	d116      	bne.n	8001836 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001808:	4b7c      	ldr	r3, [pc, #496]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001810:	2b00      	cmp	r3, #0
 8001812:	d005      	beq.n	8001820 <HAL_RCC_OscConfig+0x328>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e277      	b.n	8001d10 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001820:	4b76      	ldr	r3, [pc, #472]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	061b      	lsls	r3, r3, #24
 800182e:	4973      	ldr	r1, [pc, #460]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 8001830:	4313      	orrs	r3, r2
 8001832:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001834:	e040      	b.n	80018b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d023      	beq.n	8001886 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800183e:	4b6f      	ldr	r3, [pc, #444]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a6e      	ldr	r2, [pc, #440]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 8001844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001848:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184a:	f7ff fac3 	bl	8000dd4 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001852:	f7ff fabf 	bl	8000dd4 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e255      	b.n	8001d10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001864:	4b65      	ldr	r3, [pc, #404]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0f0      	beq.n	8001852 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001870:	4b62      	ldr	r3, [pc, #392]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	061b      	lsls	r3, r3, #24
 800187e:	495f      	ldr	r1, [pc, #380]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 8001880:	4313      	orrs	r3, r2
 8001882:	604b      	str	r3, [r1, #4]
 8001884:	e018      	b.n	80018b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001886:	4b5d      	ldr	r3, [pc, #372]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a5c      	ldr	r2, [pc, #368]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 800188c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001890:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001892:	f7ff fa9f 	bl	8000dd4 <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800189a:	f7ff fa9b 	bl	8000dd4 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e231      	b.n	8001d10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018ac:	4b53      	ldr	r3, [pc, #332]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1f0      	bne.n	800189a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0308 	and.w	r3, r3, #8
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d03c      	beq.n	800193e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	695b      	ldr	r3, [r3, #20]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d01c      	beq.n	8001906 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018cc:	4b4b      	ldr	r3, [pc, #300]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 80018ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018d2:	4a4a      	ldr	r2, [pc, #296]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018dc:	f7ff fa7a 	bl	8000dd4 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e4:	f7ff fa76 	bl	8000dd4 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e20c      	b.n	8001d10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018f6:	4b41      	ldr	r3, [pc, #260]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 80018f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0ef      	beq.n	80018e4 <HAL_RCC_OscConfig+0x3ec>
 8001904:	e01b      	b.n	800193e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001906:	4b3d      	ldr	r3, [pc, #244]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 8001908:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800190c:	4a3b      	ldr	r2, [pc, #236]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 800190e:	f023 0301 	bic.w	r3, r3, #1
 8001912:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001916:	f7ff fa5d 	bl	8000dd4 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800191e:	f7ff fa59 	bl	8000dd4 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e1ef      	b.n	8001d10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001930:	4b32      	ldr	r3, [pc, #200]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 8001932:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1ef      	bne.n	800191e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0304 	and.w	r3, r3, #4
 8001946:	2b00      	cmp	r3, #0
 8001948:	f000 80a6 	beq.w	8001a98 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800194c:	2300      	movs	r3, #0
 800194e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001950:	4b2a      	ldr	r3, [pc, #168]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 8001952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d10d      	bne.n	8001978 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800195c:	4b27      	ldr	r3, [pc, #156]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 800195e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001960:	4a26      	ldr	r2, [pc, #152]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 8001962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001966:	6593      	str	r3, [r2, #88]	; 0x58
 8001968:	4b24      	ldr	r3, [pc, #144]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 800196a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001974:	2301      	movs	r3, #1
 8001976:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001978:	4b21      	ldr	r3, [pc, #132]	; (8001a00 <HAL_RCC_OscConfig+0x508>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001980:	2b00      	cmp	r3, #0
 8001982:	d118      	bne.n	80019b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001984:	4b1e      	ldr	r3, [pc, #120]	; (8001a00 <HAL_RCC_OscConfig+0x508>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a1d      	ldr	r2, [pc, #116]	; (8001a00 <HAL_RCC_OscConfig+0x508>)
 800198a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800198e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001990:	f7ff fa20 	bl	8000dd4 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001998:	f7ff fa1c 	bl	8000dd4 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e1b2      	b.n	8001d10 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019aa:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <HAL_RCC_OscConfig+0x508>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d108      	bne.n	80019d0 <HAL_RCC_OscConfig+0x4d8>
 80019be:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 80019c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c4:	4a0d      	ldr	r2, [pc, #52]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019ce:	e029      	b.n	8001a24 <HAL_RCC_OscConfig+0x52c>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	2b05      	cmp	r3, #5
 80019d6:	d115      	bne.n	8001a04 <HAL_RCC_OscConfig+0x50c>
 80019d8:	4b08      	ldr	r3, [pc, #32]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 80019da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019de:	4a07      	ldr	r2, [pc, #28]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 80019e0:	f043 0304 	orr.w	r3, r3, #4
 80019e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019e8:	4b04      	ldr	r3, [pc, #16]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 80019ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ee:	4a03      	ldr	r2, [pc, #12]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019f8:	e014      	b.n	8001a24 <HAL_RCC_OscConfig+0x52c>
 80019fa:	bf00      	nop
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40007000 	.word	0x40007000
 8001a04:	4b9a      	ldr	r3, [pc, #616]	; (8001c70 <HAL_RCC_OscConfig+0x778>)
 8001a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a0a:	4a99      	ldr	r2, [pc, #612]	; (8001c70 <HAL_RCC_OscConfig+0x778>)
 8001a0c:	f023 0301 	bic.w	r3, r3, #1
 8001a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a14:	4b96      	ldr	r3, [pc, #600]	; (8001c70 <HAL_RCC_OscConfig+0x778>)
 8001a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a1a:	4a95      	ldr	r2, [pc, #596]	; (8001c70 <HAL_RCC_OscConfig+0x778>)
 8001a1c:	f023 0304 	bic.w	r3, r3, #4
 8001a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d016      	beq.n	8001a5a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2c:	f7ff f9d2 	bl	8000dd4 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a32:	e00a      	b.n	8001a4a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a34:	f7ff f9ce 	bl	8000dd4 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e162      	b.n	8001d10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a4a:	4b89      	ldr	r3, [pc, #548]	; (8001c70 <HAL_RCC_OscConfig+0x778>)
 8001a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0ed      	beq.n	8001a34 <HAL_RCC_OscConfig+0x53c>
 8001a58:	e015      	b.n	8001a86 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5a:	f7ff f9bb 	bl	8000dd4 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a60:	e00a      	b.n	8001a78 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a62:	f7ff f9b7 	bl	8000dd4 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e14b      	b.n	8001d10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a78:	4b7d      	ldr	r3, [pc, #500]	; (8001c70 <HAL_RCC_OscConfig+0x778>)
 8001a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1ed      	bne.n	8001a62 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a86:	7ffb      	ldrb	r3, [r7, #31]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d105      	bne.n	8001a98 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a8c:	4b78      	ldr	r3, [pc, #480]	; (8001c70 <HAL_RCC_OscConfig+0x778>)
 8001a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a90:	4a77      	ldr	r2, [pc, #476]	; (8001c70 <HAL_RCC_OscConfig+0x778>)
 8001a92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a96:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0320 	and.w	r3, r3, #32
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d03c      	beq.n	8001b1e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d01c      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001aac:	4b70      	ldr	r3, [pc, #448]	; (8001c70 <HAL_RCC_OscConfig+0x778>)
 8001aae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ab2:	4a6f      	ldr	r2, [pc, #444]	; (8001c70 <HAL_RCC_OscConfig+0x778>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001abc:	f7ff f98a 	bl	8000dd4 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ac4:	f7ff f986 	bl	8000dd4 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e11c      	b.n	8001d10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ad6:	4b66      	ldr	r3, [pc, #408]	; (8001c70 <HAL_RCC_OscConfig+0x778>)
 8001ad8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0ef      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x5cc>
 8001ae4:	e01b      	b.n	8001b1e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ae6:	4b62      	ldr	r3, [pc, #392]	; (8001c70 <HAL_RCC_OscConfig+0x778>)
 8001ae8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001aec:	4a60      	ldr	r2, [pc, #384]	; (8001c70 <HAL_RCC_OscConfig+0x778>)
 8001aee:	f023 0301 	bic.w	r3, r3, #1
 8001af2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af6:	f7ff f96d 	bl	8000dd4 <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001afe:	f7ff f969 	bl	8000dd4 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e0ff      	b.n	8001d10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b10:	4b57      	ldr	r3, [pc, #348]	; (8001c70 <HAL_RCC_OscConfig+0x778>)
 8001b12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1ef      	bne.n	8001afe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 80f3 	beq.w	8001d0e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	f040 80c9 	bne.w	8001cc4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b32:	4b4f      	ldr	r3, [pc, #316]	; (8001c70 <HAL_RCC_OscConfig+0x778>)
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f003 0203 	and.w	r2, r3, #3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d12c      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b50:	3b01      	subs	r3, #1
 8001b52:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d123      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b62:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d11b      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b72:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d113      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b82:	085b      	lsrs	r3, r3, #1
 8001b84:	3b01      	subs	r3, #1
 8001b86:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d109      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	085b      	lsrs	r3, r3, #1
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d06b      	beq.n	8001c78 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	2b0c      	cmp	r3, #12
 8001ba4:	d062      	beq.n	8001c6c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ba6:	4b32      	ldr	r3, [pc, #200]	; (8001c70 <HAL_RCC_OscConfig+0x778>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e0ac      	b.n	8001d10 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001bb6:	4b2e      	ldr	r3, [pc, #184]	; (8001c70 <HAL_RCC_OscConfig+0x778>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a2d      	ldr	r2, [pc, #180]	; (8001c70 <HAL_RCC_OscConfig+0x778>)
 8001bbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bc0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bc2:	f7ff f907 	bl	8000dd4 <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bca:	f7ff f903 	bl	8000dd4 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e099      	b.n	8001d10 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bdc:	4b24      	ldr	r3, [pc, #144]	; (8001c70 <HAL_RCC_OscConfig+0x778>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1f0      	bne.n	8001bca <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001be8:	4b21      	ldr	r3, [pc, #132]	; (8001c70 <HAL_RCC_OscConfig+0x778>)
 8001bea:	68da      	ldr	r2, [r3, #12]
 8001bec:	4b21      	ldr	r3, [pc, #132]	; (8001c74 <HAL_RCC_OscConfig+0x77c>)
 8001bee:	4013      	ands	r3, r2
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001bf8:	3a01      	subs	r2, #1
 8001bfa:	0112      	lsls	r2, r2, #4
 8001bfc:	4311      	orrs	r1, r2
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c02:	0212      	lsls	r2, r2, #8
 8001c04:	4311      	orrs	r1, r2
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c0a:	0852      	lsrs	r2, r2, #1
 8001c0c:	3a01      	subs	r2, #1
 8001c0e:	0552      	lsls	r2, r2, #21
 8001c10:	4311      	orrs	r1, r2
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c16:	0852      	lsrs	r2, r2, #1
 8001c18:	3a01      	subs	r2, #1
 8001c1a:	0652      	lsls	r2, r2, #25
 8001c1c:	4311      	orrs	r1, r2
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c22:	06d2      	lsls	r2, r2, #27
 8001c24:	430a      	orrs	r2, r1
 8001c26:	4912      	ldr	r1, [pc, #72]	; (8001c70 <HAL_RCC_OscConfig+0x778>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c2c:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <HAL_RCC_OscConfig+0x778>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a0f      	ldr	r2, [pc, #60]	; (8001c70 <HAL_RCC_OscConfig+0x778>)
 8001c32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c38:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <HAL_RCC_OscConfig+0x778>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	4a0c      	ldr	r2, [pc, #48]	; (8001c70 <HAL_RCC_OscConfig+0x778>)
 8001c3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c44:	f7ff f8c6 	bl	8000dd4 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c4c:	f7ff f8c2 	bl	8000dd4 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e058      	b.n	8001d10 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c5e:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <HAL_RCC_OscConfig+0x778>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0f0      	beq.n	8001c4c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c6a:	e050      	b.n	8001d0e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e04f      	b.n	8001d10 <HAL_RCC_OscConfig+0x818>
 8001c70:	40021000 	.word	0x40021000
 8001c74:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c78:	4b27      	ldr	r3, [pc, #156]	; (8001d18 <HAL_RCC_OscConfig+0x820>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d144      	bne.n	8001d0e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c84:	4b24      	ldr	r3, [pc, #144]	; (8001d18 <HAL_RCC_OscConfig+0x820>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a23      	ldr	r2, [pc, #140]	; (8001d18 <HAL_RCC_OscConfig+0x820>)
 8001c8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c90:	4b21      	ldr	r3, [pc, #132]	; (8001d18 <HAL_RCC_OscConfig+0x820>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	4a20      	ldr	r2, [pc, #128]	; (8001d18 <HAL_RCC_OscConfig+0x820>)
 8001c96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c9c:	f7ff f89a 	bl	8000dd4 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca4:	f7ff f896 	bl	8000dd4 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e02c      	b.n	8001d10 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cb6:	4b18      	ldr	r3, [pc, #96]	; (8001d18 <HAL_RCC_OscConfig+0x820>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0f0      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x7ac>
 8001cc2:	e024      	b.n	8001d0e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	2b0c      	cmp	r3, #12
 8001cc8:	d01f      	beq.n	8001d0a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cca:	4b13      	ldr	r3, [pc, #76]	; (8001d18 <HAL_RCC_OscConfig+0x820>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a12      	ldr	r2, [pc, #72]	; (8001d18 <HAL_RCC_OscConfig+0x820>)
 8001cd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd6:	f7ff f87d 	bl	8000dd4 <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cde:	f7ff f879 	bl	8000dd4 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e00f      	b.n	8001d10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cf0:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <HAL_RCC_OscConfig+0x820>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1f0      	bne.n	8001cde <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <HAL_RCC_OscConfig+0x820>)
 8001cfe:	68da      	ldr	r2, [r3, #12]
 8001d00:	4905      	ldr	r1, [pc, #20]	; (8001d18 <HAL_RCC_OscConfig+0x820>)
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HAL_RCC_OscConfig+0x824>)
 8001d04:	4013      	ands	r3, r2
 8001d06:	60cb      	str	r3, [r1, #12]
 8001d08:	e001      	b.n	8001d0e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e000      	b.n	8001d10 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3720      	adds	r7, #32
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	feeefffc 	.word	0xfeeefffc

08001d20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e0e7      	b.n	8001f04 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d34:	4b75      	ldr	r3, [pc, #468]	; (8001f0c <HAL_RCC_ClockConfig+0x1ec>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d910      	bls.n	8001d64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d42:	4b72      	ldr	r3, [pc, #456]	; (8001f0c <HAL_RCC_ClockConfig+0x1ec>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f023 0207 	bic.w	r2, r3, #7
 8001d4a:	4970      	ldr	r1, [pc, #448]	; (8001f0c <HAL_RCC_ClockConfig+0x1ec>)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d52:	4b6e      	ldr	r3, [pc, #440]	; (8001f0c <HAL_RCC_ClockConfig+0x1ec>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d001      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0cf      	b.n	8001f04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d010      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	4b66      	ldr	r3, [pc, #408]	; (8001f10 <HAL_RCC_ClockConfig+0x1f0>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d908      	bls.n	8001d92 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d80:	4b63      	ldr	r3, [pc, #396]	; (8001f10 <HAL_RCC_ClockConfig+0x1f0>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	4960      	ldr	r1, [pc, #384]	; (8001f10 <HAL_RCC_ClockConfig+0x1f0>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d04c      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b03      	cmp	r3, #3
 8001da4:	d107      	bne.n	8001db6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001da6:	4b5a      	ldr	r3, [pc, #360]	; (8001f10 <HAL_RCC_ClockConfig+0x1f0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d121      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e0a6      	b.n	8001f04 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d107      	bne.n	8001dce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dbe:	4b54      	ldr	r3, [pc, #336]	; (8001f10 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d115      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e09a      	b.n	8001f04 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d107      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dd6:	4b4e      	ldr	r3, [pc, #312]	; (8001f10 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d109      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e08e      	b.n	8001f04 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001de6:	4b4a      	ldr	r3, [pc, #296]	; (8001f10 <HAL_RCC_ClockConfig+0x1f0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e086      	b.n	8001f04 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001df6:	4b46      	ldr	r3, [pc, #280]	; (8001f10 <HAL_RCC_ClockConfig+0x1f0>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f023 0203 	bic.w	r2, r3, #3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	4943      	ldr	r1, [pc, #268]	; (8001f10 <HAL_RCC_ClockConfig+0x1f0>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e08:	f7fe ffe4 	bl	8000dd4 <HAL_GetTick>
 8001e0c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e0e:	e00a      	b.n	8001e26 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e10:	f7fe ffe0 	bl	8000dd4 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e06e      	b.n	8001f04 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e26:	4b3a      	ldr	r3, [pc, #232]	; (8001f10 <HAL_RCC_ClockConfig+0x1f0>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 020c 	and.w	r2, r3, #12
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d1eb      	bne.n	8001e10 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d010      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	4b31      	ldr	r3, [pc, #196]	; (8001f10 <HAL_RCC_ClockConfig+0x1f0>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d208      	bcs.n	8001e66 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e54:	4b2e      	ldr	r3, [pc, #184]	; (8001f10 <HAL_RCC_ClockConfig+0x1f0>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	492b      	ldr	r1, [pc, #172]	; (8001f10 <HAL_RCC_ClockConfig+0x1f0>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e66:	4b29      	ldr	r3, [pc, #164]	; (8001f0c <HAL_RCC_ClockConfig+0x1ec>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d210      	bcs.n	8001e96 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e74:	4b25      	ldr	r3, [pc, #148]	; (8001f0c <HAL_RCC_ClockConfig+0x1ec>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f023 0207 	bic.w	r2, r3, #7
 8001e7c:	4923      	ldr	r1, [pc, #140]	; (8001f0c <HAL_RCC_ClockConfig+0x1ec>)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e84:	4b21      	ldr	r3, [pc, #132]	; (8001f0c <HAL_RCC_ClockConfig+0x1ec>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d001      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e036      	b.n	8001f04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0304 	and.w	r3, r3, #4
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d008      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ea2:	4b1b      	ldr	r3, [pc, #108]	; (8001f10 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	4918      	ldr	r1, [pc, #96]	; (8001f10 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0308 	and.w	r3, r3, #8
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d009      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ec0:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	4910      	ldr	r1, [pc, #64]	; (8001f10 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ed4:	f000 f824 	bl	8001f20 <HAL_RCC_GetSysClockFreq>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <HAL_RCC_ClockConfig+0x1f0>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	091b      	lsrs	r3, r3, #4
 8001ee0:	f003 030f 	and.w	r3, r3, #15
 8001ee4:	490b      	ldr	r1, [pc, #44]	; (8001f14 <HAL_RCC_ClockConfig+0x1f4>)
 8001ee6:	5ccb      	ldrb	r3, [r1, r3]
 8001ee8:	f003 031f 	and.w	r3, r3, #31
 8001eec:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef0:	4a09      	ldr	r2, [pc, #36]	; (8001f18 <HAL_RCC_ClockConfig+0x1f8>)
 8001ef2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ef4:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <HAL_RCC_ClockConfig+0x1fc>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7fe ff1b 	bl	8000d34 <HAL_InitTick>
 8001efe:	4603      	mov	r3, r0
 8001f00:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f02:	7afb      	ldrb	r3, [r7, #11]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40022000 	.word	0x40022000
 8001f10:	40021000 	.word	0x40021000
 8001f14:	08003de4 	.word	0x08003de4
 8001f18:	20000000 	.word	0x20000000
 8001f1c:	20000004 	.word	0x20000004

08001f20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b089      	sub	sp, #36	; 0x24
 8001f24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61fb      	str	r3, [r7, #28]
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f2e:	4b3e      	ldr	r3, [pc, #248]	; (8002028 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 030c 	and.w	r3, r3, #12
 8001f36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f38:	4b3b      	ldr	r3, [pc, #236]	; (8002028 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d005      	beq.n	8001f54 <HAL_RCC_GetSysClockFreq+0x34>
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	2b0c      	cmp	r3, #12
 8001f4c:	d121      	bne.n	8001f92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d11e      	bne.n	8001f92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f54:	4b34      	ldr	r3, [pc, #208]	; (8002028 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d107      	bne.n	8001f70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f60:	4b31      	ldr	r3, [pc, #196]	; (8002028 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f66:	0a1b      	lsrs	r3, r3, #8
 8001f68:	f003 030f 	and.w	r3, r3, #15
 8001f6c:	61fb      	str	r3, [r7, #28]
 8001f6e:	e005      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f70:	4b2d      	ldr	r3, [pc, #180]	; (8002028 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	091b      	lsrs	r3, r3, #4
 8001f76:	f003 030f 	and.w	r3, r3, #15
 8001f7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f7c:	4a2b      	ldr	r2, [pc, #172]	; (800202c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d10d      	bne.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f90:	e00a      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d102      	bne.n	8001f9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f98:	4b25      	ldr	r3, [pc, #148]	; (8002030 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f9a:	61bb      	str	r3, [r7, #24]
 8001f9c:	e004      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d101      	bne.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fa4:	4b23      	ldr	r3, [pc, #140]	; (8002034 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fa6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	2b0c      	cmp	r3, #12
 8001fac:	d134      	bne.n	8002018 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fae:	4b1e      	ldr	r3, [pc, #120]	; (8002028 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	f003 0303 	and.w	r3, r3, #3
 8001fb6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d003      	beq.n	8001fc6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	2b03      	cmp	r3, #3
 8001fc2:	d003      	beq.n	8001fcc <HAL_RCC_GetSysClockFreq+0xac>
 8001fc4:	e005      	b.n	8001fd2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001fc6:	4b1a      	ldr	r3, [pc, #104]	; (8002030 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fc8:	617b      	str	r3, [r7, #20]
      break;
 8001fca:	e005      	b.n	8001fd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001fcc:	4b19      	ldr	r3, [pc, #100]	; (8002034 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fce:	617b      	str	r3, [r7, #20]
      break;
 8001fd0:	e002      	b.n	8001fd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	617b      	str	r3, [r7, #20]
      break;
 8001fd6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fd8:	4b13      	ldr	r3, [pc, #76]	; (8002028 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	091b      	lsrs	r3, r3, #4
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001fe6:	4b10      	ldr	r3, [pc, #64]	; (8002028 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	0a1b      	lsrs	r3, r3, #8
 8001fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	fb03 f202 	mul.w	r2, r3, r2
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ffe:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <HAL_RCC_GetSysClockFreq+0x108>)
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	0e5b      	lsrs	r3, r3, #25
 8002004:	f003 0303 	and.w	r3, r3, #3
 8002008:	3301      	adds	r3, #1
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	fbb2 f3f3 	udiv	r3, r2, r3
 8002016:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002018:	69bb      	ldr	r3, [r7, #24]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3724      	adds	r7, #36	; 0x24
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	40021000 	.word	0x40021000
 800202c:	08003dfc 	.word	0x08003dfc
 8002030:	00f42400 	.word	0x00f42400
 8002034:	007a1200 	.word	0x007a1200

08002038 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800203c:	4b03      	ldr	r3, [pc, #12]	; (800204c <HAL_RCC_GetHCLKFreq+0x14>)
 800203e:	681b      	ldr	r3, [r3, #0]
}
 8002040:	4618      	mov	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	20000000 	.word	0x20000000

08002050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002054:	f7ff fff0 	bl	8002038 <HAL_RCC_GetHCLKFreq>
 8002058:	4602      	mov	r2, r0
 800205a:	4b06      	ldr	r3, [pc, #24]	; (8002074 <HAL_RCC_GetPCLK1Freq+0x24>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	0a1b      	lsrs	r3, r3, #8
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	4904      	ldr	r1, [pc, #16]	; (8002078 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002066:	5ccb      	ldrb	r3, [r1, r3]
 8002068:	f003 031f 	and.w	r3, r3, #31
 800206c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002070:	4618      	mov	r0, r3
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40021000 	.word	0x40021000
 8002078:	08003df4 	.word	0x08003df4

0800207c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002080:	f7ff ffda 	bl	8002038 <HAL_RCC_GetHCLKFreq>
 8002084:	4602      	mov	r2, r0
 8002086:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	0adb      	lsrs	r3, r3, #11
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	4904      	ldr	r1, [pc, #16]	; (80020a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002092:	5ccb      	ldrb	r3, [r1, r3]
 8002094:	f003 031f 	and.w	r3, r3, #31
 8002098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800209c:	4618      	mov	r0, r3
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40021000 	.word	0x40021000
 80020a4:	08003df4 	.word	0x08003df4

080020a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020b0:	2300      	movs	r3, #0
 80020b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020b4:	4b2a      	ldr	r3, [pc, #168]	; (8002160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020c0:	f7ff f9b6 	bl	8001430 <HAL_PWREx_GetVoltageRange>
 80020c4:	6178      	str	r0, [r7, #20]
 80020c6:	e014      	b.n	80020f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020c8:	4b25      	ldr	r3, [pc, #148]	; (8002160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020cc:	4a24      	ldr	r2, [pc, #144]	; (8002160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d2:	6593      	str	r3, [r2, #88]	; 0x58
 80020d4:	4b22      	ldr	r3, [pc, #136]	; (8002160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020e0:	f7ff f9a6 	bl	8001430 <HAL_PWREx_GetVoltageRange>
 80020e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020e6:	4b1e      	ldr	r3, [pc, #120]	; (8002160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ea:	4a1d      	ldr	r2, [pc, #116]	; (8002160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020f8:	d10b      	bne.n	8002112 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b80      	cmp	r3, #128	; 0x80
 80020fe:	d919      	bls.n	8002134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2ba0      	cmp	r3, #160	; 0xa0
 8002104:	d902      	bls.n	800210c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002106:	2302      	movs	r3, #2
 8002108:	613b      	str	r3, [r7, #16]
 800210a:	e013      	b.n	8002134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800210c:	2301      	movs	r3, #1
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	e010      	b.n	8002134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b80      	cmp	r3, #128	; 0x80
 8002116:	d902      	bls.n	800211e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002118:	2303      	movs	r3, #3
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	e00a      	b.n	8002134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b80      	cmp	r3, #128	; 0x80
 8002122:	d102      	bne.n	800212a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002124:	2302      	movs	r3, #2
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	e004      	b.n	8002134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b70      	cmp	r3, #112	; 0x70
 800212e:	d101      	bne.n	8002134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002130:	2301      	movs	r3, #1
 8002132:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002134:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f023 0207 	bic.w	r2, r3, #7
 800213c:	4909      	ldr	r1, [pc, #36]	; (8002164 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	4313      	orrs	r3, r2
 8002142:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002144:	4b07      	ldr	r3, [pc, #28]	; (8002164 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	429a      	cmp	r2, r3
 8002150:	d001      	beq.n	8002156 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40021000 	.word	0x40021000
 8002164:	40022000 	.word	0x40022000

08002168 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002170:	2300      	movs	r3, #0
 8002172:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002174:	2300      	movs	r3, #0
 8002176:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002180:	2b00      	cmp	r3, #0
 8002182:	d031      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002188:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800218c:	d01a      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800218e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002192:	d814      	bhi.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002194:	2b00      	cmp	r3, #0
 8002196:	d009      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002198:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800219c:	d10f      	bne.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800219e:	4b5d      	ldr	r3, [pc, #372]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	4a5c      	ldr	r2, [pc, #368]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021aa:	e00c      	b.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3304      	adds	r3, #4
 80021b0:	2100      	movs	r1, #0
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 f9de 	bl	8002574 <RCCEx_PLLSAI1_Config>
 80021b8:	4603      	mov	r3, r0
 80021ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021bc:	e003      	b.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	74fb      	strb	r3, [r7, #19]
      break;
 80021c2:	e000      	b.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80021c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021c6:	7cfb      	ldrb	r3, [r7, #19]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10b      	bne.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021cc:	4b51      	ldr	r3, [pc, #324]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021da:	494e      	ldr	r1, [pc, #312]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80021e2:	e001      	b.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021e4:	7cfb      	ldrb	r3, [r7, #19]
 80021e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 809e 	beq.w	8002332 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021f6:	2300      	movs	r3, #0
 80021f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021fa:	4b46      	ldr	r3, [pc, #280]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002206:	2301      	movs	r3, #1
 8002208:	e000      	b.n	800220c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800220a:	2300      	movs	r3, #0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00d      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002210:	4b40      	ldr	r3, [pc, #256]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002214:	4a3f      	ldr	r2, [pc, #252]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800221a:	6593      	str	r3, [r2, #88]	; 0x58
 800221c:	4b3d      	ldr	r3, [pc, #244]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800221e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002228:	2301      	movs	r3, #1
 800222a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800222c:	4b3a      	ldr	r3, [pc, #232]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a39      	ldr	r2, [pc, #228]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002236:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002238:	f7fe fdcc 	bl	8000dd4 <HAL_GetTick>
 800223c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800223e:	e009      	b.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002240:	f7fe fdc8 	bl	8000dd4 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d902      	bls.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	74fb      	strb	r3, [r7, #19]
        break;
 8002252:	e005      	b.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002254:	4b30      	ldr	r3, [pc, #192]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0ef      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002260:	7cfb      	ldrb	r3, [r7, #19]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d15a      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002266:	4b2b      	ldr	r3, [pc, #172]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800226c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002270:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d01e      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	429a      	cmp	r2, r3
 8002280:	d019      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002282:	4b24      	ldr	r3, [pc, #144]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800228c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800228e:	4b21      	ldr	r3, [pc, #132]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002294:	4a1f      	ldr	r2, [pc, #124]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800229a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800229e:	4b1d      	ldr	r3, [pc, #116]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a4:	4a1b      	ldr	r2, [pc, #108]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022ae:	4a19      	ldr	r2, [pc, #100]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d016      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c0:	f7fe fd88 	bl	8000dd4 <HAL_GetTick>
 80022c4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022c6:	e00b      	b.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c8:	f7fe fd84 	bl	8000dd4 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d902      	bls.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	74fb      	strb	r3, [r7, #19]
            break;
 80022de:	e006      	b.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022e0:	4b0c      	ldr	r3, [pc, #48]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0ec      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80022ee:	7cfb      	ldrb	r3, [r7, #19]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d10b      	bne.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022f4:	4b07      	ldr	r3, [pc, #28]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002302:	4904      	ldr	r1, [pc, #16]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002304:	4313      	orrs	r3, r2
 8002306:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800230a:	e009      	b.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800230c:	7cfb      	ldrb	r3, [r7, #19]
 800230e:	74bb      	strb	r3, [r7, #18]
 8002310:	e006      	b.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002312:	bf00      	nop
 8002314:	40021000 	.word	0x40021000
 8002318:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800231c:	7cfb      	ldrb	r3, [r7, #19]
 800231e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002320:	7c7b      	ldrb	r3, [r7, #17]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d105      	bne.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002326:	4b8a      	ldr	r3, [pc, #552]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232a:	4a89      	ldr	r2, [pc, #548]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800232c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002330:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00a      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800233e:	4b84      	ldr	r3, [pc, #528]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002344:	f023 0203 	bic.w	r2, r3, #3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	4980      	ldr	r1, [pc, #512]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800234e:	4313      	orrs	r3, r2
 8002350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00a      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002360:	4b7b      	ldr	r3, [pc, #492]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002366:	f023 020c 	bic.w	r2, r3, #12
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236e:	4978      	ldr	r1, [pc, #480]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002370:	4313      	orrs	r3, r2
 8002372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0320 	and.w	r3, r3, #32
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00a      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002382:	4b73      	ldr	r3, [pc, #460]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002388:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002390:	496f      	ldr	r1, [pc, #444]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002392:	4313      	orrs	r3, r2
 8002394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00a      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023a4:	4b6a      	ldr	r3, [pc, #424]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023aa:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b2:	4967      	ldr	r1, [pc, #412]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00a      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80023c6:	4b62      	ldr	r3, [pc, #392]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d4:	495e      	ldr	r1, [pc, #376]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00a      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023e8:	4b59      	ldr	r3, [pc, #356]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f6:	4956      	ldr	r1, [pc, #344]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00a      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800240a:	4b51      	ldr	r3, [pc, #324]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800240c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002410:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002418:	494d      	ldr	r1, [pc, #308]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800241a:	4313      	orrs	r3, r2
 800241c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d028      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800242c:	4b48      	ldr	r3, [pc, #288]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800242e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002432:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	4945      	ldr	r1, [pc, #276]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800243c:	4313      	orrs	r3, r2
 800243e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800244a:	d106      	bne.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800244c:	4b40      	ldr	r3, [pc, #256]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	4a3f      	ldr	r2, [pc, #252]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002452:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002456:	60d3      	str	r3, [r2, #12]
 8002458:	e011      	b.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002462:	d10c      	bne.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3304      	adds	r3, #4
 8002468:	2101      	movs	r1, #1
 800246a:	4618      	mov	r0, r3
 800246c:	f000 f882 	bl	8002574 <RCCEx_PLLSAI1_Config>
 8002470:	4603      	mov	r3, r0
 8002472:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002474:	7cfb      	ldrb	r3, [r7, #19]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800247a:	7cfb      	ldrb	r3, [r7, #19]
 800247c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d028      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800248a:	4b31      	ldr	r3, [pc, #196]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800248c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002490:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002498:	492d      	ldr	r1, [pc, #180]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800249a:	4313      	orrs	r3, r2
 800249c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024a8:	d106      	bne.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024aa:	4b29      	ldr	r3, [pc, #164]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	4a28      	ldr	r2, [pc, #160]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024b4:	60d3      	str	r3, [r2, #12]
 80024b6:	e011      	b.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024c0:	d10c      	bne.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	3304      	adds	r3, #4
 80024c6:	2101      	movs	r1, #1
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 f853 	bl	8002574 <RCCEx_PLLSAI1_Config>
 80024ce:	4603      	mov	r3, r0
 80024d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024d2:	7cfb      	ldrb	r3, [r7, #19]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80024d8:	7cfb      	ldrb	r3, [r7, #19]
 80024da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d01c      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024e8:	4b19      	ldr	r3, [pc, #100]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024f6:	4916      	ldr	r1, [pc, #88]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002502:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002506:	d10c      	bne.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3304      	adds	r3, #4
 800250c:	2102      	movs	r1, #2
 800250e:	4618      	mov	r0, r3
 8002510:	f000 f830 	bl	8002574 <RCCEx_PLLSAI1_Config>
 8002514:	4603      	mov	r3, r0
 8002516:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002518:	7cfb      	ldrb	r3, [r7, #19]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800251e:	7cfb      	ldrb	r3, [r7, #19]
 8002520:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00a      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800252e:	4b08      	ldr	r3, [pc, #32]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002534:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800253c:	4904      	ldr	r1, [pc, #16]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800253e:	4313      	orrs	r3, r2
 8002540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002544:	7cbb      	ldrb	r3, [r7, #18]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40021000 	.word	0x40021000

08002554 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002558:	4b05      	ldr	r3, [pc, #20]	; (8002570 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a04      	ldr	r2, [pc, #16]	; (8002570 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800255e:	f043 0304 	orr.w	r3, r3, #4
 8002562:	6013      	str	r3, [r2, #0]
}
 8002564:	bf00      	nop
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	40021000 	.word	0x40021000

08002574 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002582:	4b74      	ldr	r3, [pc, #464]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d018      	beq.n	80025c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800258e:	4b71      	ldr	r3, [pc, #452]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f003 0203 	and.w	r2, r3, #3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	429a      	cmp	r2, r3
 800259c:	d10d      	bne.n	80025ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
       ||
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d009      	beq.n	80025ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025a6:	4b6b      	ldr	r3, [pc, #428]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	091b      	lsrs	r3, r3, #4
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
       ||
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d047      	beq.n	800264a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	73fb      	strb	r3, [r7, #15]
 80025be:	e044      	b.n	800264a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b03      	cmp	r3, #3
 80025c6:	d018      	beq.n	80025fa <RCCEx_PLLSAI1_Config+0x86>
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d825      	bhi.n	8002618 <RCCEx_PLLSAI1_Config+0xa4>
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d002      	beq.n	80025d6 <RCCEx_PLLSAI1_Config+0x62>
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d009      	beq.n	80025e8 <RCCEx_PLLSAI1_Config+0x74>
 80025d4:	e020      	b.n	8002618 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025d6:	4b5f      	ldr	r3, [pc, #380]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d11d      	bne.n	800261e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025e6:	e01a      	b.n	800261e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025e8:	4b5a      	ldr	r3, [pc, #360]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d116      	bne.n	8002622 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025f8:	e013      	b.n	8002622 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025fa:	4b56      	ldr	r3, [pc, #344]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d10f      	bne.n	8002626 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002606:	4b53      	ldr	r3, [pc, #332]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d109      	bne.n	8002626 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002616:	e006      	b.n	8002626 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	73fb      	strb	r3, [r7, #15]
      break;
 800261c:	e004      	b.n	8002628 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800261e:	bf00      	nop
 8002620:	e002      	b.n	8002628 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002622:	bf00      	nop
 8002624:	e000      	b.n	8002628 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002626:	bf00      	nop
    }

    if(status == HAL_OK)
 8002628:	7bfb      	ldrb	r3, [r7, #15]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10d      	bne.n	800264a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800262e:	4b49      	ldr	r3, [pc, #292]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6819      	ldr	r1, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	3b01      	subs	r3, #1
 8002640:	011b      	lsls	r3, r3, #4
 8002642:	430b      	orrs	r3, r1
 8002644:	4943      	ldr	r1, [pc, #268]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002646:	4313      	orrs	r3, r2
 8002648:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800264a:	7bfb      	ldrb	r3, [r7, #15]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d17c      	bne.n	800274a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002650:	4b40      	ldr	r3, [pc, #256]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a3f      	ldr	r2, [pc, #252]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002656:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800265a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800265c:	f7fe fbba 	bl	8000dd4 <HAL_GetTick>
 8002660:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002662:	e009      	b.n	8002678 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002664:	f7fe fbb6 	bl	8000dd4 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d902      	bls.n	8002678 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	73fb      	strb	r3, [r7, #15]
        break;
 8002676:	e005      	b.n	8002684 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002678:	4b36      	ldr	r3, [pc, #216]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1ef      	bne.n	8002664 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002684:	7bfb      	ldrb	r3, [r7, #15]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d15f      	bne.n	800274a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d110      	bne.n	80026b2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002690:	4b30      	ldr	r3, [pc, #192]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002698:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6892      	ldr	r2, [r2, #8]
 80026a0:	0211      	lsls	r1, r2, #8
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	68d2      	ldr	r2, [r2, #12]
 80026a6:	06d2      	lsls	r2, r2, #27
 80026a8:	430a      	orrs	r2, r1
 80026aa:	492a      	ldr	r1, [pc, #168]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	610b      	str	r3, [r1, #16]
 80026b0:	e027      	b.n	8002702 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d112      	bne.n	80026de <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026b8:	4b26      	ldr	r3, [pc, #152]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80026c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6892      	ldr	r2, [r2, #8]
 80026c8:	0211      	lsls	r1, r2, #8
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6912      	ldr	r2, [r2, #16]
 80026ce:	0852      	lsrs	r2, r2, #1
 80026d0:	3a01      	subs	r2, #1
 80026d2:	0552      	lsls	r2, r2, #21
 80026d4:	430a      	orrs	r2, r1
 80026d6:	491f      	ldr	r1, [pc, #124]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	610b      	str	r3, [r1, #16]
 80026dc:	e011      	b.n	8002702 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026de:	4b1d      	ldr	r3, [pc, #116]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6892      	ldr	r2, [r2, #8]
 80026ee:	0211      	lsls	r1, r2, #8
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6952      	ldr	r2, [r2, #20]
 80026f4:	0852      	lsrs	r2, r2, #1
 80026f6:	3a01      	subs	r2, #1
 80026f8:	0652      	lsls	r2, r2, #25
 80026fa:	430a      	orrs	r2, r1
 80026fc:	4915      	ldr	r1, [pc, #84]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002702:	4b14      	ldr	r3, [pc, #80]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a13      	ldr	r2, [pc, #76]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002708:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800270c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270e:	f7fe fb61 	bl	8000dd4 <HAL_GetTick>
 8002712:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002714:	e009      	b.n	800272a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002716:	f7fe fb5d 	bl	8000dd4 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d902      	bls.n	800272a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	73fb      	strb	r3, [r7, #15]
          break;
 8002728:	e005      	b.n	8002736 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800272a:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0ef      	beq.n	8002716 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002736:	7bfb      	ldrb	r3, [r7, #15]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d106      	bne.n	800274a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800273c:	4b05      	ldr	r3, [pc, #20]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 800273e:	691a      	ldr	r2, [r3, #16]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	4903      	ldr	r1, [pc, #12]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002746:	4313      	orrs	r3, r2
 8002748:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800274a:	7bfb      	ldrb	r3, [r7, #15]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40021000 	.word	0x40021000

08002758 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e040      	b.n	80027ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800276e:	2b00      	cmp	r3, #0
 8002770:	d106      	bne.n	8002780 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7fe f9a0 	bl	8000ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2224      	movs	r2, #36	; 0x24
 8002784:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0201 	bic.w	r2, r2, #1
 8002794:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 fc18 	bl	8002fcc <UART_SetConfig>
 800279c:	4603      	mov	r3, r0
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d101      	bne.n	80027a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e022      	b.n	80027ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 fe38 	bl	8003424 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0201 	orr.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 febf 	bl	8003568 <UART_CheckIdleState>
 80027ea:	4603      	mov	r3, r0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08a      	sub	sp, #40	; 0x28
 80027f8:	af02      	add	r7, sp, #8
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	603b      	str	r3, [r7, #0]
 8002800:	4613      	mov	r3, r2
 8002802:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002808:	2b20      	cmp	r3, #32
 800280a:	f040 8082 	bne.w	8002912 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d002      	beq.n	800281a <HAL_UART_Transmit+0x26>
 8002814:	88fb      	ldrh	r3, [r7, #6]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e07a      	b.n	8002914 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002824:	2b01      	cmp	r3, #1
 8002826:	d101      	bne.n	800282c <HAL_UART_Transmit+0x38>
 8002828:	2302      	movs	r3, #2
 800282a:	e073      	b.n	8002914 <HAL_UART_Transmit+0x120>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2221      	movs	r2, #33	; 0x21
 8002840:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002842:	f7fe fac7 	bl	8000dd4 <HAL_GetTick>
 8002846:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	88fa      	ldrh	r2, [r7, #6]
 800284c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	88fa      	ldrh	r2, [r7, #6]
 8002854:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002860:	d108      	bne.n	8002874 <HAL_UART_Transmit+0x80>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d104      	bne.n	8002874 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800286a:	2300      	movs	r3, #0
 800286c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	61bb      	str	r3, [r7, #24]
 8002872:	e003      	b.n	800287c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002878:	2300      	movs	r3, #0
 800287a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002884:	e02d      	b.n	80028e2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	2200      	movs	r2, #0
 800288e:	2180      	movs	r1, #128	; 0x80
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 feb2 	bl	80035fa <UART_WaitOnFlagUntilTimeout>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e039      	b.n	8002914 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10b      	bne.n	80028be <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	881a      	ldrh	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028b2:	b292      	uxth	r2, r2
 80028b4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	3302      	adds	r3, #2
 80028ba:	61bb      	str	r3, [r7, #24]
 80028bc:	e008      	b.n	80028d0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	781a      	ldrb	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	b292      	uxth	r2, r2
 80028c8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	3301      	adds	r3, #1
 80028ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	3b01      	subs	r3, #1
 80028da:	b29a      	uxth	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1cb      	bne.n	8002886 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2200      	movs	r2, #0
 80028f6:	2140      	movs	r1, #64	; 0x40
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 fe7e 	bl	80035fa <UART_WaitOnFlagUntilTimeout>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e005      	b.n	8002914 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2220      	movs	r2, #32
 800290c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	e000      	b.n	8002914 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002912:	2302      	movs	r3, #2
  }
}
 8002914:	4618      	mov	r0, r3
 8002916:	3720      	adds	r7, #32
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08a      	sub	sp, #40	; 0x28
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	4613      	mov	r3, r2
 8002928:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800292e:	2b20      	cmp	r3, #32
 8002930:	d142      	bne.n	80029b8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d002      	beq.n	800293e <HAL_UART_Receive_IT+0x22>
 8002938:	88fb      	ldrh	r3, [r7, #6]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e03b      	b.n	80029ba <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002948:	2b01      	cmp	r3, #1
 800294a:	d101      	bne.n	8002950 <HAL_UART_Receive_IT+0x34>
 800294c:	2302      	movs	r3, #2
 800294e:	e034      	b.n	80029ba <HAL_UART_Receive_IT+0x9e>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a18      	ldr	r2, [pc, #96]	; (80029c4 <HAL_UART_Receive_IT+0xa8>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d01f      	beq.n	80029a8 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d018      	beq.n	80029a8 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	e853 3f00 	ldrex	r3, [r3]
 8002982:	613b      	str	r3, [r7, #16]
   return(result);
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800298a:	627b      	str	r3, [r7, #36]	; 0x24
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	461a      	mov	r2, r3
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	623b      	str	r3, [r7, #32]
 8002996:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002998:	69f9      	ldr	r1, [r7, #28]
 800299a:	6a3a      	ldr	r2, [r7, #32]
 800299c:	e841 2300 	strex	r3, r2, [r1]
 80029a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1e6      	bne.n	8002976 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80029a8:	88fb      	ldrh	r3, [r7, #6]
 80029aa:	461a      	mov	r2, r3
 80029ac:	68b9      	ldr	r1, [r7, #8]
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 fee8 	bl	8003784 <UART_Start_Receive_IT>
 80029b4:	4603      	mov	r3, r0
 80029b6:	e000      	b.n	80029ba <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80029b8:	2302      	movs	r3, #2
  }
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3728      	adds	r7, #40	; 0x28
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40008000 	.word	0x40008000

080029c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b0ba      	sub	sp, #232	; 0xe8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80029ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80029f2:	f640 030f 	movw	r3, #2063	; 0x80f
 80029f6:	4013      	ands	r3, r2
 80029f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80029fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d115      	bne.n	8002a30 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a08:	f003 0320 	and.w	r3, r3, #32
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00f      	beq.n	8002a30 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a14:	f003 0320 	and.w	r3, r3, #32
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d009      	beq.n	8002a30 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 82a6 	beq.w	8002f72 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	4798      	blx	r3
      }
      return;
 8002a2e:	e2a0      	b.n	8002f72 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002a30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 8117 	beq.w	8002c68 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002a3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d106      	bne.n	8002a54 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002a46:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002a4a:	4b85      	ldr	r3, [pc, #532]	; (8002c60 <HAL_UART_IRQHandler+0x298>)
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 810a 	beq.w	8002c68 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d011      	beq.n	8002a84 <HAL_UART_IRQHandler+0xbc>
 8002a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00b      	beq.n	8002a84 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2201      	movs	r2, #1
 8002a72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a7a:	f043 0201 	orr.w	r2, r3, #1
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d011      	beq.n	8002ab4 <HAL_UART_IRQHandler+0xec>
 8002a90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00b      	beq.n	8002ab4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002aaa:	f043 0204 	orr.w	r2, r3, #4
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d011      	beq.n	8002ae4 <HAL_UART_IRQHandler+0x11c>
 8002ac0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00b      	beq.n	8002ae4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2204      	movs	r2, #4
 8002ad2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ada:	f043 0202 	orr.w	r2, r3, #2
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ae8:	f003 0308 	and.w	r3, r3, #8
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d017      	beq.n	8002b20 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002af4:	f003 0320 	and.w	r3, r3, #32
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d105      	bne.n	8002b08 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002afc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b00:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00b      	beq.n	8002b20 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2208      	movs	r2, #8
 8002b0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b16:	f043 0208 	orr.w	r2, r3, #8
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d012      	beq.n	8002b52 <HAL_UART_IRQHandler+0x18a>
 8002b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00c      	beq.n	8002b52 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b48:	f043 0220 	orr.w	r2, r3, #32
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 820c 	beq.w	8002f76 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b62:	f003 0320 	and.w	r3, r3, #32
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00d      	beq.n	8002b86 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b6e:	f003 0320 	and.w	r3, r3, #32
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d007      	beq.n	8002b86 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9a:	2b40      	cmp	r3, #64	; 0x40
 8002b9c:	d005      	beq.n	8002baa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ba2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d04f      	beq.n	8002c4a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 feb4 	bl	8003918 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bba:	2b40      	cmp	r3, #64	; 0x40
 8002bbc:	d141      	bne.n	8002c42 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	3308      	adds	r3, #8
 8002bc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bcc:	e853 3f00 	ldrex	r3, [r3]
 8002bd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002bd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002bd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	3308      	adds	r3, #8
 8002be6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002bea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002bee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002bf6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002bfa:	e841 2300 	strex	r3, r2, [r1]
 8002bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002c02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1d9      	bne.n	8002bbe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d013      	beq.n	8002c3a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c16:	4a13      	ldr	r2, [pc, #76]	; (8002c64 <HAL_UART_IRQHandler+0x29c>)
 8002c18:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fe fa33 	bl	800108a <HAL_DMA_Abort_IT>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d017      	beq.n	8002c5a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002c34:	4610      	mov	r0, r2
 8002c36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c38:	e00f      	b.n	8002c5a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f9b0 	bl	8002fa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c40:	e00b      	b.n	8002c5a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f9ac 	bl	8002fa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c48:	e007      	b.n	8002c5a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f9a8 	bl	8002fa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002c58:	e18d      	b.n	8002f76 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c5a:	bf00      	nop
    return;
 8002c5c:	e18b      	b.n	8002f76 <HAL_UART_IRQHandler+0x5ae>
 8002c5e:	bf00      	nop
 8002c60:	04000120 	.word	0x04000120
 8002c64:	080039df 	.word	0x080039df

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	f040 8146 	bne.w	8002efe <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c76:	f003 0310 	and.w	r3, r3, #16
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f000 813f 	beq.w	8002efe <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c84:	f003 0310 	and.w	r3, r3, #16
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 8138 	beq.w	8002efe <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2210      	movs	r2, #16
 8002c94:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca0:	2b40      	cmp	r3, #64	; 0x40
 8002ca2:	f040 80b4 	bne.w	8002e0e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002cb2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 815f 	beq.w	8002f7a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002cc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	f080 8157 	bcs.w	8002f7a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002cd2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0320 	and.w	r3, r3, #32
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f040 8085 	bne.w	8002df2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cf4:	e853 3f00 	ldrex	r3, [r3]
 8002cf8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002cfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002d12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d16:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002d1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d22:	e841 2300 	strex	r3, r2, [r1]
 8002d26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002d2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1da      	bne.n	8002ce8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	3308      	adds	r3, #8
 8002d38:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d3c:	e853 3f00 	ldrex	r3, [r3]
 8002d40:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002d42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d44:	f023 0301 	bic.w	r3, r3, #1
 8002d48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	3308      	adds	r3, #8
 8002d52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d56:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002d5a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002d5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d62:	e841 2300 	strex	r3, r2, [r1]
 8002d66:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002d68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1e1      	bne.n	8002d32 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	3308      	adds	r3, #8
 8002d74:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d78:	e853 3f00 	ldrex	r3, [r3]
 8002d7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002d7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	3308      	adds	r3, #8
 8002d8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d92:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d94:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d96:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d9a:	e841 2300 	strex	r3, r2, [r1]
 8002d9e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002da0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1e3      	bne.n	8002d6e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2220      	movs	r2, #32
 8002daa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dba:	e853 3f00 	ldrex	r3, [r3]
 8002dbe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002dc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dc2:	f023 0310 	bic.w	r3, r3, #16
 8002dc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002dd4:	65bb      	str	r3, [r7, #88]	; 0x58
 8002dd6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002dda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ddc:	e841 2300 	strex	r3, r2, [r1]
 8002de0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1e4      	bne.n	8002db2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7fe f90e 	bl	800100e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	4619      	mov	r1, r3
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f8d4 	bl	8002fb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e0c:	e0b5      	b.n	8002f7a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 80a7 	beq.w	8002f7e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8002e30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 80a2 	beq.w	8002f7e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e42:	e853 3f00 	ldrex	r3, [r3]
 8002e46:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	461a      	mov	r2, r3
 8002e58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e5c:	647b      	str	r3, [r7, #68]	; 0x44
 8002e5e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e64:	e841 2300 	strex	r3, r2, [r1]
 8002e68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1e4      	bne.n	8002e3a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	3308      	adds	r3, #8
 8002e76:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	e853 3f00 	ldrex	r3, [r3]
 8002e7e:	623b      	str	r3, [r7, #32]
   return(result);
 8002e80:	6a3b      	ldr	r3, [r7, #32]
 8002e82:	f023 0301 	bic.w	r3, r3, #1
 8002e86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	3308      	adds	r3, #8
 8002e90:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e94:	633a      	str	r2, [r7, #48]	; 0x30
 8002e96:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e9c:	e841 2300 	strex	r3, r2, [r1]
 8002ea0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1e3      	bne.n	8002e70 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	e853 3f00 	ldrex	r3, [r3]
 8002ec6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f023 0310 	bic.w	r3, r3, #16
 8002ece:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002edc:	61fb      	str	r3, [r7, #28]
 8002ede:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee0:	69b9      	ldr	r1, [r7, #24]
 8002ee2:	69fa      	ldr	r2, [r7, #28]
 8002ee4:	e841 2300 	strex	r3, r2, [r1]
 8002ee8:	617b      	str	r3, [r7, #20]
   return(result);
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1e4      	bne.n	8002eba <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ef0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f85c 	bl	8002fb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002efc:	e03f      	b.n	8002f7e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00e      	beq.n	8002f28 <HAL_UART_IRQHandler+0x560>
 8002f0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d008      	beq.n	8002f28 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002f1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 fefc 	bl	8003d1e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f26:	e02d      	b.n	8002f84 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00e      	beq.n	8002f52 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d008      	beq.n	8002f52 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d01c      	beq.n	8002f82 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	4798      	blx	r3
    }
    return;
 8002f50:	e017      	b.n	8002f82 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d012      	beq.n	8002f84 <HAL_UART_IRQHandler+0x5bc>
 8002f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00c      	beq.n	8002f84 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 fd4d 	bl	8003a0a <UART_EndTransmit_IT>
    return;
 8002f70:	e008      	b.n	8002f84 <HAL_UART_IRQHandler+0x5bc>
      return;
 8002f72:	bf00      	nop
 8002f74:	e006      	b.n	8002f84 <HAL_UART_IRQHandler+0x5bc>
    return;
 8002f76:	bf00      	nop
 8002f78:	e004      	b.n	8002f84 <HAL_UART_IRQHandler+0x5bc>
      return;
 8002f7a:	bf00      	nop
 8002f7c:	e002      	b.n	8002f84 <HAL_UART_IRQHandler+0x5bc>
      return;
 8002f7e:	bf00      	nop
 8002f80:	e000      	b.n	8002f84 <HAL_UART_IRQHandler+0x5bc>
    return;
 8002f82:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002f84:	37e8      	adds	r7, #232	; 0xe8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop

08002f8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fd0:	b08a      	sub	sp, #40	; 0x28
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	431a      	orrs	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	4bb4      	ldr	r3, [pc, #720]	; (80032cc <UART_SetConfig+0x300>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	6812      	ldr	r2, [r2, #0]
 8003002:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003004:	430b      	orrs	r3, r1
 8003006:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	430a      	orrs	r2, r1
 800301c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4aa9      	ldr	r2, [pc, #676]	; (80032d0 <UART_SetConfig+0x304>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d004      	beq.n	8003038 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003034:	4313      	orrs	r3, r2
 8003036:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003048:	430a      	orrs	r2, r1
 800304a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4aa0      	ldr	r2, [pc, #640]	; (80032d4 <UART_SetConfig+0x308>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d126      	bne.n	80030a4 <UART_SetConfig+0xd8>
 8003056:	4ba0      	ldr	r3, [pc, #640]	; (80032d8 <UART_SetConfig+0x30c>)
 8003058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305c:	f003 0303 	and.w	r3, r3, #3
 8003060:	2b03      	cmp	r3, #3
 8003062:	d81b      	bhi.n	800309c <UART_SetConfig+0xd0>
 8003064:	a201      	add	r2, pc, #4	; (adr r2, 800306c <UART_SetConfig+0xa0>)
 8003066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306a:	bf00      	nop
 800306c:	0800307d 	.word	0x0800307d
 8003070:	0800308d 	.word	0x0800308d
 8003074:	08003085 	.word	0x08003085
 8003078:	08003095 	.word	0x08003095
 800307c:	2301      	movs	r3, #1
 800307e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003082:	e080      	b.n	8003186 <UART_SetConfig+0x1ba>
 8003084:	2302      	movs	r3, #2
 8003086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800308a:	e07c      	b.n	8003186 <UART_SetConfig+0x1ba>
 800308c:	2304      	movs	r3, #4
 800308e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003092:	e078      	b.n	8003186 <UART_SetConfig+0x1ba>
 8003094:	2308      	movs	r3, #8
 8003096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800309a:	e074      	b.n	8003186 <UART_SetConfig+0x1ba>
 800309c:	2310      	movs	r3, #16
 800309e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030a2:	e070      	b.n	8003186 <UART_SetConfig+0x1ba>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a8c      	ldr	r2, [pc, #560]	; (80032dc <UART_SetConfig+0x310>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d138      	bne.n	8003120 <UART_SetConfig+0x154>
 80030ae:	4b8a      	ldr	r3, [pc, #552]	; (80032d8 <UART_SetConfig+0x30c>)
 80030b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b4:	f003 030c 	and.w	r3, r3, #12
 80030b8:	2b0c      	cmp	r3, #12
 80030ba:	d82d      	bhi.n	8003118 <UART_SetConfig+0x14c>
 80030bc:	a201      	add	r2, pc, #4	; (adr r2, 80030c4 <UART_SetConfig+0xf8>)
 80030be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c2:	bf00      	nop
 80030c4:	080030f9 	.word	0x080030f9
 80030c8:	08003119 	.word	0x08003119
 80030cc:	08003119 	.word	0x08003119
 80030d0:	08003119 	.word	0x08003119
 80030d4:	08003109 	.word	0x08003109
 80030d8:	08003119 	.word	0x08003119
 80030dc:	08003119 	.word	0x08003119
 80030e0:	08003119 	.word	0x08003119
 80030e4:	08003101 	.word	0x08003101
 80030e8:	08003119 	.word	0x08003119
 80030ec:	08003119 	.word	0x08003119
 80030f0:	08003119 	.word	0x08003119
 80030f4:	08003111 	.word	0x08003111
 80030f8:	2300      	movs	r3, #0
 80030fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030fe:	e042      	b.n	8003186 <UART_SetConfig+0x1ba>
 8003100:	2302      	movs	r3, #2
 8003102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003106:	e03e      	b.n	8003186 <UART_SetConfig+0x1ba>
 8003108:	2304      	movs	r3, #4
 800310a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800310e:	e03a      	b.n	8003186 <UART_SetConfig+0x1ba>
 8003110:	2308      	movs	r3, #8
 8003112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003116:	e036      	b.n	8003186 <UART_SetConfig+0x1ba>
 8003118:	2310      	movs	r3, #16
 800311a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800311e:	e032      	b.n	8003186 <UART_SetConfig+0x1ba>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a6a      	ldr	r2, [pc, #424]	; (80032d0 <UART_SetConfig+0x304>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d12a      	bne.n	8003180 <UART_SetConfig+0x1b4>
 800312a:	4b6b      	ldr	r3, [pc, #428]	; (80032d8 <UART_SetConfig+0x30c>)
 800312c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003130:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003134:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003138:	d01a      	beq.n	8003170 <UART_SetConfig+0x1a4>
 800313a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800313e:	d81b      	bhi.n	8003178 <UART_SetConfig+0x1ac>
 8003140:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003144:	d00c      	beq.n	8003160 <UART_SetConfig+0x194>
 8003146:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800314a:	d815      	bhi.n	8003178 <UART_SetConfig+0x1ac>
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <UART_SetConfig+0x18c>
 8003150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003154:	d008      	beq.n	8003168 <UART_SetConfig+0x19c>
 8003156:	e00f      	b.n	8003178 <UART_SetConfig+0x1ac>
 8003158:	2300      	movs	r3, #0
 800315a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800315e:	e012      	b.n	8003186 <UART_SetConfig+0x1ba>
 8003160:	2302      	movs	r3, #2
 8003162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003166:	e00e      	b.n	8003186 <UART_SetConfig+0x1ba>
 8003168:	2304      	movs	r3, #4
 800316a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800316e:	e00a      	b.n	8003186 <UART_SetConfig+0x1ba>
 8003170:	2308      	movs	r3, #8
 8003172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003176:	e006      	b.n	8003186 <UART_SetConfig+0x1ba>
 8003178:	2310      	movs	r3, #16
 800317a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800317e:	e002      	b.n	8003186 <UART_SetConfig+0x1ba>
 8003180:	2310      	movs	r3, #16
 8003182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a51      	ldr	r2, [pc, #324]	; (80032d0 <UART_SetConfig+0x304>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d17a      	bne.n	8003286 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003190:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003194:	2b08      	cmp	r3, #8
 8003196:	d824      	bhi.n	80031e2 <UART_SetConfig+0x216>
 8003198:	a201      	add	r2, pc, #4	; (adr r2, 80031a0 <UART_SetConfig+0x1d4>)
 800319a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800319e:	bf00      	nop
 80031a0:	080031c5 	.word	0x080031c5
 80031a4:	080031e3 	.word	0x080031e3
 80031a8:	080031cd 	.word	0x080031cd
 80031ac:	080031e3 	.word	0x080031e3
 80031b0:	080031d3 	.word	0x080031d3
 80031b4:	080031e3 	.word	0x080031e3
 80031b8:	080031e3 	.word	0x080031e3
 80031bc:	080031e3 	.word	0x080031e3
 80031c0:	080031db 	.word	0x080031db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031c4:	f7fe ff44 	bl	8002050 <HAL_RCC_GetPCLK1Freq>
 80031c8:	61f8      	str	r0, [r7, #28]
        break;
 80031ca:	e010      	b.n	80031ee <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031cc:	4b44      	ldr	r3, [pc, #272]	; (80032e0 <UART_SetConfig+0x314>)
 80031ce:	61fb      	str	r3, [r7, #28]
        break;
 80031d0:	e00d      	b.n	80031ee <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031d2:	f7fe fea5 	bl	8001f20 <HAL_RCC_GetSysClockFreq>
 80031d6:	61f8      	str	r0, [r7, #28]
        break;
 80031d8:	e009      	b.n	80031ee <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031de:	61fb      	str	r3, [r7, #28]
        break;
 80031e0:	e005      	b.n	80031ee <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80031ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 8107 	beq.w	8003404 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	4413      	add	r3, r2
 8003200:	69fa      	ldr	r2, [r7, #28]
 8003202:	429a      	cmp	r2, r3
 8003204:	d305      	bcc.n	8003212 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800320c:	69fa      	ldr	r2, [r7, #28]
 800320e:	429a      	cmp	r2, r3
 8003210:	d903      	bls.n	800321a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003218:	e0f4      	b.n	8003404 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	2200      	movs	r2, #0
 800321e:	461c      	mov	r4, r3
 8003220:	4615      	mov	r5, r2
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	022b      	lsls	r3, r5, #8
 800322c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003230:	0222      	lsls	r2, r4, #8
 8003232:	68f9      	ldr	r1, [r7, #12]
 8003234:	6849      	ldr	r1, [r1, #4]
 8003236:	0849      	lsrs	r1, r1, #1
 8003238:	2000      	movs	r0, #0
 800323a:	4688      	mov	r8, r1
 800323c:	4681      	mov	r9, r0
 800323e:	eb12 0a08 	adds.w	sl, r2, r8
 8003242:	eb43 0b09 	adc.w	fp, r3, r9
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	603b      	str	r3, [r7, #0]
 800324e:	607a      	str	r2, [r7, #4]
 8003250:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003254:	4650      	mov	r0, sl
 8003256:	4659      	mov	r1, fp
 8003258:	f7fc ffb8 	bl	80001cc <__aeabi_uldivmod>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4613      	mov	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800326a:	d308      	bcc.n	800327e <UART_SetConfig+0x2b2>
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003272:	d204      	bcs.n	800327e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	60da      	str	r2, [r3, #12]
 800327c:	e0c2      	b.n	8003404 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003284:	e0be      	b.n	8003404 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800328e:	d16a      	bne.n	8003366 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003290:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003294:	2b08      	cmp	r3, #8
 8003296:	d834      	bhi.n	8003302 <UART_SetConfig+0x336>
 8003298:	a201      	add	r2, pc, #4	; (adr r2, 80032a0 <UART_SetConfig+0x2d4>)
 800329a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329e:	bf00      	nop
 80032a0:	080032c5 	.word	0x080032c5
 80032a4:	080032e5 	.word	0x080032e5
 80032a8:	080032ed 	.word	0x080032ed
 80032ac:	08003303 	.word	0x08003303
 80032b0:	080032f3 	.word	0x080032f3
 80032b4:	08003303 	.word	0x08003303
 80032b8:	08003303 	.word	0x08003303
 80032bc:	08003303 	.word	0x08003303
 80032c0:	080032fb 	.word	0x080032fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032c4:	f7fe fec4 	bl	8002050 <HAL_RCC_GetPCLK1Freq>
 80032c8:	61f8      	str	r0, [r7, #28]
        break;
 80032ca:	e020      	b.n	800330e <UART_SetConfig+0x342>
 80032cc:	efff69f3 	.word	0xefff69f3
 80032d0:	40008000 	.word	0x40008000
 80032d4:	40013800 	.word	0x40013800
 80032d8:	40021000 	.word	0x40021000
 80032dc:	40004400 	.word	0x40004400
 80032e0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032e4:	f7fe feca 	bl	800207c <HAL_RCC_GetPCLK2Freq>
 80032e8:	61f8      	str	r0, [r7, #28]
        break;
 80032ea:	e010      	b.n	800330e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032ec:	4b4c      	ldr	r3, [pc, #304]	; (8003420 <UART_SetConfig+0x454>)
 80032ee:	61fb      	str	r3, [r7, #28]
        break;
 80032f0:	e00d      	b.n	800330e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032f2:	f7fe fe15 	bl	8001f20 <HAL_RCC_GetSysClockFreq>
 80032f6:	61f8      	str	r0, [r7, #28]
        break;
 80032f8:	e009      	b.n	800330e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032fe:	61fb      	str	r3, [r7, #28]
        break;
 8003300:	e005      	b.n	800330e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003302:	2300      	movs	r3, #0
 8003304:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800330c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d077      	beq.n	8003404 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	005a      	lsls	r2, r3, #1
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	085b      	lsrs	r3, r3, #1
 800331e:	441a      	add	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	fbb2 f3f3 	udiv	r3, r2, r3
 8003328:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	2b0f      	cmp	r3, #15
 800332e:	d916      	bls.n	800335e <UART_SetConfig+0x392>
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003336:	d212      	bcs.n	800335e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	b29b      	uxth	r3, r3
 800333c:	f023 030f 	bic.w	r3, r3, #15
 8003340:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	085b      	lsrs	r3, r3, #1
 8003346:	b29b      	uxth	r3, r3
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	b29a      	uxth	r2, r3
 800334e:	8afb      	ldrh	r3, [r7, #22]
 8003350:	4313      	orrs	r3, r2
 8003352:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	8afa      	ldrh	r2, [r7, #22]
 800335a:	60da      	str	r2, [r3, #12]
 800335c:	e052      	b.n	8003404 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003364:	e04e      	b.n	8003404 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003366:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800336a:	2b08      	cmp	r3, #8
 800336c:	d827      	bhi.n	80033be <UART_SetConfig+0x3f2>
 800336e:	a201      	add	r2, pc, #4	; (adr r2, 8003374 <UART_SetConfig+0x3a8>)
 8003370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003374:	08003399 	.word	0x08003399
 8003378:	080033a1 	.word	0x080033a1
 800337c:	080033a9 	.word	0x080033a9
 8003380:	080033bf 	.word	0x080033bf
 8003384:	080033af 	.word	0x080033af
 8003388:	080033bf 	.word	0x080033bf
 800338c:	080033bf 	.word	0x080033bf
 8003390:	080033bf 	.word	0x080033bf
 8003394:	080033b7 	.word	0x080033b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003398:	f7fe fe5a 	bl	8002050 <HAL_RCC_GetPCLK1Freq>
 800339c:	61f8      	str	r0, [r7, #28]
        break;
 800339e:	e014      	b.n	80033ca <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033a0:	f7fe fe6c 	bl	800207c <HAL_RCC_GetPCLK2Freq>
 80033a4:	61f8      	str	r0, [r7, #28]
        break;
 80033a6:	e010      	b.n	80033ca <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033a8:	4b1d      	ldr	r3, [pc, #116]	; (8003420 <UART_SetConfig+0x454>)
 80033aa:	61fb      	str	r3, [r7, #28]
        break;
 80033ac:	e00d      	b.n	80033ca <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033ae:	f7fe fdb7 	bl	8001f20 <HAL_RCC_GetSysClockFreq>
 80033b2:	61f8      	str	r0, [r7, #28]
        break;
 80033b4:	e009      	b.n	80033ca <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ba:	61fb      	str	r3, [r7, #28]
        break;
 80033bc:	e005      	b.n	80033ca <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80033be:	2300      	movs	r3, #0
 80033c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80033c8:	bf00      	nop
    }

    if (pclk != 0U)
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d019      	beq.n	8003404 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	085a      	lsrs	r2, r3, #1
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	441a      	add	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	2b0f      	cmp	r3, #15
 80033e8:	d909      	bls.n	80033fe <UART_SetConfig+0x432>
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033f0:	d205      	bcs.n	80033fe <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	60da      	str	r2, [r3, #12]
 80033fc:	e002      	b.n	8003404 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003410:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003414:	4618      	mov	r0, r3
 8003416:	3728      	adds	r7, #40	; 0x28
 8003418:	46bd      	mov	sp, r7
 800341a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800341e:	bf00      	nop
 8003420:	00f42400 	.word	0x00f42400

08003424 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	f003 0308 	and.w	r3, r3, #8
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	f003 0310 	and.w	r3, r3, #16
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00a      	beq.n	80034d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00a      	beq.n	80034f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003500:	2b00      	cmp	r3, #0
 8003502:	d01a      	beq.n	800353a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003522:	d10a      	bne.n	800353a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00a      	beq.n	800355c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	605a      	str	r2, [r3, #4]
  }
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af02      	add	r7, sp, #8
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003578:	f7fd fc2c 	bl	8000dd4 <HAL_GetTick>
 800357c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0308 	and.w	r3, r3, #8
 8003588:	2b08      	cmp	r3, #8
 800358a:	d10e      	bne.n	80035aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800358c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f82d 	bl	80035fa <UART_WaitOnFlagUntilTimeout>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e023      	b.n	80035f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	2b04      	cmp	r3, #4
 80035b6:	d10e      	bne.n	80035d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f817 	bl	80035fa <UART_WaitOnFlagUntilTimeout>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e00d      	b.n	80035f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2220      	movs	r2, #32
 80035da:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2220      	movs	r2, #32
 80035e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b09c      	sub	sp, #112	; 0x70
 80035fe:	af00      	add	r7, sp, #0
 8003600:	60f8      	str	r0, [r7, #12]
 8003602:	60b9      	str	r1, [r7, #8]
 8003604:	603b      	str	r3, [r7, #0]
 8003606:	4613      	mov	r3, r2
 8003608:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800360a:	e0a5      	b.n	8003758 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800360c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800360e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003612:	f000 80a1 	beq.w	8003758 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003616:	f7fd fbdd 	bl	8000dd4 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003622:	429a      	cmp	r2, r3
 8003624:	d302      	bcc.n	800362c <UART_WaitOnFlagUntilTimeout+0x32>
 8003626:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003628:	2b00      	cmp	r3, #0
 800362a:	d13e      	bne.n	80036aa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003634:	e853 3f00 	ldrex	r3, [r3]
 8003638:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800363a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800363c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003640:	667b      	str	r3, [r7, #100]	; 0x64
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	461a      	mov	r2, r3
 8003648:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800364a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800364c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003650:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003652:	e841 2300 	strex	r3, r2, [r1]
 8003656:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003658:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1e6      	bne.n	800362c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	3308      	adds	r3, #8
 8003664:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003668:	e853 3f00 	ldrex	r3, [r3]
 800366c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800366e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003670:	f023 0301 	bic.w	r3, r3, #1
 8003674:	663b      	str	r3, [r7, #96]	; 0x60
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	3308      	adds	r3, #8
 800367c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800367e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003680:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003682:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003684:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003686:	e841 2300 	strex	r3, r2, [r1]
 800368a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800368c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1e5      	bne.n	800365e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2220      	movs	r2, #32
 8003696:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2220      	movs	r2, #32
 800369c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e067      	b.n	800377a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d04f      	beq.n	8003758 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036c6:	d147      	bne.n	8003758 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036d0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036da:	e853 3f00 	ldrex	r3, [r3]
 80036de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	461a      	mov	r2, r3
 80036ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036f0:	637b      	str	r3, [r7, #52]	; 0x34
 80036f2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036f8:	e841 2300 	strex	r3, r2, [r1]
 80036fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1e6      	bne.n	80036d2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	3308      	adds	r3, #8
 800370a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	e853 3f00 	ldrex	r3, [r3]
 8003712:	613b      	str	r3, [r7, #16]
   return(result);
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	f023 0301 	bic.w	r3, r3, #1
 800371a:	66bb      	str	r3, [r7, #104]	; 0x68
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	3308      	adds	r3, #8
 8003722:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003724:	623a      	str	r2, [r7, #32]
 8003726:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003728:	69f9      	ldr	r1, [r7, #28]
 800372a:	6a3a      	ldr	r2, [r7, #32]
 800372c:	e841 2300 	strex	r3, r2, [r1]
 8003730:	61bb      	str	r3, [r7, #24]
   return(result);
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1e5      	bne.n	8003704 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2220      	movs	r2, #32
 800373c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2220      	movs	r2, #32
 8003742:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2220      	movs	r2, #32
 8003748:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e010      	b.n	800377a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	69da      	ldr	r2, [r3, #28]
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	4013      	ands	r3, r2
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	429a      	cmp	r2, r3
 8003766:	bf0c      	ite	eq
 8003768:	2301      	moveq	r3, #1
 800376a:	2300      	movne	r3, #0
 800376c:	b2db      	uxtb	r3, r3
 800376e:	461a      	mov	r2, r3
 8003770:	79fb      	ldrb	r3, [r7, #7]
 8003772:	429a      	cmp	r2, r3
 8003774:	f43f af4a 	beq.w	800360c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3770      	adds	r7, #112	; 0x70
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
	...

08003784 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003784:	b480      	push	{r7}
 8003786:	b097      	sub	sp, #92	; 0x5c
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	4613      	mov	r3, r2
 8003790:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	88fa      	ldrh	r2, [r7, #6]
 800379c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	88fa      	ldrh	r2, [r7, #6]
 80037a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b6:	d10e      	bne.n	80037d6 <UART_Start_Receive_IT+0x52>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d105      	bne.n	80037cc <UART_Start_Receive_IT+0x48>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80037c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037ca:	e02d      	b.n	8003828 <UART_Start_Receive_IT+0xa4>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	22ff      	movs	r2, #255	; 0xff
 80037d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037d4:	e028      	b.n	8003828 <UART_Start_Receive_IT+0xa4>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10d      	bne.n	80037fa <UART_Start_Receive_IT+0x76>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d104      	bne.n	80037f0 <UART_Start_Receive_IT+0x6c>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	22ff      	movs	r2, #255	; 0xff
 80037ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037ee:	e01b      	b.n	8003828 <UART_Start_Receive_IT+0xa4>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	227f      	movs	r2, #127	; 0x7f
 80037f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037f8:	e016      	b.n	8003828 <UART_Start_Receive_IT+0xa4>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003802:	d10d      	bne.n	8003820 <UART_Start_Receive_IT+0x9c>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d104      	bne.n	8003816 <UART_Start_Receive_IT+0x92>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	227f      	movs	r2, #127	; 0x7f
 8003810:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003814:	e008      	b.n	8003828 <UART_Start_Receive_IT+0xa4>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	223f      	movs	r2, #63	; 0x3f
 800381a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800381e:	e003      	b.n	8003828 <UART_Start_Receive_IT+0xa4>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2222      	movs	r2, #34	; 0x22
 8003834:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	3308      	adds	r3, #8
 800383c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003840:	e853 3f00 	ldrex	r3, [r3]
 8003844:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003848:	f043 0301 	orr.w	r3, r3, #1
 800384c:	657b      	str	r3, [r7, #84]	; 0x54
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	3308      	adds	r3, #8
 8003854:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003856:	64ba      	str	r2, [r7, #72]	; 0x48
 8003858:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800385c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800385e:	e841 2300 	strex	r3, r2, [r1]
 8003862:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003864:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1e5      	bne.n	8003836 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003872:	d107      	bne.n	8003884 <UART_Start_Receive_IT+0x100>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d103      	bne.n	8003884 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4a24      	ldr	r2, [pc, #144]	; (8003910 <UART_Start_Receive_IT+0x18c>)
 8003880:	665a      	str	r2, [r3, #100]	; 0x64
 8003882:	e002      	b.n	800388a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	4a23      	ldr	r2, [pc, #140]	; (8003914 <UART_Start_Receive_IT+0x190>)
 8003888:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d019      	beq.n	80038ce <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a2:	e853 3f00 	ldrex	r3, [r3]
 80038a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038aa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80038ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	461a      	mov	r2, r3
 80038b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038b8:	637b      	str	r3, [r7, #52]	; 0x34
 80038ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038c0:	e841 2300 	strex	r3, r2, [r1]
 80038c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80038c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1e6      	bne.n	800389a <UART_Start_Receive_IT+0x116>
 80038cc:	e018      	b.n	8003900 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	e853 3f00 	ldrex	r3, [r3]
 80038da:	613b      	str	r3, [r7, #16]
   return(result);
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	f043 0320 	orr.w	r3, r3, #32
 80038e2:	653b      	str	r3, [r7, #80]	; 0x50
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	461a      	mov	r2, r3
 80038ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038ec:	623b      	str	r3, [r7, #32]
 80038ee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f0:	69f9      	ldr	r1, [r7, #28]
 80038f2:	6a3a      	ldr	r2, [r7, #32]
 80038f4:	e841 2300 	strex	r3, r2, [r1]
 80038f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1e6      	bne.n	80038ce <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	375c      	adds	r7, #92	; 0x5c
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	08003bbf 	.word	0x08003bbf
 8003914:	08003a5f 	.word	0x08003a5f

08003918 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003918:	b480      	push	{r7}
 800391a:	b095      	sub	sp, #84	; 0x54
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003928:	e853 3f00 	ldrex	r3, [r3]
 800392c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800392e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003930:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003934:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800393e:	643b      	str	r3, [r7, #64]	; 0x40
 8003940:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003942:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003944:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003946:	e841 2300 	strex	r3, r2, [r1]
 800394a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800394c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1e6      	bne.n	8003920 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	3308      	adds	r3, #8
 8003958:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	e853 3f00 	ldrex	r3, [r3]
 8003960:	61fb      	str	r3, [r7, #28]
   return(result);
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	f023 0301 	bic.w	r3, r3, #1
 8003968:	64bb      	str	r3, [r7, #72]	; 0x48
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	3308      	adds	r3, #8
 8003970:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003972:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003974:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003976:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800397a:	e841 2300 	strex	r3, r2, [r1]
 800397e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1e5      	bne.n	8003952 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800398a:	2b01      	cmp	r3, #1
 800398c:	d118      	bne.n	80039c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	e853 3f00 	ldrex	r3, [r3]
 800399a:	60bb      	str	r3, [r7, #8]
   return(result);
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	f023 0310 	bic.w	r3, r3, #16
 80039a2:	647b      	str	r3, [r7, #68]	; 0x44
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	461a      	mov	r2, r3
 80039aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ac:	61bb      	str	r3, [r7, #24]
 80039ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b0:	6979      	ldr	r1, [r7, #20]
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	e841 2300 	strex	r3, r2, [r1]
 80039b8:	613b      	str	r3, [r7, #16]
   return(result);
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1e6      	bne.n	800398e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2220      	movs	r2, #32
 80039c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80039d2:	bf00      	nop
 80039d4:	3754      	adds	r7, #84	; 0x54
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b084      	sub	sp, #16
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f7ff facf 	bl	8002fa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a02:	bf00      	nop
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b088      	sub	sp, #32
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	e853 3f00 	ldrex	r3, [r3]
 8003a1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a26:	61fb      	str	r3, [r7, #28]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	61bb      	str	r3, [r7, #24]
 8003a32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a34:	6979      	ldr	r1, [r7, #20]
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	e841 2300 	strex	r3, r2, [r1]
 8003a3c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1e6      	bne.n	8003a12 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2220      	movs	r2, #32
 8003a48:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f7ff fa9b 	bl	8002f8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a56:	bf00      	nop
 8003a58:	3720      	adds	r7, #32
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b096      	sub	sp, #88	; 0x58
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003a6c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a74:	2b22      	cmp	r3, #34	; 0x22
 8003a76:	f040 8094 	bne.w	8003ba2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003a80:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003a84:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003a88:	b2d9      	uxtb	r1, r3
 8003a8a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003a8e:	b2da      	uxtb	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a94:	400a      	ands	r2, r1
 8003a96:	b2d2      	uxtb	r2, r2
 8003a98:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9e:	1c5a      	adds	r2, r3, #1
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	3b01      	subs	r3, #1
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d179      	bne.n	8003bb6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aca:	e853 3f00 	ldrex	r3, [r3]
 8003ace:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ad6:	653b      	str	r3, [r7, #80]	; 0x50
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	461a      	mov	r2, r3
 8003ade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ae0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ae2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ae6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ae8:	e841 2300 	strex	r3, r2, [r1]
 8003aec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1e6      	bne.n	8003ac2 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	3308      	adds	r3, #8
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	e853 3f00 	ldrex	r3, [r3]
 8003b02:	623b      	str	r3, [r7, #32]
   return(result);
 8003b04:	6a3b      	ldr	r3, [r7, #32]
 8003b06:	f023 0301 	bic.w	r3, r3, #1
 8003b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	3308      	adds	r3, #8
 8003b12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b14:	633a      	str	r2, [r7, #48]	; 0x30
 8003b16:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b1c:	e841 2300 	strex	r3, r2, [r1]
 8003b20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1e5      	bne.n	8003af4 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d12e      	bne.n	8003b9a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	e853 3f00 	ldrex	r3, [r3]
 8003b4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f023 0310 	bic.w	r3, r3, #16
 8003b56:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b60:	61fb      	str	r3, [r7, #28]
 8003b62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b64:	69b9      	ldr	r1, [r7, #24]
 8003b66:	69fa      	ldr	r2, [r7, #28]
 8003b68:	e841 2300 	strex	r3, r2, [r1]
 8003b6c:	617b      	str	r3, [r7, #20]
   return(result);
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1e6      	bne.n	8003b42 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	f003 0310 	and.w	r3, r3, #16
 8003b7e:	2b10      	cmp	r3, #16
 8003b80:	d103      	bne.n	8003b8a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2210      	movs	r2, #16
 8003b88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003b90:	4619      	mov	r1, r3
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7ff fa0e 	bl	8002fb4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b98:	e00d      	b.n	8003bb6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7fc fe24 	bl	80007e8 <HAL_UART_RxCpltCallback>
}
 8003ba0:	e009      	b.n	8003bb6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	8b1b      	ldrh	r3, [r3, #24]
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0208 	orr.w	r2, r2, #8
 8003bb2:	b292      	uxth	r2, r2
 8003bb4:	831a      	strh	r2, [r3, #24]
}
 8003bb6:	bf00      	nop
 8003bb8:	3758      	adds	r7, #88	; 0x58
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b096      	sub	sp, #88	; 0x58
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003bcc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bd4:	2b22      	cmp	r3, #34	; 0x22
 8003bd6:	f040 8094 	bne.w	8003d02 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003be0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003bea:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003bee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bf8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfe:	1c9a      	adds	r2, r3, #2
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d179      	bne.n	8003d16 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c2a:	e853 3f00 	ldrex	r3, [r3]
 8003c2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c40:	643b      	str	r3, [r7, #64]	; 0x40
 8003c42:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c48:	e841 2300 	strex	r3, r2, [r1]
 8003c4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1e6      	bne.n	8003c22 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	3308      	adds	r3, #8
 8003c5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
 8003c5e:	e853 3f00 	ldrex	r3, [r3]
 8003c62:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	f023 0301 	bic.w	r3, r3, #1
 8003c6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	3308      	adds	r3, #8
 8003c72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c7c:	e841 2300 	strex	r3, r2, [r1]
 8003c80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1e5      	bne.n	8003c54 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d12e      	bne.n	8003cfa <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	e853 3f00 	ldrex	r3, [r3]
 8003cae:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	f023 0310 	bic.w	r3, r3, #16
 8003cb6:	647b      	str	r3, [r7, #68]	; 0x44
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cc0:	61bb      	str	r3, [r7, #24]
 8003cc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc4:	6979      	ldr	r1, [r7, #20]
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	e841 2300 	strex	r3, r2, [r1]
 8003ccc:	613b      	str	r3, [r7, #16]
   return(result);
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1e6      	bne.n	8003ca2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	f003 0310 	and.w	r3, r3, #16
 8003cde:	2b10      	cmp	r3, #16
 8003ce0:	d103      	bne.n	8003cea <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2210      	movs	r2, #16
 8003ce8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7ff f95e 	bl	8002fb4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003cf8:	e00d      	b.n	8003d16 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7fc fd74 	bl	80007e8 <HAL_UART_RxCpltCallback>
}
 8003d00:	e009      	b.n	8003d16 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	8b1b      	ldrh	r3, [r3, #24]
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0208 	orr.w	r2, r2, #8
 8003d12:	b292      	uxth	r2, r2
 8003d14:	831a      	strh	r2, [r3, #24]
}
 8003d16:	bf00      	nop
 8003d18:	3758      	adds	r7, #88	; 0x58
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
	...

08003d34 <__libc_init_array>:
 8003d34:	b570      	push	{r4, r5, r6, lr}
 8003d36:	4d0d      	ldr	r5, [pc, #52]	; (8003d6c <__libc_init_array+0x38>)
 8003d38:	4c0d      	ldr	r4, [pc, #52]	; (8003d70 <__libc_init_array+0x3c>)
 8003d3a:	1b64      	subs	r4, r4, r5
 8003d3c:	10a4      	asrs	r4, r4, #2
 8003d3e:	2600      	movs	r6, #0
 8003d40:	42a6      	cmp	r6, r4
 8003d42:	d109      	bne.n	8003d58 <__libc_init_array+0x24>
 8003d44:	4d0b      	ldr	r5, [pc, #44]	; (8003d74 <__libc_init_array+0x40>)
 8003d46:	4c0c      	ldr	r4, [pc, #48]	; (8003d78 <__libc_init_array+0x44>)
 8003d48:	f000 f820 	bl	8003d8c <_init>
 8003d4c:	1b64      	subs	r4, r4, r5
 8003d4e:	10a4      	asrs	r4, r4, #2
 8003d50:	2600      	movs	r6, #0
 8003d52:	42a6      	cmp	r6, r4
 8003d54:	d105      	bne.n	8003d62 <__libc_init_array+0x2e>
 8003d56:	bd70      	pop	{r4, r5, r6, pc}
 8003d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d5c:	4798      	blx	r3
 8003d5e:	3601      	adds	r6, #1
 8003d60:	e7ee      	b.n	8003d40 <__libc_init_array+0xc>
 8003d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d66:	4798      	blx	r3
 8003d68:	3601      	adds	r6, #1
 8003d6a:	e7f2      	b.n	8003d52 <__libc_init_array+0x1e>
 8003d6c:	08003e34 	.word	0x08003e34
 8003d70:	08003e34 	.word	0x08003e34
 8003d74:	08003e34 	.word	0x08003e34
 8003d78:	08003e38 	.word	0x08003e38

08003d7c <memset>:
 8003d7c:	4402      	add	r2, r0
 8003d7e:	4603      	mov	r3, r0
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d100      	bne.n	8003d86 <memset+0xa>
 8003d84:	4770      	bx	lr
 8003d86:	f803 1b01 	strb.w	r1, [r3], #1
 8003d8a:	e7f9      	b.n	8003d80 <memset+0x4>

08003d8c <_init>:
 8003d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d8e:	bf00      	nop
 8003d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d92:	bc08      	pop	{r3}
 8003d94:	469e      	mov	lr, r3
 8003d96:	4770      	bx	lr

08003d98 <_fini>:
 8003d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d9a:	bf00      	nop
 8003d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d9e:	bc08      	pop	{r3}
 8003da0:	469e      	mov	lr, r3
 8003da2:	4770      	bx	lr
